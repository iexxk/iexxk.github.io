<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker监控容器指标</title>
    <url>/2021/03/31/Docker-Monitoring-Container-Metrics/</url>
    <content><![CDATA[<p>在docker部署多个微服务后，发现宿主机内存不断的慢慢上涨，因此想知道是哪个微服务慢慢不断让内存上涨，因此想用一个监控软件，监控所有微服务的性能等指标</p>
<h2 id="名词介绍"><a href="#名词介绍" class="headerlink" title="名词介绍"></a>名词介绍</h2><ul>
<li><a href="https://prometheus.io/">prometheus</a>：时间序列数据存储、查询、可视化、报警。（相当于Grafana+influxDB+其他的组合拳）</li>
<li><a href="https://github.com/google/cadvisor">Cadvisor</a>：用于收集，聚合，处理和导出有关正在运行的容器的信息。</li>
<li><a href="https://grafana.com/grafana/">Grafana</a>：指标图表分析展示平台，允许您查询，可视化，警报和了解指标。</li>
<li><a href="https://www.influxdata.com/">influxDB</a>：时间序列存储数据库。(带时序的数据,一般用于物联网、日志、指标监控)</li>
<li><a href="https://github.com/prometheus/node_exporter">node-exporter</a>：宿主机节点性能指标数据采集</li>
</ul>
<h2 id="prometheus-cadvisor简单的性能指标采集展示框架"><a href="#prometheus-cadvisor简单的性能指标采集展示框架" class="headerlink" title="prometheus+cadvisor简单的性能指标采集展示框架"></a>prometheus+cadvisor简单的性能指标采集展示框架</h2><p>资源占用</p>
<ul>
<li>cadvisor:112M左右</li>
<li>Prometheus:300M+(随时间流逝内存在上升)</li>
</ul>
<h3 id="docker-swarm模式部署"><a href="#docker-swarm模式部署" class="headerlink" title="docker swarm模式部署"></a>docker swarm模式部署</h3><p><a href="https://prometheus.io/docs/guides/cadvisor/">官方部署文档</a></p>
<p>prometheus的配置文件<code>/docker_data/v-monitor/prometheus/prometheus.yml</code>内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">cadvisor</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cadvisor:8080</span></span><br></pre></td></tr></table></figure>

<p>Swarm部署脚本</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/prometheus:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">9090</span><span class="string">:9090</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--config.file=/etc/prometheus/prometheus.yml</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/docker_data/v-monitor/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cadvisor</span></span><br><span class="line">  <span class="attr">cadvisor:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">google/cadvisor:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cadvisor</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/:/rootfs:ro</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/run:/var/run:rw</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/sys:/sys:ro</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/lib/docker/:/var/lib/docker:ro</span></span><br></pre></td></tr></table></figure>

<h3 id="prometheus容器指标"><a href="#prometheus容器指标" class="headerlink" title="prometheus容器指标"></a><a href="https://github.com/google/cadvisor/blob/master/docs/storage/prometheus.md#prometheus-container-metrics">prometheus容器指标</a></h3><table>
<thead>
<tr>
<th>指标名称</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>container_memory_usage_bytes</td>
<td>gauge</td>
<td>容器当前的内存使用量（单位：字节）</td>
</tr>
<tr>
<td>machine_memory_bytes</td>
<td>gauge</td>
<td>宿主机内存总量（单位：字节）</td>
</tr>
</tbody></table>
<h3 id="内存图表展示"><a href="#内存图表展示" class="headerlink" title="内存图表展示"></a>内存图表展示</h3><p><a href="https://imgtu.com/i/ckwaAx"><img src="https://z3.ax1x.com/2021/03/31/ckwaAx.png" alt="ckwaAx.png"></a></p>
<h3 id="增加Grafana仪表板显示prometheus"><a href="#增加Grafana仪表板显示prometheus" class="headerlink" title="增加Grafana仪表板显示prometheus"></a>增加Grafana仪表板显示prometheus</h3><p><a href="https://grafana.com/docs/grafana/latest/installation/docker/">增加Grafana部署</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">grafana:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">grafana/grafana:latest</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">grafana</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span> </span><br></pre></td></tr></table></figure>

<p>默认账号和密码是admin/admin</p>
<p><a href="https://prometheus.io/docs/visualization/grafana/">官方配置手册GRAFANA SUPPORT FOR PROMETHEUS</a></p>
<ol>
<li>添加数据源：点击configuration-&gt;data sources-&gt;prometheus-&gt;在url输入pro服务的地址(<a href="http://prometheus:9090/">http://prometheus:9090</a>) </li>
<li>寻找合适的dashboard：去<a href="https://grafana.com/grafana/dashboards?dataSource=prometheus&direction=desc&orderBy=downloads&category=docker">grafana dashboard</a>找一个适合自己的模版(我这里用<a href="https://grafana.com/grafana/dashboards/893"><em>Docker and system monitoring</em></a>的模版id为893)</li>
<li>添加dashboard：点击dashboard-&gt;import-&gt;输入id添加模版(893)</li>
</ol>
<h3 id="增加node-exporter宿主机节点数据采集"><a href="#增加node-exporter宿主机节点数据采集" class="headerlink" title="增加node-exporter宿主机节点数据采集"></a>增加<a href="https://github.com/prometheus/node_exporter">node-exporter</a>宿主机节点数据采集</h3><p>增加部署</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">node-exporter:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">prom/node-exporter:latest</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;--path.rootfs=/host&#x27;</span></span><br><span class="line">  <span class="attr">pid:</span> <span class="string">host</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;/:/host:ro,rslave&#x27;</span>    </span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">9100</span></span><br><span class="line">      <span class="attr">published:</span> <span class="number">9100</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure>

<p>修改配置<a href="/docker_data/v-monitor/prometheus/prometheus.yml">prometheus.yml</a>内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;cadvisor&#x27;</span> <span class="comment">#不能随便修改名字，会造成数据的job name不一致查询时会查询出两组数据</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>,<span class="string">&#x27;cadvisor:8080&#x27;</span>,<span class="string">&#x27;node-exporter:9100&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="QUERYING-PROMETHEUS-语法"><a href="#QUERYING-PROMETHEUS-语法" class="headerlink" title="QUERYING PROMETHEUS 语法"></a><a href="https://prometheus.io/docs/prometheus/latest/querying/basics/">QUERYING PROMETHEUS 语法</a></h3><p><a href="https://prometheus.fuckcloudnative.io/di-san-zhang-prometheus/di-4-jie-cha-xun/functions">中文文档</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#node_filesystem_free_bytes代表查询的表名，&#123;fstype=&quot;rootfs&quot;&#125;相当于查询条件，查询fstype是rootfs的所有数据,[1m]范围向量，一分钟内的数据</span></span><br><span class="line">node_filesystem_free_bytes&#123;fstype=<span class="string">&quot;rootfs&quot;</span>&#125;[1m]</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/cEniNR"><img src="https://z3.ax1x.com/2021/04/01/cEniNR.png" alt="cEniNR.png"></a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#name是容器名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#容器名字容易统计死的容器，重启服务的时候，会有多个容器，但其实是一个服务，因此按服务名统计</span></span><br><span class="line">sum(container_memory_rss&#123;container_label_com_docker_swarm_service_name=~<span class="string">&quot;.+&quot;</span>&#125;) by (container_label_com_docker_swarm_service_name)</span><br><span class="line"><span class="comment">#按服务名存在一个问题，因此可以通过image进行分组，但是存在后缀</span></span><br><span class="line">sum(container_memory_rss&#123;name=~<span class="string">&quot;.+&quot;</span>&#125;)by(image)</span><br><span class="line"><span class="comment">#可以去掉后缀,但是有的官方镜像后缀很难看</span></span><br><span class="line">sum(label_replace(container_memory_rss&#123;name=~<span class="string">&quot;.+&quot;</span>&#125;,<span class="string">&quot;image_sub&quot;</span>,<span class="string">&quot;<span class="variable">$1</span>&quot;</span>,<span class="string">&quot;image&quot;</span>, <span class="string">&quot;(.*)(:)(.*)&quot;</span>))by(image_sub)</span><br><span class="line"><span class="comment">#因此最后采用label_replace方法，进行对原数据进行字段替换，</span></span><br><span class="line"><span class="comment">#label_replace(原数据,&quot;新的字段名&quot;,&quot;取正则里面的那一部分&quot;,&quot;旧的字段名&quot;, &quot;正则&quot;)，正则每一段都用()包裹，$1代表取第一个括号内容，2就代表第二个括号内容，用了括号才能用转义\\</span></span><br><span class="line">label_replace(container_memory_rss&#123;name=~<span class="string">&quot;.+&quot;</span>&#125;,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;<span class="variable">$1</span>&quot;</span>,<span class="string">&quot;name&quot;</span>, <span class="string">&quot;(.*)(\\.1\\.)(.*)&quot;</span>)</span><br><span class="line"><span class="comment">#最终版本，旧的name和新的name要一致，因为有的正则匹配不到，旧的name的数据就会合为一体，就不会丢数据</span></span><br><span class="line">sum(label_replace(container_memory_rss&#123;name=~<span class="string">&quot;.+&quot;</span>&#125;,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;<span class="variable">$1</span>&quot;</span>,<span class="string">&quot;name&quot;</span>, <span class="string">&quot;(.*)(\\.1\\.)(.*)&quot;</span>))by(name)</span><br><span class="line"><span class="comment">#统计cpu，label_replace要在外面替换</span></span><br><span class="line">sum(label_replace(rate(container_cpu_usage_seconds_total&#123;name=~<span class="string">&quot;.+&quot;</span>&#125;[<span class="variable">$interval</span>]),<span class="string">&quot;name&quot;</span>,<span class="string">&quot;<span class="variable">$1</span>&quot;</span>,<span class="string">&quot;name&quot;</span>, <span class="string">&quot;(.*)(\\.1\\.)(.*)&quot;</span>))by (name) * 100</span><br></pre></td></tr></table></figure>

<h2 id="cadvisor-influxDB-Grafana"><a href="#cadvisor-influxDB-Grafana" class="headerlink" title="cadvisor+influxDB+Grafana"></a>cadvisor+influxDB+Grafana</h2><p>待更新…</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/exporter/commonly-eporter-usage/use-prometheus-monitor-container">容器监控：cAdvisor</a></p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li>图表不显示数据,显示N/A，检查里面的查询语句，是否表改了名字，新版本好多表都加了<code>_bytes</code>后缀，找到升级后的表名替换旧的就可以了</li>
<li>更新表的字段后显示<code>Only queries that return single series/table is supported</code>错误，检查右边的panel是否需要合并，不需要合并应该会选中一个图表类型</li>
</ol>
<h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>完整的swarm部署文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/prometheus:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">14003</span><span class="string">:9090</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--config.file=/etc/prometheus/prometheus.yml</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/docker_data/v-monitor/prometheus/config:/etc/prometheus</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/docker_data/v-monitor/prometheus/data:/prometheus</span></span><br><span class="line">  <span class="attr">cadvisor:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">google/cadvisor:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">14004</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/:/rootfs:ro</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/run:/var/run:rw</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/sys:/sys:ro</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/lib/docker/:/var/lib/docker:ro</span></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">14002</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/docker_data/v-monitor/grafana:/var/lib/grafana</span></span><br><span class="line">  <span class="attr">node-exporter:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/node-exporter:latest</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;--path.rootfs=/host&#x27;</span></span><br><span class="line">    <span class="attr">pid:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;/:/host:ro,rslave&#x27;</span>    </span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">9100</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">9100</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure>

<p><a href="/docker_data/v-monitor/prometheus/prometheus.yml">prometheus.yml</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;cadvisor&#x27;</span> <span class="comment">#不能随便修改名字，会造成数据的job name不一致查询时会查询出两组数据</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>,<span class="string">&#x27;cadvisor:8080&#x27;</span>,<span class="string">&#x27;node-exporter:9100&#x27;</span>]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Cadvisor</tag>
        <tag>prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-SpringBoot</title>
    <url>/2021/03/25/Docker-SpringBoot/</url>
    <content><![CDATA[<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础镜像选择alpine 小巧安全流行方便</span></span><br><span class="line"><span class="keyword">FROM</span> exxk/java:<span class="number">8</span>-alpine-cst</span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9303</span></span><br><span class="line"><span class="comment"># 设置参数</span></span><br><span class="line"><span class="keyword">ARG</span> JAVA_OPTS=<span class="string">&quot;-Xms256m -Xmx256m -XX:NewRatio=1&quot;</span></span><br><span class="line"><span class="comment">#复制固定路径下打包好的jar包(target/*.jar)并重命名到容器跟目录(/app.jar)，或ADD</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> target/*.jar app.jar</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> src/main/resources/bootstrap.properties config/bootstrap.properties</span></span><br><span class="line"><span class="comment">#COPY target/lib lib</span></span><br><span class="line"><span class="comment">#健康检查 -s 静默模式，不下载文件</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="bash"> --start-period=40s --interval=30s --timeout=5s --retries=5 CMD (wget http://localhost:9303/actuator/health -q -O -) | grep UP || <span class="built_in">exit</span> 1</span></span><br><span class="line"><span class="comment">#启动容器执行的命令 java -jar app.jar ,如果加其他参数加 ,&quot;-参数&quot;,</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java <span class="variable">$&#123;JAVA_OPTS&#125;</span> -jar /app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HEALTHCHECK --start-period=40s --interval=30s --timeout=5s --retries=5 CMD (wget http://localhost:9303/actuator/health -q -O -) | grep UP || <span class="built_in">exit</span> 1</span><br><span class="line">HEALTHCHECK [OPTIONS] CMD <span class="built_in">command</span> 通过运行容器内的一个指令来检查容器的健康情况</span><br><span class="line">--interval=DURATION 间隔时间， 默认 30s （30秒）;</span><br><span class="line">--timeout=DURATION 超时时间， 默认 30s （30秒）;</span><br><span class="line"><span class="comment">#为需要启动的容器提供了初始化的时间段， 在这个时间段内如果检查失败， 则不会记录失败次数。 如果在启动时间内成功执行了健康检查， 则容器将被视为已经启动， 如果在启动时间内再次出现检查失败， 则会记录失败次数。</span></span><br><span class="line">--start-period=DURATION 启动时间， 默认 0s， 如果指定这个参数， 则必须大于 0s ；</span><br><span class="line">--retries=N 重试次数， 默认 3 ；</span><br><span class="line"><span class="comment">#获取http://localhost:9303/actuator/health内容然后 通过管道｜ 在获取的内容里面找up，找到了代表执行成功，没找到代表执行失败， || 代表前面的命令执行成功就会执行后面的命令，如果前面执行失败，后面就不会执行</span></span><br><span class="line">(wget http://localhost:9303/actuator/health -q -O -) | grep UP || <span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-install-Nacos</title>
    <url>/2021/04/23/Docker-install-Nacos/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p>
<p>主要作用替代spring cloud的注册中心和配置中心</p>
<p><a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">官方文档</a></p>
<p>依赖关系：nacos依赖与mysql的数据库(也可以是其他数据库)作为存储</p>
<p>访问：ip+端口，默认登陆用户名密码为nacos/nacos</p>
<p><a href="https://github.com/nacos-group/nacos-docker">docker部署脚本</a>：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">version</span>: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">mysql</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">image</span>: <span class="string">nacos/nacos-mysql:5.7</span></span><br><span class="line">    <span class="attr">restart</span>: <span class="string">always</span></span><br><span class="line">    <span class="attr">environment</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD</span>: <span class="string">adminroot</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE</span>: <span class="string">xk-config</span></span><br><span class="line">      <span class="attr">MYSQL_USER</span>: <span class="string">nacos</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD</span>: <span class="string">nacos</span></span><br><span class="line">    <span class="attr">ports</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">14050:3306</span></span><br><span class="line"><span class="comment">#    volumes:</span></span><br><span class="line"><span class="comment">#      - &quot;/home/dockerdata/v-dev/mysql:/var/lib/mysql&quot;      </span></span><br><span class="line">    <span class="attr">deploy</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">replicas</span>: <span class="string">1</span></span><br><span class="line">      <span class="attr">restart_policy</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">condition</span>: <span class="string">on-failure</span></span><br><span class="line">  <span class="attr">nacos</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">image</span>: <span class="string">nacos/nacos-server:2.0.0-bugfix</span></span><br><span class="line">    <span class="attr">restart</span>: <span class="string">on-failure</span></span><br><span class="line">    <span class="attr">environment</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">PREFER_HOST_MODE</span>: <span class="string">hostname</span></span><br><span class="line">      <span class="attr">MODE</span>: <span class="string">standalone</span></span><br><span class="line">      <span class="attr">SPRING_DATASOURCE_PLATFORM</span>: <span class="string">mysql</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_HOST</span>: <span class="string">mysql</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_DB_NAME</span>: <span class="string">xk-config</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_PORT</span>: <span class="string">3306</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_USER</span>: <span class="string">nacos</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_PASSWORD</span>: <span class="string">nacos</span></span><br><span class="line"><span class="comment">#    volumes:</span></span><br><span class="line"><span class="comment">#      - /home/dockerdata/v-dev/nacos/standalone-logs/:/home/nacos/logs</span></span><br><span class="line"><span class="comment">#      - /home/dockerdata/v-dev/nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties</span></span><br><span class="line">    <span class="attr">ports</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">14051:8848</span></span><br></pre></td></tr></table></figure>



<h2 id="docker-swarm-nacos指定容器虚拟IP自定义网络"><a href="#docker-swarm-nacos指定容器虚拟IP自定义网络" class="headerlink" title="docker swarm nacos指定容器虚拟IP自定义网络"></a>docker swarm nacos指定容器虚拟IP自定义网络</h2><p>在用nacos做为注册中心和配置中心时，如果部署模式是docker swarm模式时，由于容器内部多个网卡，默认随机eth0，就会导致这个ip是内部ip导致无法访问其他容器的服务</p>
<h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>先看stack的网络，从下图可以看到用的网络是10.0.3开头的</p>
<p><a href="https://imgtu.com/i/2MY6df"><img src="https://z3.ax1x.com/2021/06/02/2MY6df.png" alt="2MY6df.png"></a></p>
<p>因此可以进行设置优先网络</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">spring.cloud.inetutils.preferred-networks=10.0.3</span></span><br></pre></td></tr></table></figure>

<p>或者进入容器进行忽略网卡的设置，可以看到需要忽略到eth0，和eth2，只剩下需要的</p>
<p><a href="https://imgtu.com/i/2Mtyc9"><img src="https://z3.ax1x.com/2021/06/02/2Mtyc9.png" alt="2Mtyc9.png"></a></p>
<p>因此配置参数如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">spring.cloud.inetutils.ignored-interfaces=eth0.*,eth2.*</span></span><br></pre></td></tr></table></figure>

<p>更多详细的配置见<a href="https://cloud.spring.io/spring-cloud-commons/reference/html/appendix.html#common-application-properties">Appendix A: Common application properties</a></p>
<p>测试网络的互访可以通过springcloud的心跳</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://10.0.3.194:9200/actuator/health -q -O -</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud-Gateway-ReadBody</title>
    <url>/2021/05/27/SpringCloud-Gateway-ReadBody/</url>
    <content><![CDATA[<h2 id="网关路由基础知识"><a href="#网关路由基础知识" class="headerlink" title="网关路由基础知识"></a>网关路由基础知识</h2><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.8.RELEASE/reference/html/#modify-a-request-body-gatewayfilter-factory">官网</a></p>
<p><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-Hoxton-Release-Notes">SpringCloud版本对应关系</a></p>
<p>gateway：异步网关，读取body可以通过<code>ReadBodyRoutePredicateFactory</code>进行缓存</p>
<p>zuul：同步阻塞式网关，因此读取或修改body就比较简单</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">xkiot-cmdb</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://xkiot-platform</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/cmdb/**</span></span><br><span class="line">    <span class="comment"># CustomReadBody 对应 CustomReadBodyRoutePredicateFactory</span></span><br><span class="line">    <span class="comment"># ReadBody 同理对应 ReadBodyRoutePredicateFactory</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CustomReadBody</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">inClass:</span> <span class="string">&#x27;#&#123;T(String)&#125;&#x27;</span></span><br><span class="line">        <span class="comment">#需要在@Configuration的注解的类里面添加</span></span><br><span class="line">        <span class="comment"># @Bean</span></span><br><span class="line">        <span class="comment"># public Predicate bodyPredicate()&#123;return o -&gt; true;&#125;</span></span><br><span class="line">        <span class="attr">predicate:</span> <span class="string">&#x27;#&#123;@bodyPredicate&#125;&#x27;</span> <span class="comment">#注入实现predicate接口类            </span></span><br><span class="line">  <span class="attr">filters:</span></span><br><span class="line">    <span class="comment"># 设备token验证</span></span><br><span class="line">    <span class="comment"># DynamicToken对应 DynamicTokenGatewayFilterFactory</span></span><br><span class="line">    <span class="comment"># true对应DynamicTokenGatewayFilterFactory里面的Config类的参数</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DynamicToken=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">StripPrefix=1</span>   </span><br></pre></td></tr></table></figure>

<h2 id="gateway读取body并进行签名校验"><a href="#gateway读取body并进行签名校验" class="headerlink" title="gateway读取body并进行签名校验"></a>gateway读取body并进行签名校验</h2><p>需求，只需要读取校验签名，因此不需要修改body，因此采用缓存方案进行读取，关键类<code>ReadBodyRoutePredicateFactory</code></p>
<ol>
<li><p>在<code>@Configuration</code>的注解类里面添加该配置，或者新建个配置类，这里的<code>bodyPredicate</code>，会在第二部里面的yml的<code>predicate</code>进行关联</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取body断言需要注册bodyPredicate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Predicate <span class="title">bodyPredicate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o -&gt; <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>首先加载<code>ReadBodyRoutePredicateFactory</code>类,也可以自定义重写该类，其他的修改body的类同理，加载需要在yml里面配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">xkiot-cmdb</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://xkiot-platform</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/cmdb/**</span></span><br><span class="line">    <span class="comment"># CustomReadBody 对应 CustomReadBodyRoutePredicateFactory</span></span><br><span class="line">    <span class="comment"># ReadBody 同理对应 ReadBodyRoutePredicateFactory</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CustomReadBody</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">inClass:</span> <span class="string">&#x27;#&#123;T(String)&#125;&#x27;</span></span><br><span class="line">        <span class="comment">#需要在@Configuration的注解的类里面添加</span></span><br><span class="line">        <span class="comment"># @Bean</span></span><br><span class="line">        <span class="comment"># public Predicate bodyPredicate()&#123;return o -&gt; true;&#125;</span></span><br><span class="line">        <span class="attr">predicate:</span> <span class="string">&#x27;#&#123;@bodyPredicate&#125;&#x27;</span> <span class="comment">#注入实现predicate接口类  </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后实现一个过滤器，用于接受body，以及对body进行校验等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xkiot.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.xkiot.common.core.constant.CacheConstants;</span><br><span class="line"><span class="keyword">import</span> com.xkiot.common.core.constant.Constants;</span><br><span class="line"><span class="keyword">import</span> com.xkiot.common.core.domain.R;</span><br><span class="line"><span class="keyword">import</span> com.xkiot.common.core.utils.ServletUtils;</span><br><span class="line"><span class="keyword">import</span> com.xkiot.common.core.utils.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.xkiot.common.core.web.domain.AjaxResult;</span><br><span class="line"><span class="keyword">import</span> com.xkiot.common.redis.constant.RedisConstants;</span><br><span class="line"><span class="keyword">import</span> com.xkiot.common.redis.service.RedisService;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.buffer.DataBufferFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicTokenGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title">AbstractGatewayFilterFactory</span>&lt;<span class="title">DynamicTokenGatewayFilterFactory</span>.<span class="title">Config</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(DynamicTokenGatewayFilterFactory.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> EXPIRE_TIME = Constants.TOKEN_EXPIRE * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicTokenGatewayFilterFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Config.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">shortcutFieldOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singletonList(<span class="string">&quot;enabled&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(DynamicTokenGatewayFilterFactory.Config config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line">            ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">            String requestBody = exchange.getAttribute(<span class="string">&quot;cachedRequestBodyObject&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;requestBody : &#123;&#125;&quot;</span>, requestBody);</span><br><span class="line">          <span class="comment">//todo 添加验签代码等</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                    ServerHttpRequest mutableReq = exchange.getRequest().mutate().header(CacheConstants.DETAILS_TERM_ID, sn)</span><br><span class="line">                            .header(CacheConstants.DETAILS_TERM_ID, ServletUtils.urlEncode(sn)).build();</span><br><span class="line">                    ServerWebExchange mutableExchange = exchange.mutate().request(mutableReq).build();</span><br><span class="line">                    <span class="keyword">return</span> chain.filter(mutableExchange);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                ServerHttpResponse response = exchange.getResponse();</span><br><span class="line">                response.getHeaders().add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> exchange.getResponse().writeWith(</span><br><span class="line">Mono.just(response.bufferFactory().wrap(JSON.toJSONBytes(AjaxResult.error(e.getMessage())))));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Config</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> enabled;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.enabled = enabled;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>引用第三步骤的过滤器</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filters:</span></span><br><span class="line">  <span class="comment"># 设备token验证</span></span><br><span class="line">  <span class="comment"># DynamicToken对应 DynamicTokenGatewayFilterFactory</span></span><br><span class="line">  <span class="comment"># true对应DynamicTokenGatewayFilterFactory里面的Config类的参数</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DynamicToken=true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">StripPrefix=1</span>  </span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://zhuanlan.zhihu.com/p/373954549">API网关才是大势所趋？SpringCloud Gateway保姆级入门教程</a></p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Gateway</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud-Gateway</title>
    <url>/2021/04/26/SpringCloud-Gateway/</url>
    <content><![CDATA[<h1 id="SpringCloud-Gateway设计改造"><a href="#SpringCloud-Gateway设计改造" class="headerlink" title="SpringCloud Gateway设计改造"></a>SpringCloud Gateway设计改造</h1><p>因为要做一个兼容多网络协议，多报文兼容的动态网关</p>
<h2 id="设计架构"><a href="#设计架构" class="headerlink" title="设计架构"></a>设计架构</h2><p><a href="https://imgtu.com/i/gSZKje"><img src="https://z3.ax1x.com/2021/04/26/gSZKje.png" alt="gSZKje.png"></a></p>
<h2 id="动态路由相关设置类"><a href="#动态路由相关设置类" class="headerlink" title="动态路由相关设置类"></a>动态路由相关设置类</h2><h4 id="RouteDefinitionRepository-路由存储器"><a href="#RouteDefinitionRepository-路由存储器" class="headerlink" title="RouteDefinitionRepository 路由存储器"></a><code>RouteDefinitionRepository</code> 路由存储器</h4><p>用于存储路由规则的接口，通过实现它，可以进行自定义存储路由规则到不同的中间件(redis/db等)</p>
<p>实现三个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisRouteDefinitionRepository</span> <span class="keyword">implements</span> <span class="title">RouteDefinitionRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(RedisRouteDefinitionRepository.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GATEWAY_ROUTES = CacheConstants.GATEWAY_ROUTES;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;RouteDefinition&gt; <span class="title">getRouteDefinitions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;get route info by redis/db&quot;</span>);</span><br><span class="line">        List&lt;RouteDefinition&gt; routeDefinitions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//定义路由信息，可以从redis/db等地方获取路由信息</span></span><br><span class="line">        redisService.getAllCacheMapValues(GATEWAY_ROUTES).stream().forEach(routeDefinition -&gt; &#123;</span><br><span class="line">            routeDefinitions.add(JSON.parseObject(routeDefinition.toString(), RouteDefinition.class));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> Flux.fromIterable(routeDefinitions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">save</span><span class="params">(Mono&lt;RouteDefinition&gt; route)</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;save route info to redis/db&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> route.flatMap(routeDefinition -&gt; &#123;</span><br><span class="line">            redisService.setCacheMapValue(GATEWAY_ROUTES, routeDefinition.getId(), JSON.toJSONString(routeDefinition));</span><br><span class="line">            <span class="keyword">return</span> Mono.empty();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">delete</span><span class="params">(Mono&lt;String&gt; routeId)</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;delete route info by redis/db&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> routeId.flatMap(id -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (redisService.getCacheMapValue(GATEWAY_ROUTES, id)) &#123;</span><br><span class="line">                redisService.delCacheMapValue(GATEWAY_ROUTES, id);</span><br><span class="line">                <span class="keyword">return</span> Mono.empty();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Mono.defer(() -&gt; Mono.error(<span class="keyword">new</span> BaseException(<span class="string">&quot;路由配置没有找到: &quot;</span> + routeId)));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ApplicationEventPublisherAware事件发布接口"><a href="#ApplicationEventPublisherAware事件发布接口" class="headerlink" title="ApplicationEventPublisherAware事件发布接口"></a><code>ApplicationEventPublisherAware</code>事件发布接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayServiceHandler</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(GatewayServiceHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisRouteDefinitionRepository routeDefinitionWriter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存或更新多个路由配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gatewayRouteList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveOrUpdateMultiRouteConfig</span><span class="params">(List&lt;JSONObject&gt; gatewayRouteList)</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;begin add multi route config&quot;</span>);</span><br><span class="line">        gatewayRouteList.forEach(gatewayRoute -&gt; &#123;</span><br><span class="line">            RouteDefinition definition = handleData(gatewayRoute);</span><br><span class="line">            routeDefinitionWriter.save(Mono.just(definition)).subscribe();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.publisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * json数据转换为路由实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gatewayRoute</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RouteDefinition <span class="title">handleData</span><span class="params">(JSONObject gatewayRoute)</span> </span>&#123;</span><br><span class="line">        RouteDefinition definition;</span><br><span class="line">        definition = JSONObject.toJavaObject(gatewayRoute, RouteDefinition.class);</span><br><span class="line">        <span class="keyword">return</span> definition;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后添加一个设置接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/route&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteConfigController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GatewayServiceHandler gatewayServiceHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增更新路由配置接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gatewayRouteList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResult <span class="title">add</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> List&lt;JSONObject&gt; gatewayRouteList)</span> </span>&#123;</span><br><span class="line">        String result = gatewayServiceHandler.saveOrUpdateMultiRouteConfig(gatewayRouteList);</span><br><span class="line">        <span class="keyword">return</span> AjaxResult.success(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试发送路由配置添加请求<code>&#123;&#123;gateway&#125;&#125;/route</code></p>
<p>json报文数据如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;xkiot-auth&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;predicates&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;args&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;pattern&quot;</span>: <span class="string">&quot;/auth/**&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Path&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;lb://xkiot-auth&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;xkiot-system&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;predicates&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;args&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;pattern&quot;</span>: <span class="string">&quot;/system/**&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Path&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;lb://xkiot-system&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>其中<code>order</code>设置为0，代表不起用该路由配置，<code>id</code>代表服务id，<code>uri</code>代表微服务地址，<code>predicates</code>路由规则，对应的yml配置如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># 认证中心</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">xkiot-auth</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://xkiot-auth</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/auth/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="comment"># 验证码处理</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">CacheRequestFilter</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">ValidateCodeFilter</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">        <span class="comment"># 系统模块</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">xkiot-system</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://xkiot-system</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/system/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br></pre></td></tr></table></figure>

<p>redis数据存储如下：</p>
<p><a href="https://imgtu.com/i/g9i63D"><img src="https://z3.ax1x.com/2021/04/27/g9i63D.png" alt="g9i63D.png"></a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.blog-china.cn/blog/liuzaiqingshan/home/229/1594793543872">Srping cloud gateway 实现动态路由(MySQL持久化+redis分布式缓存)</a></p>
<p><a href="https://developer.aliyun.com/article/759553">Nacos+Spring Cloud Gateway动态路由配置</a></p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Gateway</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud-Sentinel</title>
    <url>/2021/06/04/SpringCloud-Sentinel/</url>
    <content><![CDATA[<h2 id="服务熔断与降级"><a href="#服务熔断与降级" class="headerlink" title="服务熔断与降级"></a>服务熔断与降级</h2><h3 id="Sentinel-熔断与降级"><a href="#Sentinel-熔断与降级" class="headerlink" title="Sentinel 熔断与降级"></a>Sentinel 熔断与降级</h3><p>主要功能：实时监控、机器发现、规则配置</p>
<h3 id="Sentinel控制台安装"><a href="#Sentinel控制台安装" class="headerlink" title="Sentinel控制台安装"></a>Sentinel控制台安装</h3><p><a href="https://github.com/alibaba">alibaba</a>/<strong><a href="https://github.com/alibaba/Sentinel">Sentinel</a></strong></p>
<p><a href="http://doc.ruoyi.vip/ruoyi-cloud/cloud/sentinel.html#%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D">ruoyi-cloud/sentinel</a></p>
<h4 id="Docker-镜像构造iexxk-dockerbuild-Sentinel"><a href="#Docker-镜像构造iexxk-dockerbuild-Sentinel" class="headerlink" title="Docker 镜像构造iexxk/dockerbuild-Sentinel"></a>Docker 镜像构造<a href="https://github.com/iexxk">iexxk</a>/<strong><a href="https://github.com/iexxk/dockerbuild-Sentinel">dockerbuild-Sentinel</a></strong></h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础镜像选择alpine 小巧安全流行方便</span></span><br><span class="line"><span class="keyword">FROM</span> exxk/java:<span class="number">8</span>-alpine-cst</span><br><span class="line"><span class="comment">#apk安装完整wget，才能下载ssl的包，下载官方的安装包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --no-cache wget &amp;&amp; wget --no-check-certificate --content-disposition -q -O /app.jar https://github.com/alibaba/Sentinel/releases/download/1.8.1/sentinel-dashboard-1.8.1.jar</span></span><br><span class="line"><span class="comment">#健康检查 -s 静默模式，不下载文件</span></span><br><span class="line"><span class="comment">#HEALTHCHECK CMD wget -s http://127.0.0.1:14030/actuator/health || exit 1</span></span><br><span class="line"><span class="comment">#8718控制台端口，8719为数据采集端口，他需要从被采集服务的8719进行收集数据</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-Dserver.port=8718&quot;</span>,<span class="string">&quot;-Dcsp.sentinel.dashboard.server=localhost:8718&quot;</span>,<span class="string">&quot;-Dproject.name=sentinel-dashboard&quot;</span>,<span class="string">&quot;-Dcsp.sentinel.api.port=8719&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#部署注意需要和其他服务部署到一个stack里面，不然8719是访问不了的</span></span><br><span class="line"> <span class="attr">sentinel:</span></span><br><span class="line">   <span class="attr">restart:</span> <span class="string">always</span>  </span><br><span class="line">   <span class="attr">image:</span> <span class="string">exxk/sentinel:1.8.1</span></span><br><span class="line">   <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;8718:8718&quot;</span></span><br></pre></td></tr></table></figure>

<p>访问通过127.0.0.1:8718进行控制台的访问，默认用户名密码是sentinel/sentinel</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Sentinel</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud-Swagger</title>
    <url>/2021/06/04/SpringCloud-Swagger/</url>
    <content><![CDATA[<h2 id="Swagger-整合knife4j"><a href="#Swagger-整合knife4j" class="headerlink" title="Swagger 整合knife4j"></a>Swagger 整合knife4j</h2><p><a href="http://doc.ruoyi.vip/ruoyi-cloud/cloud/swagger.html#%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D">ruoyi-cloud/cloud/swagger</a></p>
<p><a href="https://xiaoym.gitee.io/knife4j/action/aggregation-nacos.html">knife4j</a></p>
<h3 id="Spring-Cloud-Gateway集成Knife4j"><a href="#Spring-Cloud-Gateway集成Knife4j" class="headerlink" title="Spring Cloud Gateway集成Knife4j"></a>Spring Cloud Gateway集成Knife4j</h3><p>在xkiot-common-swagger的pom.xml添加如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-micro-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在xkiot-gateway的pom.xml添加如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>原生swagger访问<code>http://&#123;网关ip&#125;:&#123;port&#125;/swagger-ui.html</code>通过网关进行访问，里面可以进行选择切换服务</p>
<p>整合knife4j后访问<code>http://&#123;网关ip&#125;:&#123;port&#125;/doc.html</code></p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCould-Admin</title>
    <url>/2021/04/02/SpringCould-Admin/</url>
    <content><![CDATA[<p>在项目运行时，偶尔需要排查问题，需要看日志信息，但是平常只开了info级别的，对于调试找问题不是很方便，所以需要改日志重启，这里在不重启的情况下修改springboot的日志级别</p>
<h2 id="名词介绍"><a href="#名词介绍" class="headerlink" title="名词介绍"></a>名词介绍</h2><ul>
<li><p>spring-boot-starter-actuator 是监控springboot的健康情况的一个依赖工具包</p>
<p>包含三类功能</p>
<ol>
<li>应用配置：日志级别、环境变量等</li>
<li>度量指标：心跳、内存、中间件状态</li>
<li>操作控制：重启、更新配置等</li>
</ol>
</li>
</ul>
<h2 id="简单实现动态修改日志级别"><a href="#简单实现动态修改日志级别" class="headerlink" title="简单实现动态修改日志级别"></a>简单实现动态修改日志级别</h2><ol>
<li><p>引入依赖</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-actuator&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置<code>loggers</code>接口,这里分别开了三个接口<code>/actuator/loggers</code>、<code>/actuator/info</code>、<code>/actuator/health</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">loggers,health,info</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问<code>GET /actuator/loggers</code>就可以得到所有包的日志级别了</p>
<p><a href="https://imgtu.com/i/ce6aE8"><img src="https://z3.ax1x.com/2021/04/02/ce6aE8.png" alt="ce6aE8.png"></a></p>
</li>
<li><p>查询特定包的日志级别<code>GET /actuator/loggers/&lt;package path&gt;</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># GET /actuator/loggers/com.exxk.adminClient</span><br><span class="line">---------------------------------------------</span><br><span class="line"># RETURN</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;configuredLevel&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;effectiveLevel&quot;</span>: <span class="string">&quot;INFO&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改特定包的日志级别<code>POST /actuator/loggers/&lt;package path&gt;</code>然后添加 <code>BODY JSON </code>内容<code>&#123;&quot;configuredLevel&quot;: &quot;DEBUG&quot;&#125;</code>，请求成功后对应包的日志级别就改变了，访问就会输出设置的日志级别的日志了</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># POST /actuator/loggers/com.exxk.adminClient</span><br><span class="line"># BODY</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;configuredLevel&quot;</span>: <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------</span><br><span class="line"># RETURN 204 No Content</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Spring-Boot-Admin可视化管理服务"><a href="#Spring-Boot-Admin可视化管理服务" class="headerlink" title="Spring Boot Admin可视化管理服务"></a><a href="https://github.com/codecentric/spring-boot-admin">Spring Boot Admin</a>可视化管理服务</h2><p><a href="https://codecentric.github.io/spring-boot-admin/current/">官方文档</a></p>
<h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><ol>
<li><p>引入依赖，注意版本号要和spring boot的版本一致，不然启动会报错</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://mvnrepository.com/artifact/de.codecentric/spring-boot-admin-starter-server</span></span><br><span class="line">implementation <span class="attr">group:</span> <span class="string">&#x27;de.codecentric&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-boot-admin-starter-server&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;2.2.2&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在启动类上面添加注解<code>@EnableAdminServer</code></p>
</li>
<li><p>运行，然后访问<code>http://127.0.0.1:8080</code></p>
</li>
</ol>
<h5 id="添加用登陆校验-未配置完，暂时不需要"><a href="#添加用登陆校验-未配置完，暂时不需要" class="headerlink" title="添加用登陆校验 (未配置完，暂时不需要)"></a><del>添加用登陆校验</del> (未配置完，暂时不需要)</h5><ol>
<li><p>添加依赖</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://mvnrepository.com/artifact/de.codecentric/spring-boot-admin-server-ui-login</span></span><br><span class="line">implementation <span class="attr">group:</span> <span class="string">&#x27;de.codecentric&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-boot-admin-server-ui-login&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;1.5.7&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-security&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加Spring Security配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecuritySecureConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AdminServerProperties adminServer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecuritySecureConfig</span><span class="params">(AdminServerProperties adminServer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adminServer = adminServer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SavedRequestAwareAuthenticationSuccessHandler successHandler = <span class="keyword">new</span> SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class="line">        successHandler.setTargetUrlParameter(<span class="string">&quot;redirectTo&quot;</span>);</span><br><span class="line">        successHandler.setDefaultTargetUrl(<span class="keyword">this</span>.adminServer.path(<span class="string">&quot;/&quot;</span>));</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests(</span><br><span class="line">                (authorizeRequests) -&gt; authorizeRequests.antMatchers(<span class="keyword">this</span>.adminServer.path(<span class="string">&quot;/assets/**&quot;</span>)).permitAll()</span><br><span class="line">                        .antMatchers(<span class="keyword">this</span>.adminServer.path(<span class="string">&quot;/login&quot;</span>)).permitAll().anyRequest().authenticated()</span><br><span class="line">        ).formLogin(</span><br><span class="line">                (formLogin) -&gt; formLogin.loginPage(<span class="keyword">this</span>.adminServer.path(<span class="string">&quot;/login&quot;</span>)).successHandler(successHandler).and()</span><br><span class="line">        ).logout((logout) -&gt; logout.logoutUrl(<span class="keyword">this</span>.adminServer.path(<span class="string">&quot;/logout&quot;</span>))).httpBasic(Customizer.withDefaults())</span><br><span class="line">                .csrf((csrf) -&gt; csrf.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())</span><br><span class="line">                        .ignoringRequestMatchers(</span><br><span class="line">                                <span class="keyword">new</span> AntPathRequestMatcher(<span class="keyword">this</span>.adminServer.path(<span class="string">&quot;/instances&quot;</span>),</span><br><span class="line">                                        HttpMethod.POST.toString()),</span><br><span class="line">                                <span class="keyword">new</span> AntPathRequestMatcher(<span class="keyword">this</span>.adminServer.path(<span class="string">&quot;/instances/*&quot;</span>),</span><br><span class="line">                                        HttpMethod.DELETE.toString()),</span><br><span class="line">                                <span class="keyword">new</span> AntPathRequestMatcher(<span class="keyword">this</span>.adminServer.path(<span class="string">&quot;/actuator/**&quot;</span>))</span><br><span class="line">                        ))</span><br><span class="line">                .rememberMe((rememberMe) -&gt; rememberMe.key(UUID.randomUUID().toString()).tokenValiditySeconds(<span class="number">1209600</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Required to provide UserDetailsService for &quot;remember functionality&quot;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;user&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;password&quot;</span>).roles(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置文件设置密码</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.boot.admin.client.username</span>=<span class="string">admin</span></span><br><span class="line"><span class="meta">spring.boot.admin.client.password</span>=<span class="string">admin</span></span><br></pre></td></tr></table></figure>





</li>
</ol>
<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><ol>
<li><p>添加依赖</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="attr">group:</span> <span class="string">&#x27;de.codecentric&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-boot-admin-starter-client&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;2.2.2&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.boot.admin.client.url</span>=<span class="string">http://localhost:8080</span></span><br><span class="line"><span class="comment">#生产根据需要开放端口，*代表全部开放</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">* </span></span><br><span class="line"><span class="comment">#健康信息显示所有</span></span><br><span class="line"><span class="meta">management.endpoint.health.show-details</span>=<span class="string">always</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动运行，就可以看到该springboot已经注册到了admin server里面去了，可以去日志配置界面动态修改日志级别了</p>
<p><a href="https://imgtu.com/i/ceLZ7D"><img src="https://z3.ax1x.com/2021/04/02/ceLZ7D.png" alt="ceLZ7D.png"></a></p>
</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li><code>/actuator/httptrace</code>网络接口追踪404，解决建议用<strong>Sleuth</strong></li>
</ol>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>spring-boot-admin</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm之常用算法</title>
    <url>/2016/12/20/algorithm-common/</url>
    <content><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><img src="https://s3.ax1x.com/2021/03/18/62TEtS.gif" alt="Sorting_quicksort_anim"></p>
<h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。</p>
<h3 id="步骤为："><a href="#步骤为：" class="headerlink" title="步骤为："></a>步骤为：</h3><ol>
<li>从数列中挑出一个元素，称为”基准”（pivot）</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。<br> 递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3>最好时间复杂度 $O(nlog(n))$<br>最坏时间复杂度 $O(n^2)$</li>
</ol>
<h2 id="线性时间选择"><a href="#线性时间选择" class="headerlink" title="线性时间选择"></a>线性时间选择</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>如何找出数组A中的第 k 小的元素？ (1&lt;=k&lt;=n)<br><img src="https://s3.ax1x.com/2021/03/18/62TFTf.jpg" alt="timeselect"></p>
<h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol>
<li>将n个元素分成5个一组,共ceiling(n/5)组。其中最后1组有n mod 5(余数)个元素。</li>
<li>用插入排序对每组排序,取其中值。若最后1组有偶数个元素,取较小得中值</li>
<li>递归的使用本地算法寻找ceiling(n/5)个中位数的中值x   //第一次递归调用本身</li>
<li>用x作为划分元对数组A进行划分,并设x是第k个最小元</li>
<li><pre><code class="java"> if i=k then return x;
 else if i&lt;k then 找左区间的第i个最小元; //第二次递归调用本身
 else 找右区间的第i-k个最小元
</code></pre>
</li>
</ol>
<h2 id="流水作业调度"><a href="#流水作业调度" class="headerlink" title="流水作业调度"></a>流水作业调度</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p> n个作业{1，2，…，n}要在由2台机器M1和M2组成的流水线上完成加工。每个作业加工的顺序都是先在M1上加工，然后在M2上加工。M1和M2加工作业i所需的时间分别为ai和bi。</p>
<p>最优解：n个作业的加工顺序、完成n个作业所需的最短时间<br>最优值：T(N,0)</p>
<h3 id="Johnson法则"><a href="#Johnson法则" class="headerlink" title="Johnson法则"></a>Johnson法则</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.csdn.net/liufeng_king/article/details/8678316">0018算法笔记——【动态规划】流水作业调度问题与Johnson法则</a></p>
<h2 id="0-1背包问题"><a href="#0-1背包问题" class="headerlink" title="0-1背包问题"></a>0-1背包问题</h2><p><img src="https://s3.ax1x.com/2021/03/18/62Ti0P.png" alt="250px-Knapsack.svg"></p>
<h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。问题的名称来源于如何选择最合适的物品放置于给定背包中。</p>
<p>子问题最优值：m(i,j)<br>原问题最优值：m(1,c)<br>m(i,j)意为背包容量为j，可选择物品为,i,i+1,……,n时0,1问题的最优值。</p>
<h3 id="贪心算法解"><a href="#贪心算法解" class="headerlink" title="贪心算法解"></a>贪心算法解</h3><h3 id="动态规划解"><a href="#动态规划解" class="headerlink" title="动态规划解"></a>动态规划解</h3><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p><img src="https://s3.ax1x.com/2021/03/18/62TAk8.png" alt="Greedy_algorithm_36_cents.svg"></p>
<h3 id="思想-1"><a href="#思想-1" class="headerlink" title="思想"></a>思想</h3><p>是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。</p>
<h3 id="步骤：-1"><a href="#步骤：-1" class="headerlink" title="步骤："></a>步骤：</h3><ol>
<li>建立数学模型来描述问题。</li>
<li>把求解的问题分成若干个子问题。</li>
<li>对每一子问题求解，得到子问题的局部最优解。</li>
<li>把子问题的解局部最优解合成原来解问题的一个解。<br> eg： 0-1背包问题、哈弗曼编码<h2 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h2><img src="https://s3.ax1x.com/2021/03/18/62TPmt.png" alt="Binary_search_into_array"><br>时间复杂度    $O(log(n))$<br>最优时间复杂度    $O(1)$<br>平均时间复杂度    $O(log(n))$</li>
</ol>
<h3 id="思想-2"><a href="#思想-2" class="headerlink" title="思想"></a>思想</h3><p>一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。</p>
<h3 id="步骤：-2"><a href="#步骤：-2" class="headerlink" title="步骤："></a>步骤：</h3><p>给予一个包含n个带值元素的数组A或是记录A0 … An−1，使得A0 ≤ … ≤ An−1，以及目标值T，还有下列用来搜索T在A中位置的子程序[3]。</p>
<ol>
<li>令L为0，R为n− 1。</li>
<li>如果L &gt; R，则搜索以失败告终。</li>
<li>令m（中间值元素）为“(L + R) / 2”加上下高斯符号。</li>
<li>如果Am &lt; T，令L为m + 1并回到步骤二。</li>
<li>如果Am &gt; T，令R为m - 1并回到步骤二。</li>
<li>当Am = T，搜索结束；回传值m。<br> 这个迭代步骤会持续通过两个变量追踪搜索的边界。有些实际应用会在算法的最后放入相等比较，让比较循环更快，但平均而言会多一层迭代</li>
</ol>
<h2 id="矩阵连乘"><a href="#矩阵连乘" class="headerlink" title="矩阵连乘"></a>矩阵连乘</h2><p><img src="https://s3.ax1x.com/2021/03/18/62TVfg.gif" alt="jx"></p>
<h6 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h6><p>给定n个矩阵：A1,A2,…,An，其中Ai与Ai+1是可乘的，i=1，2…，n-1。确定计算矩阵连乘积的计算次序，使得依此次序计算矩阵连乘积需要的数乘次数最少。输入数据为矩阵个数和每个矩阵规模，输出结果为计算矩阵连乘积的计算次序和最少数乘次数。</p>
<h2 id="最优二叉搜索树"><a href="#最优二叉搜索树" class="headerlink" title="最优二叉搜索树"></a>最优二叉搜索树</h2><h2 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h2><h3 id="步骤：-3"><a href="#步骤：-3" class="headerlink" title="步骤："></a>步骤：</h3><ol>
<li>分解：将原问题分解为若干个规模较小，相对独立，与原问题形式相同的子问题。</li>
<li>解决：若子问题规模较小且易于解决时，则直接解。否则，递归地解决各子问题。</li>
<li>合并：将各子问题的解合并为原问题的解。</li>
</ol>
<p>eg: 快速排序</p>
<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法</p>
<h3 id="基本要素："><a href="#基本要素：" class="headerlink" title="基本要素："></a>基本要素：</h3><p>重叠子问题、最优子结构性质</p>
<h3 id="试用情况"><a href="#试用情况" class="headerlink" title="试用情况"></a>试用情况</h3><ol>
<li>最优子结构性质。如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。</li>
<li>无后效性。即子问题的解一旦确定，就不再改变，不受在这之后、包含它的更大的问题的求解决策影响。</li>
<li>子问题重叠性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是在表格中简单地查看一下结果，从而获得较高的效率。</li>
</ol>
<p>eg: 背包问题</p>
<h2 id="合并排序（归并排序）"><a href="#合并排序（归并排序）" class="headerlink" title="合并排序（归并排序）"></a>合并排序（归并排序）</h2><p><img src="https://s3.ax1x.com/2021/03/18/62TepQ.gif" alt="Merge-sort-example-300px"><br>时间复杂度    $O(nlog(n))$<br>最优时间复杂度    $O(n)$<br>平均时间复杂度    $O(nlog(n))$</p>
<h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并操作。</p>
<h1 id="哈弗曼编码"><a href="#哈弗曼编码" class="headerlink" title="哈弗曼编码"></a>哈弗曼编码</h1><p><img src="https://s3.ax1x.com/2021/03/18/62Tmlj.png" alt="350px-Huffman_tree_2.svg"><br>这个句子“this is an example of a huffman tree”中得到的字母频率来建构霍夫曼树。句中字母的编码和频率如图所示。编码此句子需要135 bit（不包括保存树所用的空间）</p>
<p><img src="https://s3.ax1x.com/2021/03/18/62Tn6s.gif" alt="Huffman_algorithm"></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>快速排序</tag>
        <tag>线性时间选择</tag>
        <tag>流水作业调度</tag>
        <tag>0-1背包问题</tag>
        <tag>贪心算法</tag>
        <tag>二分搜索</tag>
        <tag>矩阵连乘</tag>
        <tag>最优二叉搜索树</tag>
        <tag>分治法</tag>
        <tag>动态规划</tag>
        <tag>合并排序</tag>
        <tag>哈弗曼编码</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm之时空复杂度</title>
    <url>/2016/10/27/algorithm-time-complexity/</url>
    <content><![CDATA[<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h5 id="概念-时间复杂度是用来衡量算法的执行时间上的效果。"><a href="#概念-时间复杂度是用来衡量算法的执行时间上的效果。" class="headerlink" title="概念: 时间复杂度是用来衡量算法的执行时间上的效果。"></a>概念: 时间复杂度是用来衡量算法的执行时间上的效果。</h5><h5 id="计算方式："><a href="#计算方式：" class="headerlink" title="计算方式："></a>计算方式：</h5><h6 id="1-找出算法的基本语句"><a href="#1-找出算法的基本语句" class="headerlink" title="1. 找出算法的基本语句"></a>1. 找出算法的基本语句</h6><p>算法中执行次数最多的那条语句就是基本语句，通常是最内层循环的循环体。<br>eg: <code>i++; //时间复杂度为O(1)</code></p>
<h6 id="2-计算语句执行的数量级"><a href="#2-计算语句执行的数量级" class="headerlink" title="2. 计算语句执行的数量级"></a>2. 计算语句执行的数量级</h6><p>只需计算基本语句执行次数的数量级，这就意味着只要保证基本语句执行次数的函数中的最高次幂正确即可，可以忽略所有低次幂和最高次幂的系数。这样能够简化算法分析，并且使注意力集中在最重要的一点上：增长率。<br>eg: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;                <span class="comment">//（一次）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    <span class="comment">//（n+1次）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)    <span class="comment">//（n²次）</span></span><br><span class="line">      sum++;                 <span class="comment">//（n²次）</span></span><br></pre></td></tr></table></figure>
<p>因为<br>$\Theta(2n^2 +n+1)=n^2$（$\Theta$即：去低阶项，去掉常数项，去掉高阶项的常参得到），所以$T(n)=O(n^2)$。</p>
<h6 id="3-时间复杂度表示格式"><a href="#3-时间复杂度表示格式" class="headerlink" title="3. 时间复杂度表示格式"></a>3. 时间复杂度表示格式</h6><blockquote>
<ul>
<li>$O(1)$</li>
<li>$O(log(n))$</li>
<li>$O(n)$</li>
<li>$O(nlog(n))$</li>
<li>$O(n^2)$</li>
<li>$O(n^3)$</li>
<li>$O(2^n)$</li>
<li>$O(n!)$</li>
<li>$O(n^n)$</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>时间复杂度</tag>
        <tag>空间复杂度</tag>
      </tags>
  </entry>
  <entry>
    <title>android动画</title>
    <url>/2016/12/13/android-animation/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>平移动画 </li>
</ul>
</blockquote>
<p><code>TranslateAnimation animation=new TranslateAnimation(float fromXDelta, float toXDelta, float fromYDelta, float toYDelta)</code><br>fromXDelta 起点x<br>fromYDelta 起点y<br>toXDelta 终点x<br>toYDelta 终点y<br>以控件的中心为原点坐标，起点终点都是在原点坐标为基准</p>
<p><code>animation.setDuration(2000);</code> 设置动画时间<br><code>animation.setFillAfter(false);</code> 设置动画结束是否停留显示（false不显示），如果为true,不能通过隐藏控件让他消失<br><code>rb_anmia.setAnimationListener()</code> 设置动画的监听（<code>onAnimationStart</code>,<code>onAnimationEnd</code>,<code>onAnimationRepeat</code>）<br><code>view.startAnimation(animation);</code> 启动动画</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>动画</tag>
        <tag>TranslateAnimation</tag>
      </tags>
  </entry>
  <entry>
    <title>Ble蓝牙开发之一认识</title>
    <url>/2016/08/18/android-ble-1-base/</url>
    <content><![CDATA[<h1 id="初步认识"><a href="#初步认识" class="headerlink" title="初步认识"></a>初步认识</h1><blockquote>
<ul>
<li>Ble蓝牙是指低功耗蓝牙，在android4.3(api 18)以上理论都是兼容的</li>
</ul>
</blockquote>
<h1 id="Ble两种角色"><a href="#Ble两种角色" class="headerlink" title="Ble两种角色"></a>Ble两种角色</h1><blockquote>
<ul>
<li>中心设备</li>
<li>外围设备</li>
</ul>
</blockquote>
<h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p>中心设备扮演扫描的角色，寻找外围设备的广播消息。</p>
<h1 id="Ble-名词解释"><a href="#Ble-名词解释" class="headerlink" title="Ble 名词解释"></a>Ble 名词解释</h1><blockquote>
<ul>
<li>ScanResult 扫描蓝牙设备的结果（api21才有）</li>
<li>BluetoothDevice 蓝牙设备</li>
<li>BluetoothGatt作为中央来使用和处理数据</li>
</ul>
</blockquote>
<h1 id="Ble三大部分"><a href="#Ble三大部分" class="headerlink" title="Ble三大部分"></a>Ble三大部分</h1><blockquote>
<ul>
<li>Service 服务（系统服务、用户服务….）</li>
<li>Characteristic 特征</li>
<li>Descriptor ：用于描述characteristic的信息或属性</li>
</ul>
</blockquote>
<h2 id="共同点：都拥有不同的UUID"><a href="#共同点：都拥有不同的UUID" class="headerlink" title="共同点：都拥有不同的UUID"></a>共同点：都拥有不同的UUID</h2><h2 id="关系-1"><a href="#关系-1" class="headerlink" title="关系:"></a>关系:</h2><blockquote>
<ul>
<li>一个ble设备有多个Service</li>
<li>一个Service有多个Characteristic</li>
<li>一个Characteristic包含一个value和多个Descriptor</li>
<li>一个Descriptor包含一个value</li>
<li>一个value存储的最大数据长度为20byte,大于20byte自动分包</li>
</ul>
</blockquote>
<h2 id="Characteristic权限"><a href="#Characteristic权限" class="headerlink" title="Characteristic权限"></a>Characteristic权限</h2><p>READ、WRITE、NOTIFY、WRITE_NO_RESPONSE是否有读，写，通知的权限</p>
<h1 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h1><ol>
<li>外围设备开机</li>
<li>使能中心设备蓝牙</li>
<li>添加蓝牙权限</li>
<li>扫描外围设备（discover）</li>
<li>连接外围设备（connect）</li>
<li>扫描外围设备的服务和特征 （discover）</li>
<li>获取数据（读取外围设备的数据）</li>
<li>1 Service-&gt;Characteristic-getValue()</li>
<li>2 Service-&gt;Characteristic-getDescriptor-getValue()</li>
<li>写入数据（向外围设备发送数据）</li>
<li>1 BluetoothGatt.writeCharacteristic(Characteristic.setValue(“写入的数据”))</li>
<li>2 BluetoothGatt.writeDescriptor(Descriptor.setValue(“写入的数据”))</li>
<li>订阅通知（接收外围设备广播的数据）</li>
<li>1 Service-&gt;Characteristic-getDescriptor-&gt;BluetoothGatt.writeDescriptor(Descriptor.setValue(“特点的值”))</li>
<li>断开连接（disconnect）</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Ble</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Ble蓝牙开发之二搜索</title>
    <url>/2016/08/24/android-ble-2-scan/</url>
    <content><![CDATA[<h1 id="添加权限"><a href="#添加权限" class="headerlink" title="添加权限"></a>添加权限</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 低功耗蓝牙权限 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.BLUETOOTH&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.BLUETOOTH_ADMIN&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否只允许BLE蓝牙 --&gt;</span></span><br><span class="line">   &lt;uses-feature</span><br><span class="line">       android:name=&quot;android.hardware.bluetooth_le&quot;</span><br><span class="line">       android:required=&quot;false&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h1 id="蓝牙初始化"><a href="#蓝牙初始化" class="headerlink" title="蓝牙初始化"></a>蓝牙初始化</h1><p>检测是否支持蓝牙，返回true支持</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)</span><br></pre></td></tr></table></figure>
<p>打开蓝牙</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取蓝牙</span></span><br><span class="line"> <span class="keyword">final</span> BluetoothManager bluetoothManager =(BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);</span><br><span class="line">       mBluetoothAdapter = bluetoothManager.getAdapter();</span><br><span class="line">    <span class="comment">// 2.Enable Bluetooth 检测用户是否打开蓝牙并提示用户打开</span></span><br><span class="line">	   <span class="keyword">if</span> (mBluetoothAdapter == <span class="keyword">null</span> || !mBluetoothAdapter.isEnabled()) &#123;	</span><br><span class="line">			Intent enableBtIntent = <span class="keyword">new</span> Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</span><br><span class="line">			startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);</span><br><span class="line">	    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="搜索蓝牙"><a href="#搜索蓝牙" class="headerlink" title="搜索蓝牙"></a>搜索蓝牙</h1><p>Ble蓝牙搜索功能在 android5.1(api 21)时发生了变化，有过滤，有扫描设置等很不错的功能</p>
<h3 id="api-21："><a href="#api-21：" class="headerlink" title="api 21："></a>api 21：</h3><p>可以配置过滤器，设置搜索模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">startScan(List&lt;ScanFilter&gt; filters, ScanSettings settings, ScanCallback callback)</span><br><span class="line">stopScan(ScanCallback callback)</span><br></pre></td></tr></table></figure>

<p>三个回调，如果不关闭搜索onScanResult一直回返回结果<br>要进入onBatchScanResults回调，必须设置搜索时间setReportDelay(5000)，时间到了一起返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScanResult</span><span class="params">(<span class="keyword">int</span> callbackType, ScanResult result)</span></span></span><br><span class="line"><span class="function"> @Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBatchScanResults</span><span class="params">(List&lt;ScanResult&gt; results)</span></span></span><br><span class="line"><span class="function">  @Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScanFailed</span><span class="params">(<span class="keyword">int</span> errorCode)</span> </span></span><br></pre></td></tr></table></figure>

<h3 id="api-18："><a href="#api-18：" class="headerlink" title="api 18："></a>api 18：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">startLeScan(BluetoothAdapter.LeScanCallback callback)</span><br><span class="line">stopLeScan(BluetoothAdapter.LeScanCallback callback)</span><br></pre></td></tr></table></figure>

<p>一个回调</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLeScan</span><span class="params">(BluetoothDevice bluetoothDevice, <span class="keyword">int</span> rssi, <span class="keyword">byte</span>[] bytes)</span></span></span><br></pre></td></tr></table></figure>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>不管是新api搜索，还是旧的都要注意停止搜索，还有最好做好兼容，两种搜索都写,版本判断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.LOLLIPOP)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Ble</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>Ble蓝牙开发之三连接</title>
    <url>/2016/08/24/android-ble-3-connect/</url>
    <content><![CDATA[<h1 id="蓝牙连接"><a href="#蓝牙连接" class="headerlink" title="蓝牙连接"></a>蓝牙连接</h1><h3 id="BluetoothGattCallback-回调"><a href="#BluetoothGattCallback-回调" class="headerlink" title="BluetoothGattCallback 回调"></a>BluetoothGattCallback 回调</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android.bluetooth.BluetoothGattCallback BluetoothGattCallback = <span class="keyword">new</span> BluetoothGattCallback() &#123;</span><br><span class="line"> <span class="comment">//连接状态</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnectionStateChange</span><span class="params">(BluetoothGatt gatt, <span class="keyword">int</span> status, <span class="keyword">int</span> newState)</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"> <span class="comment">//遍历Services和characteristic</span></span></span><br><span class="line"><span class="function"> @Override</span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServicesDiscovered</span><span class="params">(BluetoothGatt gatt, <span class="keyword">int</span> status)</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"> <span class="comment">//接收的数据改变时</span></span></span><br><span class="line"><span class="function"> @Override</span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCharacteristicChanged</span><span class="params">(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic)</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"> <span class="comment">//信号强度</span></span></span><br><span class="line"><span class="function"> @Override</span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReadRemoteRssi</span><span class="params">(BluetoothGatt gatt, <span class="keyword">int</span> rssi, <span class="keyword">int</span> status)</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"> <span class="comment">//写descriptor时的回调，status=0写成功</span></span></span><br><span class="line"><span class="function"> @Override</span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDescriptorWrite</span><span class="params">(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, <span class="keyword">int</span> status)</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"> <span class="comment">//写Characteristic时的回调，status=0写成功</span></span></span><br><span class="line"><span class="function"> @Override</span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCharacteristicWrite</span><span class="params">(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, <span class="keyword">int</span> status)</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> BluetoothGatt mBluetoothGatt;</span><br><span class="line"><span class="comment">//连接服务 ，第二个参数设为true为自动连接，false不自动连接</span></span><br><span class="line">mBluetoothGatt = mBluetoothDevice().connectGatt(context, <span class="keyword">true</span>,BluetoothGattCallback);  </span><br></pre></td></tr></table></figure>

<h3 id="找到需要的characteristic，descriptor"><a href="#找到需要的characteristic，descriptor" class="headerlink" title="找到需要的characteristic，descriptor"></a>找到需要的characteristic，descriptor</h3><p>在onServicesDiscovered回调里遍历所有Services，Characteristics</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得服务</span></span><br><span class="line"> List&lt;BluetoothGattService&gt; serviceList = mBluetoothGatt.getServices();</span><br><span class="line"><span class="comment">//遍历服务</span></span><br><span class="line">   <span class="keyword">for</span> (BluetoothGattService gattService : serviceList) &#123;</span><br><span class="line">   <span class="comment">//获得Characteristics</span></span><br><span class="line">    List&lt;BluetoothGattCharacteristic&gt; characteristicList = gattService.getCharacteristics();</span><br><span class="line">	    <span class="comment">//遍历Characteristics</span></span><br><span class="line">        <span class="keyword">for</span> (BluetoothGattCharacteristic characteristic : characteristicList) &#123;</span><br><span class="line">					<span class="comment">//判断存储自己需要的characteristic</span></span><br><span class="line">		&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="读写UUID"><a href="#读写UUID" class="headerlink" title="读写UUID"></a>读写UUID</h3><p>如何找到读写的UUID号，可以用蓝牙助手，或者查看外围蓝牙设备文档<br>或者从权限判断。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Ble</tag>
        <tag>连接</tag>
      </tags>
  </entry>
  <entry>
    <title>Ble蓝牙开发之四读写数据</title>
    <url>/2016/08/25/android-ble-4-send-and-receive-data/</url>
    <content><![CDATA[<h1 id="写数据（发送数据）"><a href="#写数据（发送数据）" class="headerlink" title="写数据（发送数据）"></a>写数据（发送数据）</h1><p>前提找到可写的characteristic，在onServicesDiscovered回调里查找</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">characteristic_W.setValue(<span class="string">&quot;string或者byte[]等&quot;</span>);</span><br><span class="line"> <span class="comment">//写成功issucceed返回true</span></span><br><span class="line"> <span class="keyword">boolean</span> issucceed= mBluetoothGatt.writeCharacteristic(characteristic_W)</span><br></pre></td></tr></table></figure>

<p>写完之后onCharacteristicWrite回调返回写的消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCharacteristicWrite</span><span class="params">(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, <span class="keyword">int</span> status)</span></span></span><br></pre></td></tr></table></figure>
<h3 id="其它的写同理"><a href="#其它的写同理" class="headerlink" title="其它的写同理"></a>其它的写同理</h3><p>写的对应关系如下：<br>     写的操作      —&gt;     对应的回调<br>writeCharacteristic—&gt;onCharacteristicWrite<br>writeDescriptor    —&gt;onDescriptorWrite</p>
<h1 id="接收数据（使能通知）"><a href="#接收数据（使能通知）" class="headerlink" title="接收数据（使能通知）"></a>接收数据（使能通知）</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//characteristic_R接收数据的uuid</span></span><br><span class="line"><span class="comment">//使能characteristic_R的通知</span></span><br><span class="line">mBluetoothGatt.setCharacteristicNotification(characteristic_R, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//未知，测试发现不能改</span></span><br><span class="line">String UUIDDes = <span class="string">&quot;00002902-0000-1000-8000-00805f9b34fb&quot;</span>;</span><br><span class="line"><span class="comment">//从接收里获取descriptor</span></span><br><span class="line">BluetoothGattDescriptor descriptor = characteristic_R.getDescriptor(UUID.fromString(UUIDDes)); </span><br><span class="line"><span class="comment">//写数据到descriptor</span></span><br><span class="line">descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);</span><br><span class="line"><span class="comment">//发送给底层</span></span><br><span class="line">mBluetoothGatt.writeDescriptor(descriptor);</span><br></pre></td></tr></table></figure>
<p>使能接收数据每步都有状态返回，注意做好状态的判断，以确定是那一步失败<br>设置成功后，onDescriptorWrite会有回调消息<br>然后在onCharacteristicChanged的回调里旧可以接收到外围蓝牙设备发送的广播消息了</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>向外围蓝牙设备写（发送）消息，_同一时间只能写一次_，最好是在在上次写完成之后才开始第二次</p>
<h1 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mBluetoothGatt.disconnect();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Ble</tag>
        <tag>读写</tag>
      </tags>
  </entry>
  <entry>
    <title>Ble蓝牙开发之五扫描与连接速度优化</title>
    <url>/2016/08/30/android-ble-5-scan-optimization/</url>
    <content><![CDATA[<h1 id="扫描模式"><a href="#扫描模式" class="headerlink" title="扫描模式"></a>扫描模式</h1><h3 id="ScanSettings的属性与方法"><a href="#ScanSettings的属性与方法" class="headerlink" title="ScanSettings的属性与方法"></a>ScanSettings的属性与方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ScanSettings settings = <span class="keyword">new</span> ScanSettings.Builder()</span><br><span class="line">      <span class="comment">//设置扫描模式（SCAN_MODE_LOW_LATENCY扫描优先，SCAN_MODE_LOW_POWER省电优先，SCAN_MODE_BALANCED平衡模式,SCAN_MODE_OPPORTUNISTIC安卓6.0里面才用的模式）</span></span><br><span class="line">                .setScanMode(ScanSettings.SCAN_MODE_OPPORTUNISTIC)</span><br><span class="line">        <span class="comment">//设置扫描的时间，设置了这一项，将扫描5秒，然后在onBatchScanResults里面回调</span></span><br><span class="line">                .setReportDelay(<span class="number">5000</span>)</span><br><span class="line">            <span class="comment">//android 6.0可用</span></span><br><span class="line">                .setMatchMode(<span class="number">1</span>)</span><br><span class="line">            <span class="comment">//android 6.0可用</span></span><br><span class="line">                .setCallbackType(<span class="number">1</span>)</span><br><span class="line">            <span class="comment">//android 6.0可用</span></span><br><span class="line">                .setNumOfMatches(<span class="number">1</span>)</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Ble</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Cordova</title>
    <url>/2018/04/24/android-cordova/</url>
    <content><![CDATA[<h2 id="Cordova环境搭建"><a href="#Cordova环境搭建" class="headerlink" title="Cordova环境搭建"></a>Cordova环境搭建</h2><p>混合开发环境，Cordova提供了js和原生API的调用接口，通过插件，我们可以实现例如拍照，扫码等操作； 并且提供了静态文件转换成APP的功能。</p>
<p>步骤：</p>
<ol>
<li><p>安装<a href="https://nodejs.org/zh-cn/">nodejs</a></p>
</li>
<li><p>安装cordova执行<code>npm install -g cordova</code></p>
</li>
<li><p>在工作空间目录执行<code>cordova create MyApp</code>创建一个Cordova项目</p>
</li>
<li><p>切换进入刚刚创建的项目跟目录<code>cd MyApp</code></p>
</li>
<li><p><code>cordova platform</code>查看该项目可用的平台和已安装的平台</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Installed platforms:</span><br><span class="line">  android <span class="number">7.0</span>.<span class="number">0</span></span><br><span class="line">Available platforms:</span><br><span class="line">  browser ~<span class="number">5.0</span>.<span class="number">1</span></span><br><span class="line">  ios ~<span class="number">4.5</span>.<span class="number">4</span></span><br><span class="line">  osx ~<span class="number">4.0</span>.<span class="number">1</span></span><br><span class="line">  windows ~<span class="number">5.0</span>.<span class="number">0</span></span><br><span class="line">  www ^<span class="number">3.12</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果没有安装，添加一个平台<code>cordova platform add android</code></p>
</li>
<li><p>添加Android sdk系统环境变量三个</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">JAVA_HOME</span>:<span class="string">C:\Program Files\Java\jdk1.8.0_131</span></span><br><span class="line"><span class="attr">ANDROID_HOME</span>:<span class="string">F:\xuan\sdk</span></span><br><span class="line"><span class="attr">PATH</span>:<span class="string">%ANDROID_HOME%\tools;%ANDROID_HOME%\platform-tools;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后执行<code>cordova requirements</code>检查相关环境，如果失败，环境变量配置有问题，这里需要注意，环境变量配置了要重启终端，才会生效</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Android</span> <span class="string">Studio project detected</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Requirements</span> <span class="string">check results for android:</span></span><br><span class="line"><span class="attr">Java</span> <span class="string">JDK: installed 1.8.0</span></span><br><span class="line"><span class="attr">Android</span> <span class="string">SDK: installed true</span></span><br><span class="line"><span class="attr">Android</span> <span class="string">target: installed android-27,android-26,android-25,android-24,android-23,android-22</span></span><br><span class="line"><span class="attr">Gradle</span>: <span class="string">installed C:\Program Files\Android\Android Studio\gradle\gradle-4.1\bin\gradle</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后执行<code>cordova build android</code>编译项目</p>
</li>
<li><p>然后执行<code>cordova run android</code>运行项目，需要连接Android设备，如果是模拟器执行<code>cordova emulate android</code></p>
</li>
<li><p>chrome浏览器调试<a href="chrome://inspect/#devices">chrome://inspect/#devices</a></p>
</li>
</ol>
<h2 id="Cordova-实例"><a href="#Cordova-实例" class="headerlink" title="Cordova 实例"></a>Cordova 实例</h2><h3 id="调用相机demo"><a href="#调用相机demo" class="headerlink" title="调用相机demo"></a>调用相机demo</h3><ol>
<li><p>顺序执行下面的命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cordova create cameraDemo <span class="comment">#创建cameraDemo相机demo</span></span><br><span class="line"><span class="built_in">cd</span> cameraDemo <span class="comment">#进入工程目录</span></span><br><span class="line">cordova platform add android <span class="comment">#添加android</span></span><br><span class="line">cordova plugin add cordova<span class="literal">-plugin</span><span class="literal">-camera</span> <span class="comment">#添加相机组件</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在上面步骤生成应用的目录，修改<code>www</code>目录下的<code>index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;cordova.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&quot;camera&quot;</span>&gt;</span>调用相机<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&quot;wxlogin&quot;</span>&gt;</span>微信<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>www\js</code>目录下的<code>index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = &#123;</span><br><span class="line">    initialize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;deviceready&#x27;</span>, <span class="built_in">this</span>.onDeviceReady.bind(<span class="built_in">this</span>), <span class="literal">false</span>);</span><br><span class="line">	    <span class="built_in">document</span>.getElementById(<span class="string">&quot;camera&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, <span class="built_in">this</span>.wxloginEvent);</span><br><span class="line">    &#125;,</span><br><span class="line">	 wxloginEvent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="comment">// alert(&#x27;触发了&#x27;);</span></span><br><span class="line">		navigator.camera.getPicture(onSuccess,onFail,&#123; </span><br><span class="line">			quality: <span class="number">50</span>,</span><br><span class="line">			destinationType: Camera.DestinationType.DATA_URL</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">	   <span class="function"><span class="keyword">function</span> <span class="title">onSuccess</span>(<span class="params">imageData</span>) </span>&#123;</span><br><span class="line">		  <span class="keyword">var</span> image = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;myImage&#x27;</span>);</span><br><span class="line">		  image.src = <span class="string">&quot;data:image/jpeg;base64,&quot;</span> + imageData;</span><br><span class="line">	   &#125;</span><br><span class="line">	   <span class="function"><span class="keyword">function</span> <span class="title">onFail</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">		  alert(<span class="string">&#x27;Failed because: &#x27;</span> + message);</span><br><span class="line">	   &#125;</span><br><span class="line">	&#125;,</span><br><span class="line">    onDeviceReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.receivedEvent(<span class="string">&#x27;deviceready&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    receivedEvent: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> parentElement = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">        <span class="keyword">var</span> listeningElement = parentElement.querySelector(<span class="string">&#x27;.listening&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> receivedElement = parentElement.querySelector(<span class="string">&#x27;.received&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        listeningElement.setAttribute(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;display:none;&#x27;</span>);</span><br><span class="line">        receivedElement.setAttribute(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;display:block;&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Received Event: &#x27;</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//注意添加此方法包裹，不然会还没加载就调用方法而报错</span></span><br><span class="line">	app.initialize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行<code>cordova run android</code>运行项目，需要连接Android设备</p>
</li>
</ol>
<h3 id="Cordova-加载远程HTML-修改了html，一定要清除app的缓存"><a href="#Cordova-加载远程HTML-修改了html，一定要清除app的缓存" class="headerlink" title="Cordova 加载远程HTML(修改了html，一定要清除app的缓存)"></a>Cordova 加载远程HTML(<code>修改了html，一定要清除app的缓存</code>)</h3><p>上面已经成功创建了一个相机demo，但是他是读取的本地网页，下面记录访问远程html</p>
<p>先分析下生成的目录结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">|cordovaDemo  <span class="comment">//跟目录</span></span><br><span class="line">├─hooks</span><br><span class="line">├─node_modules  <span class="comment">//模块</span></span><br><span class="line">│  ├─cordova-android  <span class="comment">//Android设备</span></span><br><span class="line">│  ├─cordova-plugin-barcodescanner</span><br><span class="line">│  ├─cordova-plugin-compat</span><br><span class="line">│  └─cordova-plugin-whitelist</span><br><span class="line">├─platforms  <span class="comment">//设备目录</span></span><br><span class="line">│  └─android  <span class="comment">//Android源码</span></span><br><span class="line">│      ├─assets</span><br><span class="line">│      │  └─www  <span class="comment">//html资源目录，要在远程运行需要把此目录放到远程目录，改相应的配置文件</span></span><br><span class="line">│      ├─CordovaLib  <span class="comment">//Cordova 依赖</span></span><br><span class="line">│      ├─res</span><br><span class="line">│          ├─xml─config.xml  <span class="comment">//修改里面的&lt;content src=&quot;url地址&quot; /&gt; 默认是index.html</span></span><br><span class="line">│      └─src <span class="comment">//Android java源文件</span></span><br><span class="line">├─plugins <span class="comment">//插件目录</span></span><br><span class="line">│  ├─cordova-plugin-barcodescanner</span><br><span class="line">│  ├─cordova-plugin-compat</span><br><span class="line">│  └─cordova-plugin-whitelist</span><br><span class="line">├─res</span><br><span class="line">└─www  <span class="comment">//网页源文件，修改之后，build(run)会改变android-assets</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>在上面相机demo运行完项目后，用as打开生成的Android的项目(<code>.\platforms\android</code>)</p>
</li>
<li><p>复制<code>.\platforms\android\assets</code>目录下的源码到服务器上运行，<strong>注意idea复制包名有可能丢失</strong></p>
</li>
<li><p>修改Android项目下的<code>res\xml\config.xml</code>配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;content src=&quot;index.html&quot; /&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">content</span> <span class="attr">src</span>=<span class="string">&quot;http://112.&quot;</span> /&gt;</span>    //服务器地址</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果要制作个android外壳，还需要解决webview跳出到浏览器的问题，修改<code>CordovaLib\java\...\engine\SystemWebViewClient</code>下的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// return parentEngine.client.onNavigationAttempt(url); //注释这句</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">//添加这句，具体可以详查webview的使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接在as里面运行Android项目，如果用<code>run android</code>运行会覆盖修改掉的东西</p>
</li>
</ol>
<h3 id="config-xml文件详解"><a href="#config-xml文件详解" class="headerlink" title="config.xml文件详解"></a><a href="http://cordova.apache.org/docs/en/latest/config_ref/index.html"><code>config.xml</code></a>文件详解</h3><p>在新建的cordova项目跟目录下的<code>config.xml</code>将被复制到各个平台配置文件下，不会被更改，Android的是<code>app/platforms/android/res/xml/config.xml</code></p>
<p>下面个详细介绍下里面的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">widget</span> <span class="attr">id</span>=<span class="string">&quot;通用包名&quot;</span> <span class="attr">android-packageName</span>=<span class="string">&quot;Android包名&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.0.0&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/ns/widgets&quot;</span> <span class="attr">xmlns:cdv</span>=<span class="string">&quot;http://cordova.apache.org/ns/1.0&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">&quot;Whitelist&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;android-package&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.apache.cordova.whitelist.WhitelistPlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;onload&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">feature</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--应用名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>e想行空<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--应用图标，更改后卸载重装生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">src</span>=<span class="string">&quot;res/icon/logo.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--应用描述--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">        e想天开,天马行空！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--作者email，网站--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">author</span> <span class="attr">email</span>=<span class="string">&quot;exxk.lx@gmail.com&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.blog.iexxk.com&quot;</span>&gt;</span></span><br><span class="line">        e想行空</span><br><span class="line">    <span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载h5的资源，默认index.html是本地资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">content</span> <span class="attr">src</span>=<span class="string">&quot;http://www.blog.iexxk.com&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--允许哪些域可以和组件通信--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">access</span> <span class="attr">origin</span>=<span class="string">&quot;http://www.blog.iexxk.com/*&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--允许哪些域通过webview打开--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-navigation</span> <span class="attr">href</span>=<span class="string">&quot;http://www.blog.iexxk.com/*&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--允许哪些域可以被打开--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">&quot;http://*/*&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">&quot;https://*/*&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">&quot;tel:*&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">&quot;sms:*&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">&quot;mailto:*&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">&quot;geo:*&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allow-intent</span> <span class="attr">href</span>=<span class="string">&quot;market:*&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">preference</span> <span class="attr">name</span>=<span class="string">&quot;loglevel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">widget</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="app签名"><a href="#app签名" class="headerlink" title="app签名"></a>app签名</h3><ol>
<li><p>在项目跟目录新建一个<code>build.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;android&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;debug&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;keystore&quot;</span>: <span class="string">&quot;./android.keystore&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;storePassword&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;alias&quot;</span>: <span class="string">&quot;mykey1&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;password&quot;</span> : <span class="string">&quot;password&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;keystoreType&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;release&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;keystore&quot;</span>: <span class="string">&quot;./android.keystore&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;storePassword&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;alias&quot;</span>: <span class="string">&quot;mykey2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;password&quot;</span> : <span class="string">&quot;password&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;keystoreType&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制<code>android.keystore</code>到项目跟目录</p>
</li>
<li><p>执行<code>cordova build --release android</code>然后生成<code>platforms\android\app\build\outputs\apk\release\app-release.apk</code></p>
</li>
</ol>
<h3 id="文档资源"><a href="#文档资源" class="headerlink" title="文档资源"></a>文档资源</h3><p><a href="https://cordova.apache.org/">官网cordova</a></p>
<p><a href="https://cordova.apache.org/plugins/">cordova plugins</a></p>
<h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ol>
<li><p>浏览器打开提示<code>www/cordova.js net::ERR_FILE_NOT_FOUND</code>此错误，但是打包Android不会出现</p>
</li>
<li><p>安装插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Plugin doesn&#39;t support this project&#39;s cordova-android version. cordova-android: 7.0.0, failed version requirement:</span><br><span class="line">      &lt;6.3.0</span><br><span class="line">Skipping &#39;cordova-plugin-compat&#39; for android</span><br></pre></td></tr></table></figure>

<p>解决执行<code>cordova platform rm android</code>和<code>cordova platform remove android</code>然后安装<code>cordova platform add android@6.2.0</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Cordova</tag>
      </tags>
  </entry>
  <entry>
    <title>android反编译</title>
    <url>/2016/10/11/android-decompile/</url>
    <content><![CDATA[<h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><h4 id="拆包"><a href="#拆包" class="headerlink" title="拆包"></a>拆包</h4><p><a href="https://ibotpeaches.github.io/Apktool/documentation/">ApkTool</a><br>使用方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar apktool_2.2.0.jar d app-debug.apk</span><br></pre></td></tr></table></figure>
<h3 id="自动反编译工具"><a href="#自动反编译工具" class="headerlink" title="自动反编译工具"></a>自动反编译工具</h3><p>谷歌提供的工具：<a href="https://github.com/google/android-classyshark/releases">android-classyshark</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>反编译</tag>
        <tag>混淆</tag>
        <tag>ClassyShark</tag>
      </tags>
  </entry>
  <entry>
    <title>android自定义标题栏Toolbar</title>
    <url>/2016/08/30/android-diy-toolbar/</url>
    <content><![CDATA[<h3 id="新建一个xml-放标题内容"><a href="#新建一个xml-放标题内容" class="headerlink" title="新建一个xml,放标题内容"></a>新建一个xml,放标题内容</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/toolbar&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@color/colorPrimary&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自定义控件--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;TextView--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--android:layout_width=&quot;wrap_content&quot;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--android:layout_height=&quot;wrap_content&quot;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--android:text=&quot;标题&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在需要的页面调用"><a href="#在需要的页面调用" class="headerlink" title="在需要的页面调用"></a>在需要的页面调用</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;include</span><br><span class="line">       android:layout_width=&quot;match_parent&quot;</span><br><span class="line">       android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">       layout=&quot;@layout/activity_tool_bar&quot; /&gt;</span><br></pre></td></tr></table></figure>
<h3 id="去掉自带标题"><a href="#去掉自带标题" class="headerlink" title="去掉自带标题"></a>去掉自带标题</h3><p>在配置文件找到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:theme=&quot;@style/AppTheme&quot;</span><br></pre></td></tr></table></figure>
<p>点击进去把parent修改为NoActionBar</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;AppTheme&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;Theme.AppCompat.Light.NoActionBar&quot;</span>&gt;</span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!--最顶层的颜色消息时间栏--&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorPrimary&quot;</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!--标题栏颜色--&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorPrimaryDark&quot;</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!--应用内系统控件的颜色，例如系统的滑动条等--&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorAccent&quot;</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在activity里获取标题控件-设置基本属性"><a href="#在activity里获取标题控件-设置基本属性" class="headerlink" title="在activity里获取标题控件,设置基本属性"></a>在activity里获取标题控件,设置基本属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">toolbar = (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">       toolbar.setTitle(<span class="string">&quot;标题&quot;</span>); </span><br><span class="line">       toolbar.setSubtitle(<span class="string">&quot;副标题&quot;</span>);</span><br><span class="line">       toolbar.setTitleTextColor(Color.WHITE); <span class="comment">//颜色</span></span><br><span class="line">       toolbar.setSubtitleTextColor(Color.WHITE);</span><br><span class="line">       toolbar.setLogo(R.mipmap.debug); <span class="comment">//图标</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//设置导航图标要在setSupportActionBar方法之后</span></span><br><span class="line">       setSupportActionBar(toolbar);</span><br><span class="line">       toolbar.setNavigationIcon(R.mipmap.ic_launcher);</span><br></pre></td></tr></table></figure>
<h3 id="在activity添加标题栏返回箭头"><a href="#在activity添加标题栏返回箭头" class="headerlink" title="在activity添加标题栏返回箭头"></a>在activity添加标题栏返回箭头</h3><p>使能返回button</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">toolbar = (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">        toolbar.setTitle(<span class="string">&quot;标题&quot;</span>);</span><br><span class="line">        toolbar.setSubtitle(副标题);</span><br><span class="line">        <span class="comment">//设置导航图标要在setSupportActionBar方法之后</span></span><br><span class="line">        setSupportActionBar(toolbar);</span><br><span class="line">        <span class="keyword">if</span>(getSupportActionBar() != <span class="keyword">null</span>)</span><br><span class="line">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>); <span class="comment">// Enable the Up button</span></span><br></pre></td></tr></table></figure>
<p>添加返回button事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">switch</span> (item.getItemId())&#123;</span><br><span class="line">         <span class="keyword">case</span> android.R.id.home: <span class="comment">//返回键</span></span><br><span class="line"><span class="comment">//添加处理代码</span></span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>v7</tag>
        <tag>标题栏</tag>
      </tags>
  </entry>
  <entry>
    <title>viewGroup自定义控件</title>
    <url>/2016/12/13/android-diy-viewgroup/</url>
    <content><![CDATA[<h2 id="自定义控件的基本使用"><a href="#自定义控件的基本使用" class="headerlink" title="自定义控件的基本使用"></a>自定义控件的基本使用</h2><blockquote>
<ul>
<li>创建一个控件类继承ViewGroup</li>
<li>复写onlayout</li>
<li>复写测量onMeasure</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArcMenu</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArcMenu</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	  <span class="keyword">int</span> cent_x = getWidth() / <span class="number">2</span>; <span class="comment">//viewgroup中心坐标</span></span><br><span class="line">      <span class="keyword">int</span> cent_y = getHeight() / <span class="number">2</span>; <span class="comment">//viewgroup中心坐标</span></span><br><span class="line">	  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getChildCount(); i++) &#123;</span><br><span class="line">	  </span><br><span class="line">         View childView = getChildAt(i);  <span class="comment">//遍历子控件</span></span><br><span class="line">         <span class="keyword">int</span> childWidth = childView.getMeasuredWidth();  <span class="comment">//获得子控件的宽度，需要先测量</span></span><br><span class="line">         <span class="keyword">int</span> childHeight = childView.getMeasuredHeight();</span><br><span class="line">		 </span><br><span class="line">			<span class="keyword">int</span> cl = <span class="number">0</span>, ct = <span class="number">0</span>, cr = <span class="number">0</span>, cb = <span class="number">0</span>;		</span><br><span class="line">		&#125;</span><br><span class="line">		 </span><br><span class="line">		  childView.layout(cl, ct, cr, cb); <span class="comment">//见下图</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        <span class="comment">//测量所有子View的宽高</span></span><br><span class="line">        measureChildren(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>childView.layout(cl, ct, cr, cb)</code><br><a href="https://imgtu.com/i/62o7O1"><img src="https://s3.ax1x.com/2021/03/18/62o7O1.png" alt="62o7O1.png"></a></p>
<blockquote>
<ul>
<li>在xml里面引用</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;com.xuan.hifusion.customcontrols.ArcMenu</span><br><span class="line">               android:id&#x3D;&quot;@+id&#x2F;car_arcmenu&quot;</span><br><span class="line">               android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">               android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">               android:layout_weight&#x3D;&quot;1&quot;</span><br><span class="line">               android:gravity&#x3D;&quot;center&quot;&gt;</span><br><span class="line"></span><br><span class="line">               &lt;ImageView</span><br><span class="line">                   android:id&#x3D;&quot;@+id&#x2F;car_cent_line_iv&quot;</span><br><span class="line">                   android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                   android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                   android:visibility&#x3D;&quot;invisible&quot;</span><br><span class="line">                   app:srcCompat&#x3D;&quot;@drawable&#x2F;car_cent_line&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">               &lt;ImageView</span><br><span class="line">                   android:id&#x3D;&quot;@+id&#x2F;car_light_off_iv&quot;</span><br><span class="line">                   android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                   android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">                   android:tag&#x3D;&quot;右下&quot;</span><br><span class="line">                   android:visibility&#x3D;&quot;invisible&quot;</span><br><span class="line">                   app:srcCompat&#x3D;&quot;@drawable&#x2F;car_light_off&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;com.xuan.hifusion.customcontrols.ArcMenu&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>viewGroup</tag>
        <tag>卫星菜单，测量</tag>
      </tags>
  </entry>
  <entry>
    <title>app图标分辨率适配</title>
    <url>/2016/09/21/android-dpi/</url>
    <content><![CDATA[<h3 id="启动图标"><a href="#启动图标" class="headerlink" title="启动图标"></a>启动图标</h3><blockquote>
<ul>
<li>hdpi   72*72</li>
<li>mdpi   48*48</li>
<li>xhdpi  96*96</li>
<li>xxhdpi 144*144</li>
<li>xxxhdpi 192*192</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>图标</tag>
        <tag>dpi</tag>
        <tag>适配</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-filedownloader</title>
    <url>/2018/07/13/android-filedownloader/</url>
    <content><![CDATA[<h4 id="安卓文件离线断点下载"><a href="#安卓文件离线断点下载" class="headerlink" title="安卓文件离线断点下载"></a>安卓文件离线断点下载</h4><p>GitHub：<a href="https://github.com/lingochamp/FileDownloader">lingochamp/FileDownloader</a></p>
<p>添加依赖<code>implementation &#39;com.liulishuo.filedownloader:library:1.7.4&#39;</code></p>
<p><code>Application</code>里添加初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileDownloader.setupOnApplicationOnCreate(<span class="keyword">this</span>)</span><br><span class="line">    .connectionCreator(<span class="keyword">new</span> FileDownloadUrlConnection</span><br><span class="line">    .Creator(</span><br><span class="line">        <span class="keyword">new</span> FileDownloadUrlConnection.Configuration()</span><br><span class="line">        .connectTimeout(<span class="number">15_000</span>) <span class="comment">// set connection timeout.</span></span><br><span class="line">        .readTimeout(<span class="number">15_000</span>) <span class="comment">// set read timeout.</span></span><br><span class="line">	)</span><br><span class="line">).commit();</span><br></pre></td></tr></table></figure>

<p>单次弹窗下载进度条</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(context);</span><br><span class="line">builder.setTitle(<span class="string">&quot;是否需要下载离线地图？&quot;</span>);</span><br><span class="line">builder.setMessage(f.getAbsolutePath() + <span class="string">&quot; 没有找到离线地图文件&quot;</span>);</span><br><span class="line">builder.setCancelable(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">final</span> ProgressDialog dialog22 = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</span><br><span class="line">dialog22.setTitle(<span class="string">&quot;正在下载离线地图&quot;</span>);</span><br><span class="line">dialog22.setCancelable(<span class="keyword">false</span>);</span><br><span class="line">builder.setPositiveButton(<span class="string">&quot;下载(文件&gt;500M)&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(<span class="keyword">final</span> DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">        FileDownloader.getImpl().create(Config.KJMAPDOWNLOAD)</span><br><span class="line">            .setAutoRetryTimes(<span class="number">100</span>)</span><br><span class="line">            .setPath(f.getAbsolutePath(),<span class="keyword">true</span>)</span><br><span class="line">            .setListener(<span class="keyword">new</span> FileDownloadLargeFileListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">pending</span><span class="params">(BaseDownloadTask task, <span class="keyword">long</span> soFarBytes, <span class="keyword">long</span> totalBytes)</span> </span>&#123;</span><br><span class="line">                    dialog22.show();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">progress</span><span class="params">(BaseDownloadTask task, <span class="keyword">long</span> soFarBytes, <span class="keyword">long</span> totalBytes)</span> </span>&#123;</span><br><span class="line">                    dialog22.setMessage( <span class="string">&quot;重试&quot;</span>+task.getRetryingTimes()+<span class="string">&quot;次,下载速度：&quot;</span> + task.getSpeed() + <span class="string">&quot;kb/s,百分比：&quot;</span> + soFarBytes / <span class="number">1048576</span> + <span class="string">&quot;/&quot;</span> + totalBytes / <span class="number">1048576</span> + <span class="string">&quot;M&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(BaseDownloadTask task)</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(LineActivity.<span class="keyword">this</span>, <span class="string">&quot;下载成功，请重新打开该页面&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                    String oldFileUrl=task.getPath()+<span class="string">&quot;/&quot;</span>+task.getFilename();</span><br><span class="line">                    Log.i(<span class="string">&quot;oldFileUrl&quot;</span>,oldFileUrl);</span><br><span class="line">                    File oldName=<span class="keyword">new</span> File(oldFileUrl);</span><br><span class="line">                    File newName=<span class="keyword">new</span> File(f.getAbsolutePath()+<span class="string">&quot;/&quot;</span>+Config.KJMAPDOWNLOADFILENAME);</span><br><span class="line">                    <span class="keyword">if</span> (oldName.renameTo(newName))&#123;</span><br><span class="line">                        Log.i(<span class="string">&quot;LineActivity&quot;</span>,<span class="string">&quot;重命名成功&quot;</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;LineActivity&quot;</span>,<span class="string">&quot;重命名失败&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    dialog22.dismiss();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">paused</span><span class="params">(BaseDownloadTask task, <span class="keyword">long</span> soFarBytes, <span class="keyword">long</span> totalBytes)</span> </span>&#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(BaseDownloadTask task, Throwable e)</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(LineActivity.<span class="keyword">this</span>, <span class="string">&quot;下载失败&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                    dialog22.dismiss();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(BaseDownloadTask task)</span> </span>&#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        dialog.dismiss();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">builder.setNegativeButton(<span class="string">&quot;取消&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">        dialog.dismiss();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">AlertDialog dialog = builder.create();</span><br><span class="line">dialog.show();</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li><code>getAbsolutePath()</code>获取文件路径，末尾没有<code>/</code> 如果获取文件地址需要手动拼接<code>/</code></li>
<li><code> .setPath(f.getAbsolutePath(),true)</code>这个必须设置，后面需要指定该路径是文件还是目录，如果要设置文件名，需要设置为false，然后路径拼接文件名,如果是路径模式，下载完成后需要手动重命名，否则没有文件后缀</li>
<li>该下载会自动接着上次未完成的下载，需要重新下载，可以去下载目录删除未完成的文件即可</li>
<li>文件大小可以能大于1g用<code>FileDownloadLargeFileListener</code></li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>filedownloader</tag>
      </tags>
  </entry>
  <entry>
    <title>adb常用操作</title>
    <url>/2016/08/24/android-get-logcat/</url>
    <content><![CDATA[<h2 id="定位adb路径"><a href="#定位adb路径" class="headerlink" title="定位adb路径"></a>定位adb路径</h2><p>进入android sdk路径下的platform-tools目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mac</span></span><br><span class="line"> ~/Library/Android/sdk/platform-tools</span><br><span class="line"><span class="comment"># windows</span></span><br><span class="line">C:\DevelopmentTools\Android\sdk\platform-tools</span><br></pre></td></tr></table></figure>
<h2 id="连接设备"><a href="#连接设备" class="headerlink" title="连接设备"></a>连接设备</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果是远程连接执行</span></span><br><span class="line">./adb connect 192.168.2.162:5555</span><br><span class="line"><span class="comment">#查看连接的设备，usb会直接连接</span></span><br><span class="line">./adb devices</span><br><span class="line"><span class="comment">#断开设备</span></span><br><span class="line">./adb disconnect</span><br><span class="line"><span class="comment">#进入设备shell</span></span><br><span class="line">./adb shell</span><br></pre></td></tr></table></figure>
<h2 id="常用操作及命令"><a href="#常用操作及命令" class="headerlink" title="常用操作及命令"></a>常用操作及命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#抓取logcat，ctrl+c结束</span></span><br><span class="line">./adb logcat</span><br><span class="line"><span class="comment">#存储所有logcat，Android日志主要分为kernel、radio、event、main这四种log。</span></span><br><span class="line">./adb logcat -b main -b system -b radio -b events -v time &gt; C:\Users\xuan\Desktop\log.txt</span><br><span class="line"><span class="comment"># 向聚集焦点的输入框输入文本(text)内容为hello</span></span><br><span class="line">./adb shell input text hell0</span><br><span class="line"><span class="comment">#tab键的key code是61 --&gt; &quot;KEYCODE_TAB&quot;</span></span><br><span class="line">./adb shell input keyevent 61</span><br><span class="line"><span class="comment">#下载安卓机器上/sdcard/a.txt文件到当前目录</span></span><br><span class="line">./adb pull /sdcard/a.txt</span><br><span class="line"><span class="comment">#上传文件</span></span><br><span class="line">./adb push a.txt /sdcard/</span><br><span class="line"><span class="comment">#安装apk</span></span><br><span class="line">./adb install a.apk</span><br></pre></td></tr></table></figure>



<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://link.jianshu.com/?t=http://www.360doc.com/content/13/0807/13/5224731_305347225.shtml">KEYCODE列表</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>adb</tag>
        <tag>logcat</tag>
      </tags>
  </entry>
  <entry>
    <title>GooleMap之自动缩放以显示所有标记</title>
    <url>/2016/09/02/android-googlemap-latlngbounds/</url>
    <content><![CDATA[<h2 id="官方描述"><a href="#官方描述" class="headerlink" title="官方描述"></a><a href="https://developers.google.com/maps/documentation/android-api/views?hl=zh-cn">官方描述</a></h2><h3 id="设置边界"><a href="#设置边界" class="headerlink" title="设置边界"></a>设置边界</h3><p>有时，通过移动摄像头来以尽可能最高的缩放级别显示整个受关注区域很有用处。 例如， 如果您要显示用户当前位置方圆五英里内的所有加油站， 可能就需要通过移动摄像头让它们全都显示在屏幕上。 如需实现此目的，请先计算您想在屏幕上显示的 LatLngBounds。 然后使用 CameraUpdateFactory.newLatLngBounds(LatLngBounds bounds, int padding) 获取 CameraUpdate，后者会相应更改摄像头位置，使得给定 LatLngBounds 在计入所指定内边距（单位：像素）后能够完全容纳在地图内。 返回的 CameraUpdate 可确保给定边界与地图边缘之间的间隙（单位：像素）至少与指定的内边距一样大。 请注意，地图的倾斜角度和方位均为 0。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> GoogleMap mMap;</span><br><span class="line"><span class="comment">// Create a LatLngBounds that includes Australia.</span></span><br><span class="line"><span class="keyword">private</span> LatLngBounds AUSTRALIA = <span class="keyword">new</span> LatLngBounds(</span><br><span class="line">  <span class="keyword">new</span> LatLng(-<span class="number">44</span>, <span class="number">113</span>), <span class="keyword">new</span> LatLng(-<span class="number">10</span>, <span class="number">154</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the camera to the greatest possible zoom level that includes the</span></span><br><span class="line"><span class="comment">// bounds</span></span><br><span class="line">mMap.moveCamera(CameraUpdateFactory.newLatLngBounds(AUSTRALIA, <span class="number">0</span>));</span><br></pre></td></tr></table></figure>
<h3 id="LatLngBounds"><a href="#LatLngBounds" class="headerlink" title="LatLngBounds"></a><a href="https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds?hl=zh-cn">LatLngBounds</a></h3><blockquote>
<ul>
<li>public LatLngBounds including (LatLng point)   包含显示的点</li>
<li>public LatLng getCenter ()  获得中心点</li>
</ul>
</blockquote>
<h3 id="代码的具体实现"><a href="#代码的具体实现" class="headerlink" title="代码的具体实现"></a>代码的具体实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LatLngBounds.Builder latLngBounds=<span class="keyword">new</span> LatLngBounds.Builder();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;latLngs.size();i++)&#123;</span><br><span class="line">      latLngBounds.include(latLngs.get(i));</span><br><span class="line">  &#125;</span><br><span class="line">  googleMap.moveCamera(CameraUpdateFactory.newLatLngBounds(latLngBounds.build(), <span class="number">30</span>));</span><br></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如果直接在获取到地图后调用会报错<br>解决：在回调里调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">googleMap.setOnMapLoadedCallback(<span class="keyword">this</span>); </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMapLoaded</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//添加实现的代码</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>GoogleMap</tag>
        <tag>LatLngBounds</tag>
      </tags>
  </entry>
  <entry>
    <title>android混合开发-环境搭建</title>
    <url>/2017/03/08/android-install-cordova-ionic/</url>
    <content><![CDATA[<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><ol>
<li><p>下载<a href="https://nodejs.org/en/">nodejs</a>,并安装，安装过程默认（可修改<a href="C:\Develop\nodejs">路径</a>）,成功校验(<code>npm -version</code>)</p>
<p>Javascript的运行环境,这里主要使用npm附属插件（包管理）</p>
</li>
<li><p><code>npm install -g cordova</code>  安装<a href="http://cordova.apache.org/">cordova</a></p>
<p>混合开发环境，Cordova提供了js和原生API的调用接口，通过插件，我们可以实现例如拍照，扫码等操作； 并且提供了静态文件转换成APP的功能。</p>
</li>
<li><p><code>npm install -g cordova ionic</code>安装<a href="http://ionicframework.com/">ionic</a></p>
<p>Ionic 是基于 Cordova 的，在 Cordova 上能用的一切同样可以在 Ionic 上使用<br>Ionic 在 Cordova 基础上增加了 Ionic UI、AngularJS、一个强大的 CLI 工具和一些云端服务等</p>
</li>
<li><p>​</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>混合开发、android、cordova</tag>
      </tags>
  </entry>
  <entry>
    <title>Android分包(MultiDex)后编译加速方案</title>
    <url>/2016/08/25/android-multidex-optimize-build-speed/</url>
    <content><![CDATA[<p>测试时：设置minSdk&gt;=21以开启InstantRun提高编译速度<br>发布时：恢复minSdk为正常值</p>
<p>引用 <a href="http://www.jianshu.com/p/8014f1443d34">Android分包(MultiDex)后编译加速方案</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>MultiDex</tag>
        <tag>编译</tag>
        <tag>android studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-osmdroid-kml</title>
    <url>/2018/12/28/android-osmdroid-kml/</url>
    <content><![CDATA[<h2 id="osmdroid-加载kml-kmz文件"><a href="#osmdroid-加载kml-kmz文件" class="headerlink" title="osmdroid 加载kml/kmz文件"></a><a href="https://github.com/MKergall/osmbonuspack/wiki/Tutorial_4">osmdroid 加载kml/kmz文件</a></h2><ol>
<li><p>首先增加导入<code>compile &#39;com.github.MKergall:osmbonuspack:6.5.2&#39;</code></p>
</li>
<li><p>添加代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">KmlLoader</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        ProgressDialog progressDialog = <span class="keyword">new</span> ProgressDialog(context);</span><br><span class="line">        KmlDocument kmlDocument;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.onPreExecute();</span><br><span class="line">            progressDialog.setMessage(<span class="string">&quot;Loading Project...&quot;</span>);</span><br><span class="line">            progressDialog.show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Void <span class="title">doInBackground</span><span class="params">(Void... voids)</span> </span>&#123;</span><br><span class="line">            File f = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory().getAbsolutePath() + <span class="string">&quot;/osmdroid/&quot;</span>+Config.KMLFILENAME);</span><br><span class="line">            kmlDocument = <span class="keyword">new</span> KmlDocument();</span><br><span class="line">           	<span class="comment">//加载kml文件修改为parseKMLFile</span></span><br><span class="line">            kmlDocument.parseKMZFile(f);</span><br><span class="line">            FolderOverlay kmlOverlay = (FolderOverlay)kmlDocument.mKmlRoot.buildOverlay(mapView, <span class="keyword">null</span>, <span class="keyword">null</span>,kmlDocument);</span><br><span class="line">            mapView.getOverlays().add(kmlOverlay);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Void aVoid)</span> </span>&#123;</span><br><span class="line">            progressDialog.dismiss();</span><br><span class="line">            mapView.invalidate();</span><br><span class="line">            BoundingBox bb = kmlDocument.mKmlRoot.getBoundingBox();</span><br><span class="line">            mapView.zoomToBoundingBox(bb, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//            mapView.getController().setCenter(bb.getCenter());</span></span><br><span class="line">            <span class="keyword">super</span>.onPostExecute(aVoid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>引用代码<code>new KmlLoader().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);</code></p>
</li>
</ol>
<h4 id="shp-kml-kmz文件转换可以用Google-earth桌面软件"><a href="#shp-kml-kmz文件转换可以用Google-earth桌面软件" class="headerlink" title="shp  kml kmz文件转换可以用Google earth桌面软件"></a>shp  kml kmz文件转换可以用Google earth桌面软件</h4><p>或者<a href="http://blog.iexxk.com/2018/08/17/Tools-geoserver-base/">Tools-geoserver-base</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>osmdroid</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-osmdroid</title>
    <url>/2018/05/29/android-osmdroid/</url>
    <content><![CDATA[<h4 id="参考工具"><a href="#参考工具" class="headerlink" title="参考工具"></a>参考工具</h4><p>github: <a href="https://github.com/osmdroid/osmdroid">osmdroid/osmdroid</a></p>
<p><code>compile &#39;org.osmdroid:osmdroid-android:&lt;VERSION&gt;&#39;</code></p>
<p>离线地图制作工具: <a href="http://mobac.sourceforge.net/">Mobile Atlas Creator</a></p>
<p><a href="https://mobiledevstories.wordpress.com/2014/02/27/osmdroid-mobile-atlas-creator-tutorial/">使用Mobile Atlas Creator</a></p>
<p><a href="https://github.com/osmdroid/osmdroid/wiki/Map-Sources">wiki map sources</a></p>
<p>离线地图工具类<a href="https://github.com/osmdroid/osmdroid/blob/master/OpenStreetMapViewer/src/main/java/org/osmdroid/samplefragments/tileproviders/SampleOfflineOnly.java">SampleOfflineOnly.java</a></p>
<p><a href="https://github.com/osmdroid/osmdroid/wiki/Offline-Map-Tiles">离线地图官方教程Offline-Map-Tiles</a></p>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h5 id="离线地图制作"><a href="#离线地图制作" class="headerlink" title="离线地图制作"></a>离线地图制作</h5><ol>
<li>打开<a href="http://mobac.sourceforge.net/">Mobile Atlas Creator</a>工具</li>
<li>新建地图册（可选Osmdroid ZIP/SQLite/GEMF）</li>
<li>选择地图源</li>
<li>勾选图片转换，设置图块格式(<strong>重要，要和代码的设置一致</strong>)</li>
<li>设置缩放比例</li>
<li>地图上框选区域</li>
<li>在当前地图册点击添加选择区域</li>
<li>最后开始点击下载地图册</li>
<li>得到一个压缩文件，存储备用</li>
</ol>
<h5 id="离线地图自定义地图源-geoserver"><a href="#离线地图自定义地图源-geoserver" class="headerlink" title="离线地图自定义地图源(geoserver)"></a>离线地图自定义地图源(geoserver)</h5><ol>
<li><p>在<a href="http://mobac.sourceforge.net/">Mobile Atlas Creator</a>工具目录的<code>mapsources</code>目录添加地图源配置文件</p>
</li>
<li><p>geoserver地图地图源配置文件<code>geoserver_maps.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">customWmsMapSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>My Geoserver WMS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">minZoom</span>&gt;</span>0<span class="tag">&lt;/<span class="name">minZoom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maxZoom</span>&gt;</span>18<span class="tag">&lt;/<span class="name">maxZoom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tileType</span>&gt;</span>PNG<span class="tag">&lt;/<span class="name">tileType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图层名字hws(工作空间):china_net(图层名字) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">layers</span>&gt;</span>hws:china_net<span class="tag">&lt;/<span class="name">layers</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- hws替换为自己的工作区间，ip端口替换自己服务器的，其他不变 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.230:8082/geoserver/hws/wms?service=WMS<span class="symbol">&amp;amp;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 投影坐标系 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">coordinatesystem</span>&gt;</span>EPSG:4326<span class="tag">&lt;/<span class="name">coordinatesystem</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aditionalparameters</span>&gt;</span><span class="tag">&lt;/<span class="name">aditionalparameters</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">backgroundColor</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">backgroundColor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">customWmsMapSource</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多图层配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">customMultiLayerMapSource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>多图层自定义<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tileType</span>&gt;</span>png<span class="tag">&lt;/<span class="name">tileType</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">backgroundColor</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">backgroundColor</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 0~1由透明到不透明，1.0是设置对底层的图层，0.5是设置底层上一层图层，以此类推n图层以此设置即可--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">layersAlpha</span>&gt;</span>1.0 1.0 0.5 1.0<span class="tag">&lt;/<span class="name">layersAlpha</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">layers</span>&gt;</span></span><br><span class="line">       		<span class="tag">&lt;<span class="name">customMapSource</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Google 卫星图<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">minZoom</span>&gt;</span>0<span class="tag">&lt;/<span class="name">minZoom</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">maxZoom</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maxZoom</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">tileType</span>&gt;</span>PNG<span class="tag">&lt;/<span class="name">tileType</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">tileUpdate</span>&gt;</span>None<span class="tag">&lt;/<span class="name">tileUpdate</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://mt0.google.cn/vt/lyrs=s@124<span class="symbol">&amp;amp;</span>hl=zh-CN<span class="symbol">&amp;amp;</span>gl=CN<span class="symbol">&amp;amp;</span>src=app<span class="symbol">&amp;amp;</span>x=&#123;$x&#125;<span class="symbol">&amp;amp;</span>s=<span class="symbol">&amp;amp;</span>y=&#123;$y&#125;<span class="symbol">&amp;amp;</span>z=&#123;$z&#125;<span class="symbol">&amp;amp;</span>s=Galileo<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">backgroundColor</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">backgroundColor</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">customMapSource</span>&gt;</span> </span><br><span class="line">       </span><br><span class="line">        <span class="tag">&lt;<span class="name">customMapSource</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Google 地名图<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">minZoom</span>&gt;</span>0<span class="tag">&lt;/<span class="name">minZoom</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">maxZoom</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maxZoom</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">tileType</span>&gt;</span>PNG<span class="tag">&lt;/<span class="name">tileType</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">tileUpdate</span>&gt;</span>None<span class="tag">&lt;/<span class="name">tileUpdate</span>&gt;</span> </span><br><span class="line">           <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://mt0.google.cn/vt/imgtp=png32<span class="symbol">&amp;amp;</span>lyrs=h@207000000<span class="symbol">&amp;amp;</span>hl=zh-CN<span class="symbol">&amp;amp;</span>gl=CN<span class="symbol">&amp;amp;</span>src=app<span class="symbol">&amp;amp;</span>x=&#123;$x&#125;<span class="symbol">&amp;amp;</span>y=&#123;$y&#125;<span class="symbol">&amp;amp;</span>z=&#123;$z&#125;<span class="symbol">&amp;amp;</span>s=Galil<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">customMapSource</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">       	<span class="tag">&lt;<span class="name">customWmsMapSource</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>林班界<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">minZoom</span>&gt;</span>0<span class="tag">&lt;/<span class="name">minZoom</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">maxZoom</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maxZoom</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tileType</span>&gt;</span>PNG<span class="tag">&lt;/<span class="name">tileType</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tileUpdate</span>&gt;</span>None<span class="tag">&lt;/<span class="name">tileUpdate</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">layers</span>&gt;</span>hws:linbanjie<span class="tag">&lt;/<span class="name">layers</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.230:8082/geoserver/hws/wms?service=WMS<span class="symbol">&amp;amp;</span>transparent=TRUE<span class="symbol">&amp;amp;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 投影坐标系 --&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">coordinatesystem</span>&gt;</span>EPSG:4326<span class="tag">&lt;/<span class="name">coordinatesystem</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">aditionalparameters</span>&gt;</span><span class="tag">&lt;/<span class="name">aditionalparameters</span>&gt;</span>    </span><br><span class="line">		<span class="tag">&lt;/<span class="name">customWmsMapSource</span>&gt;</span> </span><br><span class="line">       </span><br><span class="line"> 		<span class="tag">&lt;<span class="name">customWmsMapSource</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>巡护路线<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">minZoom</span>&gt;</span>0<span class="tag">&lt;/<span class="name">minZoom</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">maxZoom</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maxZoom</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tileType</span>&gt;</span>PNG<span class="tag">&lt;/<span class="name">tileType</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tileUpdate</span>&gt;</span>None<span class="tag">&lt;/<span class="name">tileUpdate</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 图层名字hws(工作空间):china_net(图层名字) --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">layers</span>&gt;</span>hws:xunhuluxian<span class="tag">&lt;/<span class="name">layers</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- hws替换为自己的工作区间，ip端口替换自己服务器的，其他不变 --&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 多参数，每个参数用&amp;amp;分开--&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 背景设置透明transparent=TRUE--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.230:8082/geoserver/hws/wms?service=WMS<span class="symbol">&amp;amp;</span>transparent=TRUE<span class="symbol">&amp;amp;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">customWmsMapSource</span>&gt;</span>   </span><br><span class="line">   <span class="tag">&lt;/<span class="name">layers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">customMultiLayerMapSource</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="离线地图自定义地图源-google地图"><a href="#离线地图自定义地图源-google地图" class="headerlink" title="离线地图自定义地图源(google地图)"></a>离线地图自定义地图源(google地图)</h5><ol>
<li><p>在<a href="http://mobac.sourceforge.net/">Mobile Atlas Creator</a>工具目录的<code>mapsources</code>目录添加地图源配置文件</p>
</li>
<li><p>google地图地图源配置文件<code>google_maps.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">customMultiLayerMapSource</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Google 卫星<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">tileType</span>&gt;</span>PNG<span class="tag">&lt;/<span class="name">tileType</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">layers</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">customMapSource</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Google 卫星图<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">minZoom</span>&gt;</span>0<span class="tag">&lt;/<span class="name">minZoom</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">maxZoom</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maxZoom</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">tileType</span>&gt;</span>PNG<span class="tag">&lt;/<span class="name">tileType</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">tileUpdate</span>&gt;</span>None<span class="tag">&lt;/<span class="name">tileUpdate</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://mt0.google.cn/vt/lyrs=s@124<span class="symbol">&amp;amp;</span>hl=zh-CN<span class="symbol">&amp;amp;</span>gl=CN<span class="symbol">&amp;amp;</span>src=app<span class="symbol">&amp;amp;</span>x=&#123;$x&#125;<span class="symbol">&amp;amp;</span>s=<span class="symbol">&amp;amp;</span>y=&#123;$y&#125;<span class="symbol">&amp;amp;</span>z=&#123;$z&#125;<span class="symbol">&amp;amp;</span>s=Galileo<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">backgroundColor</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">backgroundColor</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">customMapSource</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">customMapSource</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Google 地名图<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">minZoom</span>&gt;</span>0<span class="tag">&lt;/<span class="name">minZoom</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">maxZoom</span>&gt;</span>20<span class="tag">&lt;/<span class="name">maxZoom</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">tileType</span>&gt;</span>PNG<span class="tag">&lt;/<span class="name">tileType</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">tileUpdate</span>&gt;</span>None<span class="tag">&lt;/<span class="name">tileUpdate</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://mt0.google.cn/vt/imgtp=png32<span class="symbol">&amp;amp;</span>lyrs=h@207000000<span class="symbol">&amp;amp;</span>hl=zh-CN<span class="symbol">&amp;amp;</span>gl=CN<span class="symbol">&amp;amp;</span>src=app<span class="symbol">&amp;amp;</span>x=&#123;$x&#125;<span class="symbol">&amp;amp;</span>y=&#123;$y&#125;<span class="symbol">&amp;amp;</span>z=&#123;$z&#125;<span class="symbol">&amp;amp;</span>s=Galil<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">customMapSource</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">layers</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">customMultiLayerMapSource</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>地图源文件xml的设置搜索<code>Mobile Atlas Creator自定义地图源</code></p>
<p><a href="https://doc-pi.blogspot.com/2015/07/ipad-mobile-atlas-creator-google-map.html">IPad 離線地圖：「Mobile Atlas Creator + 地圖加加」，讓google map成為好用的離線地圖!!</a></p>
</li>
</ol>
<h4 id="Android代码设置"><a href="#Android代码设置" class="headerlink" title="Android代码设置"></a>Android代码设置</h4><ol>
<li><p>导包<code>compile &#39;org.osmdroid:osmdroid-android:&lt;VERSION&gt;&#39;</code></p>
</li>
<li><p>手动设置离线地图的文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//路径压缩包的路径放在存储目录下/osmdroid/Google Maps（世界墨卡托）.zip这个是刚刚用工具制作得到的压缩文件</span></span><br><span class="line">String path=Environment.getExternalStorageDirectory().getAbsolutePath() + <span class="string">&quot;/osmdroid/&quot;</span>+<span class="string">&quot;Google Maps（世界墨卡托）.zip&quot;</span>;</span><br><span class="line"><span class="comment">//设置为离线工作模式。路径一定要对，而且只支持 ZIP/SQLite/GEMF</span></span><br><span class="line">mapView.setTileProvider(<span class="keyword">new</span> OfflineTileProvider(<span class="keyword">new</span> SimpleRegisterReceiver(<span class="keyword">this</span>),<span class="keyword">new</span> File[]&#123;<span class="keyword">new</span> File(path)&#125;));</span><br><span class="line"><span class="comment">//这里Google Map为压缩文件的第一层目录名，一定要一致，.png.tile为最内层目录的文件后缀名一点定要一致，一般是png，这里比较特殊</span></span><br><span class="line">mapView.setTileSource(<span class="keyword">new</span> XYTileSource(<span class="string">&quot;Google Map&quot;</span>, <span class="number">7</span>, <span class="number">16</span>,</span><br><span class="line">                <span class="number">256</span>, <span class="string">&quot;.png.tile&quot;</span>, <span class="keyword">null</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>上面那步基本就可以解析了，官方使用<a href="https://github.com/osmdroid/osmdroid/blob/master/OpenStreetMapViewer/src/main/java/org/osmdroid/samplefragments/tileproviders/SampleOfflineOnly.java">SampleOfflineOnly.java</a>做自动解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置离线地图的路径</span></span><br><span class="line">File f = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory().getAbsolutePath() + <span class="string">&quot;/osmdroid/&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (f.exists()) &#123;  <span class="comment">//判断目录是否存在</span></span><br><span class="line">    File[] list = f.listFiles(); <span class="comment">//得到该目录下的文件</span></span><br><span class="line">    <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;  <span class="comment">//遍历的得到的所有目录和文件</span></span><br><span class="line">            <span class="keyword">if</span> (list[i].isDirectory()) &#123;  <span class="comment">//目录跳过</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String name = list[i].getName().toLowerCase();</span><br><span class="line">            <span class="keyword">if</span> (!name.contains(<span class="string">&quot;.&quot;</span>)) &#123;  <span class="comment">//没有后缀跳过</span></span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">//skip files without an extension</span></span><br><span class="line">            &#125;</span><br><span class="line">            name = name.substring(name.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);  <span class="comment">//得到后缀名</span></span><br><span class="line">            <span class="keyword">if</span> (name.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ArchiveFileFactory.isFileExtensionRegistered(name)) &#123; <span class="comment">//后缀名是否是ZIP/SQLite/GEMF其中一个</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    OfflineTileProvider tileProvider = <span class="keyword">new</span> OfflineTileProvider(<span class="keyword">new</span> SimpleRegisterReceiver(<span class="keyword">this</span>),</span><br><span class="line">                                                                               <span class="keyword">new</span> File[]&#123;list[i]&#125;);  <span class="comment">//如果是把该文件作为离线地图的提供者</span></span><br><span class="line">                    mapView.setTileProvider(tileProvider);  <span class="comment">// &lt;重要&gt;</span></span><br><span class="line">                    String source = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    IArchiveFile[] archives = tileProvider.getArchives();</span><br><span class="line">                    <span class="keyword">if</span> (archives.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Set&lt;String&gt; tileSources = archives[<span class="number">0</span>].getTileSources();</span><br><span class="line">                        <span class="keyword">if</span> (!tileSources.isEmpty()) &#123;</span><br><span class="line">                            source = tileSources.iterator().next();  <span class="comment">//活动压缩文件第一级目录的目录名</span></span><br><span class="line">                            <span class="comment">//自定义设置  &lt;重要&gt; ，其中文件后缀名要和压缩文件内的后缀一致</span></span><br><span class="line">                            <span class="keyword">this</span>.mapView.setTileSource(<span class="keyword">new</span> FileBasedTileSource(source,<span class="number">0</span>, <span class="number">18</span>, <span class="number">256</span>, <span class="string">&quot;.png&quot;</span>, <span class="keyword">null</span>));</span><br><span class="line">                            <span class="comment">//   this.mapView.setTileSource(FileBasedTileSource.getSource(source));  //默认设置</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">this</span>.mapView.setTileSource(TileSourceFactory.DEFAULT_TILE_SOURCE);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">this</span>.mapView.setTileSource(TileSourceFactory.DEFAULT_TILE_SOURCE);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">this</span>.mapView.invalidate();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, f.getAbsolutePath() + <span class="string">&quot; did not have any files I can open! Try using MOBAC&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, f.getAbsolutePath() + <span class="string">&quot; dir not found!&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ol>
<li>当mobac配置多图层时，geoserver wms不加<code>transparent=TRUE&amp;amp;</code>会有白色背景，设置透明度会导致最底层的地图上覆盖了一层半透明的白色，导致看不起低图</li>
<li>mobac加载geoserver gwc连接，如果图层只有一部分，会导致Google map在图层之外的也加载不出来</li>
</ol>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://gis.stackexchange.com/questions/72898/how-to-use-custom-map-in-mobac">How to use Custom map in MOBAC?</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>osmdroid</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-RecyclerView</title>
    <url>/2018/05/09/android-recyclerview/</url>
    <content><![CDATA[<h3 id="RecyclerView-基本使用"><a href="#RecyclerView-基本使用" class="headerlink" title="RecyclerView 基本使用"></a>RecyclerView 基本使用</h3><ol>
<li><p>添加依赖v7包依赖，版本号和<code>compileSdkVersion</code>一致，不然报错</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.android.support:appcompat-v7:25.0.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.android.support:recyclerview-v7:25.0.0&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在layout里添加<code>RecyclerView</code>布局的引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;android.support.v7.widget.RecyclerView</span><br><span class="line">    android:id=&quot;@+id/recyView1&quot;</span><br><span class="line">    android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加一个item的布局</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/recyNumberPhone&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;TextView&quot;</span><br><span class="line">        app:layout_constraintStart_toStartOf=&quot;parent&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/recyNumberName&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;TextView&quot;</span><br><span class="line">        app:layout_constraintEnd_toEndOf=&quot;parent&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建适配器<code>RecyNumberAdapter</code>继承<code> RecyclerView.Adapter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyNumberAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyNumberAdapter</span>.<span class="title">NumberHolder</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Context context; <span class="comment">//上下文</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;String,String&gt;&gt; mDatas;  <span class="comment">//数据源</span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecyNumberAdapter</span><span class="params">(Context context,List&lt;Map&lt;String,String&gt;&gt; mDatas)</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造方法传入数据</span></span><br><span class="line">        <span class="keyword">this</span>.context=context;</span><br><span class="line">        <span class="keyword">this</span>.mDatas=mDatas;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NumberHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 填充布局item</span></span><br><span class="line">        View view = LayoutInflater.from(context).inflate(R.layout.recy_number, <span class="keyword">null</span>);</span><br><span class="line">        NumberHolder holder = <span class="keyword">new</span> NumberHolder(view);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> NumberHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//绑定view</span></span><br><span class="line">  holder.recyNumberName.setText(String.valueOf(mDatas.get(position).get(<span class="string">&quot;name&quot;</span>))); <span class="comment">//用户名</span></span><br><span class="line">  holder.recyNumberPhone.setText(String.valueOf(mDatas.get(position).get(<span class="string">&quot;id&quot;</span>))); <span class="comment">//电话号码  </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mDatas.size(); <span class="comment">//数据长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//类部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span>  <span class="title">NumberHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取item子布局的控件</span></span><br><span class="line">        <span class="keyword">private</span> TextView recyNumberPhone;</span><br><span class="line">        <span class="keyword">private</span> TextView recyNumberName;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">NumberHolder</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(view);</span><br><span class="line">            recyNumberPhone=view.findViewById(R.id.recyNumberPhone);</span><br><span class="line">            recyNumberName=view.findViewById(R.id.recyNumberName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RecyclerView recyNumberView=findViewById(R.id.personalNumber);</span><br><span class="line"><span class="comment">// 设置布局管理器有横向，表格等等</span></span><br><span class="line">GridLayoutManager gridLayoutManager=<span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>,<span class="number">4</span>);</span><br><span class="line">recyNumberView.setLayoutManager(gridLayoutManager);</span><br><span class="line"><span class="comment">//测试数据</span></span><br><span class="line">List&lt;Map&lt;String,String&gt;&gt; datas=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Map&lt;String,String&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;13432861290&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">datas.add(map);</span><br><span class="line"><span class="comment">//设置适配器</span></span><br><span class="line">recyNumberView.setAdapter(<span class="keyword">new</span> RecyNumberAdapter(<span class="keyword">this</span>,datas));</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加点击事件，在<code>RecyNumberAdapter</code>里添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> OnItemClickListener mItemClickListener;</span><br><span class="line"><span class="comment">//item的回调接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> Position)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个设置点击监听器的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(OnItemClickListener itemClickListener)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.mItemClickListener = itemClickListener;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在覆写的onBindViewHolder方法中添加</span></span><br><span class="line">  <span class="comment">//如果设置了回调，则设置点击事件</span></span><br><span class="line"><span class="keyword">if</span> (mItemClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">    holder.itemView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            mItemClickListener.onItemClick(holder.itemView, position);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用的时候只需要<code>recyNumberAdapter.setOnItemClickListener</code>即可</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>RecyclerView</tag>
      </tags>
  </entry>
  <entry>
    <title>Android service服务</title>
    <url>/2016/10/18/android-service/</url>
    <content><![CDATA[<h5 id="startService"><a href="#startService" class="headerlink" title="startService()"></a>startService()</h5><blockquote>
<ul>
<li>启动的服务处于“启动的”状态，一旦启动，service就在后台运行，即使启动它的应用组件已经被销毁了</li>
<li>通常started状态的service执行单任务并且==不返回任何结果==给启动者</li>
</ul>
</blockquote>
<h5 id="bindService"><a href="#bindService" class="headerlink" title="bindService()"></a>bindService()</h5><blockquote>
<ul>
<li>一个绑定的service提供一个允许组件与service交互的接口，可以发送请求、获取返回结果，还可以通过夸进程通信来交互（IPC）。</li>
<li>==绑定的service只有当应用组件绑定后才能运行==，多个组件可以绑定一个service，当调用unbind()方法时，这个service就会被销毁了。</li>
</ul>
</blockquote>
<h6 id="注意：-service与activity一样都存在与当前进程的主线程中-，所以，一些阻塞UI的操作，比如耗时操作不能放在service里进行，比如另外开启一个线程来处理诸如网络请求的耗时操作。"><a href="#注意：-service与activity一样都存在与当前进程的主线程中-，所以，一些阻塞UI的操作，比如耗时操作不能放在service里进行，比如另外开启一个线程来处理诸如网络请求的耗时操作。" class="headerlink" title="注意：==service与activity一样都存在与当前进程的主线程中==，所以，一些阻塞UI的操作，比如耗时操作不能放在service里进行，比如另外开启一个线程来处理诸如网络请求的耗时操作。"></a>注意：==service与activity一样都存在与当前进程的主线程中==，所以，一些阻塞UI的操作，比如耗时操作不能放在service里进行，比如另外开启一个线程来处理诸如网络请求的耗时操作。</h6><h5 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h5><blockquote>
<ul>
<li>IntentService使用队列的方式将请求的Intent加入队列，然后开启一个worker thread(线程)来处理队列中的Intent，对于异步的startService请求，IntentService会处理完成一个之后再处理第二个，每一个请求都会在一个单独的worker thread中处理，==不会阻塞应用程序的主线程==</li>
</ul>
</blockquote>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://qushouxichuan.com/blog/article/51">Android service服务-张雪源的博客</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>startService()</tag>
        <tag>bindService()</tag>
        <tag>IntentService</tag>
      </tags>
  </entry>
  <entry>
    <title>android之文本转语音</title>
    <url>/2016/09/06/android-texttospeech/</url>
    <content><![CDATA[<h1 id="android-系统自带了文本转语音的功能"><a href="#android-系统自带了文本转语音的功能" class="headerlink" title="android 系统自带了文本转语音的功能"></a>android 系统自带了文本转语音的功能</h1><p>一般手机都有Pico TTS功能，但是没有中文语言包<br>解决方案： 安装google 语音装文本tts服务或者讯飞tts等兼容系统接口的TTs</p>
<h3 id="文字转语音的代码比较少"><a href="#文字转语音的代码比较少" class="headerlink" title="文字转语音的代码比较少"></a>文字转语音的代码比较少</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TextToSpeech mTts;</span><br><span class="line">mTts=<span class="keyword">new</span> TextToSpeech(<span class="keyword">this</span>, <span class="keyword">new</span> TextToSpeech.OnInitListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInit</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">              <span class="comment">// status can be either TextToSpeech.SUCCESS or TextToSpeech.ERROR.</span></span><br><span class="line">              <span class="keyword">if</span> (status == TextToSpeech.SUCCESS) &#123;</span><br><span class="line">                  <span class="comment">// Set preferred language to US english.</span></span><br><span class="line">                  <span class="comment">// Note that a language may not be available, and the result will indicate this.</span></span><br><span class="line">                  <span class="keyword">int</span> result = mTts.setLanguage(Locale.CHINA);</span><br><span class="line">                  <span class="comment">// Try this someday for some interesting results.</span></span><br><span class="line">                  <span class="comment">// int result mTts.setLanguage(Locale.FRANCE);</span></span><br><span class="line">                  <span class="keyword">if</span> (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) &#123;</span><br><span class="line">                      <span class="comment">// Lanuage data is missing or the language is not supported.</span></span><br><span class="line">                      Log.e(TAG, <span class="string">&quot;Language is not available.&quot;</span>);</span><br><span class="line">                      Intent installIntent = <span class="keyword">new</span> Intent();</span><br><span class="line">                      installIntent.setAction(TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA);</span><br><span class="line">                      startActivity(installIntent);</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      <span class="comment">// Check the documentation for other possible result codes.</span></span><br><span class="line">                      <span class="comment">// For example, the language may be available for the locale,</span></span><br><span class="line">                      <span class="comment">// but not for the specified country and variant.</span></span><br><span class="line">                      <span class="comment">// The TTS engine has been successfully initialized.</span></span><br><span class="line">                      <span class="comment">// Allow the user to press the button for the app to speak again.</span></span><br><span class="line">                      Log.i(TAG,<span class="string">&quot;初始化成功&quot;</span>);</span><br><span class="line">                      mTts.speak(<span class="string">&quot;初始化成功&quot;</span>,TextToSpeech.QUEUE_FLUSH,<span class="keyword">null</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">// Initialization failed.</span></span><br><span class="line">                  Log.e(TAG, <span class="string">&quot;Could not initialize TextToSpeech.&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>
<p>注意销毁 <code>TextToSpeech</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    <span class="comment">// 关闭TextToSpeech对象</span></span><br><span class="line">    <span class="keyword">if</span> (mTts != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mTts.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在使用nubia手机时，发现手机没有这项（TTs）设置,安装了其它TTs却不能开启。<br>解决：打算用第三方sdk,但是查了一下讯飞的离线文字转语音却发现是收费的，只能说nubia的系统太坑了。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android组件</tag>
        <tag>TextToSpeech</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-WebView</title>
    <url>/2018/04/24/android-webview/</url>
    <content><![CDATA[<p>将一个html H5网页打包成一个apk</p>
<ol>
<li><p>在<code>MainActivity</code>初始化一个<code>webview</code>,启用JavaScript脚步，然后设置自定义<code>Webviewclient</code>,接着就是设置些缓存等，这些非必须，最后终哟啊的一个方法就是加载<code>webview.loadUrl</code>这里添加你的h5链接，如果是本地，直接是路径就可以了，最后设置<code>setContentView(webview);</code>,里面还加了<code>webview</code>返回是网页的返回，到返回完了，在返回就是退出应用提示<code>dialog</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WebView webview;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化WebView对象</span></span><br><span class="line">        webview = <span class="keyword">new</span> WebView(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//设置WebView属性，能够执行Javascript脚本</span></span><br><span class="line">        webview.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//重写WebViewClient</span></span><br><span class="line">        webview.setWebViewClient(<span class="keyword">new</span> WebViewClientDiy(<span class="keyword">this</span>));  </span><br><span class="line">        <span class="comment">//额外的设置，缓存等</span></span><br><span class="line">        webview.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);</span><br><span class="line">        webview.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line">        webview.getSettings().setDomStorageEnabled(<span class="keyword">true</span>);</span><br><span class="line">        webview.getSettings().setAppCacheMaxSize(<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">8</span>);</span><br><span class="line">        String appCachePath = <span class="keyword">this</span>.getApplicationContext().getCacheDir()</span><br><span class="line">                .getAbsolutePath();</span><br><span class="line">        webview.getSettings().setAppCachePath(appCachePath);</span><br><span class="line">        webview.getSettings().setAllowFileAccess(<span class="keyword">true</span>);</span><br><span class="line">        webview.getSettings().setAppCacheEnabled(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载需要显示的网页</span></span><br><span class="line">        <span class="comment">//webview.loadUrl(&quot;file:///android_asset/index.html&quot;);//显示本地网页</span></span><br><span class="line">        webview.loadUrl(<span class="string">&quot;http://dev.clothes.yaokexing.com/mobile/welcome&quot;</span>);<span class="comment">//显示远程网页</span></span><br><span class="line">        <span class="comment">//设置Web视图</span></span><br><span class="line">        setContentView(webview);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//设置回退</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((keyCode == KeyEvent.KEYCODE_BACK) &amp;&amp; webview.canGoBack()) &#123;</span><br><span class="line">            webview.goBack(); <span class="comment">//goBack()表示返回WebView的上一页面</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            AlertDialog exitDialog = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>).create();</span><br><span class="line">            exitDialog.setTitle(<span class="string">&quot;系统提示&quot;</span>);</span><br><span class="line">            exitDialog.setMessage(<span class="string">&quot;你确定要退出吗&quot;</span>);</span><br><span class="line">            exitDialog.setButton(DialogInterface.BUTTON_POSITIVE, <span class="string">&quot;确定&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                    finish();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            exitDialog.setButton(DialogInterface.BUTTON_NEGATIVE, <span class="string">&quot;取消&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;欢迎回来&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//onKeyListener用于设置监听手机back键的操作</span></span><br><span class="line">            exitDialog.setOnKeyListener(<span class="keyword">new</span> DialogInterface.OnKeyListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKey</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">// false时dialog会消失</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            exitDialog.show();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);  <span class="comment">//退出程序</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义<code>WebViewClient</code>类,里面主要覆写<code>shouldOverrideUrlLoading</code>这个方法，因存在老版本和新版本，所以把判断是否用webview加载独立方法出来，一些第三方登录需要用系统的浏览器，所以这里就起到作用了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebViewClientDiy</span> <span class="keyword">extends</span> <span class="title">WebViewClient</span> </span>&#123;</span><br><span class="line">    Context context;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebViewClientDiy</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context=context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Uri uri = Uri.parse(url);  <span class="comment">//老版本</span></span><br><span class="line">        <span class="keyword">return</span> handleUri(uri,view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TargetApi(Build.VERSION_CODES.N)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, WebResourceRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Uri uri = request.getUrl();  <span class="comment">//新版本</span></span><br><span class="line">        <span class="keyword">return</span> handleUri(uri,view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">handleUri</span><span class="params">(<span class="keyword">final</span> Uri uri,WebView view)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;测试&quot;</span>, <span class="string">&quot;Uri =&quot;</span> + uri);</span><br><span class="line">        <span class="keyword">if</span> (uri.toString().contains(<span class="string">&quot;weixin://wap/pay?&quot;</span>))&#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">            intent.setAction(Intent.ACTION_VIEW);</span><br><span class="line">            intent.setData(Uri.parse(uri.toString()));</span><br><span class="line">            context.startActivity(intent);   <span class="comment">//系统默认加载方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        view.loadUrl(uri.toString());  <span class="comment">//调用webview的加载方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>AndroidMainfest.xml</code>添加网络权限<code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</code>,到此基本就可以用了</p>
</li>
<li><p>现在做一些优化关闭标题栏，修改<code>AndroidMainfest.xml</code>的them为自定义样式<code>android:theme=&quot;@style/AppTheme.NoActionBar&quot;&gt;</code></p>
<p>改样式需要在<code>styles.xml</code>添加如下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;AppTheme.NoActionBar&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;Theme.AppCompat.Light.DarkActionBar&quot;</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;windowActionBar&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;windowNoTitle&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowFullscreen&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>WebView</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式计算</title>
    <url>/2018/12/10/bigdata-distributedcomputing/</url>
    <content><![CDATA[<h2 id="三大主流分布式计算系统"><a href="#三大主流分布式计算系统" class="headerlink" title="三大主流分布式计算系统"></a>三大主流分布式计算系统</h2><h3 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h3><p>Hadoop常用于离线的复杂的<a href="http://www.ethinkbi.com/">大数据分析</a>处理</p>
<p>Hadoop采用MapReduce分布式计算框架，并根据GFS开发了HDFS分布式文件系统，根据BigTable开发了HBase数据存储系统。</p>
<h3 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h3><p>Spark常用于离线的快速的大数据处理</p>
<p>Spark使用内存来存储数据</p>
<h3 id="Storm"><a href="#Storm" class="headerlink" title="Storm"></a>Storm</h3><p>Storm常用于在线的实时的大数据处理</p>
<p>Storm不进行数据的收集和存储工作，它直接通过网络实时的接受数据并且实时的处理数据，然后直接通过网络实时的传回结果。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/AlbertFly/article/details/78357317">主流的三大分布式计算系统：Hadoop，Spark和Storm</a></p>
]]></content>
      <categories>
        <category>BigData</category>
      </categories>
      <tags>
        <tag>DistributedComputing</tag>
        <tag>BigData</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE之数据库基础</title>
    <url>/2017/06/20/db-base/</url>
    <content><![CDATA[<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="1-交叉连接（cross-join）"><a href="#1-交叉连接（cross-join）" class="headerlink" title="1. 交叉连接（cross join）"></a>1. 交叉连接（cross join）</h3><p>交叉连接（CROSS JOIN）：有两种，显式的和隐式的，不带ON子句，返回的是两表的乘积，也叫<strong>笛卡尔积</strong>。</p>
<p>例如：下面的语句1和语句2的结果是相同的。</p>
<p>语句1：<strong>隐式的交叉连接</strong>，没有CROSS JOIN。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> O.ID, O.ORDER_NUMBER, C.ID, C.NAME</span><br><span class="line"><span class="keyword">FROM</span> ORDERS O , CUSTOMERS C</span><br><span class="line"><span class="keyword">WHERE</span> O.ID<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>语句2：<strong>显式的交叉连接，</strong>使用CROSS JOIN。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> O.ID,O.ORDER_NUMBER,C.ID,</span><br><span class="line">C.NAME</span><br><span class="line"><span class="keyword">FROM</span> ORDERS O <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> CUSTOMERS C</span><br><span class="line"><span class="keyword">WHERE</span> O.ID<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>语句1和语句2的结果是相同的，查询结果如下：</p>
<p><code>a</code>表：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
</tr>
<tr>
<td>3</td>
<td>王五</td>
</tr>
</tbody></table>
<p><code>b</code>表：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>job</th>
<th>parent_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>java</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>php</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>php</td>
<td>4</td>
</tr>
</tbody></table>
<h5 id="1-内连接-INNER-JOIN"><a href="#1-内连接-INNER-JOIN" class="headerlink" title="1. 内连接(INNER JOIN)"></a>1. 内连接(<code>INNER JOIN</code>)</h5><p>内连接（INNER JOIN）：有两种，显式的和隐式的，返回连接表中符合连接条件和查询条件的数据行。（所谓的链接表就是数据库在做查询形成的中间表）。</p>
<h6 id="显式内连接"><a href="#显式内连接" class="headerlink" title="显式内连接"></a>显式内连接</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT a.*,b.* FROM a INNER JOIN b ON a.id&#x3D;b.parent_id</span><br><span class="line">&#x2F;&#x2F;或者</span><br><span class="line">SELECT a.*,b.* FROM a INNER JOIN b WHERE a.id&#x3D;b.parent_id</span><br></pre></td></tr></table></figure>

<h6 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT a.*,b.* FROM a,b WHERE a.id&#x3D;b.parent_id  &#x2F;&#x2F;只能用where</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>id1</th>
<th>job</th>
<th>parent_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>1</td>
<td>java</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>2</td>
<td>php</td>
<td>2</td>
</tr>
</tbody></table>
<h5 id="2-左连接-LEFT-JOIN"><a href="#2-左连接-LEFT-JOIN" class="headerlink" title="2. 左连接(LEFT JOIN)"></a>2. 左连接(<code>LEFT JOIN</code>)</h5><p>左向外联接的结果集包括  LEFT OUTER子句中指定的左表的所有行，而不仅仅是联接列所匹配的行。如果左表的某行在右表中没有匹配行，则在相关联的结果集行中右表的所有选择列表列均为空值。    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT a.*,b.* FROM a LEFT JOIN b ON a.id&#x3D;b.parent_id</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>id1</th>
<th>job</th>
<th>parent_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>1</td>
<td>java</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>2</td>
<td>php</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>王五</td>
<td><code>null</code></td>
<td><code>null</code></td>
<td><code>null</code></td>
</tr>
</tbody></table>
<h5 id="3-右连接-RIGHT-JOIN"><a href="#3-右连接-RIGHT-JOIN" class="headerlink" title="3. 右连接(RIGHT JOIN)"></a>3. 右连接(<code>RIGHT JOIN</code>)</h5><p>右向外联接是左向外联接的反向联接。将返回右表的所有行。如果右表的某行在左表中没有匹配行，则将为左表返回空值。    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT a.*,b.* FROM a RIGHT JOIN b ON a.id&#x3D;b.parent_id</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>id1</th>
<th>job</th>
<th>parent_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>1</td>
<td>java</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>2</td>
<td>php</td>
<td>2</td>
</tr>
<tr>
<td><code>null</code></td>
<td><code>null</code></td>
<td>3</td>
<td>php</td>
<td>4</td>
</tr>
</tbody></table>
<h5 id="4-完全连接（FULL-JOIN-UNION）"><a href="#4-完全连接（FULL-JOIN-UNION）" class="headerlink" title="4.完全连接（FULL JOIN,UNION）"></a>4.完全连接（<code>FULL JOIN</code>,<code>UNION</code>）</h5><p>完整外部联接返回左表和右表中的所有行。当某行在另一个表中没有匹配行时，则另一个表的选择列表列包含空值。如果表之间有匹配行，则整个结果集行包含基表的数据值。   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT a.*,b.* FROM a FULL JOIN b ON a.id&#x3D;b.parent_id   &#x2F;&#x2F;MYSQL不支持full join</span><br><span class="line">&#x2F;&#x2F;可以用union连接左连接和右连接代替full join</span><br><span class="line">SELECT a.*,b.* FROM a LEFT JOIN b ON a.id&#x3D;b.parent_id</span><br><span class="line">UNION</span><br><span class="line">SELECT a.*,b.* FROM a RIGHT JOIN b ON a.id&#x3D;b.parent_id</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>id1</th>
<th>job</th>
<th>parent_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>1</td>
<td>java</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>2</td>
<td>php</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>王五</td>
<td><code>null</code></td>
<td><code>null</code></td>
<td><code>null</code></td>
</tr>
<tr>
<td><code>null</code></td>
<td><code>null</code></td>
<td>3</td>
<td>php</td>
<td>4</td>
</tr>
</tbody></table>
<h5 id="5-交叉连接（CROSS-JOIN）"><a href="#5-交叉连接（CROSS-JOIN）" class="headerlink" title="5.交叉连接（CROSS JOIN）"></a>5.交叉连接（<code>CROSS JOIN</code>）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT a.*,b.* FROM a CROSS JOIN b WHERE a.id&#x3D;b.parent_id</span><br><span class="line">SELECT a.*,b.* FROM a CROSS JOIN b ON a.id&#x3D;b.parent_id</span><br></pre></td></tr></table></figure>

<h3 id="ON后面的条件（ON条件）和WHERE条件的区别："><a href="#ON后面的条件（ON条件）和WHERE条件的区别：" class="headerlink" title="ON后面的条件（ON条件）和WHERE条件的区别："></a><strong>ON后面的条件（ON条件）和WHERE条件的区别：</strong></h3><ul>
<li>ON条件：是过滤两个链接表笛卡尔积形成中间表的约束条件。</li>
<li>WHERE条件：在有ON条件的SELECT语句中是过滤中间表的约束条件。在没有ON的单表查询中，是限制物理表或者中间查询结果返回记录的约束。在两表或多表连接中是限制连接形成最终中间表的返回结果的约束。</li>
</ul>
<p>从这里可以看出，将WHERE条件移入ON后面是不恰当的。推荐的做法是：<br>ON只进行连接操作，WHERE只过滤中间表的记录。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>查两表关联列相等的数据用内连接。</li>
<li>Col_L是Col_R的子集时用右外连接。</li>
<li>Col_R是Col_L的子集时用左外连接。</li>
<li>Col_R和Col_L彼此有交集但彼此互不为子集时候用全外。</li>
<li>求差操作的时候用联合查询。</li>
</ol>
<p>多个表查询的时候，这些不同的连接类型可以写到一块。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT T1.C1,T2.CX,T3.CY</span><br><span class="line"></span><br><span class="line">FROM TAB1 T1</span><br><span class="line"></span><br><span class="line">       INNER JOIN TAB2 T2 ON (T1.C1&#x3D;T2.C2)</span><br><span class="line"></span><br><span class="line">       INNER JOIN TAB3 T3 ON (T1.C1&#x3D;T2.C3)</span><br><span class="line"></span><br><span class="line">       LEFT OUTER JOIN TAB4 ON(T2.C2&#x3D;T3.C3);</span><br><span class="line"></span><br><span class="line">WHERE T1.X &gt;T3.Y;</span><br></pre></td></tr></table></figure>

<p>上面这个SQL查询是多表连接的一个示范。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.shuchengxian.com/article/168.html">深入理解MySQL的外连接、内连接、交叉连接</a></p>
<p><a href="http://bbs.itheima.com/thread-329953-1-1.html?srx">Java就业企业面试问题-数据库（强烈推荐）</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>db-mongodb-Backup</title>
    <url>/2019/05/30/db-mongodb-backup/</url>
    <content><![CDATA[<h2 id="mongodb手动备份"><a href="#mongodb手动备份" class="headerlink" title="mongodb手动备份"></a>mongodb手动备份</h2><h4 id="备份命令mongodump"><a href="#备份命令mongodump" class="headerlink" title="备份命令mongodump"></a>备份命令<code>mongodump</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongodump --host 127.0.0.1 --port 27017 --username user --password pass --out /data/backup/ --db <span class="built_in">test</span> --collection mycollection</span><br><span class="line"><span class="comment">#参数解释</span></span><br><span class="line"><span class="comment">#hsot 数据库ip</span></span><br><span class="line"><span class="comment">#port 数据库端口</span></span><br><span class="line"><span class="comment">#out 备份指定输出目录</span></span><br><span class="line"><span class="comment">#db 备份指定数据库</span></span><br><span class="line"><span class="comment">#collection 备份指定的表</span></span><br></pre></td></tr></table></figure>

<p>默认备份本地运行在27017端口下的 MongoDB 实例中的所有数据库（<code>local</code> 除外），并在当前目录下生成 <code>dump/</code> 路径存放备份文件，备份以文件名区分数据库，里面以<code>bson</code>和<code>json</code>单独存表</p>
<ol>
<li>在安装好mongodb的服务器上执行<code>mongodump</code>命令就可以备份数据库了，备份的文件会在当前目录的dump里面</li>
</ol>
<h4 id="恢复命令mongorestore-dump"><a href="#恢复命令mongorestore-dump" class="headerlink" title="恢复命令mongorestore dump/"></a>恢复命令<code>mongorestore dump/</code></h4><p>参数同备份，其中dump为备份文件的路径</p>
<h2 id="mongodb自动备份"><a href="#mongodb自动备份" class="headerlink" title="mongodb自动备份"></a>mongodb自动备份</h2><ol>
<li><p>创建脚本<code>mongod_bak.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">DUMP=mongodump</span><br><span class="line"><span class="comment">#备份文件临时目录</span></span><br><span class="line">OUT_DIR=/data/backup/mongod/tmp   </span><br><span class="line"><span class="comment">#备份文件正式目录</span></span><br><span class="line">TAR_DIR=/data/backup/mongod </span><br><span class="line"><span class="comment">#备份文件将以备份时间保存</span></span><br><span class="line">DATE=`date +%Y_%m_%d_%H_%M_%S`</span><br><span class="line"><span class="comment">#数据库操作员,建议设置个单独的用户作为备份用户</span></span><br><span class="line"><span class="comment">#DB_USER=&lt;USER&gt;     </span></span><br><span class="line"><span class="comment">#数据库操作员密码</span></span><br><span class="line"><span class="comment">#DB_PASS=&lt;PASSWORD&gt;       </span></span><br><span class="line"><span class="comment">#保留最新14天的备份</span></span><br><span class="line">DAYS=14                          </span><br><span class="line"><span class="comment">#备份文件命名格式</span></span><br><span class="line">TAR_BAK=<span class="string">&quot;mongod_bak_<span class="variable">$DATE</span>.tar.gz&quot;</span></span><br><span class="line"><span class="comment">#远程备份ip</span></span><br><span class="line"><span class="comment">#REMOTEIP=&lt;远程服务ip&gt;</span></span><br><span class="line"><span class="comment">#远程备份用户名</span></span><br><span class="line"><span class="comment">#REMOTEUSER=&lt;远程连接用户名&gt;</span></span><br><span class="line"><span class="comment">#创建文件夹</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$OUT_DIR</span>        </span><br><span class="line"><span class="comment">#清空临时目录 </span></span><br><span class="line">rm -rf <span class="variable">$OUT_DIR</span>/*               </span><br><span class="line"><span class="comment">#创建本次备份文件夹</span></span><br><span class="line">mkdir -p <span class="variable">$OUT_DIR</span>/<span class="variable">$DATE</span>          </span><br><span class="line"><span class="comment">#执行备份命令，带用户</span></span><br><span class="line"><span class="comment">#$DUMP -u $DB_USER -p $DB_PASS -o $OUT_DIR/$DATE </span></span><br><span class="line"><span class="comment">#执行备份命令，不带用户</span></span><br><span class="line"><span class="variable">$DUMP</span> -o <span class="variable">$OUT_DIR</span>/<span class="variable">$DATE</span> </span><br><span class="line"><span class="comment">#将备份文件打包放入正式目录</span></span><br><span class="line">tar -zcvf <span class="variable">$TAR_DIR</span>/<span class="variable">$TAR_BAK</span> <span class="variable">$OUT_DIR</span>/<span class="variable">$DATE</span></span><br><span class="line"><span class="comment">#删除14天前的旧备份</span></span><br><span class="line">find <span class="variable">$TAR_DIR</span>/ -mtime +<span class="variable">$DAYS</span> -delete </span><br><span class="line"><span class="comment">#远程备份,需要自行配置ssh证书登陆方式,需在远程提前建好备份文件目录TAR_DIR中设置的路径值</span></span><br><span class="line"><span class="comment">#scp $TAR_DIR/$TAR_BAK $REMOTEUSER@$REMOTEIP:$TAR_DIR/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加执行权限<code>chmod +x mongod_bak.sh</code></p>
</li>
<li><p>执行测试<code>./mongod_bak.sh</code>，这步可忽略</p>
</li>
<li><p>添加自动执行脚本功能，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#每天凌晨2点自动执行，脚本路径更改为自己存放的路径</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;0 2 * * * root /root/mongod_bak.sh&quot;</span>  &gt;&gt;/etc/crontab</span><br><span class="line"><span class="comment">#使能配置</span></span><br><span class="line">crontab /etc/crontab</span><br><span class="line"><span class="comment">#检查配置是否生效</span></span><br><span class="line">crontab -l</span><br><span class="line"><span class="comment">#检查crond是否运行</span></span><br><span class="line">service crond status</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解压备份文件</span></span><br><span class="line">tar -zxvf mongod_bak_2019_xx_xx_xx_xx_xx.tar.gz</span><br><span class="line"><span class="comment">#执行mongorestore进行恢复,切换到解压的备份目录里面</span></span><br><span class="line">mongorestore tmp/</span><br></pre></td></tr></table></figure>



<h2 id="自动生成脚本及自动配置定时备份"><a href="#自动生成脚本及自动配置定时备份" class="headerlink" title="自动生成脚本及自动配置定时备份"></a>自动生成脚本及自动配置定时备份</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;欢迎使用mongodb自动备份配置脚本&quot;</span></span><br><span class="line"><span class="built_in">read</span> -p  <span class="string">&quot;请输入mongodb备份路径(/data/mongodbBackUp)：&quot;</span> -t 30 path <span class="comment">#等待30秒</span></span><br><span class="line"><span class="keyword">if</span>    [ ! -n <span class="string">&quot;<span class="variable">$path</span>&quot;</span> ]  ;<span class="keyword">then</span></span><br><span class="line">      path=<span class="string">&quot;/data/mongodbBackUp&quot;</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;备份路径默认设置为: <span class="variable">$path</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;备份路径为: <span class="variable">$path</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入mongodb用户名：&quot;</span> -t 120 dbUserName </span><br><span class="line"><span class="keyword">if</span>    [ ! -n <span class="string">&quot;<span class="variable">$dbUserName</span>&quot;</span> ]  ;<span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;用户名输入为空&quot;</span></span><br><span class="line">      <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;用户名为: <span class="variable">$dbUserName</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入mongodb密码：&quot;</span> -s password</span><br><span class="line"><span class="keyword">if</span>    [ -z <span class="string">&quot;<span class="variable">$password</span>&quot;</span> ]  ;<span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;密码输入为空<span class="variable">$password</span>&quot;</span></span><br><span class="line">      <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;\n&quot;</span></span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">&quot;请再次输入mongodb密码：&quot;</span> -s rpassword</span><br><span class="line">	<span class="keyword">if</span>    [ <span class="string">&quot;<span class="variable">$rpassword</span>&quot;</span>x != <span class="string">&quot;<span class="variable">$password</span>&quot;</span>x ]  ;<span class="keyword">then</span></span><br><span class="line">              <span class="built_in">echo</span> <span class="string">&quot;输入密码不一致&quot;</span></span><br><span class="line">              <span class="built_in">exit</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">              <span class="built_in">echo</span> <span class="string">&quot;密码设置成功&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;是否设置远程备份，请输入[y/n]&quot;</span> -n 1  remote</span><br><span class="line"><span class="keyword">if</span>    [ <span class="string">&quot;<span class="variable">$remote</span>&quot;</span>x = <span class="string">&quot;y&quot;</span>x ]  ;<span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;\n&quot;</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;进入远程配置，远程备份功能需提前自行配置好ssh证书登陆,远程地址样例&quot;</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;root@192.168.1.1:/backupPath/&quot;</span></span><br><span class="line">      <span class="built_in">read</span> -p <span class="string">&quot;请设置远程服务器地址：&quot;</span>  scpPath</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;远程地址为：<span class="variable">$scpPath</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在配置中....&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#!/bin/bash&quot;</span> &gt;/data/mongod_bak.sh</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;DATE=\`date +%Y_%m_%d_%H_%M_%S\`&quot;</span> &gt;&gt;/data/mongod_bak.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;rm -rf <span class="variable">$path</span>/tmp/*&quot;</span> &gt;&gt;/data/mongod_bak.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;mkdir -p <span class="variable">$path</span>/tmp/<span class="variable">$DATE</span>&quot;</span> &gt;&gt;/data/mongod_bak.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;mongodump -u <span class="variable">$dbUserName</span> -p <span class="variable">$password</span> -o <span class="variable">$path</span>/tmp/<span class="variable">$DATE</span>&quot;</span> &gt;&gt;/data/mongod_bak.sh</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;tar -zcvf <span class="variable">$path</span>/mongod_bak_\$DATE.tar.gz <span class="variable">$path</span>/tmp/<span class="variable">$DATE</span>&quot;</span> &gt;&gt;/data/mongod_bak.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;find <span class="variable">$path</span>/ -mtime +14 -delete&quot;</span> &gt;&gt;/data/mongod_bak.sh</span><br><span class="line"><span class="keyword">if</span>    [ <span class="string">&quot;<span class="variable">$remote</span>&quot;</span>x = <span class="string">&quot;y&quot;</span>x ]  ;<span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;scp <span class="variable">$path</span>/mongod_bak_\$DATE.tar.gz <span class="variable">$scpPath</span>&quot;</span> &gt;&gt;/data/mongod_bak.sh</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">chmod +x /data/mongod_bak.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;配置完成&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;开始设置定时备份,定时设置目录/etc/crontab&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;定时任务脚本生成路径/data/mongod_bak.sh&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;0 2 * * * root /data/mongod_bak.sh&quot;</span>  &gt;&gt;/etc/crontab</span><br><span class="line">crontab /etc/crontab</span><br><span class="line">crontab -l</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;设置成功&quot;</span> </span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongoDB内存</title>
    <url>/2019/08/20/db-mongodb-mem/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看mongo内存使用命令</span></span><br><span class="line">mongostat</span><br><span class="line">---------------------------------------------------------------------------------------</span><br><span class="line">insert query update delete getmore <span class="built_in">command</span> dirty  used flushes vsize   res qrw arw net_in net_out conn                time</span><br><span class="line">     2    10      4     *0       0     3|0  0.1% 80.0%       0 8.98G 7.85G 0|0 5|0  10.8k   68.6k   30 Aug 20 11:51:55.367</span><br><span class="line">    *0    *0     *0     *0       0     2|0  0.1% 80.0%       0 8.98G 7.85G 0|0 5|0   212b   62.0k   29 Aug 20 11:51:56.368</span><br><span class="line">     2    10      4     *0       0     2|0  0.1% 80.0%       0 8.98G 7.86G 0|0 5|0  10.8k   68.2k   29 Aug 20 11:51:57.367</span><br><span class="line">    *0     3      1     *0       0     2|0  0.1% 80.0%       0 8.98G 7.86G 0|0 5|0  5.38k   65.1k   29 Aug 20 11:51:58.367</span><br><span class="line">    *0    *0     *0     *0       0     1|0  0.1% 80.0%       0 8.98G 7.86G 0|0 5|0   157b   61.8k   29 Aug 20 11:51:59.368</span><br><span class="line">--------------------------------------------------------------</span><br></pre></td></tr></table></figure>



<p><a href="https://docs.mongodb.com/manual/core/wiredtiger/">WiredTiger存储引擎</a></p>
<p>wiredTiger对内存使用会分为两大部分，一部分是内部内存，另外一部分是文件系统的缓存。内部内存默认值有一个计算公式{ 50% of(RAM-1GB) ,or256MB }，索引和集合的内存都被加载到内部内存，索引是被压缩的放在内部内存，集合则没有压缩。wiredTiger会通过文件系统缓存，自动使用其他所有的空闲内存，放在文件系统缓存里面的数据，与磁盘上的数据格式一致，可以有效减少磁盘I/O。</p>
<p>mongodb不干涉内存管理，将内存管理工作交给操作系统去处理。在使用时必须随时监测内存使用情况，因为mongodb会把所有能用的内存都用完。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">For example, on a system with a total of 4GB of RAM the WiredTiger cache will use 1.5GB of RAM (0.5 * (4 GB - 1 GB) = 1.5 GB). Conversely, a system with a total of 1.25 GB of RAM will allocate 256 MB to the WiredTiger cache because that is more than half of the total RAM minus one gigabyte (0.5 * (1.25 GB - 1 GB) = 128 MB &lt; 256 MB).</span><br><span class="line"></span><br><span class="line">NOTE</span><br><span class="line"></span><br><span class="line">In some instances, such as when running <span class="keyword">in</span> a container, the database can have memory constraints that are lower than the total system memory. In such instances, this memory <span class="built_in">limit</span>, rather than the total system memory, is used as the maximum RAM available.</span><br><span class="line"></span><br><span class="line">To see the memory <span class="built_in">limit</span>, see hostInfo.system.memLimitMB.</span><br><span class="line"></span><br><span class="line">By default, WiredTiger uses Snappy block compression <span class="keyword">for</span> all collections and prefix compression <span class="keyword">for</span> all indexes. Compression defaults are configurable at a global level and can also be <span class="built_in">set</span> on a per-collection and per-index basis during collection and index creation.</span><br><span class="line"></span><br><span class="line">Different representations are used <span class="keyword">for</span> data <span class="keyword">in</span> the WiredTiger internal cache versus the on-disk format:</span><br><span class="line"></span><br><span class="line">Data <span class="keyword">in</span> the filesystem cache is the same as the on-disk format, including benefits of any compression <span class="keyword">for</span> data files. The filesystem cache is used by the operating system to reduce disk I/O.</span><br><span class="line">Indexes loaded <span class="keyword">in</span> the WiredTiger internal cache have a different data representation to the on-disk format, but can still take advantage of index prefix compression to reduce RAM usage. Index prefix compression deduplicates common prefixes from indexed fields.</span><br><span class="line">Collection data <span class="keyword">in</span> the WiredTiger internal cache is uncompressed and uses a different representation from the on-disk format. Block compression can provide significant on-disk storage savings, but data must be uncompressed to be manipulated by the server.</span><br><span class="line">Via the filesystem cache, MongoDB automatically uses all free memory that is not used by the WiredTiger cache or by other processes.</span><br></pre></td></tr></table></figure>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/0e1f214d512c">mongodb——内存</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mongoDb常用应用场景</title>
    <url>/2019/08/26/db-mongodb-sql/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 密码登录验证</span></span><br><span class="line">mongo 10.30.80.194:27017 -u admin  --authenticationDatabase=admin -p mima</span><br><span class="line"><span class="comment">#查看数据库列表</span></span><br><span class="line">&gt;show dbs</span><br><span class="line"><span class="comment">#切换数据库</span></span><br><span class="line">&gt;use admin</span><br><span class="line"><span class="comment">#查看当前数据库</span></span><br><span class="line">&gt;db</span><br><span class="line"><span class="comment">#查看所有表</span></span><br><span class="line">&gt;show tables</span><br><span class="line"><span class="comment">#验证密码</span></span><br><span class="line">&gt;db.auth(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;adminPass&quot;</span>)</span><br><span class="line"><span class="comment">#查询表中所有数据</span></span><br><span class="line">&gt;db.表名.find()</span><br><span class="line"><span class="comment">#查看集群状态</span></span><br><span class="line">&gt;rs.status()</span><br></pre></td></tr></table></figure>

<h2 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h2><h3 id="1-批量更新updateMany"><a href="#1-批量更新updateMany" class="headerlink" title="1. 批量更新updateMany"></a>1. 批量更新<code>updateMany</code></h3><p>更新对象A中包含list&lt;对象B中设备id为a1&gt;，且对象B中的状态为0的所有数据,把状态更新为1</p>
<h5 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5d566377e831932f076cecfe&quot;</span>), </span><br><span class="line">    <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;222&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;devices_statuses&quot;</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;device_id&quot;</span> : <span class="string">&quot;a1&quot;</span>, </span><br><span class="line">            <span class="attr">&quot;status&quot;</span> : <span class="string">&quot;0&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ], </span><br><span class="line">    <span class="attr">&quot;_class&quot;</span> : <span class="string">&quot;com.xxx.bean.CustomerInfoDevice&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>####<code>updateMany</code>更新多条</p>
<p>与<code>findAndModify</code>区别 <code>findAndModify</code>更新单条，sort排序的首条</p>
<p>mongo对应的js查询脚步</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.b_customer_info_device.updateMany(&#123;<span class="string">&quot;devices_statuses.status&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;devices_statuses.device_id&quot;</span>:<span class="string">&quot;a1&quot;</span>&#125;,&#123;<span class="attr">$pull</span>:&#123;<span class="string">&quot;devices_statuses&quot;</span>:&#123;<span class="attr">term_id</span>:<span class="string">&quot;D00010&quot;</span>&#125;&#125;&#125;);</span><br></pre></td></tr></table></figure>

<p>springboot对应写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Query query = <span class="keyword">new</span> Query(Criteria.where(<span class="string">&quot;devices_statuses.device_id&quot;</span>).is(termId).and(<span class="string">&quot;devices_statuses.status&quot;</span>).in(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">Update update = <span class="keyword">new</span> Update();</span><br><span class="line"><span class="comment">//更新删除，删除devices_statuses数组对象中termId=？的，pull为从数组移出</span></span><br><span class="line"><span class="comment">//update.pull(&quot;devices_statuses&quot;, Query.query(Criteria.where(&quot;term_id&quot;).is(termId)));</span></span><br><span class="line"><span class="comment">//更新状态为1                        </span></span><br><span class="line">update.set(<span class="string">&quot;devices_statuses.$.sync_status&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">mongoTemplate.updateMulti(query, update, CustomerInfoDevice.class);</span><br></pre></td></tr></table></figure>

<h3 id="2-正则匹配-regex"><a href="#2-正则匹配-regex" class="headerlink" title="2. 正则匹配$regex"></a>2. 正则匹配<code>$regex</code></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---data</span><br><span class="line">  &#123;&quot;notice_key&quot; : &quot;[E00000003, 测试1]&quot;&#125;</span><br><span class="line">---shell 且查询</span><br><span class="line">db.getCollection(&quot;m_mq_log_record&quot;).find(&#123;&quot;notice_key&quot;:&#123; $regex: /(?=.*测试1)(?=.*E00000003)/ &#125;&#125;)</span><br><span class="line">---java 且查询,`|`为或查询</span><br><span class="line">query.addCriteria(Criteria.where(&quot;notice_key&quot;).regex(&quot;(?=.*测试1)(?=.*E00000003|.*E00000004|)&quot;));</span><br></pre></td></tr></table></figure>

<h3 id="3-聚合查询aggregate"><a href="#3-聚合查询aggregate" class="headerlink" title="3. 聚合查询aggregate"></a>3. 聚合查询<code>aggregate</code></h3><h5 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   name: &#x27;张三&#x27;, </span><br><span class="line">	 user: &quot;san&quot;</span><br><span class="line">   code: &#x27;0&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   name: &#x27;李四&#x27;, </span><br><span class="line">	 user: &quot;si&quot;</span><br><span class="line">   code: &#x27;1&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   name: &#x27;张三&#x27;, </span><br><span class="line">	 user: &quot;san&quot;</span><br><span class="line">   code: &#x27;1&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="group"><a href="#group" class="headerlink" title="group"></a><a href="https://docs.mongodb.com/manual/reference/operator/aggregation/group/">group</a></h5><p>按<code>_id</code>里面的字段进行分组统计，这里按<code>code</code>字段进行分组</p>
<p> <code>_id:null</code> 统计所有</p>
<p><code>_id:&quot;$code&quot;</code>按code字段进行统计</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.getCollection(<span class="string">&quot;m_user&quot;</span>).aggregate([</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;$group&quot;</span>:&#123;</span><br><span class="line">	    _id:<span class="string">&quot;$code&quot;</span></span><br><span class="line">	    ,<span class="attr">recordNum</span>:&#123;<span class="string">&#x27;$sum&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line">	    &#125;</span><br><span class="line">&#125;</span><br><span class="line">]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;0&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;recordNum&quot;</span> : <span class="number">1.0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ----------------------------------------------</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;recordNum&quot;</span> : <span class="number">2.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>group双层嵌套(<a href="https://docs.mongodb.com/manual/reference/operator/aggregation/push/">$push</a>)-<a href="https://docs.mongodb.com/manual/reference/operator/aggregation/group/#pivot-data">Pivot Data</a></p>
<p>先group统计最内层，然后把group聚合的数组对象放到子对象那（利用 <code>subName: &#123; $push: &quot;$$ROOT&quot; &#125;</code>）</p>
<p><code> $push: &quot;$$ROOT&quot;</code>是把聚合的对象放到一个字段subName里面</p>
<p>然后对统计好的再进行统计，如果要统计子对象数组里面的某个字段的数量，用<code>&#123; $sum: &quot;$$ROOT.total&quot; &#125;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">-- 先统计event_id</span><br><span class="line">&#123; <span class="string">&quot;$group&quot;</span>: &#123; <span class="string">&quot;_id&quot;</span>: &#123; <span class="string">&quot;event_id&quot;</span>: <span class="string">&quot;$event_id&quot;</span>, <span class="string">&quot;event_sub_type&quot;</span>: <span class="string">&quot;$event_sub_type&quot;</span> &#125;, <span class="string">&quot;total&quot;</span>: &#123; <span class="string">&quot;$sum&quot;</span>: <span class="string">&quot;$num&quot;</span> &#125;, <span class="attr">sub</span>: &#123; <span class="attr">$push</span>: <span class="string">&quot;$$ROOT&quot;</span> &#125; &#125; &#125;</span><br><span class="line">-- 在分组统计event_sub_type</span><br><span class="line">&#123; <span class="string">&quot;$group&quot;</span>: &#123; <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;$_id.event_sub_type&quot;</span>, <span class="attr">sub</span>: &#123; <span class="attr">$push</span>: <span class="string">&quot;$$ROOT&quot;</span> &#125;,<span class="attr">total</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$$ROOT.total&quot;</span> &#125; &#125; &#125;</span><br></pre></td></tr></table></figure>



<h5 id="project控制输出显示的结果"><a href="#project控制输出显示的结果" class="headerlink" title="project控制输出显示的结果"></a><code>project</code>控制输出显示的结果</h5><p>1为显示该字段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;$project&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;_id&quot;</span>: <span class="number">1</span>, </span><br><span class="line">             <span class="string">&quot;customer_id&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="cond类似case-when"><a href="#cond类似case-when" class="headerlink" title="cond类似case when"></a><code>cond</code>类似case when</h5><p>cond里面的if只支持一个条件，但是cond可以嵌套</p>
<p>Java: ConditionalOperators</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">--如果$err_status=<span class="number">5</span> 输出 <span class="number">1</span>否则输出 <span class="number">0</span></span><br><span class="line"><span class="string">&quot;$cond&quot;</span>: &#123; <span class="string">&quot;if&quot;</span>: &#123; <span class="string">&quot;$eq&quot;</span>: [<span class="string">&quot;$err_status&quot;</span>, <span class="string">&quot;5&quot;</span>] &#125;, <span class="string">&quot;then&quot;</span>: <span class="number">1</span>, <span class="string">&quot;else&quot;</span>: <span class="number">0</span> &#125;</span><br><span class="line">-- 结合project可以统计错误信息等于<span class="number">5</span>的数据条数</span><br><span class="line"> <span class="string">&quot;$project&quot;</span>: &#123;</span><br><span class="line">            customer_id<span class="string">&quot;: 1</span></span><br><span class="line"><span class="string">            , &quot;</span>fail_tatus<span class="string">&quot;: &#123; &quot;</span>$cond<span class="string">&quot;: &#123; &quot;</span><span class="keyword">if</span><span class="string">&quot;: &#123; &quot;</span>$eq<span class="string">&quot;: [&quot;</span>$err_msg<span class="string">&quot;, &quot;</span><span class="number">5</span><span class="string">&quot;] &#125;, &quot;</span>then<span class="string">&quot;: 1, &quot;</span><span class="keyword">else</span><span class="string">&quot;: 0 &#125; &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">-- cond嵌套使用，&quot;</span>$gt<span class="string">&quot;: [&quot;</span>$record<span class="string">&quot;, 0] 可以用于判断对象是否为null，不为null继续cond，然后继续添加条件可以判断数组对象内的某个条件，达到1对多，子对象数组统计，判读子对象满足某个条件就设置为1，达到统计效果</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">                    &quot;</span>$cond<span class="string">&quot;: &#123;</span></span><br><span class="line"><span class="string">                        &quot;</span><span class="keyword">if</span><span class="string">&quot;: &#123; &quot;</span>$gt<span class="string">&quot;: [&quot;</span>$record<span class="string">&quot;, 0] &#125;, &quot;</span>then<span class="string">&quot;:</span></span><br><span class="line"><span class="string">                            &#123;</span></span><br><span class="line"><span class="string">                                &quot;</span>$cond<span class="string">&quot;: &#123;</span></span><br><span class="line"><span class="string">                                    &quot;</span><span class="keyword">if</span><span class="string">&quot;: &#123; &quot;</span>$eq<span class="string">&quot;: [&quot;</span>$record.is_opposite<span class="string">&quot;, false] &#125;, &quot;</span>then<span class="string">&quot;:</span></span><br><span class="line"><span class="string">                                       1, &quot;</span><span class="keyword">else</span><span class="string">&quot;: 0</span></span><br><span class="line"><span class="string">                                &#125;</span></span><br><span class="line"><span class="string">                            &#125;, &quot;</span><span class="keyword">else</span><span class="string">&quot;: 0</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="match条件过滤"><a href="#match条件过滤" class="headerlink" title="match条件过滤"></a><code>match</code>条件过滤</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="unwind"><a href="#unwind" class="headerlink" title="unwind"></a><code>unwind</code></h5><p>嵌入实体平铺，1个对象里面包含数组，平铺成一个对象对一个数组的内容，最终等于数组的条数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;$unwind&quot;</span>: <span class="string">&quot;$term_info&quot;</span></span><br><span class="line">-- preserveNullAndEmptyArrays 为<span class="literal">true</span>时允许对象为<span class="literal">null</span>，不然平铺时如果对象为<span class="literal">null</span>时为<span class="literal">null</span>的这条数据就会消失</span><br><span class="line">&#123; <span class="string">&quot;$unwind&quot;</span>: &#123; <span class="string">&quot;path&quot;</span>: <span class="string">&quot;$record&quot;</span>, <span class="string">&quot;preserveNullAndEmptyArrays&quot;</span>: <span class="literal">true</span> &#125; &#125;</span><br></pre></td></tr></table></figure>

<h5 id="lookup"><a href="#lookup" class="headerlink" title="lookup"></a><code>lookup</code></h5><p>Java: LookupOperation</p>
<p>表关联左连接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">-- 表<span class="number">2</span>为主集合</span><br><span class="line">-- <span class="keyword">from</span> 表<span class="number">1</span>， localField 表<span class="number">1</span>字段， foreignField 表<span class="number">2</span>字段， <span class="keyword">as</span> 新表表面</span><br><span class="line"><span class="string">&quot;$lookup&quot;</span>: &#123; <span class="string">&quot;from&quot;</span>: <span class="string">&quot;b_terminfo&quot;</span>, <span class="string">&quot;localField&quot;</span>: <span class="string">&quot;devices_statuses.term_id&quot;</span>, <span class="string">&quot;foreignField&quot;</span>: <span class="string">&quot;term_id&quot;</span>, <span class="string">&quot;as&quot;</span>: <span class="string">&quot;term_info&quot;</span> &#125;</span><br><span class="line">-- 查询出的结果，表<span class="number">2</span>-[表<span class="number">1</span>数组]</span><br></pre></td></tr></table></figure>

<h5 id="elemMatch-内嵌数组，查询，其中数组里面的一个对象完全满足才会查出来"><a href="#elemMatch-内嵌数组，查询，其中数组里面的一个对象完全满足才会查出来" class="headerlink" title="elemMatch 内嵌数组，查询，其中数组里面的一个对象完全满足才会查出来"></a><code>elemMatch</code> 内嵌数组，查询，其中数组里面的一个对象完全满足才会查出来</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;$elemMatch&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;term_id&quot;</span>: <span class="string">&quot;M59903&quot;</span></span><br><span class="line">        , <span class="string">&quot;sync_status&quot;</span>: <span class="string">&quot;progressFail&quot;</span></span><br><span class="line">        , <span class="string">&quot;err_msg&quot;</span>: &#123; <span class="string">&quot;$ne&quot;</span>: <span class="string">&quot;5&quot;</span> &#125;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>对应java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Query query = <span class="keyword">new</span> Query(Criteria.where(<span class="string">&quot;devices_statuses&quot;</span>).elemMatch(</span><br><span class="line">                   Criteria.where(<span class="string">&quot;term_id&quot;</span>).is(termId)</span><br><span class="line">                           .and(<span class="string">&quot;sync_status&quot;</span>).is(Constants.OFFLINE_SYNC_DEVICE_PROGRESSFAIL)</span><br><span class="line">                           .and(<span class="string">&quot;err_msg&quot;</span>).ne(Constants.OFFLINE_SYNC_ERRORREASON_FAIL_FEATURE)</span><br><span class="line">           ));</span><br></pre></td></tr></table></figure>

<h5 id="facet"><a href="#facet" class="headerlink" title="facet"></a><code>facet</code></h5><p>多条语句组合一个结果,a，b，c各为独立的查询语句</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.getCollection(<span class="string">&quot;b_company&quot;</span>).aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;$facet&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;a&quot;</span>: [</span><br><span class="line">                &#123; <span class="string">&quot;$project&quot;</span>: &#123; <span class="attr">Id</span>: <span class="number">1</span>, <span class="string">&quot;day&quot;</span>: &#123; <span class="string">&quot;$substr&quot;</span>: [<span class="string">&quot;$time&quot;</span>, <span class="number">0</span>, <span class="number">10</span>] &#125; &#125; &#125;</span><br><span class="line">                , &#123; <span class="string">&quot;$match&quot;</span>: &#123; <span class="attr">day</span>: <span class="string">&quot;2020-07-09&quot;</span> &#125; &#125;</span><br><span class="line">                , &#123; <span class="string">&quot;$group&quot;</span>: &#123; <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;$day&quot;</span>, <span class="attr">sum</span>: &#123; <span class="string">&quot;$sum&quot;</span>: <span class="number">1</span> &#125; &#125; &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;b&quot;</span>: [</span><br><span class="line">                &#123; <span class="string">&quot;$group&quot;</span>: &#123; <span class="string">&quot;_id&quot;</span>: <span class="literal">null</span>, <span class="attr">total2</span>: &#123; <span class="string">&quot;$sum&quot;</span>: <span class="number">1</span> &#125; &#125; &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;c&quot;</span>:[</span><br><span class="line">                &#123;<span class="string">&quot;$lookup&quot;</span>:&#123;<span class="attr">from</span>:<span class="string">&quot;b_user&quot;</span>,<span class="attr">localField</span>:<span class="string">&quot;Id&quot;</span>,<span class="attr">foreignField</span>:<span class="string">&quot;company_id&quot;</span>,<span class="attr">as</span>:<span class="string">&quot;user&quot;</span>&#125;&#125;    </span><br><span class="line">               ,&#123;<span class="string">&quot;$unwind&quot;</span>:<span class="string">&quot;$user&quot;</span>&#125;</span><br><span class="line">               ,&#123; <span class="string">&quot;$project&quot;</span>: &#123; <span class="attr">Id</span>: <span class="number">1</span>, <span class="string">&quot;day&quot;</span>: &#123; <span class="string">&quot;$substr&quot;</span>: [<span class="string">&quot;$user.user_login_time&quot;</span>, <span class="number">0</span>, <span class="number">10</span>] &#125; &#125; &#125;</span><br><span class="line">               ,&#123; <span class="string">&quot;$match&quot;</span>: &#123; <span class="attr">day</span>: <span class="string">&quot;2021-02-05&quot;</span> &#125; &#125;</span><br><span class="line">               ,&#123;<span class="string">&quot;$group&quot;</span>:&#123;<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;$Id&quot;</span>,<span class="attr">sum</span>:&#123;<span class="string">&quot;$sum&quot;</span>:<span class="number">1</span>&#125;&#125;&#125;</span><br><span class="line">               ,&#123;<span class="string">&quot;$count&quot;</span>:<span class="string">&quot;total&quot;</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>对应java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Aggregation aggregation = Aggregation.newAggregation(</span><br><span class="line">                    Aggregation.facet()</span><br><span class="line">                            .and(</span><br><span class="line">                                    Aggregation.project(<span class="string">&quot;_id&quot;</span>).and(<span class="string">&quot;time&quot;</span>).substring(<span class="number">0</span>, <span class="number">10</span>).as(<span class="string">&quot;day&quot;</span>)</span><br><span class="line">                                    , Aggregation.match(Criteria.where(<span class="string">&quot;day&quot;</span>).is(nowDate))</span><br><span class="line">                                    , Aggregation.count().as(<span class="string">&quot;count&quot;</span>)</span><br><span class="line">                            ).as(<span class="string">&quot;day&quot;</span>)</span><br><span class="line">                            .and(</span><br><span class="line">                                    Aggregation.count().as(<span class="string">&quot;total&quot;</span>)</span><br><span class="line">                            ).as(<span class="string">&quot;total&quot;</span>)</span><br><span class="line">                            .and(</span><br><span class="line">                                    Aggregation.lookup(<span class="string">&quot;b_user&quot;</span>, <span class="string">&quot;Id&quot;</span>, <span class="string">&quot;company_id&quot;</span>, <span class="string">&quot;user&quot;</span>)</span><br><span class="line">                                    , Aggregation.unwind(<span class="string">&quot;$user&quot;</span>)</span><br><span class="line">                                    , Aggregation.project(<span class="string">&quot;_id&quot;</span>).and(<span class="string">&quot;user.user_login_time&quot;</span>).substring(<span class="number">0</span>, <span class="number">10</span>).as(<span class="string">&quot;day&quot;</span>)</span><br><span class="line">                                    , Aggregation.match(Criteria.where(<span class="string">&quot;day&quot;</span>).is(nowDate))</span><br><span class="line">                                    , Aggregation.group(<span class="string">&quot;_id&quot;</span>)</span><br><span class="line">                                    , Aggregation.count().as(<span class="string">&quot;total&quot;</span>)</span><br><span class="line">                            ).as(<span class="string">&quot;login&quot;</span>)</span><br><span class="line">            );</span><br></pre></td></tr></table></figure>

<h5 id="substr"><a href="#substr" class="headerlink" title="$substr"></a><code>$substr</code></h5><p>日期转换为天</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">-- yyyy-mm-dd HH:mm:ss 转化成 yyyy-mm-dd</span><br><span class="line">  &#123; <span class="string">&quot;$project&quot;</span>: &#123; <span class="attr">Id</span>: <span class="number">1</span>, <span class="string">&quot;day&quot;</span>: &#123; <span class="string">&quot;$substr&quot;</span>: [<span class="string">&quot;$time&quot;</span>, <span class="number">0</span>, <span class="number">10</span>] &#125; &#125; &#125;</span><br><span class="line">--java</span><br><span class="line">	Aggregation.project(<span class="string">&quot;_id&quot;</span>).and(<span class="string">&quot;time&quot;</span>).substring(<span class="number">0</span>, <span class="number">10</span>).as(<span class="string">&quot;day&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="最终示例"><a href="#最终示例" class="headerlink" title="最终示例"></a>最终示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.getCollection(<span class="string">&quot;b_customer_info_device&quot;</span>).aggregate([</span><br><span class="line">    &#123; <span class="string">&quot;$unwind&quot;</span>: <span class="string">&quot;$devices_statuses&quot;</span> &#125;</span><br><span class="line">    , &#123; <span class="string">&quot;$lookup&quot;</span>: &#123; <span class="string">&quot;from&quot;</span>: <span class="string">&quot;b_terminfo&quot;</span>, <span class="string">&quot;localField&quot;</span>: <span class="string">&quot;devices_statuses.term_id&quot;</span>, <span class="string">&quot;foreignField&quot;</span>: <span class="string">&quot;term_id&quot;</span>, <span class="string">&quot;as&quot;</span>: <span class="string">&quot;term_info&quot;</span> &#125; &#125;</span><br><span class="line">    , &#123; <span class="string">&quot;$unwind&quot;</span>: <span class="string">&quot;$term_info&quot;</span> &#125;</span><br><span class="line">    , &#123; <span class="string">&quot;$match&quot;</span>: &#123;&#125; &#125;</span><br><span class="line">    , &#123;</span><br><span class="line">        <span class="string">&quot;$project&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;_id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;customer_id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;class_name&quot;</span>: <span class="number">1</span></span><br><span class="line">            , <span class="string">&quot;feature_fail&quot;</span>: &#123; <span class="string">&quot;$cond&quot;</span>: &#123; <span class="string">&quot;if&quot;</span>: &#123; <span class="string">&quot;$eq&quot;</span>: [<span class="string">&quot;$devices_statuses.err_msg&quot;</span>, <span class="string">&quot;5&quot;</span>] &#125;, <span class="string">&quot;then&quot;</span>: <span class="number">1</span>, <span class="string">&quot;else&quot;</span>: <span class="number">0</span> &#125; &#125;</span><br><span class="line">            , <span class="string">&quot;total_fail&quot;</span>: &#123; <span class="string">&quot;$cond&quot;</span>: &#123; <span class="string">&quot;if&quot;</span>: &#123; <span class="string">&quot;$eq&quot;</span>: [<span class="string">&quot;$devices_statuses.sync_status&quot;</span>, <span class="string">&quot;progressFail&quot;</span>] &#125;, <span class="string">&quot;then&quot;</span>: <span class="number">1</span>, <span class="string">&quot;else&quot;</span>: <span class="number">0</span> &#125; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    , &#123;</span><br><span class="line">        <span class="string">&quot;$group&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;_id&quot;</span>: &#123; <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;$_id&quot;</span>, <span class="string">&quot;customer_id&quot;</span>: <span class="string">&quot;$customer_id&quot;</span>, <span class="string">&quot;class_name&quot;</span>: <span class="string">&quot;$class_name&quot;</span> &#125;</span><br><span class="line">            , <span class="string">&quot;total_fail&quot;</span>: &#123; <span class="string">&quot;$sum&quot;</span>: <span class="string">&quot;$total_fail&quot;</span> &#125;</span><br><span class="line">            , <span class="string">&quot;feature_fail&quot;</span>: &#123; <span class="string">&quot;$sum&quot;</span>: <span class="string">&quot;$feature_fail&quot;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    , &#123;</span><br><span class="line">        <span class="string">&quot;$project&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;_id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;customer_id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;img_store_data&quot;</span>: <span class="number">1</span>, <span class="string">&quot;customer_name&quot;</span>: <span class="number">1</span>, <span class="string">&quot;class_name&quot;</span>: <span class="number">1</span></span><br><span class="line">            , <span class="string">&quot;feature_fail&quot;</span>: &#123; <span class="string">&quot;$cond&quot;</span>: &#123; <span class="string">&quot;if&quot;</span>: &#123; <span class="string">&quot;$gt&quot;</span>: [<span class="string">&quot;$feature_fail&quot;</span>, <span class="number">0</span>] &#125;, <span class="string">&quot;then&quot;</span>: <span class="number">1</span>, <span class="string">&quot;else&quot;</span>: <span class="number">0</span> &#125; &#125;</span><br><span class="line">            , <span class="string">&quot;total_fail&quot;</span>: &#123; <span class="string">&quot;$cond&quot;</span>: &#123; <span class="string">&quot;if&quot;</span>: &#123; <span class="string">&quot;$gt&quot;</span>: [<span class="string">&quot;$total_fail&quot;</span>, <span class="number">0</span>] &#125;, <span class="string">&quot;then&quot;</span>: <span class="number">1</span>, <span class="string">&quot;else&quot;</span>: <span class="number">0</span> &#125; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    , &#123;</span><br><span class="line">        <span class="string">&quot;$group&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;_id&quot;</span>: <span class="literal">null</span></span><br><span class="line">            , <span class="string">&quot;total_customer&quot;</span>: &#123; <span class="string">&quot;$sum&quot;</span>: <span class="number">1</span> &#125;</span><br><span class="line">            , <span class="string">&quot;total_fail&quot;</span>: &#123; <span class="string">&quot;$sum&quot;</span>: <span class="string">&quot;$total_fail&quot;</span> &#125;</span><br><span class="line">            , <span class="string">&quot;feature_fail&quot;</span>: &#123; <span class="string">&quot;$sum&quot;</span>: <span class="string">&quot;$feature_fail&quot;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>对应mongotemplate</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ConditionalOperators.Cond condOperatorsFeature=ConditionalOperators.when(</span><br><span class="line">              criteria.where(<span class="string">&quot;devices_statuses.err_msg&quot;</span>).is(Constants.OFFLINE_SYNC_ERRORREASON_FAIL_FEATURE))</span><br><span class="line">              .then(<span class="number">1</span>)</span><br><span class="line">              .otherwise(<span class="number">0</span>);</span><br><span class="line">      ConditionalOperators.Cond condOperatorsFail=ConditionalOperators.when(</span><br><span class="line">              criteria.where(<span class="string">&quot;devices_statuses.sync_status&quot;</span>).is(Constants.OFFLINE_SYNC_DEVICE_PROGRESSFAIL))</span><br><span class="line">              .then(<span class="number">1</span>)</span><br><span class="line">              .otherwise(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      ConditionalOperators.Cond condOperatorsFeatureTotal=ConditionalOperators.when(</span><br><span class="line">              criteria.where(<span class="string">&quot;feature_fail&quot;</span>).gt(<span class="number">0</span>))</span><br><span class="line">              .then(<span class="number">1</span>)</span><br><span class="line">              .otherwise(<span class="number">0</span>);</span><br><span class="line">      ConditionalOperators.Cond condOperatorsFailTotal=ConditionalOperators.when(</span><br><span class="line">              criteria.where(<span class="string">&quot;total_fail&quot;</span>).gt(<span class="number">0</span>))</span><br><span class="line">              .then(<span class="number">1</span>)</span><br><span class="line">              .otherwise(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      Aggregation aggregation = Aggregation.newAggregation(</span><br><span class="line">              Aggregation.unwind(<span class="string">&quot;$devices_statuses&quot;</span>)</span><br><span class="line">              ,LookupOperation.newLookup().from(<span class="string">&quot;b_terminfo&quot;</span>)</span><br><span class="line">                      .localField(<span class="string">&quot;devices_statuses.term_id&quot;</span>)</span><br><span class="line">                      .foreignField(<span class="string">&quot;term_id&quot;</span>).as(<span class="string">&quot;term_info&quot;</span>)</span><br><span class="line">              ,Aggregation.unwind(<span class="string">&quot;$term_info&quot;</span>)</span><br><span class="line">              ,Aggregation.match(criteria)</span><br><span class="line">              ,Aggregation.project(<span class="string">&quot;customer_id&quot;</span>,<span class="string">&quot;class_name&quot;</span>)</span><br><span class="line">                      .and(condOperatorsFeature).as(<span class="string">&quot;feature_fail&quot;</span>)</span><br><span class="line">                      .and(condOperatorsFail).as(<span class="string">&quot;total_fail&quot;</span>)</span><br><span class="line">              ,Aggregation.group(<span class="string">&quot;customer_id&quot;</span>,<span class="string">&quot;class_name&quot;</span>)</span><br><span class="line">                      .sum(<span class="string">&quot;total_fail&quot;</span>).as(<span class="string">&quot;total_fail&quot;</span>)</span><br><span class="line">                      .sum(<span class="string">&quot;feature_fail&quot;</span>).as(<span class="string">&quot;feature_fail&quot;</span>)</span><br><span class="line">              ,Aggregation.project()</span><br><span class="line">                      .and(condOperatorsFeatureTotal).as(<span class="string">&quot;feature_fail&quot;</span>)</span><br><span class="line">                      .and(condOperatorsFailTotal).as(<span class="string">&quot;total_fail&quot;</span>)</span><br><span class="line">              ,Aggregation.group()</span><br><span class="line">                      .count().as(<span class="string">&quot;total_customer&quot;</span>)</span><br><span class="line">                      .sum(<span class="string">&quot;total_fail&quot;</span>).as(<span class="string">&quot;total_fail&quot;</span>)</span><br><span class="line">                      .sum(<span class="string">&quot;feature_fail&quot;</span>).as(<span class="string">&quot;feature_fail&quot;</span>)</span><br><span class="line">      );</span><br><span class="line">      AggregationResults&lt;BasicDBObject&gt; dBObjects=mongoTemplate.aggregate(aggregation,<span class="string">&quot;b_customer_info_device&quot;</span>,BasicDBObject.class);</span><br><span class="line"></span><br><span class="line">      JSONArray countResult = JSON.parseObject(dBObjects.getRawResults().toJson()).getJSONArray(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span>(countResult!=<span class="keyword">null</span>&amp;&amp;countResult.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">          JSONObject jobj = (JSONObject)countResult.get(<span class="number">0</span>);</span><br><span class="line">         <span class="keyword">return</span> jobj;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h3 id="表关联子类统计"><a href="#表关联子类统计" class="headerlink" title="表关联子类统计"></a>表关联子类统计</h3><p>按类别统计每个事件的数量，输出结果如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|-类型1</span><br><span class="line">|--事件1</span><br><span class="line">|----事件1记录1</span><br><span class="line">|----事件1记录2</span><br><span class="line">|----事件1记录n条</span><br><span class="line">|--事件2</span><br><span class="line">|-类型2</span><br><span class="line">|--事件3</span><br><span class="line">|----事件3记录1</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String startTime = startDay + <span class="string">&quot; 00:00:00&quot;</span>;</span><br><span class="line"></span><br><span class="line">           ConditionalOperators.Cond condCompany= addCompanyIdCriteriaInCond(<span class="string">&quot;record.company_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//判断是否是当天</span></span><br><span class="line">           ConditionalOperators.Cond condDay = ConditionalOperators.when(Criteria.where(<span class="string">&quot;record.trans_time&quot;</span>).gte(startTime)</span><br><span class="line">           ).then(condCompany!=<span class="keyword">null</span>?condCompany:<span class="number">1</span>).otherwise(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//添加字表的判断是否是应答事件</span></span><br><span class="line">           ConditionalOperators.Cond condOpposite = ConditionalOperators.when(Criteria.where(<span class="string">&quot;record.is_opposite&quot;</span>).is(<span class="keyword">false</span>)</span><br><span class="line">           ).then(condDay).otherwise(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//gt(0)是为了判断对象(是否有记录)是否为null，如果有对象就会大于0</span></span><br><span class="line">           ConditionalOperators.Cond condOperators = ConditionalOperators.when(Criteria.where(<span class="string">&quot;record&quot;</span>).gt(<span class="number">0</span>)</span><br><span class="line">           ).then(condOpposite).otherwise(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">           Aggregation aggregation = Aggregation.newAggregation(</span><br><span class="line">                   Aggregation.match(Criteria.where(<span class="string">&quot;event_type&quot;</span>).is(<span class="string">&quot;device&quot;</span>))</span><br><span class="line">                   , Aggregation.lookup(<span class="string">&quot;r_event_record&quot;</span>, <span class="string">&quot;event_id&quot;</span>, <span class="string">&quot;event_id&quot;</span>, <span class="string">&quot;record&quot;</span>)</span><br><span class="line">                   , Aggregation.unwind(<span class="string">&quot;$record&quot;</span>, <span class="keyword">true</span>)</span><br><span class="line">                   , Aggregation.project(<span class="string">&quot;event_id&quot;</span>, <span class="string">&quot;event_name&quot;</span>,<span class="string">&quot;event_sub_type&quot;</span>).and(condOperators).as(<span class="string">&quot;num&quot;</span>)</span><br><span class="line">                   , Aggregation.group(<span class="string">&quot;event_id&quot;</span>, <span class="string">&quot;event_name&quot;</span>,<span class="string">&quot;event_sub_type&quot;</span>).sum(<span class="string">&quot;num&quot;</span>).as(<span class="string">&quot;total&quot;</span>)</span><br><span class="line">                   , Aggregation.group(<span class="string">&quot;_id.event_sub_type&quot;</span>).push(<span class="string">&quot;$$ROOT&quot;</span>).as(<span class="string">&quot;sub&quot;</span>).sum(<span class="string">&quot;$$ROOT.total&quot;</span>).as(<span class="string">&quot;total&quot;</span>)</span><br><span class="line">           );</span><br><span class="line"></span><br><span class="line">           AggregationResults&lt;BasicDBObject&gt; dBObjects = mongoTemplate.aggregate(aggregation, <span class="string">&quot;b_event_info&quot;</span>, BasicDBObject.class);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.getCollection(<span class="string">&quot;b_event_info&quot;</span>).aggregate([</span><br><span class="line">    &#123; <span class="string">&quot;$match&quot;</span>: &#123; <span class="string">&quot;event_type&quot;</span>: <span class="string">&quot;device&quot;</span> &#125; &#125;</span><br><span class="line">    , &#123; <span class="string">&quot;$lookup&quot;</span>: &#123; <span class="string">&quot;from&quot;</span>: <span class="string">&quot;r_event_record&quot;</span>, <span class="string">&quot;localField&quot;</span>: <span class="string">&quot;event_id&quot;</span>, <span class="string">&quot;foreignField&quot;</span>: <span class="string">&quot;event_id&quot;</span>, <span class="string">&quot;as&quot;</span>: <span class="string">&quot;record&quot;</span> &#125; &#125;</span><br><span class="line">    , &#123; <span class="string">&quot;$unwind&quot;</span>: &#123; <span class="string">&quot;path&quot;</span>: <span class="string">&quot;$record&quot;</span>, <span class="string">&quot;preserveNullAndEmptyArrays&quot;</span>: <span class="literal">true</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line">    , &#123;</span><br><span class="line">        <span class="string">&quot;$project&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;event_id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;event_name&quot;</span>: <span class="number">1</span>, <span class="string">&quot;num&quot;</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;$cond&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;if&quot;</span>: &#123; <span class="string">&quot;$gt&quot;</span>: [<span class="string">&quot;$record&quot;</span>, <span class="number">0</span>] &#125;, <span class="string">&quot;then&quot;</span>:</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="string">&quot;$cond&quot;</span>: &#123;</span><br><span class="line">                                    <span class="string">&quot;if&quot;</span>: &#123; <span class="string">&quot;$eq&quot;</span>: [<span class="string">&quot;$record.is_opposite&quot;</span>, <span class="literal">false</span>] &#125;, <span class="string">&quot;then&quot;</span>:</span><br><span class="line">                                        &#123; <span class="string">&quot;$cond&quot;</span>: &#123; <span class="string">&quot;if&quot;</span>: &#123; <span class="string">&quot;$gte&quot;</span>: [<span class="string">&quot;$record.trans_time&quot;</span>, <span class="string">&quot;2021-03-16 00:00:00&quot;</span>] &#125;, <span class="string">&quot;then&quot;</span>: <span class="number">1</span>, <span class="string">&quot;else&quot;</span>: <span class="number">0</span> &#125; &#125;, <span class="string">&quot;else&quot;</span>: <span class="number">0</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;, <span class="string">&quot;else&quot;</span>: <span class="number">0</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            , <span class="string">&quot;event_sub_type&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    , &#123; <span class="string">&quot;$group&quot;</span>: &#123; <span class="string">&quot;_id&quot;</span>: &#123; <span class="string">&quot;event_id&quot;</span>: <span class="string">&quot;$event_id&quot;</span>, <span class="string">&quot;event_sub_type&quot;</span>: <span class="string">&quot;$event_sub_type&quot;</span> &#125;, <span class="string">&quot;total&quot;</span>: &#123; <span class="string">&quot;$sum&quot;</span>: <span class="string">&quot;$num&quot;</span> &#125;, <span class="attr">sub</span>: &#123; <span class="attr">$push</span>: <span class="string">&quot;$$ROOT&quot;</span> &#125; &#125; &#125;</span><br><span class="line">    , &#123; <span class="string">&quot;$group&quot;</span>: &#123; <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;$_id.event_sub_type&quot;</span>, <span class="attr">sub</span>: &#123; <span class="attr">$push</span>: <span class="string">&quot;$$ROOT&quot;</span> &#125;,<span class="attr">total</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$$ROOT.total&quot;</span> &#125; &#125; &#125;</span><br><span class="line">  --因为$addFields在mongotemplate找不到对应的语句，所以用上面的$group替代</span><br><span class="line"><span class="comment">//    ,&#123;&quot;$project&quot;: &#123;&quot;_id&quot;:1,&quot;sub&quot;:1, total: &#123; $sum: &quot;$sub.total&quot; &#125;&#125;&#125;</span></span><br><span class="line"><span class="comment">//    , &#123;</span></span><br><span class="line"><span class="comment">//        $addFields:</span></span><br><span class="line"><span class="comment">//            &#123;</span></span><br><span class="line"><span class="comment">//                total: &#123; $sum: &quot;$books.total&quot; &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>DB-MongoDB-Summary</title>
    <url>/2019/01/25/db-mongodb-summary/</url>
    <content><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><a href="https://imgtu.com/i/62oUdf"><img src="https://s3.ax1x.com/2021/03/18/62oUdf.png" alt="62oUdf.png"></a></p>
<h4 id="分片-shard"><a href="#分片-shard" class="headerlink" title="分片(shard)"></a>分片(shard)</h4><p>分片是存储了一个集合部分数据的MongoDB实例,每个分片 可以是一台服务器运行单独一个Mongod实例，但是为了提高系统的可靠性实现自动故障恢复，一个分片应该是一个复制集。    通过分片，我们将一个集合拆分为多个数据块，这些数据块分别部署在不同的机器上，这样可以做到增加单台机器的磁盘可用空间，同时将查询分配到不同的机器上，减轻单台机器的负载。</p>
<h4 id="路由-Router-mongos"><a href="#路由-Router-mongos" class="headerlink" title="路由(Router/mongos)"></a>路由(Router/mongos)</h4><p>mongos是一个前置路由，我们的应用客户端并不是直接与分片连接，而是与mongos路由连接，mongos接收到客户端请求后根据查询信息将请求任务分发到对应的分片，在正式生产环境中，为确保高可用性，一般会配置两台以上的mongos路由，以确保当其中一台宕机后集群还能保持高可用。</p>
<h4 id="配置-config"><a href="#配置-config" class="headerlink" title="配置(config)"></a>配置(config)</h4><p>配置服务器相当于集群的大脑，它存储了集群元信息:集群中有哪些分片、分片的是哪些集合以及数据块的分布集群启动后，当接收到请求时，如果mongos路由没有缓存配置服务器的元信息，会先从配置服务器获取分片集群对于的映射信息。同样的，为了保持集群的高可用，一般会配置多台配置服务器。</p>
<h2 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod</span><br><span class="line">--dbpath 数据库路径(数据文件)</span><br><span class="line">--logpath 日志文件路径</span><br><span class="line">--master 指定为主机器</span><br><span class="line">--slave 指定为从机器</span><br><span class="line">--<span class="built_in">source</span> 指定主机器的IP地址</span><br><span class="line">--pologSize 指定日志文件大小不超过64M.因为resync是非常操作量大且耗时，最好通过设置一个足够大的oplogSize来避免resync(默认的 oplog大小是空闲磁盘大小的5%)。</span><br><span class="line">--logappend 日志文件末尾添加</span><br><span class="line">--port 启用端口号</span><br><span class="line">--fork 在后台运行</span><br><span class="line">--only 指定只复制哪一个数据库</span><br><span class="line">--slavedelay 指从复制检测的时间间隔</span><br><span class="line">--auth 是否需要验证权限登录(用户名和密码)</span><br><span class="line">--shardsvr 此实例为shard（分片），默认侦听27018端口</span><br><span class="line">--configsvr 此实例为config server，默认侦听27019端口</span><br></pre></td></tr></table></figure>

<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p><code>mongod</code> 核心数据库进程</p>
<p><code>mongos</code> 分片群集的控制器和查询路由器</p>
<p><code>mongo</code> 交互式的MongoDB Shell</p>
<h3 id="mongo命令行"><a href="#mongo命令行" class="headerlink" title="mongo命令行"></a>mongo命令行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动分片服务--shardsvr指定实例为分片，默认端口为27018</span></span><br><span class="line">mongod --shardsvr --directoryperdb --replSet shard1</span><br><span class="line"><span class="comment">#进入分片服务命令行</span></span><br><span class="line">mongo --port 27018</span><br><span class="line"><span class="comment">#启动配置服务--configsvr指定实例为配置，默认端口为27019</span></span><br><span class="line">mongod --configsvr --directoryperdb --replSet config --smallfiles</span><br><span class="line"><span class="comment">#进入配置服务命令行</span></span><br><span class="line">mongo --port 27019</span><br><span class="line"><span class="comment">#查看集群状态</span></span><br><span class="line">mongos&gt; sh.status()</span><br></pre></td></tr></table></figure>

<h3 id="docker集群搭建mongo分片服务"><a href="#docker集群搭建mongo分片服务" class="headerlink" title="docker集群搭建mongo分片服务"></a>docker集群搭建mongo分片服务</h3><p>服务架构：</p>
<p>服务器两台组成docker swarm</p>
<p>由</p>
<ul>
<li>mongo-server1-shard1:27018(内|shard1主)</li>
<li>mongo-server1-shard2:27018(内|shard2主)</li>
<li>mongo-server2-shard1:27018(内|shard1从)</li>
<li>mongo-server2-shard2:27018(内|shard2从)</li>
<li>mongo-config1:27019(内|主)</li>
<li>mongo-config2:27019(内|从)</li>
<li>mongo-router:27017(外|每个节点一个)</li>
</ul>
<p>8个服务组成</p>
<h4 id="搭建步骤（有顺序）"><a href="#搭建步骤（有顺序）" class="headerlink" title="搭建步骤（有顺序）"></a>搭建步骤（有顺序）</h4><ol>
<li><p>创建服务脚本并启动</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mongo-server1-shard1:</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">   <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">   <span class="attr">command:</span> <span class="string">mongod</span> <span class="string">--shardsvr</span> <span class="string">--directoryperdb</span> <span class="string">--replSet</span> <span class="string">shard1</span></span><br><span class="line"> <span class="comment">#  ports:</span></span><br><span class="line"> <span class="comment">#    - 14017:27017</span></span><br><span class="line"> <span class="comment">#  environment:</span></span><br><span class="line"> <span class="comment">#    MONGO_INITDB_ROOT_USERNAME: root</span></span><br><span class="line"> <span class="comment">#    MONGO_INITDB_ROOT_PASSWORD: example</span></span><br><span class="line">   <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mongo/shard1/configdb:/data/configdb</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mongo/shard1/db:/data/db</span>    </span><br><span class="line">   <span class="attr">deploy:</span></span><br><span class="line">     <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">     <span class="attr">restart_policy:</span></span><br><span class="line">       <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">     <span class="attr">placement:</span></span><br><span class="line">       <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">VM_16_8_centos</span>]</span><br><span class="line"> <span class="attr">mongo-server1-shard2:</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">   <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">   <span class="attr">command:</span> <span class="string">mongod</span> <span class="string">--shardsvr</span> <span class="string">--directoryperdb</span> <span class="string">--replSet</span> <span class="string">shard2</span></span><br><span class="line">   <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mongo/shard2/configdb:/data/configdb</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mongo/shard2/db:/data/db</span>  </span><br><span class="line">   <span class="attr">deploy:</span></span><br><span class="line">     <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">     <span class="attr">restart_policy:</span></span><br><span class="line">       <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">     <span class="attr">placement:</span></span><br><span class="line">       <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">VM_16_8_centos</span>]         </span><br><span class="line"> <span class="attr">mongo-server2-shard1:</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">   <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">   <span class="attr">command:</span> <span class="string">mongod</span> <span class="string">--shardsvr</span> <span class="string">--directoryperdb</span> <span class="string">--replSet</span> <span class="string">shard1</span></span><br><span class="line">   <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mongo/shard1/configdb:/data/configdb</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mongo/shard1/db:/data/db</span>  </span><br><span class="line">   <span class="attr">deploy:</span></span><br><span class="line">     <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">     <span class="attr">restart_policy:</span></span><br><span class="line">       <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">     <span class="attr">placement:</span></span><br><span class="line">       <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">VM_16_13_centos</span>] </span><br><span class="line"> <span class="attr">mongo-server2-shard2:</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">   <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">   <span class="attr">command:</span> <span class="string">mongod</span> <span class="string">--shardsvr</span> <span class="string">--directoryperdb</span> <span class="string">--replSet</span> <span class="string">shard2</span></span><br><span class="line">   <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mongo/shard2/configdb:/data/configdb</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mongo/shard2/db:/data/db</span>  </span><br><span class="line">   <span class="attr">deploy:</span></span><br><span class="line">     <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">     <span class="attr">restart_policy:</span></span><br><span class="line">       <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">     <span class="attr">placement:</span></span><br><span class="line">       <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">VM_16_13_centos</span>]         </span><br><span class="line"> <span class="attr">mongo-config1:</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">   <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">   <span class="attr">command:</span> <span class="string">mongod</span> <span class="string">--configsvr</span> <span class="string">--replSet</span> <span class="string">replConfig</span> <span class="string">--directoryperdb</span> <span class="string">--smallfiles</span></span><br><span class="line">   <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mongo/config1/configdb:/data/configdb</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mongo/config1/db:/data/db</span>  </span><br><span class="line">   <span class="attr">deploy:</span></span><br><span class="line">     <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">     <span class="attr">restart_policy:</span></span><br><span class="line">       <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">     <span class="attr">placement:</span></span><br><span class="line">       <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">VM_16_8_centos</span>]   </span><br><span class="line"> <span class="attr">mongo-config2:</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">   <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">   <span class="attr">command:</span> <span class="string">mongod</span> <span class="string">--configsvr</span> <span class="string">--replSet</span> <span class="string">replConfig</span> <span class="string">--directoryperdb</span> <span class="string">--smallfiles</span></span><br><span class="line">   <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mongo/config2/configdb:/data/configdb</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mongo/config2/db:/data/db</span>  </span><br><span class="line">   <span class="attr">deploy:</span></span><br><span class="line">     <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">     <span class="attr">restart_policy:</span></span><br><span class="line">       <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">     <span class="attr">placement:</span></span><br><span class="line">       <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">VM_16_13_centos</span>]           </span><br><span class="line"> <span class="attr">mongo-router:</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">   <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">   <span class="attr">command:</span> <span class="string">mongos</span> <span class="string">--configdb</span> <span class="string">replConfig/mongo-config1:27019,mongo-config2:27019</span> <span class="string">--bind_ip</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="string">--port</span> <span class="number">27017</span></span><br><span class="line">   <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="number">14017</span><span class="string">:27017</span></span><br><span class="line">   <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mongo/router/configdb:/data/configdb</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mongo/router/db:/data/db</span>        </span><br><span class="line">   <span class="attr">depends_on:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">mongo-config1</span>  </span><br><span class="line">   <span class="attr">deploy:</span></span><br><span class="line">     <span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line">   <span class="comment">#  replicas: 1</span></span><br><span class="line">     <span class="attr">restart_policy:</span></span><br><span class="line">       <span class="attr">condition:</span> <span class="string">on-failure</span></span><br></pre></td></tr></table></figure>

<h4 id="初始化（添加）配置服务器"><a href="#初始化（添加）配置服务器" class="headerlink" title="初始化（添加）配置服务器"></a>初始化（添加）配置服务器</h4></li>
<li><p>编写初始化脚本，首先初始化config配置服务,这里只需要初始化一个<code>mongo-config1</code>服务另一个会自动初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it $(docker ps | grep <span class="string">&quot;mongo-config1&quot;</span> | awk <span class="string">&#x27;&#123; print $1 &#125;&#x27;</span>) bash -c <span class="string">&quot;echo &#x27;rs.initiate(&#123;_id: \&quot;replConfig\&quot;,configsvr: true, members: [&#123; _id : 0, host : \&quot;mongo-config1:27019\&quot; &#125;,&#123; _id : 1, host : \&quot;mongo-config2:27019\&quot; &#125;, ]&#125;)&#x27; | mongo --port 27019&quot;</span></span><br><span class="line"><span class="comment">#--------------------------等效于以下命令----------------------------</span></span><br><span class="line"><span class="comment">#查看容器id</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment">#进入mongo-config1容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;mongo-config1容器id&gt; bash</span><br><span class="line"><span class="comment">#进入容器后，连接mongo</span></span><br><span class="line">mongo --port 27019</span><br><span class="line"><span class="comment">#然后执行mongo初始化命令</span></span><br><span class="line">rs.initiate(</span><br><span class="line">  &#123;</span><br><span class="line">    _id: <span class="string">&quot;replConfig&quot;</span>,</span><br><span class="line">    configsvr: <span class="literal">true</span>,</span><br><span class="line">    members: [</span><br><span class="line">      &#123; _id : 0, host : <span class="string">&quot;mongo-config1:27019&quot;</span> &#125;,</span><br><span class="line">      &#123; _id : 1, host : <span class="string">&quot;mongo-config2:27019&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 校验可以进入容器</span></span><br><span class="line">mongo --port 27019</span><br><span class="line"><span class="comment"># 可以看到两个容器前面分别是</span></span><br><span class="line">replConfig:PRIMARY&gt;</span><br><span class="line">replConfig:SECONDARY&gt;</span><br><span class="line"><span class="comment"># 也可以通过这个命令查看</span></span><br><span class="line">rs.conf()</span><br></pre></td></tr></table></figure>

<p>其他常用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看config配置</span><br><span class="line">rs.conf()</span><br><span class="line">#重置config配置，执行失败需要升级啥的看，代理方式删除挂载卷</span><br><span class="line">rs.reconfig()</span><br></pre></td></tr></table></figure>
</li>
<li><p>校验检查<code>mongo-router</code>服务是否连接成功,可以查看<code>Cannot reach any nodes for set replConfig</code>这个日志是否停止，或者进入容器执行<code>mongo</code>校验，如果2没有初始化成功，执行<code>mongo</code>会报错，成功会进入<code>mongos&gt;</code>命令行</p>
<h4 id="初始化（添加）分片服务器"><a href="#初始化（添加）分片服务器" class="headerlink" title="初始化（添加）分片服务器"></a>初始化（添加）分片服务器</h4></li>
<li><p>初始化<code>shard</code>服务，还是两种方式，一是脚本，二是手动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#初始化shard1</span></span><br><span class="line">docker <span class="built_in">exec</span> -it $(docker ps | grep <span class="string">&quot;shard1&quot;</span> | awk <span class="string">&#x27;&#123; print $1 &#125;&#x27;</span>) bash -c <span class="string">&quot;echo &#x27;rs.initiate(&#123;_id : \&quot;shard1\&quot;, members: [&#123; _id : 0, host : \&quot;mongo-server1-shard1:27018\&quot; &#125;,&#123; _id : 1, host : \&quot;mongo-server2-shard1:27018\&quot; &#125;]&#125;)&#x27; | mongo --port 27018&quot;</span></span><br><span class="line"><span class="comment">#初始化shard2</span></span><br><span class="line">docker <span class="built_in">exec</span> -it $(docker ps | grep <span class="string">&quot;shard2&quot;</span> | awk <span class="string">&#x27;&#123; print $1 &#125;&#x27;</span>) bash -c <span class="string">&quot;echo &#x27;rs.initiate(&#123;_id : \&quot;shard2\&quot;, members: [&#123; _id : 0, host : \&quot;mongo-server1-shard2:27018\&quot; &#125;,&#123; _id : 1, host : \&quot;mongo-server2-shard2:27018\&quot; &#125;]&#125;)&#x27; | mongo --port 27018&quot;</span></span><br><span class="line"><span class="comment">#--------------等效于以下命令--------------------------------</span></span><br><span class="line"><span class="comment">#进入容器省略</span></span><br><span class="line"><span class="comment">#进入mongo-server1-shard1</span></span><br><span class="line">mongo --port 27018</span><br><span class="line">rs.initiate(</span><br><span class="line">  &#123;</span><br><span class="line">    _id : <span class="string">&quot;shard1&quot;</span>,</span><br><span class="line">    members: [</span><br><span class="line">      &#123; _id : 0, host : <span class="string">&quot;mongo-server1-shard1:27018&quot;</span> &#125;,</span><br><span class="line">      &#123; _id : 1, host : <span class="string">&quot;mongo-server2-shard1:27018&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入mongo-server1-shard2</span></span><br><span class="line">mongo --port 27018</span><br><span class="line">rs.initiate(</span><br><span class="line">  &#123;</span><br><span class="line">    _id : <span class="string">&quot;shard2&quot;</span>,</span><br><span class="line">    members: [</span><br><span class="line">      &#123; _id : 0, host : <span class="string">&quot;mongo-server1-shard2:27018&quot;</span> &#125;,</span><br><span class="line">      &#123; _id : 1, host : <span class="string">&quot;mongo-server2-shard2:27018&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">#额外-----------------------</span></span><br><span class="line">//添加额外分片</span><br><span class="line">rs.add( &#123; host: <span class="string">&quot;mongodb3.example.net:27017&quot;</span>, priority: 0, votes: 0 &#125; )</span><br><span class="line">//添加仲裁</span><br><span class="line">rs.addArb(<span class="string">&quot;shard34:27018&quot;</span>);</span><br><span class="line">//移除节点</span><br><span class="line">rs.remove(<span class="string">&quot;shard34:27018&quot;</span>);</span><br><span class="line">//设置从分片可读</span><br><span class="line">db.getMongo().setSlaveOk();</span><br></pre></td></tr></table></figure>

<h4 id="添加分片集群到mongos中"><a href="#添加分片集群到mongos中" class="headerlink" title="添加分片集群到mongos中"></a>添加分片集群到<code>mongos</code>中</h4></li>
<li><p>添加分片集群到<code>mogons</code>,只用添加一个即可<code>mongo-router</code>，另一个自动就有了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加shard1分片集群到mogons</span></span><br><span class="line">docker <span class="built_in">exec</span> -it $(docker ps | grep <span class="string">&quot;mongo-router&quot;</span> | awk <span class="string">&#x27;&#123; print $1 &#125;&#x27;</span>) bash -c <span class="string">&quot;echo &#x27;sh.addShard(\&quot;shard1/mongo-server1-shard1:27018,mongo-server2-shard1:27018\&quot;)&#x27; | mongo &quot;</span></span><br><span class="line"><span class="comment">#添加shard1分片集群到mogons</span></span><br><span class="line">docker <span class="built_in">exec</span> -it $(docker ps | grep <span class="string">&quot;mongo-router&quot;</span> | awk <span class="string">&#x27;&#123; print $1 &#125;&#x27;</span>) bash -c <span class="string">&quot;echo &#x27;sh.addShard(\&quot;shard2/mongo-server1-shard2:27018,mongo-server2-shard2:27018\&quot;)&#x27; | mongo &quot;</span></span><br><span class="line"><span class="comment">###---------------------等效于以下命令-----</span></span><br><span class="line">mongo</span><br><span class="line">sh.addShard(<span class="string">&quot;shard1/shard11:27018,shard12:27018,shard13:27018&quot;</span>)</span><br><span class="line">sh.addShard(<span class="string">&quot;shard2/shard21:27018,shard22:27018,shard23:27018&quot;</span>)</span><br><span class="line">sh.addShard(<span class="string">&quot;shard3/shard31:27018,shard32:27018,shard33:27018&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看片的状态<code>sh.status()</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">sharding version: &#123;</span><br><span class="line">       &quot;_id&quot; : 1,</span><br><span class="line">       &quot;minCompatibleVersion&quot; : 5,</span><br><span class="line">       &quot;currentVersion&quot; : 6,</span><br><span class="line">       &quot;clusterId&quot; : ObjectId(&quot;5c4b110ca28b26d76cfee0e3&quot;)</span><br><span class="line"> &#125;</span><br><span class="line"> shards:</span><br><span class="line">       &#123;  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;shard1&quot;</span>,  <span class="attr">&quot;host&quot;</span> : <span class="string">&quot;shard1/mongo-server1-shard1:27018,mongo-server2-shard1:27018&quot;</span>,  <span class="attr">&quot;state&quot;</span> : <span class="number">1</span> &#125;</span><br><span class="line">       &#123;  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;shard2&quot;</span>,  <span class="attr">&quot;host&quot;</span> : <span class="string">&quot;shard2/mongo-server1-shard2:27018,mongo-server2-shard2:27018&quot;</span>,  <span class="attr">&quot;state&quot;</span> : <span class="number">1</span> &#125;</span><br><span class="line"> active mongoses:</span><br><span class="line">       &quot;4.0.5&quot; : 2</span><br><span class="line"> autosplit:</span><br><span class="line">       Currently enabled: yes</span><br><span class="line"> balancer:</span><br><span class="line">       Currently enabled:  yes</span><br><span class="line">       Currently running:  no</span><br><span class="line">       Failed balancer rounds in last 5 attempts:  0</span><br><span class="line">       Migration Results for the last 24 hours:</span><br><span class="line">               No recent migrations</span><br><span class="line"> databases:</span><br><span class="line">       &#123;  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;config&quot;</span>,  <span class="attr">&quot;primary&quot;</span> : <span class="string">&quot;config&quot;</span>,  <span class="attr">&quot;partitioned&quot;</span> : <span class="literal">true</span> &#125;</span><br><span class="line">               config.system.sessions</span><br><span class="line">                       shard key: &#123; &quot;_id&quot; : 1 &#125;</span><br><span class="line">                       unique: false</span><br><span class="line">                       balancing: true</span><br><span class="line">                       chunks:</span><br><span class="line">                               shard1  1</span><br><span class="line">                       &#123; &quot;_id&quot; : &#123; &quot;$minKey&quot; : 1 &#125; &#125; --&gt;&gt; &#123; &quot;_id&quot; : &#123; &quot;$maxKey&quot; : 1 &#125; &#125; on : shard1 Timestamp(1, 0)</span><br></pre></td></tr></table></figure>

<h4 id="使能分片数据库"><a href="#使能分片数据库" class="headerlink" title="使能分片数据库"></a>使能分片数据库</h4></li>
<li><p><code>sh.enableSharding(&quot;&lt;database&gt;&quot;)</code>仅仅只是标记数据库使能分片</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mongos&gt; sh.enableSharding(&quot;test&quot;)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;ok&quot;</span> : <span class="number">1</span>,</span><br><span class="line">	&quot;operationTime&quot; : Timestamp(1563271100, 3),</span><br><span class="line">	&quot;$clusterTime&quot; : &#123;</span><br><span class="line">		&quot;clusterTime&quot; : Timestamp(1563271100, 3),</span><br><span class="line">		&quot;signature&quot; : &#123;</span><br><span class="line">			&quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;),</span><br><span class="line">			&quot;keyId&quot; : NumberLong(0)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>err:<code>sun.reflect.GeneratedMethodAccessor109.invoke(Unknown Source)</code></p>
</li>
<li><p><code>sh.shardCollection(&quot;&lt;database&gt;.&lt;table&gt;&quot;,&#123;_id:1&#125;)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.table1.stats();</span><br><span class="line">&#123; </span><br><span class="line">    &quot;sharded&quot; : true, </span><br><span class="line">    &quot;shards&quot; : &#123; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>


</li>
<li><p>在<code>admin</code>执行<code>db.runCommand(&#123;&quot;shardcollection&quot;:&quot;app_test.MusicList&quot;,&quot;key&quot;:&#123;&quot;seat&quot;:1&#125;&#125;)</code></p>
</li>
<li><p>在<code>app_test</code>执行<code>db.MusicList.ensureIndex(&#123;&quot;seat&quot;:1&#125;,&#123;background: 1&#125;)</code></p>
</li>
</ol>
<h2 id="集群分析"><a href="#集群分析" class="headerlink" title="集群分析"></a>集群分析</h2><table>
<thead>
<tr>
<th>模式：主+备+备+仲+仲（主备不区分）</th>
<th>宕机设备</th>
<th>mongo可读写</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>主+备+仲+仲</td>
<td>-备</td>
<td>可用</td>
<td>选举时间3～4秒(偶尔发生)</td>
</tr>
<tr>
<td>主+仲+仲</td>
<td>-备-备</td>
<td>可用</td>
<td>选举&lt;1秒，且最后一个节点为主</td>
</tr>
<tr>
<td>主+仲</td>
<td>-备-备-仲</td>
<td>不可用</td>
<td>最后一个主降级为从</td>
</tr>
<tr>
<td>主+备+仲</td>
<td>-备-仲</td>
<td>可用</td>
<td></td>
</tr>
<tr>
<td>主+备</td>
<td>-备-仲-仲</td>
<td>不可用</td>
<td>无主</td>
</tr>
<tr>
<td>主+备+备</td>
<td>-仲-仲</td>
<td>可用</td>
<td></td>
</tr>
</tbody></table>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol>
<li><p>3节点(1注+2副本)可宕机一台，5节点模式（1主+2副本+2仲裁）可宕机2台</p>
</li>
<li><p>仲裁节点：等效于副本，参与选举，但是不能成为主节点，不存储数据</p>
</li>
<li><p>节点主副本其实是不区分的，启动时随机选一个做主节点，当发现宕机是会选举一个新的主节点，当宕机过多，不足以达到高可用，主节点会自动降级，当前主从副本就不会出现主节点，mongo存储数据就会提示错误，没有主节点</p>
</li>
<li><p>路由节点可以不用见主从</p>
</li>
<li><p>配置节点主从可以全部宕机也能正常写数据，但是数据不会自动分片，以及不能进行分片等设置查询操作，涉及配置操作都会失败</p>
</li>
<li><p>数据迁移(Sharded Cluster Balancer)，当一个分片数据过多时，会发生数据平衡，让每个分片数据相差不大</p>
</li>
<li><p>数据回滚，当一个节点宕机，会通过oplog进行节点数据恢复，当数据大于oplog文件设置的大小（没设置是按磁盘的%比设置的）时，数据会被覆盖，4以前的版本，如果数据30分钟内没回滚完（未测），也会终止不会回滚，并提示错误，具体参考<a href="https://www.cnblogs.com/wilber2013/p/4154406.html">MongoDB副本集的工作原理</a></p>
</li>
<li><p>读写默认通过主节点，副本节点读数据需要设置副本可读</p>
</li>
<li><p>分片的设置，需要先使能库设置分片库，然后再设置分片表，删了表需要重新使能分片表</p>
</li>
<li><p>当数据达到一定大小才会开始分片(60M?)</p>
</li>
<li><p>db.stats()默认byte，可以用参数db.stats(1024*1024)转换为mb</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;db&quot;</span> : <span class="string">&quot;xxx&quot;</span>,   <span class="comment">//当前数据库</span></span><br><span class="line">    <span class="attr">&quot;collections&quot;</span> : <span class="number">27</span>,  <span class="comment">//当前数据库多少表 </span></span><br><span class="line">    <span class="attr">&quot;objects&quot;</span> : <span class="number">18738550</span>,  <span class="comment">//当前数据库所有表多少条数据</span></span><br><span class="line">    <span class="attr">&quot;avgObjSize&quot;</span> : <span class="number">1153.54876188392</span>, <span class="comment">//每条数据的平均大小 byte</span></span><br><span class="line">    <span class="attr">&quot;dataSize&quot;</span> : <span class="number">21615831152.0</span>,  <span class="comment">//所有数据的总大小</span></span><br><span class="line">    <span class="attr">&quot;storageSize&quot;</span> : <span class="number">23223312272.0</span>,  <span class="comment">//所有数据占的磁盘大小 </span></span><br><span class="line">    <span class="attr">&quot;numExtents&quot;</span> : <span class="number">121</span>,</span><br><span class="line">    <span class="attr">&quot;indexes&quot;</span> : <span class="number">26</span>,   <span class="comment">//索引数 </span></span><br><span class="line">    <span class="attr">&quot;indexSize&quot;</span> : <span class="number">821082976</span>,  <span class="comment">//索引大小 </span></span><br><span class="line">    <span class="attr">&quot;fileSize&quot;</span> : <span class="number">25691160576.0</span>,  <span class="comment">//预分配给数据库的文件大小</span></span><br><span class="line">    <span class="attr">&quot;nsSizeMB&quot;</span> : <span class="number">16</span>,</span><br><span class="line">    <span class="attr">&quot;dataFileVersion&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;major&quot;</span> : <span class="number">4</span>,</span><br><span class="line">        <span class="attr">&quot;minor&quot;</span> : <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;extentFreeList&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;num&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;totalSize&quot;</span> : <span class="number">65536</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;ok&quot;</span> : <span class="number">1.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.im/post/5c3d59aef265da613a543dbc">docker-swarm部署mongo分片集群</a></p>
<p><a href="https://docs.mongodb.com/manual/tutorial/deploy-shard-cluster/">Deploy a Sharded Cluster</a></p>
<p><a href="https://www.mtyun.com/library/MongoDB-shard-cluster">MongoDB搭建分片集群</a></p>
<p><a href="https://www.cnblogs.com/wilber2013/p/4154406.html">MongoDB副本集的工作原理</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库MySQL之查询</title>
    <url>/2017/06/27/db-mysql-select/</url>
    <content><![CDATA[<h2 id="查询（SELECT）"><a href="#查询（SELECT）" class="headerlink" title="查询（SELECT）"></a>查询（SELECT）</h2><h6 id="查询employee-id为1，2，3的结果"><a href="#查询employee-id为1，2，3的结果" class="headerlink" title="查询employee_id为1，2，3的结果"></a>查询employee_id为1，2，3的结果</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#多条件查询</span><br><span class="line">SELECT * FROM employee WHERE employee.employee_id &#x3D;1 OR employee.employee_id&#x3D;2 OR employee.employee_id&#x3D;3</span><br><span class="line">#范围（1~3）查询</span><br><span class="line">SELECT * FROM employee WHERE employee.employee_id BETWEEN 1 and 3</span><br><span class="line">#半开范围查询</span><br><span class="line">SELECT * FROM employee WHERE employee.employee_id&lt;&#x3D;3</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>DB-MySQL-Summary</title>
    <url>/2018/04/05/db-mysql-summary/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#连接mysql</span><br><span class="line">mysql -u root -p</span><br><span class="line">show status like &#39;Threads%&#39;;</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Threads_cached    | 8     | #连接缓存数</span><br><span class="line">| Threads_connected | 81    | #打开的连接数,如果该连接数大于max_connections当前最大连接数会报错</span><br><span class="line">| Threads_created   | 181   | #创建过的线程数</span><br><span class="line">| Threads_running   | 1     | #正在运行的连接数</span><br><span class="line">+-------------------+-------+</span><br><span class="line">show variables like &#39;%max_connections%&#39;;</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| Variable_name   | Value |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| max_connections | 151   | #当前设置的最大连接数</span><br><span class="line">+-----------------+-------+</span><br><span class="line"> show processlist; #显示前100条的连接，如果显示所有show full processlist;</span><br><span class="line">+------+------+------------------+------+---------+------+----------+------------------+</span><br><span class="line">| Id   | User | Host             | db   | Command | Time | State    | Info             |</span><br><span class="line">+------+------+------------------+------+---------+------+----------+------------------+</span><br><span class="line">| 1100 | root | localhost        | NULL | Query   |    0 | starting | show processlist |</span><br><span class="line">| 1147 | root | 10.255.0.2:52580 | xhzg | Sleep   | 7226 |          | NULL             |</span><br><span class="line">+------+------+------------------+------+---------+------+----------+------------------+</span><br><span class="line"> </span><br></pre></td></tr></table></figure>





<p>mysql配置my.cnf，添加挂在卷<code>      - /dockerdata/manager/mysqldata/config:/etc/mysql/conf.d</code></p>
<p>然后在挂在卷创建配置文件，添加配置<code>my.cnf</code> 文件名字随便</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="meta">default-character-set</span>=<span class="string">utf8</span></span><br><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">skip-name-resolve</span></span><br><span class="line"><span class="comment">#设置3306端口</span></span><br><span class="line"><span class="attr">port</span> = <span class="string">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=<span class="string">/usr/local/mysql</span></span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=<span class="string">/usr/local/mysql/data</span></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="string">200</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"><span class="meta">character-set-server</span>=<span class="string">utf8</span></span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="meta">default-storage-engine</span>=<span class="string">INNODB</span></span><br><span class="line"><span class="attr">lower_case_table_names</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">max_allowed_packet</span>=<span class="string">16M</span></span><br><span class="line"><span class="attr">sql_mode</span>=<span class="string">ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span></span><br></pre></td></tr></table></figure>

<h2 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#备份数据库 manage geoserver两个</span></span><br><span class="line">mysqldump -uroot -plfadmin --databases manage geoserver &gt; ~/manageandgeoserver20180829.sql</span><br><span class="line"><span class="comment"># 恢复</span></span><br><span class="line">mysql -uroot -plfadmin &lt;manageandgeoserver20180829.sql</span><br><span class="line"><span class="comment"># 检查校验,进入mysql命令行</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment"># 显示所有数据库</span></span><br><span class="line">mysql&gt;  show databases;</span><br><span class="line"><span class="comment"># 使用 manage数据库</span></span><br><span class="line">mysql&gt; use manage;</span><br><span class="line"><span class="comment"># 显示所有用表</span></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line"><span class="comment">#远程连接</span></span><br><span class="line">mysql&gt;  mysql -h172.16.16.8 -P14036 -uroot -p</span><br></pre></td></tr></table></figure>

<p>参考 <a href="https://blog.csdn.net/helloxiaozhe/article/details/77680255">MySql数据库备份与恢复——使用mysqldump 导入与导出方法总结</a></p>
<h2 id="主从库"><a href="#主从库" class="headerlink" title="主从库"></a>主从库</h2><ol>
<li>修改主从配置库的配置文件</li>
</ol>
<p>主库配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line"><span class="meta">character-set-server</span>=<span class="string">utf8</span></span><br><span class="line"><span class="comment">#无效屏蔽</span></span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="comment">#datadir=/data/app/mysqldata/master/</span></span><br><span class="line"><span class="comment">#socket=/data/app/mysqldata/master/mysql.sock</span></span><br><span class="line"><span class="comment">#user=mysql</span></span><br><span class="line"><span class="comment">#port=3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line"><span class="meta">symbolic-links</span>=<span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log-bin</span>=<span class="string">mysql-bin</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">binlog-ignore-db</span>=<span class="string">information_schema</span></span><br><span class="line"><span class="meta">binlog-ignore-db</span>=<span class="string">mysql</span></span><br><span class="line"><span class="meta">binlog-do-db</span>=<span class="string">shenqics</span></span><br><span class="line"><span class="comment">#无效屏蔽</span></span><br><span class="line"><span class="comment">#[mysqld_safe]</span></span><br><span class="line"><span class="comment">#log-error=/data/app/mysqldata/master/mysqld.log</span></span><br><span class="line"><span class="comment">#pid-file=/data/app/mysqldata/master/mysqld.pid</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[client]</span></span><br><span class="line"><span class="meta">default-character-set</span>=<span class="string">utf8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[mysql]</span></span><br><span class="line"><span class="meta">default-character-set</span>=<span class="string">utf8</span></span><br></pre></td></tr></table></figure>

<p>从数据库配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line"><span class="meta">character-set-server</span>=<span class="string">utf8</span></span><br><span class="line"><span class="comment">#无效屏蔽</span></span><br><span class="line"><span class="comment">#datadir=/data/app/mysqldata/slave/</span></span><br><span class="line"><span class="comment">#socket=/data/app/mysqldata/slave/mysql.sock</span></span><br><span class="line"><span class="comment">#user=mysql</span></span><br><span class="line"><span class="comment">#port=3307</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line"><span class="meta">symbolic-links</span>=<span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log-bin</span>=<span class="string">mysql-bin</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">2</span></span><br><span class="line"><span class="meta">binlog-ignore-db</span>=<span class="string">information_schema</span></span><br><span class="line"><span class="meta">binlog-ignore-db</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment">#只会复制shenqics该数据库，其他不会</span></span><br><span class="line"><span class="meta">replicate-do-db</span>=<span class="string">shenqics</span></span><br><span class="line"><span class="meta">replicate-ignore-db</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">log-slave-updates</span></span><br><span class="line"><span class="meta">slave-skip-errors</span>=<span class="string">all</span></span><br><span class="line"><span class="meta">slave-net-timeout</span>=<span class="string">60</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#无效屏蔽</span></span><br><span class="line"><span class="comment">#[mysqld_safe]</span></span><br><span class="line"><span class="comment">#log-error=/data/app/mysqldata/slave/mysqld.log</span></span><br><span class="line"><span class="comment">#pid-file=/data/app/mysqldata/slave/mysqld.pid</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[client]</span></span><br><span class="line"><span class="meta">default-character-set</span>=<span class="string">utf8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[mysql]</span></span><br><span class="line"><span class="meta">default-character-set</span>=<span class="string">utf8</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>启动服务</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mysql-master:</span></span><br><span class="line">   <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">mysql:5.7.18</span></span><br><span class="line">   <span class="attr">environment:</span></span><br><span class="line">     <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">admin</span></span><br><span class="line">   <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mysql/master/data:/var/lib/mysql</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mysql/master/config:/etc/mysql/conf.d</span></span><br><span class="line">   <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">3306</span></span><br><span class="line">       <span class="attr">published:</span> <span class="number">14036</span></span><br><span class="line">       <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">       <span class="attr">mode:</span> <span class="string">host</span>   </span><br><span class="line">   <span class="attr">deploy:</span></span><br><span class="line">     <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">     <span class="attr">restart_policy:</span></span><br><span class="line">       <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">     <span class="attr">placement:</span></span><br><span class="line">       <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">VM_16_8_centos</span>]      </span><br><span class="line"> <span class="attr">mysql-slave:</span></span><br><span class="line">   <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">mysql:5.7.18</span></span><br><span class="line">   <span class="attr">environment:</span></span><br><span class="line">     <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">admin</span></span><br><span class="line">   <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mysql/slave/data:/var/lib/mysql</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/data/v-yinfu/mysql/slave/config:/etc/mysql/conf.d</span></span><br><span class="line">   <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">3306</span></span><br><span class="line">       <span class="attr">published:</span> <span class="number">14037</span></span><br><span class="line">       <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">       <span class="attr">mode:</span> <span class="string">host</span>   </span><br><span class="line">   <span class="attr">deploy:</span></span><br><span class="line">     <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">     <span class="attr">restart_policy:</span></span><br><span class="line">       <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">     <span class="attr">placement:</span></span><br><span class="line">       <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">VM_16_13_centos</span>]     </span><br></pre></td></tr></table></figure>
</li>
<li><p>授权</p>
<p>进入主库容器执行<code>mysql -uroot -p</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ip为从库ip，设置为只有从库可以访问</span><br><span class="line">GRANT REPLICATION SLAVE ON *.* TO &#39;app_sync&#39;@&#39;172.16.16.13&#39; IDENTIFIED BY &#39;password&#39;;</span><br><span class="line">GRANT ALL ON *.* TO &#39;app_root&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39;;</span><br><span class="line">GRANT SELECT ON *.* TO &#39;app_read&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后执行<code>show master status;</code></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">+------------------+----------+--------------+--------------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB         | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+--------------------------+-------------------+</span><br><span class="line">| mysql-bin<span class="variable">.000003</span> |     <span class="number">1164</span> | shenqics     | information_schema,mysql |                   |</span><br><span class="line">+------------------+----------+--------------+--------------------------+-------------------+</span><br><span class="line"><span class="number">1</span> row in set (<span class="number">0</span><span class="variable">.00</span> sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入从库容器执行<code>mysql -uroot -p</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">change master to master_host&#x3D;&#39;172.16.16.8&#39;,master_port&#x3D;14036,master_user&#x3D;&#39;app_sync&#39;,master_password&#x3D;&#39;password&#39;,master_log_file&#x3D;&#39;mysql-bin.000003&#39;, master_log_pos&#x3D;1164;</span><br><span class="line">start slave;</span><br><span class="line">show slave status;</span><br><span class="line">#授权</span><br><span class="line">GRANT SELECT ON *.* TO &#39;app_read&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行<code>show slave status\G;</code>检查是否这两个为yes</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Slave_IO_Running: Connecting</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新注册</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">change master to master_host&#x3D;&#39;172.16.16.8&#39;,master_port&#x3D;14036,master_user&#x3D;&#39;app_sync&#39;,master_password&#x3D;&#39;admin&#39;,master_log_file&#x3D;&#39;mysql-bin.000005&#39;, master_log_pos&#x3D;361;</span><br><span class="line">start slave;</span><br><span class="line">#清除log,执行start slave报错时</span><br><span class="line">reset slave;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>
</li>
<li><p>再次执行第6步检查</p>
</li>
</ol>
<h3 id="mysql创建用户命令详解"><a href="#mysql创建用户命令详解" class="headerlink" title="mysql创建用户命令详解"></a>mysql创建用户命令详解</h3><p>创建用户</p>
<p><code>GRANT 权限 ON 数据库.表名 TO &#39;用户&#39;@&#39;主机&#39; IDENTIFIED BY &#39;密码&#39; </code></p>
<ul>
<li>权限：all,select,等</li>
<li>主机：指定ip地址访问、localhost或127.0.0.1（本地访问）、%（任意主机均可访问）</li>
<li>密码：为空时则不需要密码</li>
</ul>
<p>eg: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT REPLICATION SLAVE ON *.* TO &#39;app_sync&#39;@&#39;172.16.16.13&#39; IDENTIFIED BY &#39;admin&#39;;</span><br><span class="line">#意思是创建一个专门的用户（app_sync）进行从库复制，复制任何库和任何表,密码是admin,可以访问的ip只有来源172.16.16.13（从库ip）</span><br></pre></td></tr></table></figure>

<p>删除用户<code>drop user test@&#39;172.16.16.13&#39;;</code></p>
<h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><ol>
<li><p><code>Too many connections</code>症状，不断重启运行springboot并访问，出现如下错误</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="number">2018</span>-<span class="number">04</span>-<span class="number">05</span> <span class="number">21</span>:<span class="number">48</span>:<span class="number">56</span><span class="variable">.824</span> ERROR <span class="number">6838</span> --- [           main] com<span class="variable">.xhzg</span><span class="variable">.xhzg</span><span class="variable">.XhzgApplicationTests</span>       : nested exception is org<span class="variable">.apache</span><span class="variable">.ibatis</span><span class="variable">.exceptions</span><span class="variable">.PersistenceException</span>: </span><br><span class="line">### Error querying database.  Cause: org<span class="variable">.springframework</span><span class="variable">.jdbc</span><span class="variable">.CannotGetJdbcConnectionException</span>: Failed to obtain JDBC Connection; nested exception is com<span class="variable">.mysql</span><span class="variable">.jdbc</span><span class="variable">.exceptions</span><span class="variable">.jdbc4</span><span class="variable">.MySQLNonTransientConnectionException</span>: Data source rejected establishment of connection,  message from server: <span class="string">&quot;Too many connections&quot;</span></span><br><span class="line">### The error may exist in com/xhzg/xhzg/mapper/UserMapper<span class="variable">.java</span> (best guess)</span><br><span class="line">### The error may involve com<span class="variable">.xhzg</span><span class="variable">.xhzg</span><span class="variable">.mapper</span><span class="variable">.UserMapper</span><span class="variable">.loadUserByUsername</span></span><br><span class="line">### The error occurred <span class="keyword">while</span> executing a query</span><br><span class="line">### Cause: org<span class="variable">.springframework</span><span class="variable">.jdbc</span><span class="variable">.CannotGetJdbcConnectionException</span>: Failed to obtain JDBC Connection; nested exception is com<span class="variable">.mysql</span><span class="variable">.jdbc</span><span class="variable">.exceptions</span><span class="variable">.jdbc4</span><span class="variable">.MySQLNonTransientConnectionException</span>: Data source rejected establishment of connection,  message from server: <span class="string">&quot;Too many connections&quot;</span></span><br></pre></td></tr></table></figure>

<p>解决：快速解决重启mysql释放<code>Threads_connected</code>连接数，或者等待一会儿，也会慢慢释放连接数,另一种更改<code>max_connections</code>最大连接数启动mysql添加参数<code>--ulimit nofile=65536:65536</code></p>
<p>参考：</p>
<p><a href="https://www.yanning.wang/archives/559.html">Docker容器中MySQL最大连接数被限制为214的解决方案</a></p>
<p>[<a href="https://stackoverflow.com/questions/39054410/increasing-mysql-max-connections-to-1024-in-a-docker-container">Increasing mysql max_connections to 1024 in a docker container</a>]</p>
</li>
<li><p>错误</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">[Err] 1055 - Expression #1 of ORDER BY clause is not in GROUP BY clause and contains nonaggregated column &#x27;information_schema.PROFILING.SEQ&#x27; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<p>删除配置文件<code>sql_mode=ONLY_FULL_GROUP_BY</code>这个属性值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;SELECT @@sql_mode;</span><br><span class="line">mysql&gt;SELECT @@GLOBAL.sql_mode;</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://www.zhihu.com/question/37942423">https://www.zhihu.com/question/37942423</a></p>
</li>
<li><p>navicat客户端，连接mysql 8.0以上报错,提示授权啥的错误</p>
</li>
<li><p>设置主从模式时，使用用户<code>&#39;app_sync&#39;@&#39;172.16.16.13&#39;</code>连接时提示，以及一直<code>Slave_IO_Running: Connecting</code></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">ERROR <span class="number">1045</span> (<span class="number">28000</span>): Access denied <span class="keyword">for</span> user &#x27;app_sync&#x27;@&#x27;<span class="number">10</span><span class="variable">.255</span><span class="variable">.0</span><span class="variable">.2</span>&#x27; (using password: YES)</span><br></pre></td></tr></table></figure>

<p>解决：部署时设置host模式</p>
<p>原因：非host模式连接时,访问客户端ip是内部ip不是host的ip</p>
</li>
<li><p>错误</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">java<span class="variable">.sql</span><span class="variable">.SQLException</span>: Incorrect <span class="keyword">string</span> value: &#x27;\xF0\x9F\x90\xB6&#x27; <span class="keyword">for</span> column &#x27;UserNickname&#x27; at row <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>解决：</p>
<ol>
<li><p>在mysql配置文件添加后，重启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set &#x3D; utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set &#x3D; utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-client-handshake &#x3D; FALSE</span><br><span class="line">character-set-server &#x3D; utf8mb4</span><br><span class="line">collation-server &#x3D; utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改数据表的编码</p>
<p><code>ALTER TABLE TABLE_NAME CONVERT TO CHARACTER SET utf8mb4;</code></p>
</li>
<li><p>修改数据库连接</p>
<p><code>jdbc:mysql://localhost:3306/&quot;+DATABASENAME+&quot;?useunicode=true&amp;characterEncoding=utf8</code></p>
<p>方式一：去掉参数<code>&amp;characterEncoding=utf8</code>和<code>useunicode=true</code></p>
<p>方式二(建议)：添加<code>autoReconnect=true</code></p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>DB-oracle-install</title>
    <url>/2018/04/20/db-oracle-install/</url>
    <content><![CDATA[<h2 id="Docker-安装-Oracle"><a href="#Docker-安装-Oracle" class="headerlink" title="Docker 安装 Oracle"></a>Docker 安装 Oracle</h2><p>镜像：<a href="https://hub.docker.com/r/sath89/oracle-12c/">sath89/oracle-12c</a></p>
<p>挂载需要修改权限</p>
<p><code>chown -R 1001:1001 /data/oracle</code></p>
<p>docker run -d –name oracle -p 8080:8080 -p 1521:1521  -e TZ=Asia/Shanghai sath89/oracle-12c</p>
<table>
<thead>
<tr>
<th>类别</th>
<th>host</th>
<th>container</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>port</td>
<td>1521</td>
<td>1521</td>
<td></td>
</tr>
<tr>
<td>port</td>
<td>8080</td>
<td>8080</td>
<td></td>
</tr>
<tr>
<td>volume</td>
<td>/dockerdata/manager/oracledata/initdb</td>
<td>/docker-entrypoint-initdb.d</td>
<td>初始化导入数据库用(非必需)</td>
</tr>
<tr>
<td>volume</td>
<td>/dockerdata/manager/oracledata/data</td>
<td>/u01/app/oracle</td>
<td></td>
</tr>
<tr>
<td>env</td>
<td>IMPORT_FROM_VOLUME</td>
<td>true</td>
<td>触发首次运行自动初始化数据(非必需)</td>
</tr>
</tbody></table>
<p>oracle初始用户</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">1521</span></span><br><span class="line"><span class="attr">sid:</span> <span class="string">xe</span></span><br><span class="line"><span class="attr">service name:</span> <span class="string">xe</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">system</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">oracle</span></span><br><span class="line"><span class="attr">user:</span> <span class="string">sys</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">oracle</span></span><br><span class="line"><span class="attr">connect as sysdba:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>运行完成后，注意这里第一次运行要初始化，注意看日志，等待它完成</p>
<p>到处dmp文件：<code>exp manager/manager buffer=64000 file=/test.dmp full=y</code></p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="修改数据库服务名xe为pdborcl"><a href="#修改数据库服务名xe为pdborcl" class="headerlink" title="修改数据库服务名xe为pdborcl"></a>修改数据库服务名<code>xe</code>为<code>pdborcl</code></h5><p>参考：<a href="https://www.jianshu.com/p/879e8085c012">Oracle 更改服务名方法</a></p>
<ol>
<li><p>进入容器内执行命令，连接Oracle，执行<code>sqlplus sys/oracle as sysdba</code> 进入oracle，其中sys为用户名，oracle为密码，sysdba作为系统dba登入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show parameter service_name #显示服务名</span><br><span class="line">alter system set service_names=&#x27;pdborcl&#x27; scope=both; #更改服务名为pdborcl</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加表空间<code>MANAGERDATASPACE</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>SPACE MANAGERDATASPACE</span><br><span class="line">LOGGING</span><br><span class="line">DATAFILE <span class="string">&#x27;/u01/app/oracle/oradata/xe/MANAGERDATASPACE.DBF&#x27;</span></span><br><span class="line">SIZE <span class="number">32</span>M</span><br><span class="line">AUTOEXTEND <span class="keyword">ON</span></span><br><span class="line">NEXT <span class="number">32</span>M MAXSIZE UNLIMITED</span><br><span class="line">EXTENT MANAGEMENT <span class="keyword">LOCAL</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务端更改完成，客户端的连接也要更改<code>listener.ora</code>文件，这里不记录</p>
</li>
</ol>
<h4 id="新建用户并导入dmp文件初始数据库"><a href="#新建用户并导入dmp文件初始数据库" class="headerlink" title="新建用户并导入dmp文件初始数据库"></a>新建用户并导入dmp文件初始数据库</h4><ol>
<li><p>通过plsql添加用户manage</p>
<p>在<code>user</code>右键new 新建用户，设置 default tablespace=users，temp tablespace=temp</p>
<p>role选项卡添加connect、dba、resource</p>
</li>
<li><p>ftp上传文件dmp备份文件到挂在目录<code>/dockerdata/manager/oracleinitdb/initdb</code></p>
</li>
<li><p>进入容器执行切换到<code>/docker-entrypoint-initdb.d</code>目录<code>imp manager/manager file=manager20180413am1052.dmp log=imp_sysdb.log grants=no full=y</code>导入恢复数据</p>
</li>
</ol>
<h4 id="数据库前的准备工作-创建数据库"><a href="#数据库前的准备工作-创建数据库" class="headerlink" title="数据库前的准备工作/创建数据库"></a>数据库前的准备工作/创建数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--创建表空间</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space SY_DB logging datafile <span class="string">&#x27;/u01/app/oracle/oradata/SY_DB.DBF&#x27;</span> size <span class="number">50</span>m autoextend <span class="keyword">on</span> next <span class="number">50</span>m maxsize <span class="number">20480</span>m extent management <span class="keyword">local</span>;</span><br><span class="line"><span class="comment">--创建用户</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> SY_DB identified <span class="keyword">by</span> &quot;SY_DB@2018&quot;   <span class="keyword">default</span> tablespace SY_DB  temporary tablespace TEMP  profile <span class="keyword">DEFAULT</span> password expire;</span><br><span class="line"><span class="comment">-- Grant/Revoke role privileges</span></span><br><span class="line"><span class="keyword">grant</span> dba <span class="keyword">to</span> SY_DB;</span><br><span class="line"><span class="comment">--给用户分配权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">any</span> <span class="keyword">table</span> <span class="keyword">to</span> SY_DB;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">any</span> <span class="keyword">view</span> <span class="keyword">to</span> SY_DB;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">user</span> <span class="keyword">to</span> SY_DB;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">drop</span> tablespace <span class="keyword">to</span> SY_DB;</span><br><span class="line"><span class="keyword">grant</span> unlimited tablespace <span class="keyword">to</span> SY_DB;</span><br><span class="line"><span class="comment">--查询用户密码有效期</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dba_profiles <span class="keyword">where</span> profile<span class="operator">=</span><span class="string">&#x27;DEFAULT&#x27;</span> <span class="keyword">and</span> resource_name<span class="operator">=</span><span class="string">&#x27;PASSWORD_LIFE_TIME&#x27;</span>;</span><br><span class="line"><span class="comment">--查询用户和密码</span></span><br><span class="line"><span class="keyword">select</span> username,password <span class="keyword">from</span> dba_users;</span><br><span class="line"><span class="comment">--修改用户密码（密码里面最好不要有@符号，不然执行导入命令时一直无权限）</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> SY_DB identified <span class="keyword">by</span> mimaoracle;</span><br><span class="line"><span class="comment">--去除用户密码有效期</span></span><br><span class="line"><span class="keyword">ALTER</span> PROFILE <span class="keyword">DEFAULT</span> LIMIT PASSWORD_LIFE_TIME UNLIMITED;</span><br><span class="line"><span class="comment">--创建虚拟目录存储导出文件</span></span><br><span class="line"><span class="keyword">create</span> directory db_bak <span class="keyword">as</span> <span class="string">&#x27;/docker-entrypoint-initdb.d&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="数据库导入导出-容器bash执行"><a href="#数据库导入导出-容器bash执行" class="headerlink" title="数据库导入导出(容器bash执行)"></a>数据库导入导出(容器bash执行)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--数据泵导入文件</span><br><span class="line">impdp SY_DB/mimaoracle DIRECTORY=db_bak  DUMPFILE=SY_DB20190829.DMP  SCHEMAS=SY_DB</span><br><span class="line">--数据泵导出文件</span><br><span class="line">expdp SY_DB/<span class="string">&quot;&quot;</span><span class="string">&quot;SY_DB@2018&quot;</span><span class="string">&quot;&quot;</span>@orcl DIRECTORY=db_bak  DUMPFILE=SY_DB20190829.DMP  SCHEMAS=SY_DB;</span><br></pre></td></tr></table></figure>

<h4 id="修改字符集"><a href="#修改字符集" class="headerlink" title="修改字符集"></a>修改字符集</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 进入sql命令行</span></span><br><span class="line">sqlplus sys<span class="operator">/</span>oracle <span class="keyword">as</span> sysdba</span><br><span class="line"><span class="comment">--若此时数据库服务器已启动，则先执行 SHUTDOWN IMMEDIATE 命令关闭数据库服务器，</span></span><br><span class="line">然后执行以下命令:</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span>shutdown immediate</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span>STARTUP MOUNT</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> ENABLE RESTRICTED SESSION;</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> JOB_QUEUE_PROCESSES<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> AQ_TM_PROCESSES<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span><span class="keyword">ALTER</span> DATABASE <span class="keyword">OPEN</span>;</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span><span class="keyword">ALTER</span> DATABASE <span class="type">CHARACTER</span> <span class="keyword">SET</span> ZHS16GBK;</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span><span class="keyword">ALTER</span> DATABASE <span class="type">CHARACTER</span> <span class="keyword">SET</span> INTERNAL_USE ZHS16GBK; </span><br><span class="line"><span class="comment">--执行错误,未解决该错误</span></span><br><span class="line"><span class="comment">--ERROR at line 1:</span></span><br><span class="line"><span class="comment">--ORA-12712: new character set must be a superset of old character set</span></span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span>SHUTDOWN IMMEDIATE</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span>STARTUP</span><br></pre></td></tr></table></figure>



<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol>
<li><p>导入表空间报错</p>
<p>解决将<code>manager20180413am1052.dmp</code>文件内容中的 <code>MANAGERDATASPACE</code>替换<code>USERS</code></p>
<p>待优化处理：？？？</p>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle常用sql总结</title>
    <url>/2019/10/23/db-oracle-sql/</url>
    <content><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="1-SUM-lt-需要求和的字段-字段必须是数字类型-gt-和count-lt-需要统计条数的字段-gt"><a href="#1-SUM-lt-需要求和的字段-字段必须是数字类型-gt-和count-lt-需要统计条数的字段-gt" class="headerlink" title="1. SUM(&lt;需要求和的字段,字段必须是数字类型&gt;)和count(&lt;需要统计条数的字段&gt;)"></a>1. <code>SUM(&lt;需要求和的字段,字段必须是数字类型&gt;)</code>和<code>count(&lt;需要统计条数的字段&gt;)</code></h4><p>sum注意区分count，一个是根据字段里面的值求和，一个是根据条数求数据总条数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 对所有用户的年龄进行累加求和</span></span><br><span class="line"><span class="keyword">select</span>  <span class="built_in">SUM</span>(u.AGE) <span class="keyword">from</span> t_user u ;</span><br></pre></td></tr></table></figure>

<h4 id="2-CASE-WHEN-lt-条件-gt-THEN-lt-满足条件的结果-gt-ELSE-lt-不满足条件的结果-gt-END"><a href="#2-CASE-WHEN-lt-条件-gt-THEN-lt-满足条件的结果-gt-ELSE-lt-不满足条件的结果-gt-END" class="headerlink" title="2. CASE WHEN &lt;条件&gt; THEN &lt;满足条件的结果&gt; ELSE &lt;不满足条件的结果&gt; END"></a>2. <code>CASE WHEN &lt;条件&gt; THEN &lt;满足条件的结果&gt; ELSE &lt;不满足条件的结果&gt; END</code></h4><p><code>CASE &lt;条件字段&gt; WHEN &lt;值1&gt; THEN &lt;满足条件=值1的结果&gt; WHEN &lt;值2&gt; THEN &lt;满足条件=值2的结果&gt;    ... ELSE &lt;不满足所有条件的结果&gt; END</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--eg:查询年龄大于18的flag输出成年人，否则未成年人</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> u.age<span class="operator">&gt;</span><span class="number">18</span> <span class="keyword">THEN</span> <span class="string">&#x27;成年人&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;未成年人&#x27;</span> <span class="keyword">END</span> <span class="keyword">as</span> flag <span class="keyword">from</span> t_user u;</span><br><span class="line"><span class="comment">--eg:多条件组合查询年龄大于18且是男的的flag输出男成年人，否则未成年人</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> u.age<span class="operator">&gt;</span><span class="number">18</span> <span class="keyword">and</span> u.sex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;男成年人&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;未成年人&#x27;</span> <span class="keyword">END</span> <span class="keyword">as</span> flag <span class="keyword">from</span> t_user u;</span><br><span class="line"><span class="comment">--按条件统计总数，sum是求和，输出只能是1 ELSE 0，因为要进行累加</span></span><br><span class="line"><span class="comment">--统计大于18的总人数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> u.age<span class="operator">&gt;</span><span class="number">18</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">as</span> total <span class="keyword">from</span> t_user u;</span><br><span class="line"><span class="comment">--多条件switch实现,将boy替换成男，girl替换成女，其他输出人妖</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">CASE</span> u.sex</span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;boy&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="string">&#x27;girl&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;女&#x27;</span></span><br><span class="line">    <span class="keyword">ELSE</span> <span class="string">&#x27;人妖&#x27;</span> <span class="keyword">END</span>  <span class="keyword">from</span> t_user u;</span><br></pre></td></tr></table></figure>

<h4 id="3-DECODE-lt-条件字段-gt-lt-值1-gt-lt-满足条件-值1的结果-gt-lt-值2-gt-lt-满足条件-值2的结果-gt-lt-都不满足-gt"><a href="#3-DECODE-lt-条件字段-gt-lt-值1-gt-lt-满足条件-值1的结果-gt-lt-值2-gt-lt-满足条件-值2的结果-gt-lt-都不满足-gt" class="headerlink" title="3. DECODE(&lt;条件字段&gt;,&lt;值1&gt;,&lt;满足条件=值1的结果&gt;,&lt;值2&gt;,&lt;满足条件=值2的结果&gt;,....,&lt;都不满足&gt;)"></a>3. <code>DECODE(&lt;条件字段&gt;,&lt;值1&gt;,&lt;满足条件=值1的结果&gt;,&lt;值2&gt;,&lt;满足条件=值2的结果&gt;,....,&lt;都不满足&gt;)</code></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--将boy替换成男，girl替换成女，其他输出人妖，等效于case when</span></span><br><span class="line"><span class="keyword">select</span> DECODE(u.SEX,<span class="string">&#x27;boy&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;girl&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;人妖&#x27;</span>) <span class="keyword">from</span> t_user u;</span><br></pre></td></tr></table></figure>

<h4 id="4-NVL-lt-需要判断的字段-gt-lt-如果判断的字段为null输出的结果-gt"><a href="#4-NVL-lt-需要判断的字段-gt-lt-如果判断的字段为null输出的结果-gt" class="headerlink" title="4. NVL(&lt;需要判断的字段&gt;,&lt;如果判断的字段为null输出的结果&gt;)"></a>4. <code>NVL(&lt;需要判断的字段&gt;,&lt;如果判断的字段为null输出的结果&gt;)</code></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--数据为null的会替换成人妖</span></span><br><span class="line"><span class="keyword">select</span> nvl(u.SEX,<span class="string">&#x27;人妖&#x27;</span>) <span class="keyword">from</span> t_user u;</span><br><span class="line"><span class="comment">--没有年龄的设置为0,方便统计空数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(nvl(u.age,<span class="number">0</span>)) <span class="keyword">from</span> t_user u;</span><br></pre></td></tr></table></figure>

<h4 id="5-group-by-lt-分组的字段1，字段2-gt-分组统计"><a href="#5-group-by-lt-分组的字段1，字段2-gt-分组统计" class="headerlink" title="5.  group by &lt;分组的字段1，字段2...&gt;分组统计"></a>5.  <code>group by &lt;分组的字段1，字段2...&gt;</code>分组统计</h4><p>select后面的字段=分组的字段+统计求和等字段，原理分组过后，查询不能查一个组有多个不同结果的字段，如果是相同的结果加入group by 字段1，字段2</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--按年龄分组统计各个年龄的总数</span></span><br><span class="line"><span class="keyword">select</span> u.AGE,<span class="built_in">count</span>(u.SEX) <span class="keyword">from</span> T_USER u <span class="keyword">group</span> <span class="keyword">by</span> u.AGE;</span><br><span class="line"><span class="comment">--按年龄性别进行分组统计,统计年龄相同且性别相同的个数</span></span><br><span class="line"><span class="keyword">select</span> u.AGE,u.SEX,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> T_USER u <span class="keyword">group</span> <span class="keyword">by</span> u.AGE,u.SEX</span><br></pre></td></tr></table></figure>

<h4 id="5-order-by-lt-排序字段-gt-lt-desc-asc-gt-asc升序，desc降序"><a href="#5-order-by-lt-排序字段-gt-lt-desc-asc-gt-asc升序，desc降序" class="headerlink" title="5. order by &lt;排序字段&gt; &lt;desc/asc&gt; asc升序，desc降序"></a>5. <code>order by &lt;排序字段&gt; &lt;desc/asc&gt;</code> asc升序，desc降序</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--按时间升序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>  T_USER <span class="keyword">order</span> <span class="keyword">by</span> &quot;creat_time&quot; <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>

<h4 id="6-to-char-sysdate-39-yyyy-MM-dd-39-格式化日期"><a href="#6-to-char-sysdate-39-yyyy-MM-dd-39-格式化日期" class="headerlink" title="6. to_char(sysdate, &#39;yyyy-MM-dd&#39;)格式化日期"></a>6. <code>to_char(sysdate, &#39;yyyy-MM-dd&#39;)</code>格式化日期</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--sysdate获取当前日期，to_char格式化为天</span></span><br><span class="line"><span class="keyword">select</span> to_char(sysdate, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">from</span> DUAL;</span><br><span class="line"><span class="comment">--按天分组统计</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(<span class="number">1</span>),to_char(u.&quot;creat_time&quot;,<span class="string">&#x27;YYYY-MM-DD&#x27;</span>) <span class="keyword">as</span> <span class="keyword">day</span> <span class="keyword">from</span> t_user u <span class="keyword">group</span> <span class="keyword">by</span> to_char(u.&quot;creat_time&quot;,<span class="string">&#x27;YYYY-MM-DD&#x27;</span>);</span><br><span class="line"><span class="comment">--按月分组统计，按年等其他日期类似</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(<span class="number">1</span>),to_char(u.&quot;creat_time&quot;,<span class="string">&#x27;YYYY-MM&#x27;</span>) <span class="keyword">as</span> <span class="keyword">day</span> <span class="keyword">from</span> t_user u <span class="keyword">group</span> <span class="keyword">by</span> to_char(u.&quot;creat_time&quot;,<span class="string">&#x27;YYYY-MM&#x27;</span>);</span><br><span class="line"><span class="comment">--查询7天前的数据，其他天类似</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> T_USER u <span class="keyword">where</span> to_char(u.&quot;creat_time&quot;,<span class="string">&#x27;yyyy-MM-dd&#x27;</span>)<span class="operator">&gt;</span>to_char(sysdate<span class="number">-7</span>, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>)</span><br><span class="line"><span class="comment">--统计查询前7天的数据，当天没有统计为0，按时间降序</span></span><br><span class="line"><span class="keyword">select</span> t_date.day, NVl(t_data.total, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> TO_CHAR(trunc(sysdate <span class="operator">+</span> <span class="number">1</span> <span class="operator">-</span> ROWNUM), <span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">day</span> <span class="keyword">from</span> DUAL <span class="keyword">connect</span> <span class="keyword">by</span> ROWNUM <span class="operator">&lt;=</span> <span class="number">7</span>) t_date</span><br><span class="line">         <span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> to_char(u.&quot;creat_time&quot;, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> <span class="keyword">day</span>, <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">as</span> total</span><br><span class="line">                    <span class="keyword">from</span> T_USER u</span><br><span class="line">                    <span class="keyword">group</span> <span class="keyword">by</span> to_char(u.&quot;creat_time&quot;, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>)) t_data</span><br><span class="line">                   <span class="keyword">on</span> t_data.day <span class="operator">=</span> t_date.day</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t_date.day <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>

<h4 id="7-round-lt-小数-gt-lt-保留小数点后位数-gt"><a href="#7-round-lt-小数-gt-lt-保留小数点后位数-gt" class="headerlink" title="7. round(&lt;小数&gt;,&lt;保留小数点后位数&gt;)"></a>7. round(&lt;小数&gt;,&lt;保留小数点后位数&gt;)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--保留小数点后2位，输出33.33</span></span><br><span class="line"><span class="keyword">select</span> round( <span class="number">1</span><span class="operator">/</span><span class="number">3</span><span class="operator">*</span><span class="number">100</span> ,<span class="number">2</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

<h4 id="8-left-join-左连接"><a href="#8-left-join-左连接" class="headerlink" title="8. left join 左连接"></a>8. <code>left join</code> 左连接</h4><p>以左边为主，右边有就连接，没有就null</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> T_USER l <span class="keyword">left</span> <span class="keyword">join</span> T_USER r <span class="keyword">on</span> l.AGE<span class="operator">=</span>r.FLAG;</span><br></pre></td></tr></table></figure>

<h4 id="9-substr-lt-需要裁剪的字符串-gt-lt-开始位置-gt-lt-结束位置-gt"><a href="#9-substr-lt-需要裁剪的字符串-gt-lt-开始位置-gt-lt-结束位置-gt" class="headerlink" title="9. substr(&lt;需要裁剪的字符串&gt;,&lt;开始位置&gt;, &lt;结束位置&gt;)"></a>9. <code>substr(&lt;需要裁剪的字符串&gt;,&lt;开始位置&gt;, &lt;结束位置&gt;)</code></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 输出2019</span></span><br><span class="line"><span class="keyword">select</span> substr(<span class="string">&#x27;2019-01-02&#x27;</span>,<span class="number">1</span>, <span class="number">4</span>) <span class="keyword">from</span> DUAL;</span><br></pre></td></tr></table></figure>

<h4 id="10-connect-by"><a href="#10-connect-by" class="headerlink" title="10. connect by"></a>10. <code>connect by</code></h4><p>其他用法，获取树形数据(也就是父子关系)见google</p>
<p><code>rownum</code>数据库关键字，行数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--生成1-10的序列</span></span><br><span class="line"><span class="keyword">select</span> rownum <span class="keyword">from</span> dual <span class="keyword">connect</span> <span class="keyword">by</span> rownum<span class="operator">&lt;=</span><span class="number">10</span>;</span><br><span class="line"><span class="comment">--生成7天的日期</span></span><br><span class="line"><span class="keyword">select</span> TO_CHAR(trunc(sysdate<span class="operator">+</span><span class="number">1</span><span class="operator">-</span>ROWNUM),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) dd <span class="keyword">from</span> DUAL <span class="keyword">connect</span> <span class="keyword">by</span>  ROWNUM <span class="operator">&lt;=</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>

<h4 id="11-union-lt-all-gt-两个结果集合并"><a href="#11-union-lt-all-gt-两个结果集合并" class="headerlink" title="11. union &lt;all&gt; 两个结果集合并"></a>11. <code>union &lt;all&gt;</code> 两个结果集合并</h4><p>有all 全连接，不去重，没有all 去重</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 输出1-4-1-4</span></span><br><span class="line"><span class="keyword">select</span> rownum <span class="keyword">from</span> dual <span class="keyword">connect</span> <span class="keyword">by</span> rownum<span class="operator">&lt;=</span><span class="number">4</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> rownum <span class="keyword">from</span> dual <span class="keyword">connect</span> <span class="keyword">by</span> rownum<span class="operator">&lt;=</span><span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 输出1-4</span></span><br><span class="line"><span class="keyword">select</span> rownum <span class="keyword">from</span> dual <span class="keyword">connect</span> <span class="keyword">by</span> rownum<span class="operator">&lt;=</span><span class="number">4</span></span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> rownum <span class="keyword">from</span> dual <span class="keyword">connect</span> <span class="keyword">by</span> rownum<span class="operator">&lt;=</span><span class="number">4</span>;</span><br></pre></td></tr></table></figure>

<h4 id="12-ROLLUP-分组汇总"><a href="#12-ROLLUP-分组汇总" class="headerlink" title="12. ROLLUP 分组汇总"></a>12. ROLLUP 分组汇总</h4><p>ROLLUP汇总分组排列在最后一条数据，但是数据头为null，可以通过null判断取别名为总数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> nvl(<span class="keyword">CASE</span></span><br><span class="line">               <span class="keyword">WHEN</span> sex <span class="operator">=</span> <span class="string">&#x27;boy&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;男&#x27;</span></span><br><span class="line">               <span class="keyword">WHEN</span> sex <span class="operator">=</span> <span class="string">&#x27;girl&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;女&#x27;</span></span><br><span class="line">               <span class="keyword">ELSE</span> <span class="string">&#x27;人妖&#x27;</span></span><br><span class="line">               <span class="keyword">END</span>, <span class="string">&#x27;总数&#x27;</span>) <span class="keyword">AS</span> type,</span><br><span class="line">       <span class="built_in">count</span>(<span class="number">1</span>)           <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span> t_user</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    <span class="keyword">ROLLUP</span></span><br><span class="line">    ( <span class="keyword">CASE</span></span><br><span class="line">          <span class="keyword">WHEN</span> sex <span class="operator">=</span> <span class="string">&#x27;boy&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;男&#x27;</span></span><br><span class="line">          <span class="keyword">WHEN</span> sex <span class="operator">=</span> <span class="string">&#x27;girl&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;女&#x27;</span></span><br><span class="line">          <span class="keyword">ELSE</span> <span class="string">&#x27;人妖&#x27;</span></span><br><span class="line">          <span class="keyword">END</span>);</span><br></pre></td></tr></table></figure>

<h4 id="13-字符连接符"><a href="#13-字符连接符" class="headerlink" title="13. ||字符连接符"></a>13. <code>||</code>字符连接符</h4><p>用于单位，用于多条数据拼接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;sex是&#x27;</span><span class="operator">||</span>u.SEX<span class="operator">||</span><span class="string">&#x27;,年龄是&#x27;</span><span class="operator">||</span>u.AGE <span class="keyword">as</span> detail <span class="keyword">from</span> T_USER u;</span><br><span class="line"><span class="comment">--------输出结果------</span></span><br><span class="line"><span class="comment">--sex是boy,年龄是1</span></span><br><span class="line"><span class="comment">--sex是girl,年龄是2</span></span><br></pre></td></tr></table></figure>



<h4 id="示例数据"><a href="#示例数据" class="headerlink" title="示例数据"></a>示例数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> T_USER</span><br><span class="line">(</span><br><span class="line">	AGE NUMBER,</span><br><span class="line">	FLAG VARCHAR2(<span class="number">10</span>),</span><br><span class="line">	SEX VARCHAR2(<span class="number">4</span>),</span><br><span class="line">	&quot;creat_time&quot; <span class="type">DATE</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SYSTEM.T_USER (AGE, FLAG, SEX, &quot;creat_time&quot;) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;boy&#x27;</span>, TO_DATE(<span class="string">&#x27;2019-10-23 03:14:11&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SYSTEM.T_USER (AGE, FLAG, SEX, &quot;creat_time&quot;) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;girl&#x27;</span>, TO_DATE(<span class="string">&#x27;2019-10-24 03:14:14&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SYSTEM.T_USER (AGE, FLAG, SEX, &quot;creat_time&quot;) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;ff&#x27;</span>, TO_DATE(<span class="string">&#x27;2019-10-26 03:14:19&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SYSTEM.T_USER (AGE, FLAG, SEX, &quot;creat_time&quot;) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;2&#x27;</span>, <span class="keyword">null</span>, TO_DATE(<span class="string">&#x27;2019-10-23 03:14:23&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SYSTEM.T_USER (AGE, FLAG, SEX, &quot;creat_time&quot;) <span class="keyword">VALUES</span> (<span class="keyword">null</span>, <span class="string">&#x27;2&#x27;</span>, <span class="keyword">null</span>, TO_DATE(<span class="string">&#x27;2019-10-23 03:14:25&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>));</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>DB-Realm-Base</title>
    <url>/2018/05/26/db-realm-base/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://realm.io/docs/java/latest/">官网</a></p>
<p>全平台通用数据库</p>
<ol>
<li>特点自带通知</li>
<li>实体类方式</li>
</ol>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol>
<li><p>在project中的build.gradle添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    classpath <span class="string">&quot;io.realm:realm-gradle-plugin:5.1.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在model中的build.gradle添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;realm-android&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新建实体类，两种方式</p>
<p>方式一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RealmClass</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEntiy</span> <span class="keyword">implements</span> <span class="title">RealmModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方式二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEntiy</span> <span class="keyword">extends</span> <span class="title">RealmModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在application中初始化realm</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Realm.init(context); <span class="comment">//数据库初始化</span></span><br><span class="line">RealmConfiguration config = <span class="keyword">new</span> RealmConfiguration.Builder().name(<span class="string">&quot;mulun.realm&quot;</span>).build();</span><br><span class="line">Realm.setDefaultConfiguration(config);  <span class="comment">//设置配置，数据库文件名为mulun.realm</span></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">Realm realm = Realm.getDefaultInstance(); <span class="comment">//获取数据库实例</span></span><br><span class="line">Log.i(<span class="string">&quot;MyApplication&quot;</span>,<span class="string">&quot;数据库路径为：&quot;</span>+realm.getPath()); <span class="comment">//打印路径</span></span><br><span class="line">realm.close(); <span class="comment">//用完需要关闭实例</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在data/data/包名/file目录下可以找到数据库文件<code>mulun.realm</code></p>
</li>
<li><p>该文件可以通过<code>Realm Studio</code>打开</p>
</li>
</ol>
<h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>数据库插入/删除数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Realm realm = Realm.getDefaultInstance(); <span class="comment">//获取数据库实例</span></span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line">TestEntiy testEntiy=<span class="keyword">new</span> TestEntiy();        </span><br><span class="line">realm.executeTransaction(<span class="keyword">new</span> Realm.Transaction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</span><br><span class="line">        realm.copyToRealm(testEntiy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//查询删除数据，该查询是异步的，如果数据testEntiy发生了修改和增加会在这里收到通知</span></span><br><span class="line">realm.where(TestEntiy.class).findAllAsync().asFlowable().subscribe(<span class="keyword">new</span> Consumer&lt;RealmResults&lt;TestEntiy&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(<span class="keyword">final</span> RealmResults&lt;TestEntiy&gt; testEntiy)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">         TestEntiy testEntiyRes = realm.copyFromRealm(testEntiy); <span class="comment">//此种方式才能真正取到实体类，不能直接用testEntiy</span></span><br><span class="line">        realm.executeTransaction(<span class="keyword">new</span> Realm.Transaction() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</span><br><span class="line">                testEntiy.deleteAllFromRealm();   <span class="comment">//上传失败删除数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">                                                                   realm.close();</span><br></pre></td></tr></table></figure>

<p>另一种操作方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Realm realm = Realm.getDefaultInstance(); <span class="comment">//获取数据库实例</span></span><br><span class="line">realm.beginTransaction();</span><br><span class="line">realm.copyToRealm(testEntiy);</span><br><span class="line">realm.commitTransaction();</span><br><span class="line">realm.close();</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>DB-redis-base</title>
    <url>/2018/04/04/db-redis-base/</url>
    <content><![CDATA[<h3 id="redis-springboot常用命令"><a href="#redis-springboot常用命令" class="headerlink" title="redis springboot常用命令"></a>redis springboot常用命令</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">StringRedisTemplate redisTemplate;</span><br><span class="line"><span class="comment">//----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//给key设置value</span></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>); <span class="comment">//SET key &quot;value&quot;</span></span><br><span class="line"><span class="comment">//取key的value</span></span><br><span class="line">redisTemplate.opsForValue().get(<span class="string">&quot;key&quot;</span>);<span class="comment">//GET key</span></span><br><span class="line"><span class="comment">//设置key在new Date()过期</span></span><br><span class="line">redisTemplate.expireAt(<span class="string">&quot;key&quot;</span>,<span class="keyword">new</span> Date()); <span class="comment">//EXPIREAT key timestamp</span></span><br><span class="line">redisTemplate.getExpire(<span class="string">&quot;testttl&quot;</span>); <span class="comment">//返回过期时间</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>reids重新设值会覆盖<code>expireAt</code>过期时间的设置</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>nosql</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis集群搭建</title>
    <url>/2019/01/22/db-redis-cluster/</url>
    <content><![CDATA[<h3 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#依赖环境</span></span><br><span class="line">yum -y install gcc automake autoconf libtool make</span><br><span class="line"><span class="comment">#安装源</span></span><br><span class="line">yum install centos-release-scl-rh</span><br><span class="line"><span class="comment">#安装ruby2.3</span></span><br><span class="line">yum install rh-ruby23 -y</span><br><span class="line"><span class="comment">#使能ruby2.3（每次要重新执行）</span></span><br><span class="line">scl <span class="built_in">enable</span> rh-ruby23 bash</span><br><span class="line"><span class="comment">#查看版本2.3</span></span><br><span class="line">ruby -v</span><br></pre></td></tr></table></figure>

<h3 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装<a href="http://download.redis.io/releases/">redis</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install wget</span><br><span class="line">wget http://download.redis.io/releases/redis-3.2.6.tar.gz</span><br><span class="line">tar xzf redis-3.2.6.tar.gz</span><br><span class="line">mv redis-3.2.6 /opt/redis</span><br><span class="line">make</span><br><span class="line"><span class="comment">#运行测试</span></span><br><span class="line">/opt/redis/src/redis-server /opt/redis/redis.conf</span><br><span class="line"><span class="comment"># 使用redis-trib集群需要执行</span></span><br><span class="line">gem install redis </span><br><span class="line"><span class="comment"># 创建集群</span></span><br><span class="line">./src/redis-trib.rb create --replicas 1 192.168.101.108:7000 192.168.101.108:7001 192.168.101.108:7002</span><br></pre></td></tr></table></figure>

<h3 id="docker方式构建"><a href="#docker方式构建" class="headerlink" title="docker方式构建"></a>docker方式构建</h3><p>部署脚本：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">redis700x:</span><br><span class="line">  image: redis</span><br><span class="line">  restart: always</span><br><span class="line">  hostname: redis-master</span><br><span class="line">  command: <span class="string">&quot;redis-server /data/redis.conf&quot;</span></span><br><span class="line">  volumes:</span><br><span class="line">    - /dockerdata/v-yinfu/redis/<span class="number">7000</span>:/data</span><br><span class="line">  ports:</span><br><span class="line">    - target: <span class="number">700</span>x</span><br><span class="line">      published: <span class="number">700</span>x</span><br><span class="line">      protocol: tcp</span><br><span class="line">      mode: host</span><br><span class="line">    - target: <span class="number">1700</span>x</span><br><span class="line">      published: <span class="number">1700</span>x</span><br><span class="line">      protocol: tcp</span><br><span class="line">      mode: host  </span><br></pre></td></tr></table></figure>

<p>配置文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 自定义配置</span></span><br><span class="line"><span class="comment"># redis:3.2.6需要打开</span></span><br><span class="line"><span class="comment"># bind 0.0.0.0</span></span><br><span class="line"><span class="meta">protected-mode</span> <span class="string">no</span></span><br><span class="line"><span class="attr">port</span> <span class="string">700x</span></span><br><span class="line"><span class="comment"># cluster-announce-x系列参数redis:5-alpine才支持，3.2.6屏蔽</span></span><br><span class="line"><span class="meta">cluster-announce-port</span> <span class="string">700x</span></span><br><span class="line"><span class="meta">cluster-announce-bus-port</span> <span class="string">1700x</span></span><br><span class="line"><span class="comment"># 自己服务器的ip</span></span><br><span class="line"><span class="meta">cluster-announce-ip</span> <span class="string">192.168.101.108</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">no</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">yes</span></span><br><span class="line"><span class="meta">cluster-enabled</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">yes</span></span><br><span class="line"><span class="meta">cluster-config-file</span> <span class="string">nodes.conf</span></span><br><span class="line"><span class="meta">cluster-node-timeout</span> <span class="string">15000</span></span><br></pre></td></tr></table></figure>

<p>上面x换成0-6</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建集群</span></span><br><span class="line">./redis-trib.rb create --replicas 1 192.168.101.108:7000 192.168.101.108:7001 192.168.101.108:7002 192.168.101.108:7003 192.168.101.108:7004 192.168.101.108:7005</span><br><span class="line"><span class="comment"># 检查集群</span></span><br><span class="line">./src/redis-trib.rb check 192.168.101.108:7000</span><br></pre></td></tr></table></figure>

<h3 id="使用docker镜像脚本创建"><a href="#使用docker镜像脚本创建" class="headerlink" title="使用docker镜像脚本创建"></a>使用docker镜像脚本创建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建集群 主1 主2 主3 从1 从2 从3 的顺序来的</span></span><br><span class="line">docker run -it --rm exxk/redis-trib ruby redis-trib.rb create --replicas 1 172.16.16.8:7000 172.16.16.8:7001 172.16.16.8:7002 172.16.16.13:7003 172.16.16.13:7004 172.16.16.13:7005</span><br><span class="line"><span class="comment">#检查集群状态</span></span><br><span class="line">docker run -it --rm exxk/redis-trib ruby redis-trib.rb check 192.168.101.108:7000</span><br><span class="line"><span class="comment"># 查看集群负载</span></span><br><span class="line">docker stats $(docker ps | grep <span class="string">&quot;redis-cluster&quot;</span> | awk <span class="string">&#x27;&#123; print $1 &#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># 修复集群</span></span><br><span class="line">docker run -it --rm exxk/redis-trib ruby redis-trib.rb fix 10.10.10.11:7000</span><br></pre></td></tr></table></figure>

<h2 id="高可用总结"><a href="#高可用总结" class="headerlink" title="高可用总结"></a>高可用总结</h2><ol>
<li>执行集群creat脚本时，默认前三个为主后三个为从，主从对应关系随机分配</li>
<li>集群存在主从对应关系，一个主回自动分配一个从，集群宕机也不会改变</li>
<li>集群一个主从挂了不能访问</li>
<li>集群必须所有的主都能正常运行</li>
<li>集群从升级主存在时间间隔，试配置和性能等因素影响，可能长可能短，在没有主选择成功集群状态显示异常，且无法访问，提示错误<code>Not all 16384 slots are covered by nodes.</code></li>
<li>集群同时宕机两个主，从是无法升级为主，这种情况只在同时，如果其中一个从升级主，再宕机一个主，是没有关系的</li>
<li>从节点宕机对主节点毫无影响</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>问题1： 一直提示waiting  for</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting for the cluster to join..</span><br></pre></td></tr></table></figure>

<p>解决：防火墙开端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加端口7000-7005/17000-17005</span></span><br><span class="line">firewall-cmd --zone=public --add-port=7000/tcp --permanent</span><br><span class="line"><span class="comment"># 重载配置</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment"># 检查防火墙规则</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="comment"># ports: 7000/tcp 7001/tcp 7002/tcp 7003/tcp 7004/tcp 7005/tcp 17005/tcp 17004/tcp 17003/tcp 17002/tcp 17001/tcp 17000/tcp</span></span><br><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="comment"># 临时关闭防火墙,重启后会重新自动打开</span></span><br><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure>

<p>然后删除服务及缓存文件重新启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除缓存文件</span></span><br><span class="line">rm -f /dockerdata/v-yinfu/redis/700*/appendonly.aof</span><br><span class="line">rm -f /dockerdata/v-yinfu/redis/700*/nodes.conf </span><br><span class="line"><span class="comment"># 重新集群</span></span><br><span class="line">./redis-trib.rb create --replicas 1 192.168.101.108:7000 192.168.101.108:7001 192.168.101.108:7002 192.168.101.108:7003 192.168.101.108:7004 192.168.101.108:7005</span><br></pre></td></tr></table></figure>

<p>问题2 版本兼容问题</p>
<p>redis5 不支持jedis2.8，会提示错误<code>7001@17001</code>，升级jedis3.0可以解决</p>
<p>redis5(4)一下不支持docker 集群模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cluster-announce-port 700x</span><br><span class="line">cluster-announce-bus-port 1700x</span><br><span class="line"># 自己服务器的ip</span><br><span class="line">cluster-announce-ip 192.168.101.108</span><br></pre></td></tr></table></figure>







<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://my.oschina.net/dslcode/blog/1936656">docker redis 集群（cluster）搭建</a></p>
<p><a href="https://my.oschina.net/zhaoqian/blog/1793063">centos7安装redis4集群服务</a></p>
<p>官网：<a href="https://link.jianshu.com/?t=https://redis.io/documentation">https://redis.io/documentation</a><br>中文官网：<a href="https://link.jianshu.com/?t=http://www.redis.cn/documentation.html">http://www.redis.cn/documentation.html</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>DB-redis-install</title>
    <url>/2018/04/04/db-redis-install/</url>
    <content><![CDATA[<h2 id="docker-swarm-安装-redis"><a href="#docker-swarm-安装-redis" class="headerlink" title="docker swarm 安装 redis"></a>docker swarm 安装 redis</h2><ol>
<li><p>创建redis挂载目录<code>/dockerdata/v-redis</code></p>
</li>
<li><p>并在该目录<code>vim redis.conf</code>新建配置文件，配置文件添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">requirepass &lt;登陆密码，最好64位以上&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑<code>vim stack-redis.yml</code>,内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">14007</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&quot;redis-server /data/redis.conf&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/dockerdata/v-redis:/data&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">xuanps</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行启动<code>docker stack deploy -c stack-redis.yml redis</code></p>
</li>
<li><p>测试命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#本地直接redis-cli不需要任何参数</span></span><br><span class="line">redis-cli -h host -p port -a password</span><br><span class="line"><span class="comment">#进入redis，用改名了进行密码登陆</span></span><br><span class="line">AUTH <span class="string">&quot;password&quot;</span></span><br><span class="line"><span class="comment">#查询所有key</span></span><br><span class="line">keys *</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="springboot-连接redis"><a href="#springboot-连接redis" class="headerlink" title="springboot 连接redis"></a>springboot 连接redis</h2><ol>
<li><p>添加<code>pom.xml</code>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑<code>application.yml</code>添加redis连接信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">112.74</span><span class="number">.51</span><span class="number">.136</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">14007</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&lt;你的密码&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">StringRedisTemplate stringRedisTemplate;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testredis</span><span class="params">()</span></span>&#123;</span><br><span class="line">	stringRedisTemplate.opsForValue().set(<span class="string">&quot;testconnect&quot;</span>,<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">	String test= stringRedisTemplate.opsForValue().get(<span class="string">&quot;testconnect&quot;</span>);</span><br><span class="line">	log.info(test);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="idea-redis插件iedis"><a href="#idea-redis插件iedis" class="headerlink" title="idea redis插件iedis"></a>idea redis插件iedis</h4>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>nosql</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>DB-StoredProcedure</title>
    <url>/2018/04/07/db-storedprocedure/</url>
    <content><![CDATA[<h2 id="mysql存储过程"><a href="#mysql存储过程" class="headerlink" title="mysql存储过程"></a>mysql存储过程</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h5 id="系统变量两个"><a href="#系统变量两个" class="headerlink" title="系统变量两个@@"></a>系统变量<code>两个@@</code></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables; #查看系统内置变量</span><br><span class="line">select @@变量名; #查看系统变量的值，如select @@version</span><br><span class="line">set 变量名 &#x3D; 值; #修改变量（局部修改）命令 如set autocommit &#x3D; 3;</span><br></pre></td></tr></table></figure>

<h5 id="自定义变量一个"><a href="#自定义变量一个" class="headerlink" title="自定义变量一个@"></a>自定义变量<code>一个@</code></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set @变量名 &#x3D; 值; #自定义变量语法，如&#96;set @name &#x3D; &#39;saboran&#39;;</span><br><span class="line">select @name; #查看变量的值</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create function 函数名(参数列表) returns 数据类型</span><br><span class="line">    begin</span><br><span class="line">        &#x2F;&#x2F; 函数体 </span><br><span class="line">        &#x2F;&#x2F; 返回值</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>Dcoker-gitlab-ci</title>
    <url>/2019/10/15/dcoker-gitlab-ci/</url>
    <content><![CDATA[<h2 id="gitlab-ci构建docker镜像的三种方式"><a href="#gitlab-ci构建docker镜像的三种方式" class="headerlink" title="gitlab-ci构建docker镜像的三种方式"></a>gitlab-ci构建docker镜像的三种方式</h2><p><a href="https://docs.gitlab.com/ee/ci/docker/using_docker_build.html">官方教程</a></p>
<h3 id="shell模式（dood），自定义runner镜像"><a href="#shell模式（dood），自定义runner镜像" class="headerlink" title="shell模式（dood），自定义runner镜像"></a>shell模式（dood），自定义runner镜像</h3><p>见: <a href="https://blog.iexxk.com/2018/07/31/docker-gitlab-runner/">Docker-Gitlab-Runner</a></p>
<p>优点：</p>
<ol>
<li>自定义镜像，集成自己需要的工具</li>
</ol>
<p>缺点：</p>
<ol>
<li>采用宿主机docker进行编译</li>
</ol>
<h3 id="docker模式（dind），采用docker内部docker"><a href="#docker模式（dind），采用docker内部docker" class="headerlink" title="docker模式（dind），采用docker内部docker"></a>docker模式（dind），采用docker内部docker</h3><p><a href="https://gitlab.com/gitlab-org/gitlab-runner/issues/4501">Docker in Docker 19.03 service fails</a></p>
<p>优点:</p>
<ol>
<li>独立(不影响宿主机)，可以多线程构建</li>
</ol>
<p>缺点:</p>
<ol>
<li>需要<code>vi /etc/gitlab-runner/config.toml</code>设置<code>[runners.docker]-&gt;privileged = true</code>特权模式</li>
<li>编译慢每次要启动docker服务</li>
</ol>
<p>版本19以后tls需要挂载或者禁用</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#[三种方式使用docker构建](https://docs.gitlab.com/ee/ci/docker/using_docker_build.html)</span></span><br><span class="line"><span class="comment">#如果stages没有设置镜像，就使用该镜像</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">docker:19.03.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker in docker =docker dind 容器内部启动docker</span></span><br><span class="line"><span class="comment"># docker out docker = dood 使用宿主机的docker，需要挂在/var/run/docker.sock</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker:19.03.1-dind</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#docker in docker 版本19之后要禁用tls，后者配置证书</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">DOCKER_TLS_CERTDIR:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#每一个stages都会git clone项目</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">package</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#每一个stages前都会执行这下面的脚本</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pwd</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ls</span></span><br><span class="line"></span><br><span class="line"><span class="attr">gradle_package:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">java:8</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">package</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">deploy-dev</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./gradlew</span> <span class="string">bootJar</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">build/libs/</span></span><br><span class="line"><span class="attr">docker_build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">deploy-dev</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">test:latest</span> <span class="string">.</span></span><br></pre></td></tr></table></figure>

<h3 id="docker模式-dood"><a href="#docker模式-dood" class="headerlink" title="docker模式(dood)"></a>docker模式(dood)</h3>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>dcoker swarm安装gitlab</title>
    <url>/2017/12/11/dcoker-swarm-install-gitlab/</url>
    <content><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo docker rm $(docker ps -a -q) <span class="comment">#移除所有已停止的镜像</span></span><br><span class="line">sudo docker swarm leave</span><br><span class="line">sudo docker swarm init --advertise-addr 10.14.0.1</span><br><span class="line">sudo docker swarm join --token SWMTKN-1-1ue26optqse6n6gcaitf6ns7qyiyqo7o6eb6genabxkof6rhid-d6f802lv5logrupqeop0087fx 10.14.0.1:2377</span><br></pre></td></tr></table></figure>

<h3 id="安装sameersbn-gitlab"><a href="#安装sameersbn-gitlab" class="headerlink" title="安装sameersbn/gitlab"></a>安装<a href="https://hub.docker.com/u/sameersbn/">sameersbn</a>/<a href="https://hub.docker.com/r/sameersbn/gitlab/">gitlab</a></h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#工作节点拉取镜像</span></span><br><span class="line">sudo docker pull sameersbn/gitlab:10.2.2</span><br><span class="line">sudo docker pull sameersbn/redis:latest</span><br><span class="line">sudo docker pull sameersbn/postgresql:9.6-2</span><br><span class="line"><span class="comment">#创建目录,创建到了Dropbox目录</span></span><br><span class="line">mkdir -p docker/gitlab/postgresql docker/gitlab/redis docker/gitlab/gitlab</span><br></pre></td></tr></table></figure>

<p>下载<code>wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml</code>并修改</p>
<p>为如下内容，主要替换版本<code>version: &#39;3&#39;</code>和添加<code>deploy</code>以及配置参数</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">version</span>: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">redis</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">restart</span>: <span class="string">always</span></span><br><span class="line">    <span class="attr">image</span>: <span class="string">sameersbn/redis:latest</span></span><br><span class="line">    <span class="attr">command</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">--loglevel warning</span></span><br><span class="line">    <span class="attr">volumes</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">~/Dropbox/docker/gitlab/redis:/var/lib/redis:Z</span></span><br><span class="line">    <span class="attr">deploy</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">replicas</span>: <span class="string">1</span></span><br><span class="line">      <span class="attr">restart_policy</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">condition</span>: <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">constraints</span>: <span class="string">[node.role == worker]</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">postgresql</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">restart</span>: <span class="string">always</span></span><br><span class="line">    <span class="attr">image</span>: <span class="string">sameersbn/postgresql:9.6-2</span></span><br><span class="line">    <span class="attr">volumes</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">~/Dropbox/docker/gitlab/postgresql:/var/lib/postgresql:Z</span></span><br><span class="line">    <span class="attr">environment</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">DB_USER=gitlab</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">DB_PASS=mimais163</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">DB_NAME=gitlabhq_production</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">DB_EXTENSION=pg_trgm</span></span><br><span class="line">    <span class="attr">deploy</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">replicas</span>: <span class="string">1</span></span><br><span class="line">      <span class="attr">restart_policy</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">condition</span>: <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">constraints</span>: <span class="string">[node.role == worker]</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">gitlab</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">restart</span>: <span class="string">always</span></span><br><span class="line">    <span class="attr">image</span>: <span class="string">sameersbn/gitlab:10.2.2</span></span><br><span class="line">    <span class="attr">depends_on</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">postgresql</span></span><br><span class="line">    <span class="attr">ports</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">&quot;14008:80&quot;</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">&quot;14002:22&quot;</span></span><br><span class="line">    <span class="attr">volumes</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">~/Dropbox/docker/gitlab/gitlab:/home/git/data:Z</span></span><br><span class="line">    <span class="attr">environment</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">DEBUG=false</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">DB_ADAPTER=postgresql</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">DB_HOST=postgresql</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">DB_PORT=5432</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">DB_USER=gitlab</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">DB_PASS=******</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">DB_NAME=gitlabhq_production</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">REDIS_HOST=redis</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">REDIS_PORT=6379</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">TZ=Asia/Kolkata</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_TIMEZONE=Kolkata</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_HTTPS=false</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">SSL_SELF_SIGNED=false</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_HOST=iexxk.com</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_PORT=14008</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_SSH_PORT=14002</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_RELATIVE_URL_ROOT=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_SECRETS_DB_KEY_BASE=CvpwfRsb5sNpmGRcX5fQFzTNtdkd5pNMK623PVP9rkwLsTDW4VlXMLmT4bKRLVzC</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_SECRETS_SECRET_KEY_BASE=cFdsD8xSKVCShL76hpWP3NdjTCm3XbtV7d3BXB9XZNHclq8n743s3vFTkMg3DppJ</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_SECRETS_OTP_KEY_BASE=P8rH42vPgg5pZ34Nt8t3pwnCBcPXNkjqV8kTxBlQCkFkSCXGhXvDRSGm2bBx593q</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_ROOT_PASSWORD=******</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_ROOT_EMAIL=xuan.fong1@163.com</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_NOTIFY_ON_BROKEN_BUILDS=true</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_NOTIFY_PUSHER=false</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_EMAIL=notifications@example.com</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_EMAIL_REPLY_TO=noreply@example.com</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_INCOMING_EMAIL_ADDRESS=reply@example.com</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_BACKUP_SCHEDULE=daily</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">GITLAB_BACKUP_TIME=01:00</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">SMTP_ENABLED=false</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">SMTP_DOMAIN=www.example.com</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">SMTP_HOST=smtp.qq.com</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">SMTP_PORT=465</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">SMTP_USER=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">SMTP_PASS=password</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">SMTP_STARTTLS=true</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">SMTP_AUTHENTICATION=login</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">IMAP_ENABLED=false</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">IMAP_HOST=imap.gmail.com</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">IMAP_PORT=993</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">IMAP_USER=mailer@example.com</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">IMAP_PASS=password</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">IMAP_SSL=true</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">IMAP_STARTTLS=false</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_ENABLED=false</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_AUTO_SIGN_IN_WITH_PROVIDER=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_ALLOW_SSO=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_BLOCK_AUTO_CREATED_USERS=true</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_AUTO_LINK_LDAP_USER=false</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_AUTO_LINK_SAML_USER=false</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_EXTERNAL_PROVIDERS=</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_CAS3_LABEL=cas3</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_CAS3_SERVER=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_CAS3_DISABLE_SSL_VERIFICATION=false</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_CAS3_LOGIN_URL=/cas/login</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_CAS3_VALIDATE_URL=/cas/p3/serviceValidate</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_CAS3_LOGOUT_URL=/cas/logout</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_GOOGLE_API_KEY=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_GOOGLE_APP_SECRET=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_GOOGLE_RESTRICT_DOMAIN=</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_FACEBOOK_API_KEY=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_FACEBOOK_APP_SECRET=</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_TWITTER_API_KEY=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_TWITTER_APP_SECRET=</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_GITHUB_API_KEY=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_GITHUB_APP_SECRET=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_GITHUB_URL=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_GITHUB_VERIFY_SSL=</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_GITLAB_API_KEY=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_GITLAB_APP_SECRET=</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_BITBUCKET_API_KEY=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_BITBUCKET_APP_SECRET=</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_SAML_ASSERTION_CONSUMER_SERVICE_URL=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_SAML_IDP_CERT_FINGERPRINT=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_SAML_IDP_SSO_TARGET_URL=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_SAML_ISSUER=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_SAML_LABEL=&quot;Our SAML Provider&quot;</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_SAML_NAME_IDENTIFIER_FORMAT=urn:oasis:names:tc:SAML:2.0:nameid-format:transient</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_SAML_GROUPS_ATTRIBUTE=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_SAML_EXTERNAL_GROUPS=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_EMAIL=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_NAME=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_FIRST_NAME=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_SAML_ATTRIBUTE_STATEMENTS_LAST_NAME=</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_CROWD_SERVER_URL=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_CROWD_APP_NAME=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_CROWD_APP_PASSWORD=</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_AUTH0_CLIENT_ID=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_AUTH0_CLIENT_SECRET=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_AUTH0_DOMAIN=</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_AZURE_API_KEY=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_AZURE_API_SECRET=</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">OAUTH_AZURE_TENANT_ID=</span></span><br><span class="line">    <span class="attr">deploy</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">replicas</span>: <span class="string">1</span></span><br><span class="line">      <span class="attr">restart_policy</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">condition</span>: <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">constraints</span>: <span class="string">[node.role == worker]</span></span><br></pre></td></tr></table></figure>

<p>启动运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml gitlab</span><br><span class="line"><span class="comment">#查看gitlab</span></span><br><span class="line">docker stack ps gitlab</span><br><span class="line"><span class="comment">#停止删除gitlab</span></span><br><span class="line">docker stack rm gitlab</span><br><span class="line"><span class="comment">#创建符合链接，解决ubuntu非root用户导致Dropbox路径不一样，待测试</span></span><br><span class="line">ln -s /home/xuan/Dropbox /root/Dropbox</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
        <tag>Docker swarm</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之MVP</title>
    <url>/2016/12/16/design-patterns-mvp/</url>
    <content><![CDATA[<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.jianshu.com/p/ed2aa9546c2c">Android应用中MVP最佳实践</a><br><a href="http://blog.waynell.com/2015/05/29/mvp-on-android/">Android的MVP设计模式</a><br><a href="http://kaedea.com/2015/10/11/android-mvp-pattern/">MVP 模式简单易懂的介绍方式</a><br><a href="http://www.devtf.cn/?p=551">MVP框架 – Ted Mosby的软件架构</a><br><a href="http://blog.csdn.net/qiantujava/article/details/49383645">安卓中MVP模式和RxAndroid的具体实现例子</a></p>
<p><img src="https://s3.ax1x.com/2021/03/18/627EHx.png" alt="mvp"></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>mvp</tag>
        <tag>rxjava</tag>
        <tag>单元测试</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之单例模式</title>
    <url>/2016/09/30/design-patterns-singleton/</url>
    <content><![CDATA[<h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><ul>
<li>使用时才实例化</li>
<li>使用场景：单例使用次数不多、功能复杂，占用内存大、实例化时间长、特定场景、延迟加载。</li>
<li> ==线程不安全==：多个线程可能会并发调用他的newInstance方法导致多个线程可能会创建多份相同的单例出来。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">newInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == instance)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="懒汉式同步锁"><a href="#懒汉式同步锁" class="headerlink" title="懒汉式同步锁"></a>懒汉式同步锁</h3><p>使用同步锁<code>synchronized (Singleton.class)</code>解决线程不安全问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="双重校验锁"><a href="#双重校验锁" class="headerlink" title="双重校验锁"></a>双重校验锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// if already inited, no need to get lock everytime</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><ul>
<li>简单快速，实例化快</li>
<li>使用场景：占用内存较小的、应用启动时加载初始化的</li>
<li>线程安全：因为JVM只会加载一次单例类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">newInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="jvm的类加载机制"><a href="#jvm的类加载机制" class="headerlink" title="jvm的类加载机制"></a>jvm的类加载机制</h2><p>JVM已经为我们提供了同步控制</p>
<blockquote>
<ul>
<li>在static{}区块中初始化的数据</li>
<li>访问final字段时</li>
<li>…..</li>
</ul>
</blockquote>
<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><ul>
<li>简洁</li>
<li>使用场景：</li>
<li>线程安全：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//内部类，在装载该内部类时才会去创建单利对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">newInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3></li>
<li>最简单</li>
<li>线程安全：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义一个枚举的元素，它就是Singleton的一个实例</span></span><br><span class="line">    instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// do something ...</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">   Singleton singleton = Singleton.instance;</span><br><span class="line">   singleton.doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://stormzhang.com/designpattern/2016/03/27/android-design-pattern-singleton/">ANDROID设计模式之单例模式</a></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>单例</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-alpine-nginx</title>
    <url>/2018/08/22/docker-alpine-nginx/</url>
    <content><![CDATA[<h3 id="alpine-安装nginx"><a href="#alpine-安装nginx" class="headerlink" title="alpine 安装nginx"></a>alpine 安装nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk update</span><br><span class="line"><span class="comment">#apk add nginx #安装</span></span><br><span class="line">apk add nginx-mod-rtmp <span class="comment">#安装带rtmp插件的nginx</span></span><br><span class="line">ps aux | grep nginx <span class="comment">#查看是否运行</span></span><br><span class="line">vi /etc/nginx/nginx.conf <span class="comment">#修改配置文件</span></span><br></pre></td></tr></table></figure>



<h4 id="问题1-nginx-emerg-open-quot-run-nginx-nginx-pid-quot-failed-2-No-such-file-or-directory"><a href="#问题1-nginx-emerg-open-quot-run-nginx-nginx-pid-quot-failed-2-No-such-file-or-directory" class="headerlink" title="问题1 nginx: [emerg] open() &quot;/run/nginx/nginx.pid&quot; failed (2: No such file or directory)"></a>问题1 <code>nginx: [emerg] open() &quot;/run/nginx/nginx.pid&quot; failed (2: No such file or directory)</code></h4><p>解决：<code>mkdir /var/run/nginx</code></p>
<h4 id="问题2-nginx-emerg-unknown-directive-quot-rtmp-quot-in-etc-nginx-nginx-conf-16"><a href="#问题2-nginx-emerg-unknown-directive-quot-rtmp-quot-in-etc-nginx-nginx-conf-16" class="headerlink" title="问题2 nginx: [emerg] unknown directive &quot;rtmp&quot; in /etc/nginx/nginx.conf:16"></a>问题2 <code>nginx: [emerg] unknown directive &quot;rtmp&quot; in /etc/nginx/nginx.conf:16</code></h4><p>解决：在<code>/etc/nginx/nginx.conf</code>添加<code>include /etc/nginx/modules/*.conf;</code></p>
<h3 id="nginx常用调试"><a href="#nginx常用调试" class="headerlink" title="nginx常用调试"></a>nginx常用调试</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看ngixn是否启动</span></span><br><span class="line">ps -ef|grep nginx</span><br><span class="line"><span class="comment">#查看错误日志,需要开启error_log /var/log/nginx/error.log warn;</span></span><br><span class="line">cat /var/<span class="built_in">log</span>/nginx/error.log</span><br><span class="line"><span class="comment">#重新加载配置</span></span><br><span class="line">nginx -s reload</span><br><span class="line"><span class="comment">#重启nginx</span></span><br><span class="line">nginx -s reopen</span><br><span class="line"><span class="comment">#停止nginx</span></span><br><span class="line">nginx -s stop</span><br><span class="line"><span class="comment">#启动nginx</span></span><br><span class="line">nginx</span><br><span class="line"><span class="comment">#测试配置文件语法问题</span></span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure>

<h3 id="nginx路径配置解释"><a href="#nginx路径配置解释" class="headerlink" title="nginx路径配置解释"></a>nginx路径配置解释</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /test &#123;        </span><br><span class="line">            <span class="attribute">root</span>   /tmp/video;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">#用http://&lt;url&gt;/test/...访问的文件地址为/tmp/video/test</span></span><br><span class="line"><span class="attribute">location</span> /video &#123;        </span><br><span class="line">            <span class="attribute">root</span>   /tmp/video;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">#用http://&lt;url&gt;/video/...访问的文件地址为/tmp/video/video</span></span><br><span class="line"><span class="attribute">location</span> / &#123;        </span><br><span class="line">            <span class="attribute">root</span>   /tmp/video;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">#用http://&lt;url&gt;/...访问的文件地址为/tmp/video/</span></span><br></pre></td></tr></table></figure>

<p>常用配置文件</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;                                    </span><br><span class="line">    <span class="attribute">include</span>       mime.types;             </span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">                                           </span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;    </span></span><br><span class="line">                                           </span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;                    </span><br><span class="line">                                           </span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;                 </span><br><span class="line">                                           </span><br><span class="line">    <span class="comment">#gzip  on;                             </span></span><br><span class="line">                                           </span><br><span class="line">    <span class="section">server</span> &#123;                               </span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8888</span>;             </span><br><span class="line">        <span class="attribute">server_name</span>  localhost;        </span><br><span class="line">        <span class="attribute">location</span> / &#123;           </span><br><span class="line">            <span class="attribute">root</span>   /tmp/hikvision/video;</span><br><span class="line">        &#125;                               </span><br><span class="line">    &#125;                                   </span><br><span class="line">                                        </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h3 id="nginx-代理"><a href="#nginx-代理" class="headerlink" title="nginx 代理"></a>nginx 代理</h3><p>参考  <a href="https://www.jianshu.com/p/e154c2ef002f">简明 Nginx Location Url 配置笔记</a></p>
<ul>
<li><p>正则匹配(<code>~</code>),URL包含<code>weather</code>都会走代理</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ /weather/</span> &#123;</span><br><span class="line">       <span class="attribute">proxy_pass</span>  http://apicloud.mob.com;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>前缀匹配(<code>^~</code>),前缀是<code>/v1/weather/</code>开头的才走代理</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /v1/weather/ &#123;</span><br><span class="line">       <span class="attribute">proxy_pass</span>  http://apicloud.mob.com;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>精确匹配(<code>=</code>),URL是<code>/demo</code> 多了少了都不行，才能进代理</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> = /demo/ &#123;</span><br><span class="line">       <span class="attribute">proxy_pass</span>  http://apicloud.mob.com;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>nginx</tag>
        <tag>alpine</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Alpine-Timezone-Encoding</title>
    <url>/2018/07/16/docker-alpine-timezone-encoding/</url>
    <content><![CDATA[<h3 id="时区问题"><a href="#时区问题" class="headerlink" title="时区问题"></a>时区问题</h3><p>alpine镜像默认时区是<code>UTC</code>,执行命令<code>date</code>可以进行查看时区，默认返回<code>Mon Jul 16 03:43:52 UTC 2018</code>,因此在查看日志，以及java代码里使用<code>new date()</code>时获取的时间时UTC格式的。</p>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>参考：<a href="https://wiki.alpinelinux.org/wiki/Setting_the_timezone">Setting the timezone</a></p>
<p>解决apline时区问题只需安装<code>tzdata</code>然后设置下就可以了,在alpine执行</p>
<p>添加字体的化安装<code>ttf-dejavu</code>解决</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">java<span class="variable">.lang</span><span class="variable">.NullPointerException</span>: <span class="literal">null</span></span><br><span class="line">at sun<span class="variable">.awt</span><span class="variable">.FontConfiguration</span><span class="variable">.getVersion</span>(FontConfiguration<span class="variable">.java</span>:<span class="number">1264</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">date <span class="comment">#查看时区UTC</span></span><br><span class="line">apk update </span><br><span class="line">apk add tzdata ttf-dejavu</span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone</span><br><span class="line">date <span class="comment">#执行命令date可以进行查看时区</span></span><br></pre></td></tr></table></figure>

<h4 id="解决方式一（采用）"><a href="#解决方式一（采用）" class="headerlink" title="解决方式一（采用）"></a>解决方式一（采用）</h4><p>镜像大小：</p>
<ul>
<li>java:8-jre-alpine 107.9M</li>
<li>java:8-jre-alpine-cst  109.2M</li>
</ul>
<p>封装docker镜像一层,这里操作的基础镜像是用<code>java:8-jre-alpine</code>进行封装</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成镜像name:java:8-jre-alpine-cst</span></span><br><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-jre-alpine</span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  apk add --no-cache tzdata ttf-dejavu \</span></span><br><span class="line"><span class="bash">	&amp;&amp; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone</span></span><br></pre></td></tr></table></figure>

<p>下次直接就直接使用自己的镜像<code>java:8-jre-alpine-cst</code></p>
<p>参考：<a href="http://www.itfanr.cc/2017/02/23/modify-timezone/">Linux下修改时区</a></p>
<h4 id="解决方式二"><a href="#解决方式二" class="headerlink" title="解决方式二"></a>解决方式二</h4><p>可以直接封装在<code>java:8-jre-alpine</code>镜像里，这种需要知道<code>java:8-jre-alpine</code>镜像的<a href="https://github.com/docker-library/openjdk/blob/9a0822673dffd3e5ba66f18a8547aa60faed6d08/8-jre/alpine/Dockerfile"><code>dockerfile</code></a>于构建所需的环境包，这种方式构建镜像理论上应该比方式一小。</p>
<h4 id="解决方式三"><a href="#解决方式三" class="headerlink" title="解决方式三"></a>解决方式三</h4><p>在构建java应用程序时构建进行时区设置，这种方式存在，每次打包都要构建安装执行<code>tzdata</code>,在网差的情况下，这种构建就很慢了</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础镜像选择alpine 小巧安全流行方便</span></span><br><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-jre-alpine</span><br><span class="line"><span class="comment">#复制固定路径下打包好的jar包(target/*.jar)并重命名到容器跟目录(/app.jar)，或ADD</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> target/service.jar app.jar</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> target/lib lib</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  apk add --no-cache tzdata \</span></span><br><span class="line"><span class="bash">	&amp;&amp; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment">#健康检查 -s 静默模式，不下载文件</span></span><br><span class="line"><span class="comment">#HEALTHCHECK CMD wget -s http://127.0.0.1:14030/actuator/health || exit 1</span></span><br><span class="line"><span class="comment">#启动容器执行的命令 java -jar app.jar ,如果加其他参数加 ,&quot;-参数&quot;,</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h3 id="debian-系统"><a href="#debian-系统" class="headerlink" title="debian 系统"></a>debian 系统</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#TZ=Asia/Shanghai</span></span><br><span class="line"><span class="comment">#命令行设置方法</span></span><br><span class="line">ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class="built_in">echo</span> Asia/Shanghai &gt; /etc/timezone</span><br></pre></td></tr></table></figure>

<h5 id="dockerfile-设置"><a href="#dockerfile-设置" class="headerlink" title="dockerfile 设置"></a>dockerfile 设置</h5><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Alpine</tag>
        <tag>Timezone</tag>
        <tag>Encoding</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Alpine</title>
    <url>/2018/04/21/docker-alpine/</url>
    <content><![CDATA[<h2 id="Docker之基础系统Alpine-Linux"><a href="#Docker之基础系统Alpine-Linux" class="headerlink" title="Docker之基础系统Alpine Linux"></a>Docker之基础系统Alpine Linux</h2><p>Alpine是一个linux迷你系统，体积小、安全，docker中ubuntu的替代系统</p>
<ul>
<li>小巧: 官方镜像<a href="https://store.docker.com/images/alpine">docker pull alpine</a>只有4.15M</li>
<li>安全: 面向安全的轻量发行版</li>
<li>简单: 提供apk包管理工具从<a href="https://pkgs.alpinelinux.org/packages">仓库</a>管理安装</li>
<li>容器的基础镜像</li>
</ul>
<p><a href="https://github.com/gliderlabs/docker-alpine">gliderlabs/docker-alpine</a></p>
<p><a href="https://yeasy.gitbooks.io/docker_practice/content/cases/os/alpine.html">文档Alpine</a></p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>去<a href="https://pkgs.alpinelinux.org/packages">Alpine仓库</a>搜索你要安装的组件(package)然后执行<code>apk add --no-cache &lt;Package name&gt;</code></p>
<h4 id="docker-中alpine使用"><a href="#docker-中alpine使用" class="headerlink" title="docker 中alpine使用"></a>docker 中alpine使用</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run alpine <span class="built_in">echo</span> <span class="string">&#x27;123&#x27;</span> <span class="comment">#输出123，运行完镜像即摧毁</span></span><br><span class="line">docker run -it --name myalpine alpine <span class="comment">#运行一个容器并进入</span></span><br><span class="line"><span class="comment">### alpine常用命令，apk --help</span></span><br><span class="line">apk info <span class="comment">#查看安装的apk</span></span><br><span class="line">apk update <span class="comment">#更新镜像列表</span></span><br><span class="line">cat /etc/apk/repositories <span class="comment">#查看源</span></span><br><span class="line"><span class="comment">#http://dl-cdn.alpinelinux.org/alpine/v3.7/main</span></span><br><span class="line"><span class="comment">#http://dl-cdn.alpinelinux.org/alpine/v3.7/community</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;http://dl-cdn.alpinelinux.org/alpine/edge/testing&quot;</span> &gt;&gt; /etc/apk/repositories <span class="comment">#添加测试源,记得apk update</span></span><br><span class="line">cat /etc/apk/arch  <span class="comment">#查看系统版本Architecture，修改之后，之后的安装包都以该修改后的为准</span></span><br><span class="line">apk upgrade <span class="comment">#升级系统软件，解决编译版本过低等问题</span></span><br></pre></td></tr></table></figure>

<p>利用docker 构建mysql镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM alpine:3.5</span><br><span class="line">RUN apk add --no-cache mysql-client</span><br><span class="line">ENTRYPOINT [&quot;mysql&quot;]</span><br></pre></td></tr></table></figure>

<p>构建opencv镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM alpine:3.5</span><br><span class="line">RUN apk add --no-cache opencv</span><br><span class="line">ENTRYPOINT [&quot;opencv&quot;]</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/csdn_duomaomao/article/details/76152416">Alpine Linux 使用简介</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#采用国内阿里云的源，文件内容为：</span></span><br><span class="line">cat &gt; /etc/apk/repositories &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">https://mirrors.aliyun.com/alpine/v3.7/main/</span></span><br><span class="line"><span class="string">https://mirrors.aliyun.com/alpine/v3.7/community/</span></span><br><span class="line"><span class="string">https://mirrors.aliyun.com/alpine/edge/testing/</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment"># 如果采用中国科技大学的源，文件内容为：</span></span><br><span class="line">https://mirrors.ustc.edu.cn/alpine/v3.6/main/</span><br><span class="line">https://mirrors.ustc.edu.cn/alpine/v3.6/community/</span><br><span class="line">https://mirrors.ustc.edu.cn/alpine/edge/testing/</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Alpine</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 应用之gitlab</title>
    <url>/2018/01/17/docker-app-gitlab/</url>
    <content><![CDATA[<h2 id="单机应用gitlab"><a href="#单机应用gitlab" class="headerlink" title="单机应用gitlab"></a>单机应用gitlab</h2><h5 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><a href="https://store.docker.com/images/mysql">MySQL</a></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载</span></span><br><span class="line">docker pull mysql</span><br><span class="line"><span class="meta">#</span><span class="bash">启动mysql容器,返回容器id (-p 3306:3306 指定外部连接端口，不指定外部连接不上)</span></span><br><span class="line">docker run --name gitlab-mysql -e MYSQL_ROOT_PASSWORD=Mimais163. -d mysql</span><br><span class="line"><span class="meta">#</span><span class="bash">连接进入mysql命令行</span></span><br><span class="line">docker run -it --link gitlab-mysql:mysql --rm mysql sh -c &#x27;exec mysql -h&quot;$MYSQL_PORT_3306_TCP_ADDR&quot; -P&quot;$MYSQL_PORT_3306_TCP_PORT&quot; -uroot -p&quot;$MYSQL_ENV_MYSQL_ROOT_PASSWORD&quot;&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash">MySQL命令</span></span><br><span class="line">show databases; #显示数据库</span><br><span class="line">quit #退出命令行</span><br></pre></td></tr></table></figure>

<h5 id="redis"><a href="#redis" class="headerlink" title="redis"></a><a href="https://store.docker.com/images/redis">redis</a></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载</span></span><br><span class="line">docker pull redis</span><br><span class="line"><span class="meta">#</span><span class="bash">启动redis容器</span></span><br><span class="line">docker run --name gitlab-redis -d redis</span><br></pre></td></tr></table></figure>

<h5 id="sameersbn-gitlab"><a href="#sameersbn-gitlab" class="headerlink" title="sameersbn/gitlab"></a><a href="https://hub.docker.com/u/sameersbn/">sameersbn</a>/<a href="https://hub.docker.com/r/sameersbn/gitlab/">gitlab</a></h5><h6 id="注-在-Docker-中使用-GitLab"><a href="#注-在-Docker-中使用-GitLab" class="headerlink" title="注 在 Docker 中使用 GitLab"></a>注 <a href="http://beyondvincent.com/2016/09/19/2016-09-17-use-gitlab-with-docker/">在 Docker 中使用 GitLab</a></h6><p><a href="https://hub.docker.com/u/sameersbn/">sameersbn</a>/<a href="https://hub.docker.com/r/sameersbn/gitlab/">gitlab</a>和<a href="https://hub.docker.com/u/gitlab/">gitlab</a>/<a href="https://hub.docker.com/r/gitlab/gitlab-ce/">gitlab-ce</a>区别在于前者需要MySQL和redis,后者集成所有环境</p>
<h6 id="安装法一"><a href="#安装法一" class="headerlink" title="安装法一"></a><a href="https://docs.gitlab.com/omnibus/docker/">安装法一</a></h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载docker-compose.yml脚本</span></span><br><span class="line">wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml</span><br><span class="line"><span class="meta">#</span><span class="bash">安装pwgen密码生产器</span></span><br><span class="line">yum install pwgen</span><br><span class="line"><span class="meta">#</span><span class="bash">生成三个密码</span></span><br><span class="line">pwgen -Bsv1 64</span><br><span class="line"><span class="meta">#</span><span class="bash">修改docker-compose.yml下这三个参数</span></span><br><span class="line">-GITLAB_SECRETS_DB_KEY_BASE=CvpwfRsb5sNpmGRcX5fQFzTNtdkd5pNMK623PVP9rkwLsTDW4VlXMLmT4bKRLVzC</span><br><span class="line">-GITLAB_SECRETS_SECRET_KEY_BASE=cFdsD8xSKVCShL76hpWP3NdjTCm3XbtV7d3BXB9XZNHclq8n743s3vFTkMg3DppJ</span><br><span class="line">-GITLAB_SECRETS_OTP_KEY_BASE=P8rH42vPgg5pZ34Nt8t3pwnCBcPXNkjqV8kTxBlQCkFkSCXGhXvDRSGm2bBx593q</span><br><span class="line"><span class="meta">#</span><span class="bash">运行脚本</span></span><br><span class="line">docker-compose up</span><br><span class="line"><span class="meta">#</span><span class="bash">运行网页www.exxk.me:10080</span></span><br><span class="line"><span class="meta">#</span><span class="bash">用户名root</span></span><br></pre></td></tr></table></figure>

<h6 id="安装法二"><a href="#安装法二" class="headerlink" title="安装法二"></a>安装法二</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载安装</span></span><br><span class="line">docker pull sameersbn/gitlab</span><br><span class="line"><span class="meta">#</span><span class="bash">查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta">#</span><span class="bash">运行</span>  </span><br><span class="line">sudo docker run --detach \</span><br><span class="line">    --hostname gitlab.xuan.com \</span><br><span class="line">    --publish 10443:443 --publish 10080:80 --publish 10022:22 \</span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    --volume /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">    --volume /srv/gitlab/logs:/var/log/gitlab \</span><br><span class="line">    --volume /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br><span class="line"><span class="meta">#</span><span class="bash">查看运行的镜像</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p>访问地址<a href="http://112.74.51.136:10080/">http://112.74.51.136:10080</a></p>
<ul>
<li>注意开放端口</li>
</ul>
<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><p>编辑运行参数文件<code>vim docker-compose.yml</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">web</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">image</span>: <span class="string">&#x27;gitlab/gitlab-ce:latest&#x27;</span></span><br><span class="line">  <span class="attr">restart</span>: <span class="string">always</span></span><br><span class="line">  <span class="attr">hostname</span>: <span class="string">&#x27;gitlab.example.com&#x27;</span></span><br><span class="line">  <span class="attr">environment</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">GITLAB_OMNIBUS_CONFIG</span>: <span class="string">|</span></span><br><span class="line">      <span class="attr">external_url</span> <span class="string">&#x27;http://gitlab.example.com:9090&#x27;</span></span><br><span class="line">      <span class="meta">gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;]</span> = <span class="string">2224</span></span><br><span class="line">  <span class="attr">ports</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">&#x27;9090:9090&#x27;</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">&#x27;2224:22&#x27;</span></span><br><span class="line">  <span class="attr">volumes</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">&#x27;/srv/gitlab/config:/etc/gitlab&#x27;</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">&#x27;/srv/gitlab/logs:/var/log/gitlab&#x27;</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">&#x27;/srv/gitlab/data:/var/opt/gitlab&#x27;</span></span><br></pre></td></tr></table></figure>

<p>执行<code>docker-compose up -d</code> 运行</p>
<h3 id="sameersbn-gitlab-ci-multi-runner"><a href="#sameersbn-gitlab-ci-multi-runner" class="headerlink" title="sameersbn/gitlab-ci-multi-runner"></a><a href="https://docs.gitlab.com/runner/install/docker.html">sameersbn/gitlab-ci-multi-runner</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载</span></span><br><span class="line">docker pull gitlab/gitlab-runner</span><br><span class="line"><span class="meta">#</span><span class="bash">运行</span></span><br><span class="line">docker run -d --name gitlab-runner --restart always \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">  gitlab/gitlab-runner:latest</span><br><span class="line"><span class="meta">#</span><span class="bash">注册</span></span><br><span class="line">docker exec -it gitlab-runner gitlab-runner register</span><br></pre></td></tr></table></figure>

<p>执行后进入设置：相关参数见 <a href="http://exxk.me:10080/root/test_run/settings/ci_cd"> gitlab-&gt;project-settings-&gt;Pipelines</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入设置</span></span><br><span class="line">Running in system-mode.                            </span><br><span class="line">                                                   </span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span><br><span class="line"><span class="meta">#</span><span class="bash">Specify the following URL during the Runner setup:http://exxk.me:10080/</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> http://exxk.me:10080/</span></span><br><span class="line">Please enter the gitlab-ci token for this runner:</span><br><span class="line"><span class="meta">#</span><span class="bash">Use the following registration token during setup:qg78V4rsaxabgULs-cps</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> qg78V4rsaxabgULs-cps</span></span><br><span class="line">Please enter the gitlab-ci description for this runner:</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> [dd8f66b4b9ac]: aa</span></span><br><span class="line">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> cc</span></span><br><span class="line">Whether to run untagged builds [true/false]:</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> [<span class="literal">false</span>]:</span> </span><br><span class="line">Whether to lock Runner to current project [true/false]:</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> [<span class="literal">false</span>]:</span> </span><br><span class="line">Registering runner... succeeded                     runner=qg78V4rs</span><br><span class="line">Please enter the executor: docker, parallels, shell, docker+machine, kubernetes, docker-ssh, ssh, virtualbox, docker-ssh+machine:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择runner 运行的环境 这里是docker</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> docker</span></span><br><span class="line">Please enter the default Docker image (e.g. ruby:2.1):</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> tomcat</span></span><br><span class="line">Runner registered successfully. Feel free to start it, but if it&#x27;s running already the config should be automatically reloaded!</span><br></pre></td></tr></table></figure>

<h2 id="集群应用gitlab"><a href="#集群应用gitlab" class="headerlink" title="集群应用gitlab"></a>集群应用gitlab</h2><p>准备工作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /srv/docker/gitlab/postgresql</span><br><span class="line">mkdir -p /srv/docker/gitlab/redis</span><br><span class="line">mkdir -p /srv/docker/gitlab/gitlab</span><br></pre></td></tr></table></figure>

<p><code>vim gitlab.yml</code>见末尾</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动gitlab</span></span><br><span class="line">docker stack deploy -c gitlab.yml gitlab</span><br><span class="line"><span class="comment">#查看gitlab</span></span><br><span class="line">docker stack ps gitlab</span><br><span class="line"><span class="comment">#停止删除gitlab</span></span><br><span class="line">docker stack rm gitlab</span><br><span class="line"><span class="comment">#查看服务</span></span><br><span class="line">docker service ls</span><br><span class="line"><span class="comment">#查看服务详情</span></span><br><span class="line">docker service ps --no-trunc &lt;service id&gt;</span><br></pre></td></tr></table></figure>

<p><code>gitlab.yml</code>文件内容</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitlab.yml文件</span></span><br><span class="line"><span class="attr">version</span>: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">postgresql</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">image</span>: <span class="string">sameersbn/postgresql:9.6-2</span></span><br><span class="line">    <span class="attr">environment</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">DB_NAME=gitlabhq_production</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">DB_USER=gitlab</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">DB_PASS=xxxxx</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">DB_EXTENSION=pg_trgm</span></span><br><span class="line">    <span class="attr">volumes</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">/srv/docker/gitlab/postgresql:/var/lib/postgresql</span></span><br><span class="line">    <span class="attr">deploy</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">replicas</span>: <span class="string">1</span></span><br><span class="line">      <span class="attr">restart_policy</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">condition</span>: <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">constraints</span>: <span class="string">[node.role == worker]</span></span><br><span class="line">  <span class="attr">redis</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">image</span>: <span class="string">sameersbn/redis:latest</span></span><br><span class="line">    <span class="attr">command</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">--loglevel warning</span></span><br><span class="line">    <span class="attr">environment</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">/srv/docker/gitlab/redis:/var/lib/redis</span></span><br><span class="line">    <span class="attr">deploy</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">replicas</span>: <span class="string">1</span></span><br><span class="line">      <span class="attr">restart_policy</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">condition</span>: <span class="string">on-failure</span></span><br><span class="line">     <span class="attr">placement</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">constraints</span>: <span class="string">[node.role == worker]</span></span><br><span class="line">  <span class="attr">gitlab</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">image</span>: <span class="string">sameersbn/gitlab:9.5.4</span></span><br><span class="line">    <span class="attr">environment</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">GITLAB_HOST=exxk.me</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">GITLAB_PORT=10080</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">GITLAB_SSH_PORT=10022</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">DB_HOST=postgresql</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">DB_USER=gitlab</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">DB_PASS=xxxx</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">GITLAB_SECRETS_DB_KEY_BASE=xxxxzTNtdkd5pNMK623PVP9rkwLsTDW4VlXMLmT4bKRLVzC</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">GITLAB_SECRETS_SECRET_KEY_BASE=xxxxxjTCm3XbtV7d3BXB9XZNHclq8n743s3vFTkMg3DppJ</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">GITLAB_SECRETS_OTP_KEY_BASE=xxxxxxBcPXNkjqV8kTxBlQCkFkSCXGhXvDRSGm2bBx593q</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">GITLAB_TIMEZONE=Beijing</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">GITLAB_ROOT_PASSWORD=mimais163</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">REDIS_HOST=redis</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">REDIS_PORT=6379</span></span><br><span class="line">   <span class="meta">-</span> <span class="string">SMTP_USER=986905087@qq.com</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">SMTP_PASS=xxxxx</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">SMTP_HOST=smtp.qq.com</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">SMTP_PORT=465</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">SMTP_TLS=true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">volumes</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">/srv/docker/gitlab/gitlab:/home/git/data</span></span><br><span class="line">    <span class="attr">ports</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">10080:80</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">10022:22</span></span><br><span class="line">    <span class="attr">depends_on</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">postgresql</span></span><br><span class="line">      <span class="meta">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">deploy</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">replicas</span>: <span class="string">1</span></span><br><span class="line">      <span class="attr">restart_policy</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">condition</span>: <span class="string">on-failure</span></span><br><span class="line"> 	<span class="attr">placement</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">constraints</span>: <span class="string">[node.role == worker]</span></span><br></pre></td></tr></table></figure>

<h6 id="参考：compose-v3"><a href="#参考：compose-v3" class="headerlink" title="参考：compose-v3"></a>参考：<a href="https://help.aliyun.com/document_detail/56446.html?spm=a3c0i.o56446zh.a3.3.36e8e022ppja9J#Compose">compose-v3</a></h6><p>额外nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service create -p 8080:80 --name webserver nginx</span><br><span class="line">docker service inspect --format=<span class="string">&quot;&#123;&#123;json .Endpoint.Spec.Ports&#125;&#125;&quot;</span> webserver</span><br><span class="line">[&#123;<span class="string">&quot;Protocol&quot;</span>:<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;TargetPort&quot;</span>:80,<span class="string">&quot;PublishedPort&quot;</span>:8080,<span class="string">&quot;PublishMode&quot;</span>:<span class="string">&quot;ingress&quot;</span>&#125;]</span><br><span class="line">docker service update --replicas 1 webserver</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>gitlab</tag>
        <tag>runner</tag>
        <tag>swarm</tag>
        <tag>statck</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 应用之owncloud</title>
    <url>/2018/02/28/docker-app-owncloud/</url>
    <content><![CDATA[<h2 id="Docker-应用之owncloud"><a href="#Docker-应用之owncloud" class="headerlink" title="Docker 应用之owncloud"></a>Docker 应用之owncloud</h2><p>官网：<a href="https://hub.docker.com/_/owncloud/">library/owncloud</a></p>
<p>默认会创建挂载卷<code>-v /&lt;mydatalocation&gt;:/var/www/html</code></p>
<p>细分挂载卷</p>
<ul>
<li><code>-v /&lt;mydatalocation&gt;/apps:/var/www/html/apps</code> installed / modified apps</li>
<li><code>-v /&lt;mydatalocation&gt;/config:/var/www/html/config</code> local configuration</li>
<li><code>-v /&lt;mydatalocation&gt;/data:/var/www/html/data</code> the actual data of your ownCloud （网盘文件）</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull owncloud</span><br><span class="line"><span class="comment">#默认安装，会默认创建一个挂载卷</span></span><br><span class="line">docker run -d -p 14007:80 owncloud:8.1</span><br><span class="line"><span class="comment">#将网盘文件存储指向到oss，注意挂载目录的权限问题，否则没权限操作会报错</span></span><br><span class="line">docker run -v /ossfs/owncloud:/var/www/html/data -d -p 14007:80 owncloud:latest</span><br></pre></td></tr></table></figure>

<h4 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h4><p>虽然成功存储到了oss里面但是极度卡，就算是阿里云内网ossfs，一样的卡，因此放弃存到ossfs,可以考虑备份放到ossfs</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>ossfs</tag>
        <tag>owncloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Ceph</title>
    <url>/2018/09/30/docker-ceph/</url>
    <content><![CDATA[<h1 id="docker-统一存储之ceph"><a href="#docker-统一存储之ceph" class="headerlink" title="docker 统一存储之ceph"></a>docker 统一存储之ceph</h1><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h4 id="ceph核心服务"><a href="#ceph核心服务" class="headerlink" title="ceph核心服务"></a><a href="http://docs.ceph.com/docs/master/start/intro/">ceph核心服务</a></h4><ol>
<li><p>MonItor(<code>mon</code>)  监视器</p>
<p>维护集群状态的映射，包括监视器映射，管理器映射，OSD映射和CRUSH映射。这些映射是Ceph守护进程相互协调所需的关键集群状态。监视器还负责管理守护进程和客户端之间的身份验证。冗余和高可用性通常至少需要三个监视器。</p>
</li>
<li><p>Managers(<code>mgr</code>)  管理器</p>
<p>守护程序（ceph-mgr）负责跟踪运行时指标和Ceph集群的当前状态，包括存储利用率，当前性能指标和系统负载。 Ceph Manager守护进程还托管基于python的插件来管理和公开Ceph集群信息，包括基于Web的Ceph Manager Dashboard和REST API。高可用性通常至少需要两个管理器。</p>
</li>
<li><p>OSDs(<code>osd_ceph_disk</code>) 对象存储守护进程</p>
<p>存储数据，处理数据复制，恢复，重新平衡，并通过检查其他Ceph OSD守护进程来获取心跳，为Ceph监视器和管理器提供一些监视信息。冗余和高可用性通常至少需要3个Ceph OSD。</p>
</li>
<li><p>MDSs(<code>mds</code>) Ceph元数据服务器</p>
<p>代表Ceph文件系统存储元数据（即，Ceph块设备和Ceph对象存储不使用MDS）。 Ceph元数据服务器允许POSIX文件系统用户执行基本命令（如ls，find等），而不会给Ceph存储集群带来巨大负担。</p>
</li>
</ol>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol>
<li><p>断电关机重启问题，如果是安装在容器里，面临自动挂载和卸载问题</p>
<p>如果挂载了关机时，容器先关闭，导致卸载出问题，一直关不了机</p>
<p>开机时重新挂载，看不到数据问题</p>
</li>
<li><p>集群部署，osd服务的<code> privileged: true</code>特权模式不支持，导致不能操作mount相关</p>
</li>
<li><p>采用<code>docker plugin install rexray/rbd</code>插件模式挂载，服务的挂载目录不能更改，且外部需要安装ceph基本组件（考虑是否部分服务安装主机上，可解决123问题）</p>
</li>
</ol>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="重新部署执行"><a href="#重新部署执行" class="headerlink" title="重新部署执行"></a>重新部署执行</h4><p><code>docker run -d --privileged=true -v /dev/:/dev/ -e OSD_DEVICE=/dev/sda ceph/daemon zap_device</code></p>
<p>并清理目录</p>
<ol>
<li><p>三台机执行，其中<code>MON_IP</code>替换本机ip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">        --name=mon \</span><br><span class="line">        --net=host \</span><br><span class="line">        -v /etc/ceph:/etc/ceph \</span><br><span class="line">        -v /var/lib/ceph/:/var/lib/ceph/ \</span><br><span class="line">        -e MON_IP=192.168.1.230 \</span><br><span class="line">        -e CEPH_PUBLIC_NETWORK=192.168.1.0/24 \</span><br><span class="line">        ceph/daemon mon</span><br></pre></td></tr></table></figure>

<p>该部不能通过集群stack部署，因为<code>--net=host</code>是指用主机网络</p>
</li>
<li><p>然后复制目录<code>/dockerdata/ceph/data</code>到另一台机，复制<code>/dockerdata/ceph/config/bootstrap*</code>到另一台机</p>
</li>
<li><p>启动第二台，如果有第三台，第三台同理</p>
</li>
<li><p>执行<code>docker exec mon ceph -s</code>就可以看到两台了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@environment-test1 ceph]<span class="comment">#  docker exec mon ceph -s</span></span><br><span class="line">  cluster:</span><br><span class="line">    id:     cf6e2bed-0eb6-4ba1-9854-e292c936ea0f</span><br><span class="line">    health: HEALTH_OK</span><br><span class="line"> </span><br><span class="line">  services:</span><br><span class="line">    mon: 2 daemons, quorum lfadmin,environment-test1</span><br><span class="line">    mgr: no daemons active</span><br><span class="line">    osd: 0 osds: 0 up, 0 <span class="keyword">in</span></span><br><span class="line"> </span><br><span class="line">  data:</span><br><span class="line">    pools:   0 pools, 0 pgs</span><br><span class="line">    objects: 0  objects, 0 B</span><br><span class="line">    usage:   0 B used, 0 B / 0 B avail</span><br><span class="line">    pgs:     </span><br></pre></td></tr></table></figure>
</li>
<li><p>添加osd,需要先在主机上添加一块新硬盘,执行<code>lsblk</code>查看硬盘编号,硬盘非空，会启动报错，如何清空看<a href="">磁盘格始化(删除所有分区)</a>,单个分区<code>sda5</code>不成功，最后只好全磁盘格式化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">        --net=host \</span><br><span class="line">        --name=ceph_osd \</span><br><span class="line">        --restart=always \</span><br><span class="line">        -v /etc/ceph:/etc/ceph \</span><br><span class="line">        -v /var/lib/ceph/:/var/lib/ceph/ \</span><br><span class="line">        -v /dev/:/dev/ \</span><br><span class="line">        --privileged=<span class="literal">true</span> \</span><br><span class="line">        -e OSD_FORCE_ZAP=1 \</span><br><span class="line">        -e OSD_DEVICE=/dev/sda \</span><br><span class="line">        ceph/daemon osd_ceph_disk</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行<code>docker exec mon ceph -s</code>就可以看到两台了和一个<strong>osd</strong>了,但是空间详情看不到，需要运行mds和rgw服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@environment-test1 ~]<span class="comment"># docker exec mon ceph -s</span></span><br><span class="line">  cluster:</span><br><span class="line">    id:     cf6e2bed-0eb6-4ba1-9854-e292c936ea0f</span><br><span class="line">    health: HEALTH_WARN</span><br><span class="line">            no active mgr</span><br><span class="line"> </span><br><span class="line">  services:</span><br><span class="line">    mon: 2 daemons, quorum lfadmin,environment-test1</span><br><span class="line">    mgr: no daemons active</span><br><span class="line">    osd: 1 osds: 1 up, 1 <span class="keyword">in</span></span><br><span class="line"> </span><br><span class="line">  data:</span><br><span class="line">    pools:   0 pools, 0 pgs</span><br><span class="line">    objects: 0  objects, 0 B</span><br><span class="line">    usage:   0 B used, 0 B / 0 B avail</span><br><span class="line">    pgs: </span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 mgr</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">        --net=host \</span><br><span class="line">        --name=mgr \</span><br><span class="line">        -v /dockerdata/ceph/data:/etc/ceph \</span><br><span class="line">        -v /dockerdata/ceph/config/:/var/lib/ceph/ \</span><br><span class="line">        ceph/daemon mgr</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 mds</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">        --net&#x3D;host \</span><br><span class="line">        --name&#x3D;mds \</span><br><span class="line">        -v &#x2F;dockerdata&#x2F;ceph&#x2F;data:&#x2F;etc&#x2F;ceph \</span><br><span class="line">        -v &#x2F;dockerdata&#x2F;ceph&#x2F;config&#x2F;:&#x2F;var&#x2F;lib&#x2F;ceph&#x2F; \</span><br><span class="line">        -e CEPHFS_CREATE&#x3D;1 \</span><br><span class="line">        ceph&#x2F;daemon mds</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 rgw</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">        --name=rgw \</span><br><span class="line">        -p 80:80 \</span><br><span class="line">        -v /dockerdata/ceph/data:/etc/ceph \</span><br><span class="line">        -v /dockerdata/ceph/config/:/var/lib/ceph/ \</span><br><span class="line">        ceph/daemon rgw</span><br></pre></td></tr></table></figure>
</li>
<li><p>再次执行<code>docker exec mon ceph -s</code>查看,就可以看到空间信息了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@environment-test1 ~]# docker exec mon ceph -s</span><br><span class="line">  cluster:</span><br><span class="line">    id:     cf6e2bed-0eb6-4ba1-9854-e292c936ea0f</span><br><span class="line">    health: HEALTH_WARN</span><br><span class="line">            1 MDSs report slow metadata IOs</span><br><span class="line">            Reduced data availability: 24 pgs inactive</span><br><span class="line">            Degraded data redundancy: 24 pgs undersized</span><br><span class="line">            too few PGs per OSD (24 &lt; min 30)</span><br><span class="line"> </span><br><span class="line">  services:</span><br><span class="line">    mon: 2 daemons, quorum lfadmin,environment-test1</span><br><span class="line">    mgr: environment-test1(active)</span><br><span class="line">    mds: cephfs-1/1/1 up  &#123;0=environment-test1=up:creating&#125;</span><br><span class="line">    osd: 1 osds: 1 up, 1 in</span><br><span class="line"> </span><br><span class="line">  data:</span><br><span class="line">    pools:   3 pools, 24 pgs</span><br><span class="line">    objects: 0  objects, 0 B</span><br><span class="line">    usage:   2.0 GiB used, 463 GiB / 465 GiB avail</span><br><span class="line">    pgs:     100.000% pgs not active</span><br><span class="line">             24 undersized+peered</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>测试发现只有一个osd挂载失败，因此在两台电脑都添加osd，并都挂载</p>
<ol>
<li><p>首先查看登陆用户名和密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@environment-test1 ~]# cat /dockerdata/ceph/data/ceph.client.admin.keyring </span><br><span class="line">[client.admin]</span><br><span class="line">	key = AQDTqMFbDC4UAxAApyOvC8I+8nA5PMK1bHWDWQ==</span><br><span class="line">	auid = 0</span><br><span class="line">	caps mds = &quot;allow&quot;</span><br><span class="line">	caps mgr = &quot;allow *&quot;</span><br><span class="line">	caps mon = &quot;allow *&quot;</span><br><span class="line">	caps osd = &quot;allow *&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建挂载目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lfadmin mnt]# mkdir /mnt/mycephfs</span><br></pre></td></tr></table></figure>
</li>
<li><p>挂载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lfadmin mnt]# mount -t ceph 192.168.1.213,192.168.1.230,192.168.1.212:/ /dockerdata/cephdata -o name=admin,secret=AQCu98JblQgRChAAskEmJ1ekN2Vasa9Chw+gvg==</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置开机自动挂载?</p>
</li>
<li><p>取消挂载<code>umount /mnt/mycephfs/</code> 如果被占用，关闭占用程序和窗口</p>
</li>
</ol>
<p>   docker exec ea8577875af3 ceph osd tree</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol>
<li>两台节点，一台当掉，不能访问挂载目录</li>
</ol>
<h2 id="集成部署"><a href="#集成部署" class="headerlink" title="集成部署"></a>集成部署</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.6&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">hostnet:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">host</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mon212:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ceph/daemon</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mon</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">hostnet:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/ceph:/etc/ceph</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/lib/ceph/:/var/lib/ceph/</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MON_IP:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.212</span></span><br><span class="line">      <span class="attr">CEPH_PUBLIC_NETWORK:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">worker</span>]</span><br><span class="line">  <span class="attr">mon213:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ceph/daemon</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mon</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">hostnet:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/ceph:/etc/ceph</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/lib/ceph/:/var/lib/ceph/</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MON_IP:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.213</span></span><br><span class="line">      <span class="attr">CEPH_PUBLIC_NETWORK:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">lfadmin</span>]</span><br><span class="line">  <span class="attr">mon230:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ceph/daemon</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mon</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">hostnet:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/ceph:/etc/ceph</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/lib/ceph/:/var/lib/ceph/</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MON_IP:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.230</span></span><br><span class="line">      <span class="attr">CEPH_PUBLIC_NETWORK:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">environment-test1</span>]</span><br><span class="line">  <span class="attr">mgr230:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ceph/daemon</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mgr</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">hostnet:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/ceph:/etc/ceph</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/lib/ceph/:/var/lib/ceph/</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">environment-test1</span>]</span><br><span class="line">  <span class="attr">mds230:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ceph/daemon</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mds</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">hostnet:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/ceph:/etc/ceph</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/lib/ceph/:/var/lib/ceph/</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">CEPHFS_CREATE:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">environment-test1</span>]   </span><br><span class="line">  <span class="attr">rgw230:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ceph/daemon</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">rgw</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">hostnet:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/ceph:/etc/ceph</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/lib/ceph/:/var/lib/ceph/</span></span><br><span class="line">    <span class="attr">ports:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">14002</span>   <span class="comment">#只有worker能访问该端口</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span>  <span class="comment">#版本要求3.2      </span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">environment-test1</span>]          </span><br><span class="line"><span class="comment"># osd挂载需要特权模式（privileged=true），目前不支持        </span></span><br><span class="line"><span class="comment">#  osd213:</span></span><br><span class="line"><span class="comment">#    restart: always</span></span><br><span class="line"><span class="comment">#    image: ceph/daemon</span></span><br><span class="line"><span class="comment">#    command: osd_ceph_disk</span></span><br><span class="line"><span class="comment">#    privileged: true</span></span><br><span class="line"><span class="comment">#    networks:</span></span><br><span class="line"><span class="comment">#      hostnet: &#123;&#125;</span></span><br><span class="line"><span class="comment">#    volumes:</span></span><br><span class="line"><span class="comment">#      - /dockerdata/ceph/data:/etc/ceph</span></span><br><span class="line"><span class="comment">#      - /dockerdata/ceph/config/:/var/lib/ceph/</span></span><br><span class="line"><span class="comment">#      - /dev/:/dev/</span></span><br><span class="line"><span class="comment">#    environment:</span></span><br><span class="line"><span class="comment">#      OSD_FORCE_ZAP: 1</span></span><br><span class="line"><span class="comment">#      OSD_DEVICE: /dev/sda</span></span><br><span class="line"><span class="comment">#    deploy:</span></span><br><span class="line"><span class="comment">#      replicas: 1</span></span><br><span class="line"><span class="comment">#      restart_policy:</span></span><br><span class="line"><span class="comment">#        condition: on-failure</span></span><br><span class="line"><span class="comment">#      placement:</span></span><br><span class="line"><span class="comment">#        constraints: [node.hostname == lfadmin]</span></span><br><span class="line"><span class="comment">#  osd230:</span></span><br><span class="line"><span class="comment">#    restart: always</span></span><br><span class="line"><span class="comment">#    image: ceph/daemon</span></span><br><span class="line"><span class="comment">#    command: osd_ceph_disk</span></span><br><span class="line"><span class="comment">#    privileged: true</span></span><br><span class="line"><span class="comment">#    networks:</span></span><br><span class="line"><span class="comment">#      hostnet: &#123;&#125;</span></span><br><span class="line"><span class="comment">#    volumes:</span></span><br><span class="line"><span class="comment">#      - /dockerdata/ceph/data:/etc/ceph</span></span><br><span class="line"><span class="comment">#      - /dockerdata/ceph/config/:/var/lib/ceph/</span></span><br><span class="line"><span class="comment">#      - /dev/:/dev/</span></span><br><span class="line"><span class="comment">#    environment:</span></span><br><span class="line"><span class="comment">#      OSD_FORCE_ZAP: 1</span></span><br><span class="line"><span class="comment">#      OSD_DEVICE: /dev/sda</span></span><br><span class="line"><span class="comment">#    deploy:</span></span><br><span class="line"><span class="comment">#      replicas: 1</span></span><br><span class="line"><span class="comment">#      restart_policy:</span></span><br><span class="line"><span class="comment">#        condition: on-failure</span></span><br><span class="line"><span class="comment">#      placement:</span></span><br><span class="line"><span class="comment">#        constraints: [node.hostname == environment-test1]</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure>







<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>swarm 不支持<code>  privileged: true</code>特权模式，所以使用集群部署时，提示没有权限</p>
<h3 id="磁盘格始化-删除所有分区"><a href="#磁盘格始化-删除所有分区" class="headerlink" title="磁盘格始化(删除所有分区)"></a>磁盘格始化(删除所有分区)</h3><p>查看分区情况<code>lsblk</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@environment-test1 ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME            MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0 465.8G  0 disk </span><br><span class="line">├─sda1            8:1    0  70.9G  0 part </span><br><span class="line">├─sda2            8:2    0     1K  0 part </span><br><span class="line">├─sda5            8:5    0 105.1G  0 part </span><br><span class="line">├─sda6            8:6    0   145G  0 part </span><br><span class="line">└─sda7            8:7    0 144.7G  0 part </span><br><span class="line">sdb               8:16   0 465.8G  0 disk </span><br><span class="line">├─sdb1            8:17   0   200M  0 part /boot/efi</span><br><span class="line">├─sdb2            8:18   0     1G  0 part /boot</span><br><span class="line">└─sdb3            8:19   0 464.6G  0 part </span><br><span class="line">  ├─centos-root 253:0    0   408G  0 lvm  /</span><br><span class="line">  ├─centos-swap 253:1    0   5.8G  0 lvm  [SWAP]</span><br><span class="line">  └─centos-home 253:2    0    50G  0 lvm  /home</span><br></pre></td></tr></table></figure>

<p>格式化磁盘<code>mkfs.ext4 /dev/sda</code>，如果是格式化一个区，跟上特定数字，例如<code>mkfs.ext4 /dev/sda5</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@environment-test1 ~]<span class="comment"># mkfs.ext4 /dev/sda</span></span><br><span class="line">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">/dev/sda is entire device, not just one partition!</span><br><span class="line">无论如何也要继续? (y,n) y</span><br><span class="line">文件系统标签=</span><br><span class="line">OS <span class="built_in">type</span>: Linux</span><br><span class="line">块大小=4096 (<span class="built_in">log</span>=2)</span><br><span class="line">分块大小=4096 (<span class="built_in">log</span>=2)</span><br><span class="line">Stride=0 blocks, Stripe width=0 blocks</span><br><span class="line">30531584 inodes, 122096646 blocks</span><br><span class="line">6104832 blocks (5.00%) reserved <span class="keyword">for</span> the super user</span><br><span class="line">第一个数据块=0</span><br><span class="line">Maximum filesystem blocks=2271215616</span><br><span class="line">3727 block groups</span><br><span class="line">32768 blocks per group, 32768 fragments per group</span><br><span class="line">8192 inodes per group</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, </span><br><span class="line">	4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968, </span><br><span class="line">	102400000</span><br><span class="line"></span><br><span class="line">Allocating group tables: 完成                            </span><br><span class="line">正在写入inode表: 完成                            </span><br><span class="line">Creating journal (32768 blocks): 完成</span><br><span class="line">Writing superblocks and filesystem accounting information: 完成 </span><br></pre></td></tr></table></figure>

<p>再次查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@environment-test1 ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME            MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0 465.8G  0 disk </span><br><span class="line">sdb               8:16   0 465.8G  0 disk </span><br><span class="line">├─sdb1            8:17   0   200M  0 part /boot/efi</span><br><span class="line">├─sdb2            8:18   0     1G  0 part /boot</span><br><span class="line">└─sdb3            8:19   0 464.6G  0 part </span><br><span class="line">  ├─centos-root 253:0    0   408G  0 lvm  /</span><br><span class="line">  ├─centos-swap 253:1    0   5.8G  0 lvm  [SWAP]</span><br><span class="line">  └─centos-home 253:2    0    50G  0 lvm  /home</span><br></pre></td></tr></table></figure>

<h3 id="减少（压缩）分区空间（大小）"><a href="#减少（压缩）分区空间（大小）" class="headerlink" title="减少（压缩）分区空间（大小）"></a>减少（压缩）分区空间（大小）</h3><p><a href="http://www.cuwww.com/help/detail-78.html">CentOS Linux如何无损调整分区大小（XFS文件系统）</a>  : 没有做到无损</p>
<p>没找到无损调整的方法</p>
<p><a href="https://www.linuxidc.com/Linux/2016-06/132270.htm">https://www.linuxidc.com/Linux/2016-06/132270.htm</a></p>
<p><a href="http://blog.51cto.com/happyliu/1902022">http://blog.51cto.com/happyliu/1902022</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://my.oschina.net/wenzhenxi/blog/1845710">[喵咪Liunx(7)]Ceph分布式文件共享解决方案</a></p>
<p><a href="https://tobegit3hub1.gitbooks.io/ceph_from_scratch/content/usage/index.html">https://tobegit3hub1.gitbooks.io/ceph_from_scratch/content/usage/index.html</a></p>
<p><a href="https://github.com/sepich/ceph-swarm/blob/master/docker-compose.yml">swarm脚本部署</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Compose-file</title>
    <url>/2018/04/28/docker-compose-file/</url>
    <content><![CDATA[<h2 id="Compos-file-版本3以上"><a href="#Compos-file-版本3以上" class="headerlink" title="Compos file 版本3以上"></a>Compos file 版本3以上</h2><p><a href="https://docs.docker.com/compose/compose-file/#compose-and-docker-compatibility-matrix">Compos file v3官网</a></p>
<h4 id="build"><a href="#build" class="headerlink" title="build"></a><a href="%E5%8D%95%E6%9C%BA%E6%A8%A1%E5%BC%8F">build</a></h4><p>只支持单机运行</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span> <span class="comment">#指明版本3，docker stack需要版本3以上</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span> </span><br><span class="line">    <span class="attr">build:</span>  <span class="comment">#集群部署会忽略构建镜像，stack只支持提前构建好镜像</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./dir</span> <span class="comment">#构建上下文路径</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span>  <span class="comment">#构建文件</span></span><br><span class="line">      <span class="attr">args:</span>  <span class="comment">#构建参数</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="configs-swarm模式"><a href="#configs-swarm模式" class="headerlink" title="configs (swarm模式)"></a><a href="https://docs.docker.com/engine/swarm/configs/#simple-example-get-started-with-configs">configs</a> (swarm模式)</h4><p>只支持集群模式运行</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">my_config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">my_other_config</span></span><br><span class="line"><span class="attr">configs:</span></span><br><span class="line">  <span class="attr">my_config:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">./my_config.txt</span></span><br><span class="line">  <span class="attr">my_other_config:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="command"><a href="#command" class="headerlink" title="command"></a><a href="">command</a></h4><p>会覆盖dockerfile里面的命令例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">thin</span> <span class="string">-p</span> <span class="number">3000</span> <span class="comment">#docker-compose.yml覆盖dockerfile的命令</span></span><br><span class="line"><span class="attr">command:</span> [<span class="string">&quot;bundle&quot;</span>, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;thin&quot;</span>, <span class="string">&quot;-p&quot;</span>, <span class="string">&quot;3000&quot;</span>] <span class="comment">#dockerfile等效于上面的命令</span></span><br></pre></td></tr></table></figure>

<h4 id="deploy-swarm模式"><a href="#deploy-swarm模式" class="headerlink" title="deploy(swarm模式)"></a>deploy(swarm模式)</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line">    <span class="attr">labels:</span> <span class="comment">#容器上的标签</span></span><br><span class="line">       <span class="attr">com.example.description:</span> <span class="string">&quot; containers 上的标签&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">global</span> <span class="comment">#可选global(全局模式，每台机一个)/replicated(多台)</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">6</span> <span class="comment">#部署的总数量</span></span><br><span class="line">      <span class="attr">update_config:</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">endpoint_mode:</span> <span class="string">vip</span>  <span class="comment">#可选vip(默认)/dnsrr，主要是IP啥的</span></span><br><span class="line">      <span class="attr">labels:</span> <span class="comment">#服务器上的标签</span></span><br><span class="line">        <span class="attr">com.example.description:</span> <span class="string">&quot;This label will appear on the web service&quot;</span></span><br><span class="line">      <span class="attr">placement:</span> <span class="comment">#指定部署的信息</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span> <span class="comment">#只在管理节点运行</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">engine.labels.operatingsystem</span> <span class="string">==</span> <span class="string">ubuntu</span> <span class="number">14.04</span></span><br><span class="line">        <span class="attr">preferences:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">spread:</span> <span class="string">node.labels.zone</span></span><br><span class="line">      <span class="attr">resources:</span> <span class="comment">#资源限制</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line"><span class="comment">#cpu个数0.5指一个cpu的50%，2.00指2个cpu（猜测99%）其中docker stats命令可以查看cpu使用率和内存使用，其中cpu使用率是指单核的使用率，也就是如果cpus设置为2，使用率200%就代表2个核都使用达到了100%        </span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;0.50&#x27;</span>  </span><br><span class="line">          <span class="attr">memory:</span> <span class="string">50M</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;0.25&#x27;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">20M</span></span><br><span class="line">      <span class="attr">restart_policy:</span> <span class="comment">#重启策略</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">5s</span></span><br><span class="line">        <span class="attr">max_attempts:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">window:</span> <span class="string">120s</span></span><br><span class="line">      <span class="attr">update_config:</span> <span class="comment">#更新配置策略</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">order:</span> <span class="string">stop-first</span></span><br><span class="line">    <span class="attr">depends_on:</span>  <span class="comment">#依赖的服务模块，在db启动才启动服务，但是不能保证db启动完，如果要设置启动顺序见</span></span><br><span class="line">    <span class="comment">#https://docs.docker.com/compose/startup-order/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">healthcheck:</span> <span class="comment">#健康检查</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">40s</span></span><br><span class="line">    <span class="attr">logging:</span> <span class="comment">#日志服务</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">syslog</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">syslog-address:</span> <span class="string">&quot;tcp://192.168.0.42:123&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment">#自定义挂在卷</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">      <span class="attr">source:</span> <span class="string">mydata</span></span><br><span class="line">      <span class="attr">target:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">volume:</span></span><br><span class="line">      <span class="attr">nocopy:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span></span><br><span class="line">      <span class="attr">source:</span> <span class="string">./static</span></span><br><span class="line">      <span class="attr">target:</span> <span class="string">/opt/app/static</span></span><br><span class="line">    <span class="attr">ports:</span>  <span class="comment">#自定义端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure>



<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>错误<code>services.nginx.ports.0 must be a string or number</code>是因为自定义端口,只支持3.2以上</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.2&#x27;</span> </span><br><span class="line"> <span class="attr">ports:</span>  <span class="comment">#自定义端口</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">80</span></span><br><span class="line">     <span class="attr">published:</span> <span class="number">8080</span></span><br><span class="line">     <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">     <span class="attr">mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>stack</tag>
        <tag>yaml</tag>
        <tag>Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Disk-Space-Full</title>
    <url>/2018/08/27/docker-disk-space-full/</url>
    <content><![CDATA[<h2 id="docker占用大量磁盘空间分析"><a href="#docker占用大量磁盘空间分析" class="headerlink" title="docker占用大量磁盘空间分析"></a>docker占用大量磁盘空间分析</h2><h4 id="linux-磁盘分析"><a href="#linux-磁盘分析" class="headerlink" title="linux 磁盘分析"></a>linux 磁盘分析</h4><p><code>df -h</code> 查看挂载使用情况</p>
<p><code> du -h --max-depth=1 /var/lib/docker/overlay2</code> 查看某个目录下文件夹大小</p>
<h4 id="docker-磁盘空间占用情况"><a href="#docker-磁盘空间占用情况" class="headerlink" title="docker 磁盘空间占用情况"></a>docker 磁盘空间占用情况</h4><p>查看docker 空间分布</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@environment-test1 ~]<span class="comment"># docker system df</span></span><br><span class="line">TYPE              TOTAL      ACTIVE       SIZE             RECLAIMABLE</span><br><span class="line">Images            26         6            4.554GB          2.513GB (55%)</span><br><span class="line">Containers        8          6            157.7GB          157.3GB (99%)</span><br><span class="line">Local Volumes     0          0            0B               0B</span><br><span class="line">Build Cache       0          0            0B               0B</span><br></pre></td></tr></table></figure>

<p>查看空间占用细节<code>docker system df -v</code>会显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@environment-test1 ~]# docker system df -v</span><br><span class="line">Images space usage:</span><br><span class="line"></span><br><span class="line">REPOSITORY                               TAG                 IMAGE ID            CREATED ago         SIZE                SHARED SIZE         UNIQUE SiZE         CONTAINERS</span><br><span class="line">redis                                    latest              4e8db158f18d        3 weeks ago ago     83.4MB              58.6MB              24.8MB              2</span><br><span class="line"></span><br><span class="line">Containers space usage:</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE                              COMMAND                  LOCAL VOLUMES       SIZE                CREATED ago          STATUS                        NAMES                   </span><br><span class="line">2f9172a5f6d2        manage&#x2F;test&#x2F;ygl&#x2F;hikvision:latest   &quot;&#x2F;usr&#x2F;bin&#x2F;supervisor…&quot;   0                   157GB               42 hours ago ago     Dead                          manager-test-ygl_hikvision.1.6deoeddsuari0ob63cddg8f28</span><br><span class="line">3bd29db83e99        redis:latest                       &quot;docker-entrypoint.s…&quot;   0                   0B                  42 hours ago ago     Exited (137) 16 minutes ago   manager-test-ygl_redis.1.ha792r91z4erzmn967sf9u4zx</span><br><span class="line"></span><br><span class="line">Local Volumes space usage:</span><br><span class="line"></span><br><span class="line">VOLUME NAME         LINKS               SIZE</span><br><span class="line"></span><br><span class="line">Build cache usage: 0B</span><br></pre></td></tr></table></figure>

<p>最后找到占用最多的容器，分析原因解决即可</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Disk</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-ELK</title>
    <url>/2020/08/20/docker-elk/</url>
    <content><![CDATA[<h2 id="ELK-EFK简介"><a href="#ELK-EFK简介" class="headerlink" title="ELK/EFK简介"></a><a href="https://www.elastic.co/cn/">ELK/EFK简介</a></h2><p>E(Elasticsearch)+L(Logstash)+K(Kibana)</p>
<p>E(Elasticsearch)+F(Filebeat)+K(Kibana)</p>
<p>Redis/Mq/kafka大数据高提高弹性时候可选</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">B(beats数据采集)-.-&gt;G([redis&#x2F;mq&#x2F;kafka])-.-&gt;L[Logstash数据管道&#x2F;处理]--&gt;E[Elasticsearch数据存储&#x2F;索引]--&gt;K[Kibana数据分析&#x2F;显示]</span><br><span class="line">B--&gt;L</span><br></pre></td></tr></table></figure>

<h2 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h2><p>输入支持：tcp,http,file,beats,kafka,rabbitmq,redis,log4j,elasticsearch,jdbc,websocket</p>
<p>过滤器支持：grok,ruby,mutate,json</p>
<p>输出支持：elasticsearch,File,Emial,http,Kafka,Redis,MongoDB,Rabbitmq,Syslog,Tcp,Websocket,Zabbix,Stdout,Csv</p>
<h2 id="Filebeat-vs-fluent"><a href="#Filebeat-vs-fluent" class="headerlink" title="Filebeat vs fluent"></a>Filebeat vs fluent</h2><p>Filebeat主要用于数据采集，轻量对应用服务器消耗较小，虽然Logstash也可以采集数据，但Logstash占用应用服务器性能比Filebeat大</p>
<p>fluent是Filebeat的高级版，支持很多其他日志输入模式</p>
<h2 id="springboot-log框架包"><a href="#springboot-log框架包" class="headerlink" title="springboot log框架包"></a>springboot log框架包</h2><ul>
<li>/<strong><a href="https://github.com/logstash/logstash-logback-encoder">logstash-logback-encoder</a></strong> Star 1.7k</li>
<li>/<strong><a href="https://github.com/danielwegener/logback-kafka-appender">logback-kafka-appender</a></strong> Star 472</li>
<li>/<strong><a href="https://github.com/sndyuk/logback-more-appenders">logback-more-appenders</a></strong> Star 87</li>
<li><a href="https://github.com/kmtong">kmtong</a>/<strong><a href="https://github.com/kmtong/logback-redis-appender">logback-redis-appender</a></strong> Star 103</li>
</ul>
<h2 id="架构选型"><a href="#架构选型" class="headerlink" title="架构选型"></a>架构选型</h2><h3 id="方案一-EFK-docker-log模式"><a href="#方案一-EFK-docker-log模式" class="headerlink" title="方案一 EFK(docker log模式)"></a>方案一 EFK(docker log模式)</h3><p>利用Filebeat采集docker日志，从而监控docker上所有或指定服务的日志，实现SpringCloud的日志监听</p>
<p>优点: 对现有服务侵入无，不需要改造现有服务</p>
<p>缺点：强依赖于docker，只能监听docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">B(Filebeat收集docker日志)--&gt;E[Elasticsearch]--&gt;K[Kibana]</span><br></pre></td></tr></table></figure>

<h3 id="方案二-Logstash采用"><a href="#方案二-Logstash采用" class="headerlink" title="方案二  Logstash采用"></a>方案二  Logstash采用</h3><p>优点：简洁，搭建快速</p>
<p>缺点：没缓冲，可能会有瓶颈</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">B(Logstash收集本地log文件)--&gt;E[Elasticsearch]--&gt;K[Kibana]</span><br></pre></td></tr></table></figure>

<h3 id="方案三-Logstash-redis-Logstash-未验证"><a href="#方案三-Logstash-redis-Logstash-未验证" class="headerlink" title="方案三 Logstash+redis+Logstash(未验证)"></a>方案三 Logstash+redis+Logstash(未验证)</h3><p>参考：<a href="https://developer.ibm.com/zh/articles/build-elk-and-use-it-for-springboot-and-nginx/">搭建 ELK 实时日志平台并在 Spring Boot 和 Nginx 项目中使用</a></p>
<p>优点：</p>
<ol>
<li>直接读取日志文件，对原来的系统入侵无，</li>
<li>支持所有服务，例如nginx,springboot等只要能生成日志文件的</li>
</ol>
<p>缺点：</p>
<ol>
<li>需要在读取日志文件的服务器都安装Logstash(shipper角色)</li>
<li>采用docker部署的时候，springboot需要映射日志目录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">B(Logstash收集本地log文件&#x2F;Shipper)--写入--&gt;G([redis])--读取--&gt;L[Logstash&#x2F;Indexer角色]--&gt;E[Elasticsearch]--&gt;K[Kibana]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="方案四-kafka-logstash-未验证"><a href="#方案四-kafka-logstash-未验证" class="headerlink" title="方案四 kafka+logstash(未验证)"></a>方案四 kafka+logstash(未验证)</h3><p>参考：<a href="https://blog.csdn.net/zjx2016/article/details/104311744">Spring Cloud集成ELK完成日志收集实战（elasticsearch、logstash、kibana</a></p>
<p>优点：</p>
<ol>
<li>不需要在应用服务器安装额外的服务</li>
<li>支持docker部署，不需要额外映射服务目录</li>
</ol>
<p>缺点：</p>
<ol>
<li>需要改造springboot</li>
<li>不支持nginx、数据库等服务</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">B(springboot)--写入--&gt;G([kafka])--读取--&gt;L[Logstash]--&gt;E[Elasticsearch]--&gt;K[Kibana]</span><br></pre></td></tr></table></figure>

<h3 id="方案五-EFK-logback-more-appenders"><a href="#方案五-EFK-logback-more-appenders" class="headerlink" title="方案五 EFK+logback-more-appenders"></a>方案五 EFK+<a href="https://github.com/sndyuk/logback-more-appenders">logback-more-appenders</a></h3><p>参考：<a href="https://github.com/sndyuk">sndyuk</a>/<strong><a href="https://github.com/sndyuk/logback-more-appenders">logback-more-appenders</a></strong></p>
<p>优点：直接通过jar集成logback框架，干净</p>
<p>缺点：只适合于springboot</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(springboot依赖logback-more-appenders)--&gt;B(fluent)--&gt;E[Elasticsearch]--&gt;K[Kibana]</span><br></pre></td></tr></table></figure>

<p>步骤：</p>
<ol>
<li><p>Docker安装<code>fluent</code>,fluent镜像需要自己制作<a href="https://github.com/iexxk/dockerbuild-fluent">exxk/fluent-elasticsearch:latest</a><br>参考<a href="https://docs.fluentd.org/container-deployment/docker-compose">fluentd/container-deployment/docker-compose</a></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fluentd/Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> fluent/fluentd:v1.<span class="number">6</span>-debian-<span class="number">1</span></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;gem&quot;</span>, <span class="string">&quot;install&quot;</span>, <span class="string">&quot;fluent-plugin-elasticsearch&quot;</span>, <span class="string">&quot;--no-document&quot;</span>, <span class="string">&quot;--version&quot;</span>, <span class="string">&quot;3.5.2&quot;</span>]</span></span><br><span class="line"><span class="keyword">USER</span> fluent</span><br></pre></td></tr></table></figure>
</li>
<li><p>springboot引入maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// https://mvnrepository.com/artifact/com.sndyuk/logback-more-appenders</span><br><span class="line">compile group: &#x27;com.sndyuk&#x27;, name: &#x27;logback-more-appenders&#x27;, version: &#x27;1.4.2&#x27;</span><br><span class="line">compile group: &#x27;org.fluentd&#x27;, name: &#x27;fluent-logger&#x27;, version: &#x27;0.3.4&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>springboot在logback.xml添加fluentd的日志输出模式(具体见logback的配置)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!--EFK ip --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fluentHost&quot;</span> <span class="attr">source</span>=<span class="string">&quot;logback.fluent.host&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--EFK 端口 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fluentPort&quot;</span> <span class="attr">source</span>=<span class="string">&quot;logback.fluent.port&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--FLUENT输出    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FLUENT&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.more.appenders.FluentLogbackAppender&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tag</span>&gt;</span>$&#123;APP_NAME&#125;<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">remoteHost</span>&gt;</span>$&#123;fluentHost&#125;<span class="tag">&lt;/<span class="name">remoteHost</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">port</span>&gt;</span>$&#123;fluentPort&#125;<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_FORMAT&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>动态配置<code>application</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cloud.config.logback-profile</span>=<span class="string">FLUENT</span></span><br><span class="line"><span class="meta">logback.fluent.host</span>=<span class="string">$&#123;LOGBACK_FLUENT_HOST:xxx.cn&#125;</span></span><br><span class="line"><span class="meta">logback.fluent.port</span>=<span class="string">$&#123;LOGBACK_FLUENT_PORT:14021&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后运行springboot触发日志</p>
</li>
<li><p>然后去页面配置见<a href="https://jingyan.baidu.com/article/c45ad29ce31262441753e2c0.html">日志EFK框架中elastic的配置使用</a></p>
</li>
</ol>
<h2 id="EFK-ELK部署"><a href="#EFK-ELK部署" class="headerlink" title="EFK/ELK部署"></a>EFK/ELK部署</h2><p>参考<a href="https://github.com/deviantony/docker-elk">deviantony/docker-elk</a></p>
<p><code>docker-stack.yml</code>内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.9.0</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">elastic_config</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ES_JAVA_OPTS:</span> <span class="string">&quot;-Xmx256m -Xms256m&quot;</span></span><br><span class="line">      <span class="attr">ELASTIC_PASSWORD:</span> <span class="string">changeme</span></span><br><span class="line">      <span class="attr">discovery.type:</span> <span class="string">single-node</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">me</span>]</span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/logstash/logstash:7.9.0</span>    </span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">logstash_config</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/logstash/config/logstash.yml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">logstash_pipeline</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/logstash/pipeline/logstash.conf</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">LS_JAVA_OPTS:</span> <span class="string">&quot;-Xmx256m -Xms256m&quot;</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">me</span>]</span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/kibana/kibana:7.9.0</span>  </span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="comment">#无效，但是似乎不重要</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>      </span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;14020:5601&quot;</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">kibana_config</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/kibana/config/kibana.yml</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">me</span>]</span><br><span class="line">  <span class="attr">filebeat:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/beats/filebeat:7.9.0</span>    </span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">filebeat</span> <span class="string">-e</span> <span class="string">-strict.perms=false</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>    </span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">filebeat_config</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/share/filebeat/filebeat.yml</span></span><br><span class="line">    <span class="attr">volumes:</span>   </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/lib/docker/containers:/var/lib/docker/containers:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock:ro</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">me</span>]</span><br><span class="line">  <span class="attr">fluent:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">exxk/fluent-elasticsearch:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>     </span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;14021:24224&quot;</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;14021:24224/udp&quot;</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">fluent_config</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/fluentd/etc/fluent.conf</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">me</span>]        </span><br><span class="line"><span class="attr">configs:</span></span><br><span class="line">  <span class="attr">elastic_config:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">logstash_config:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">logstash_pipeline:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">kibana_config:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">filebeat_config:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">fluent_config:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>各个配置文件配置内容如下:</p>
<p><code>elastic_config</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## Default Elasticsearch configuration from Elasticsearch base image.</span></span><br><span class="line"><span class="comment">## https://github.com/elastic/elasticsearch/blob/master/distribution/docker/src/docker/config/elasticsearch.yml</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">&quot;docker-cluster&quot;</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## X-Pack settings</span></span><br><span class="line"><span class="comment">## see https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-xpack.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">xpack.license.self_generated.type:</span> <span class="string">trial</span></span><br><span class="line"><span class="attr">xpack.security.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.monitoring.collection.enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><code>kibana_config</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## Default Kibana configuration from Kibana base image.</span></span><br><span class="line"><span class="comment">## https://github.com/elastic/kibana/blob/master/src/dev/build/tasks/os_packages/docker_generator/templates/kibana_yml.template.js</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">server.name:</span> <span class="string">kibana</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [ <span class="string">&quot;http://elasticsearch:9200&quot;</span> ]</span><br><span class="line"><span class="attr">monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## X-Pack security credentials</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">elasticsearch.username:</span> <span class="string">elastic</span></span><br><span class="line"><span class="attr">elasticsearch.password:</span> <span class="string">changeme</span></span><br></pre></td></tr></table></figure>

<p><code> logstash_config</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## Default Logstash configuration from Logstash base image.</span></span><br><span class="line"><span class="comment">## https://github.com/elastic/logstash/blob/master/docker/data/logstash/config/logstash-full.yml</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">http.host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.hosts:</span> [ <span class="string">&quot;http://elasticsearch:9200&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">## X-Pack security credentials</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">xpack.monitoring.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.username:</span> <span class="string">elastic</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.password:</span> <span class="string">changeme</span></span><br></pre></td></tr></table></figure>

<p><code>logstash_pipeline</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">	<span class="string">tcp</span> &#123;</span><br><span class="line">		<span class="string">port</span> <span class="string">=&gt;</span> <span class="number">5000</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## Add your filters / logstash plugins configuration here</span></span><br><span class="line"></span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line">	<span class="string">elasticsearch</span> &#123;</span><br><span class="line">		<span class="string">hosts</span> <span class="string">=&gt;</span> <span class="string">&quot;elasticsearch:9200&quot;</span></span><br><span class="line">		<span class="string">user</span> <span class="string">=&gt;</span> <span class="string">&quot;elastic&quot;</span></span><br><span class="line">		<span class="string">password</span> <span class="string">=&gt;</span> <span class="string">&quot;changeme&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>filebeat_config</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filebeat.config:</span></span><br><span class="line">  <span class="attr">modules:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">$&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class="line">    <span class="attr">reload.enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">filebeat.autodiscover:</span></span><br><span class="line">  <span class="attr">providers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">docker</span></span><br><span class="line">      <span class="attr">hints.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">processors:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">add_cloud_metadata:</span> <span class="string">~</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">&#x27;elasticsearch:9200&#x27;</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">&#x27;elastic&#x27;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&#x27;changeme&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>fluent_config</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># fluentd/conf/fluent.conf</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span></span><br><span class="line">  @type forward</span><br><span class="line">  port 24224</span><br><span class="line">  bind 0.0.0.0</span><br><span class="line"><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">match</span> *<span class="attr">.</span>**&gt;</span></span><br><span class="line">  @type copy</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">store</span>&gt;</span></span><br><span class="line">    @type elasticsearch</span><br><span class="line">    host elasticsearch</span><br><span class="line">    port 9200</span><br><span class="line">    logstash_format true</span><br><span class="line">    logstash_prefix fluentd</span><br><span class="line">    logstash_dateformat %Y%m%d</span><br><span class="line">    include_tag_key true</span><br><span class="line">    type_name access_log</span><br><span class="line">    tag_key @log_name</span><br><span class="line">    flush_interval 1s</span><br><span class="line">    user elastic</span><br><span class="line">	password changeme    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">store</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">store</span>&gt;</span></span><br><span class="line">    @type stdout</span><br><span class="line">  <span class="tag">&lt;/<span class="name">store</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Gitlab-official</title>
    <url>/2018/07/27/docker-gitlab-official/</url>
    <content><![CDATA[<h3 id="官方版gitlab安装使用"><a href="#官方版gitlab安装使用" class="headerlink" title="官方版gitlab安装使用"></a>官方版gitlab安装使用</h3><p><a href="https://docs.gitlab.com/omnibus/docker/">官网教程</a></p>
<p><code>docker-statck.yml</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.6&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gitlab:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gitlab/gitlab-ce:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;14020:22&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;14018:80&quot;</span></span><br><span class="line"><span class="comment">#https      - &quot;14019:443&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dockerdata/v-gitlab-ce/data:/var/opt/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dockerdata/v-gitlab-ce/logs:/var/log/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dockerdata/v-gitlab-ce/config:/etc/gitlab</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">&quot;from_file(&#x27;/omnibus_config.rb&#x27;)&quot;</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">gitlab_rb</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/omnibus_config.rb</span></span><br><span class="line">    <span class="attr">secrets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gitlab_root_password</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;2.00&#x27;</span>  <span class="comment">#限制为2核，设置0.50会启动失败，且不报错</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">8192M</span>   <span class="comment">#限制为8g，8g2核为推荐配置，设置为4g，使用卡顿     </span></span><br><span class="line">  <span class="attr">gitlab-runner:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gitlab/gitlab-runner:alpine</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">configs:</span></span><br><span class="line">  <span class="attr">gitlab_rb:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">secrets:</span></span><br><span class="line">  <span class="attr">gitlab_root_password:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>portainer-&gt;config-&gt;name: <code>gitlab_rb</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">external_url</span> <span class="string">&#x27;http://192.168.1.230:14018/&#x27;</span></span><br><span class="line"><span class="comment">#这里必须设置监听为80，因为是监听容器内的端口</span></span><br><span class="line"><span class="string">nginx[&#x27;listen_port&#x27;]</span> <span class="string">=</span> <span class="number">80</span></span><br><span class="line"><span class="comment">#这里要设置ssh端口，不然ssh不能使用</span></span><br><span class="line"><span class="string">gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;]</span> <span class="string">=</span> <span class="number">14020</span></span><br><span class="line"><span class="string">gitlab_rails[&#x27;initial_root_password&#x27;]</span> <span class="string">=</span> <span class="string">File.read(&#x27;/run/secrets/gitlab_root_password&#x27;)</span></span><br><span class="line"><span class="string">gitlab_rails[&#x27;time_zone&#x27;]</span> <span class="string">=</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="comment">#cron时间表达式每天三点</span></span><br><span class="line"><span class="string">gitlab_rails[&#x27;backup_cron&#x27;]</span> <span class="string">=</span> <span class="string">&#x27;0 0 3 * * ?&#x27;</span></span><br><span class="line"><span class="comment"># 默认备份目录/var/opt/gitlab/backups</span></span><br><span class="line"><span class="comment"># gitlab_rails[&#x27;backup_path&#x27;] = &#x27;/var/opt/gitlab/backups&#x27;</span></span><br><span class="line"><span class="comment"># limit backup lifetime to 7 days - 604800 seconds</span></span><br><span class="line"><span class="string">gitlab_rails[&#x27;backup_keep_time&#x27;]</span> <span class="string">=</span> <span class="number">604800</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----优化内存配置-------------</span></span><br><span class="line"><span class="comment">#数据库缓存大小</span></span><br><span class="line"><span class="string">postgresql[&#x27;shared_buffers&#x27;]</span> <span class="string">=</span> <span class="string">&quot;256MB&quot;</span></span><br><span class="line"><span class="comment">#数据库并发</span></span><br><span class="line"><span class="string">postgresql[&#x27;max_worker_processes&#x27;]</span> <span class="string">=</span> <span class="number">6</span></span><br><span class="line"><span class="comment">#进程数</span></span><br><span class="line"><span class="string">unicorn[&#x27;worker_processes&#x27;]</span> <span class="string">=</span> <span class="number">2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">unicorn[&#x27;worker_memory_limit_min&#x27;]</span> <span class="string">=</span> <span class="string">&quot;200 * 1 &lt;&lt; 20&quot;</span></span><br><span class="line"><span class="string">unicorn[&#x27;worker_memory_limit_max&#x27;]</span> <span class="string">=</span> <span class="string">&quot;300 * 1 &lt;&lt; 20&quot;</span></span><br><span class="line"><span class="comment">#减少并发</span></span><br><span class="line"><span class="string">sidekiq[&#x27;concurrency&#x27;]</span> <span class="string">=</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>portainer-&gt;secrets-&gt;name: <code>gitlab_root_password</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">MySuperSecretAndSecurePass0rd!</span></span><br></pre></td></tr></table></figure>

<p>登陆时用户名为<code>root</code>，密码为<code>gitlab_root_password</code>的内容</p>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -t &lt;your container name&gt; gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure>

<h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p><code>1550500433_2019_02_18_11.6.2_gitlab_backup.tar</code>文件名分析</p>
<p><code>11.6.2</code>gitlab版本号，备份还原版本号要一致</p>
<p><code>1550500433_2019_02_18_11.6.2</code>备份文件编号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 移动到目录/var/opt/gitlab/backups并修改权限</span></span><br><span class="line">chmod 777 1550500433_2019_02_18_11.6.2_gitlab_backup.tar</span><br><span class="line"><span class="comment">#进入容器执行</span></span><br><span class="line">gitlab-rake gitlab:backup:restore BACKUP=1550500433_2019_02_18_11.6.2</span><br><span class="line"><span class="comment">#同意几个yes</span></span><br></pre></td></tr></table></figure>

<h3 id="重置管理员密码"><a href="#重置管理员密码" class="headerlink" title="重置管理员密码"></a>重置管理员密码</h3><p>进入容器执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-rails console production</span><br><span class="line"><span class="comment">#进入console,查询用户1的用户名，@符号后面为用户名</span></span><br><span class="line">irb(main):004:0&gt; user = User.where(id:1).first</span><br><span class="line">=&gt; <span class="comment">#&lt;User id:1 @root&gt;</span></span><br><span class="line"><span class="comment">#重置密码为xxxx</span></span><br><span class="line">irb(main):005:0&gt; user.password = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">=&gt; <span class="string">&quot;xxxx&quot;</span></span><br><span class="line"><span class="comment">#保存设置</span></span><br><span class="line">irb(main):006:0&gt; user.save!</span><br><span class="line">Enqueued ActionMailer::DeliveryJob (Job ID: efc41db4-43bb-4f0f-83ca-7481611c2ff4) to Sidekiq(mailers) with arguments: <span class="string">&quot;DeviseMailer&quot;</span>, <span class="string">&quot;password_change&quot;</span>, <span class="string">&quot;deliver_now&quot;</span>, <span class="comment">#&lt;GlobalID:0x00007fea66e486f0 @uri=#&lt;URI::GID gid://gitlab/User/1&gt;&gt;</span></span><br><span class="line">=&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>到此用root用户登录即可</p>
<h2 id="定时备份"><a href="#定时备份" class="headerlink" title="定时备份"></a>定时备份</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -t $(docker ps | grep <span class="string">&quot;gitlab_mygitlab&quot;</span> | awk <span class="string">&#x27;&#123; print $1 &#125;&#x27;</span>) gitlab-backup create</span><br><span class="line"><span class="comment">#对于GitLab 12.1和更早版本，请使用</span></span><br><span class="line">docker <span class="built_in">exec</span> -t $(docker ps | grep <span class="string">&quot;gitlab_mygitlab&quot;</span> | awk <span class="string">&#x27;&#123; print $1 &#125;&#x27;</span>)  gitlab-rake gitlab:backup:create</span><br><span class="line"><span class="comment">## 添加定时任务</span></span><br><span class="line">crontab -e</span><br><span class="line"><span class="comment"># i进行编辑，esc然后:wq</span></span><br><span class="line">0  4  *  *  *  docker <span class="built_in">exec</span> -t $(docker ps | grep <span class="string">&quot;gitlab_mygitlab&quot;</span> | awk <span class="string">&#x27;&#123; print $1 &#125;&#x27;</span>) gitlab-backup create</span><br><span class="line"><span class="comment">## 然后查看</span></span><br><span class="line">crontab -l</span><br></pre></td></tr></table></figure>

<h3 id="centos7-crontab-定时任务"><a href="#centos7-crontab-定时任务" class="headerlink" title="centos7 crontab 定时任务"></a>centos7 crontab 定时任务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># （查看状态）</span></span><br><span class="line">systemctl status crond</span><br><span class="line"><span class="comment"># （设为开机启动）</span></span><br><span class="line">systemctl <span class="built_in">enable</span> crond</span><br><span class="line"><span class="comment"># （启动crond服务）</span></span><br><span class="line">systemctl start crond</span><br><span class="line"><span class="comment">#添加定时任务</span></span><br><span class="line">crontab -e</span><br><span class="line"><span class="comment">#查看定时任务</span></span><br><span class="line">crontab -l</span><br><span class="line"><span class="comment">#删除当前用户的定时任务</span></span><br><span class="line">crontab -r</span><br></pre></td></tr></table></figure>

<p>备份会有如下警告：</p>
<p>因为配置文件和密码文件需要自己手动备份，为了数据安全</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Warning: Your gitlab.rb and gitlab-secrets.json files contain sensitive data</span><br><span class="line">and are not included <span class="keyword">in</span> this backup. You will need these files to restore a backup.</span><br><span class="line">Please back them up manually.</span><br></pre></td></tr></table></figure>

<h2 id="gitlab-升级"><a href="#gitlab-升级" class="headerlink" title="gitlab 升级"></a>gitlab 升级</h2><p>详细升级路径见<a href="https://docs.gitlab.com/ee/policy/maintenance.html#upgrade-recommendations">GitLab release and maintenance policy</a></p>
<h4 id="版本介绍："><a href="#版本介绍：" class="headerlink" title="版本介绍："></a>版本介绍：</h4><p>规则：(Major).(Minor).(Patch)=(主要版本).(次要版本).(补丁号)</p>
<p>例如，Gitlab版本12.10.6:</p>
<ul>
<li><code>12</code>代表主要版本。主要版本是12.0.0，但通常称为12.0。</li>
<li><code>10</code>代表次要版本。次要版本是12.10.0，但通常称为12.10。</li>
<li><code>6</code> 代表补丁号。</li>
</ul>
<p>升级路径为<code>12.10.6</code>-&gt;<code>12.10.14</code>-&gt;<code>13.0.12</code>-&gt;<code>13.2.3</code></p>
<p>我的理解(仅供参考做好备份):</p>
<p><strong>先将补丁版本升级到最高，然后升级次要版本升级到最高，最后主要版本一级一级的升</strong></p>
<p>可以利用<a href="https://hub.docker.com/r/gitlab/gitlab-ce/tags?page=1&name=13.2">dockerhub的搜索</a>功能,例如搜索框输入12.10，找到最大的补丁版本12.10.14，次要版本的最大输入12.找到次要版本的最大版本</p>
<h3 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h3><ol>
<li>进入容器可以执行命令<code>gitlab-rake gitlab:env:info</code>更多命令见rake</li>
<li>备份文件<code>repositories</code>中<code>xxx.bundle</code>可以用git命令解压<code>git clone xxx.bundle xxx</code>,详情见<code>git bundle</code>打包</li>
</ol>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol>
<li><p>gitlab runner 500 error</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">ActionView::Template::Error ():</span><br><span class="line">    <span class="number">36</span>: </span><br><span class="line">    <span class="number">37</span>:   <span class="variable">.col</span>-sm-<span class="number">6</span></span><br><span class="line">    <span class="number">38</span>:     <span class="variable">.bs</span>-callout</span><br><span class="line">    <span class="number">39</span>:       = render partial: &#x27;ci/runner/how_to_setup_runner&#x27;,</span><br><span class="line">    <span class="number">40</span>:                 locals: &#123; registration_token: Gitlab::CurrentSettings<span class="variable">.runners_registration_token</span>,</span><br><span class="line">    <span class="number">41</span>:                           <span class="keyword">type</span>: &#x27;shared&#x27;,</span><br><span class="line">    <span class="number">42</span>:                           reset_token_url: reset_registration_token_admin_application_settings_path &#125;</span><br><span class="line">lib/gitlab/crypto_helper<span class="variable">.rb</span>:<span class="number">27</span>:in <span class="meta">`aes256_gcm_decrypt&#x27;</span></span><br><span class="line">app/models/concerns/token_authenticatable_strategies/encrypted<span class="variable">.rb</span>:<span class="number">45</span>:in <span class="meta">`get_token&#x27;</span></span><br><span class="line">app/models/concerns/token_authenticatable_strategies/base<span class="variable">.rb</span>:<span class="number">33</span>:in <span class="meta">`ensure_token!&#x27;</span></span><br><span class="line">app/models/concerns/token_authenticatable<span class="variable">.rb</span>:<span class="number">48</span>:in <span class="meta">`block in add_authentication_token_field&#x27;</span></span><br><span class="line">app/models/application_setting_implementation<span class="variable">.rb</span>:<span class="number">326</span>:in <span class="meta">`runners_registration_token&#x27;</span></span><br></pre></td></tr></table></figure>

<p>解决:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#需要先还原gtilabb容器的config挂载目录的gitlab-secrets.json，我这里是整个恢复config目录</span></span><br><span class="line"><span class="comment">#进入gitlab容器，执行</span></span><br><span class="line">root@f51be17d113b:/<span class="comment"># gitlab-rails console</span></span><br><span class="line">然后进入命令行后执行</span><br><span class="line">irb(main):001:0&gt; ApplicationSetting.current.reset_runners_registration_token!</span><br></pre></td></tr></table></figure>





</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template">gitlab.rb配置文件</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Gitlab-Runner</title>
    <url>/2018/07/31/docker-gitlab-runner/</url>
    <content><![CDATA[<h3 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h3><h4 id="docker-alpine-docker-cli镜像"><a href="#docker-alpine-docker-cli镜像" class="headerlink" title="docker alpine-docker-cli镜像"></a>docker <a href="https://github.com/nathanielc/docker-client">alpine-docker-cli镜像</a></h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> gitlab/gitlab-runner:alpine</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --no-cache curl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> VERSION <span class="string">&quot;18.06.0-ce&quot;</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -L -o /tmp/docker-<span class="variable">$VERSION</span>.tgz https://download.docker.com/linux/static/stable/x86_64/docker-<span class="variable">$VERSION</span>.tgz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xz -C /tmp -f /tmp/docker-<span class="variable">$VERSION</span>.tgz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mv /tmp/docker/docker /usr/bin \</span></span><br></pre></td></tr></table></figure>

<h4 id="gitlab-runner"><a href="#gitlab-runner" class="headerlink" title="gitlab-runner"></a><a href="https://gitlab.com/gitlab-org/gitlab-runner/tree/master/dockerfiles/alpine">gitlab-runner</a></h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> adduser -D -S -h /home/gitlab-runner gitlab-runner</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --update \</span></span><br><span class="line"><span class="bash">    bash \</span></span><br><span class="line"><span class="bash">    ca-certificates \</span></span><br><span class="line"><span class="bash">    git \</span></span><br><span class="line"><span class="bash">    openssl \</span></span><br><span class="line"><span class="bash">    tzdata \</span></span><br><span class="line"><span class="bash">    wget</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> DOCKER_MACHINE_VERSION</span><br><span class="line"><span class="keyword">ARG</span> DUMB_INIT_VERSION</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> gitlab-runner-linux-amd64 /usr/bin/gitlab-runner</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> checksums /tmp/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /usr/bin/gitlab-runner &amp;&amp; \</span></span><br><span class="line"><span class="bash">    ln -s /usr/bin/gitlab-runner /usr/bin/gitlab-ci-multi-runner &amp;&amp; \</span></span><br><span class="line"><span class="bash">    gitlab-runner --version &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mkdir -p /etc/gitlab-runner/certs &amp;&amp; \</span></span><br><span class="line"><span class="bash">    chmod -R 700 /etc/gitlab-runner &amp;&amp; \</span></span><br><span class="line"><span class="bash">    wget -q https://github.com/docker/machine/releases/download/v<span class="variable">$&#123;DOCKER_MACHINE_VERSION&#125;</span>/docker-machine-Linux-x86_64 -O /usr/bin/docker-machine &amp;&amp; \</span></span><br><span class="line"><span class="bash">    chmod +x /usr/bin/docker-machine &amp;&amp; \</span></span><br><span class="line"><span class="bash">    docker-machine --version &amp;&amp; \</span></span><br><span class="line"><span class="bash">    wget -q https://github.com/Yelp/dumb-init/releases/download/v<span class="variable">$&#123;DUMB_INIT_VERSION&#125;</span>/dumb-init_<span class="variable">$&#123;DUMB_INIT_VERSION&#125;</span>_amd64 -O /usr/bin/dumb-init &amp;&amp; \</span></span><br><span class="line"><span class="bash">    chmod +x /usr/bin/dumb-init &amp;&amp; \</span></span><br><span class="line"><span class="bash">    dumb-init --version &amp;&amp; \</span></span><br><span class="line"><span class="bash">    sha256sum -c -w /tmp/checksums</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> entrypoint /</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /entrypoint</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;/etc/gitlab-runner&quot;</span>, <span class="string">&quot;/home/gitlab-runner&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/usr/bin/dumb-init&quot;</span>, <span class="string">&quot;/entrypoint&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;run&quot;</span>, <span class="string">&quot;--user=gitlab-runner&quot;</span>, <span class="string">&quot;--working-directory=/home/gitlab-runner&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h4 id="maven"><a href="#maven" class="headerlink" title="maven"></a><a href="https://github.com/carlossg/docker-maven/tree/master/jdk-8-alpine">maven</a></h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --no-cache curl tar bash procps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> MAVEN_VERSION=<span class="number">3.5</span>.<span class="number">4</span></span><br><span class="line"><span class="keyword">ARG</span> USER_HOME_DIR=<span class="string">&quot;/root&quot;</span></span><br><span class="line"><span class="keyword">ARG</span> SHA=ce50b1c91364cb77efe3776f756a6d92b76d9038b0a0782f7d53acf1e997a14d</span><br><span class="line"><span class="keyword">ARG</span> BASE_URL=https://apache.osuosl.org/maven/maven-<span class="number">3</span>/$&#123;MAVEN_VERSION&#125;/binaries</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/share/maven /usr/share/maven/ref \</span></span><br><span class="line"><span class="bash">  &amp;&amp; curl -fsSL -o /tmp/apache-maven.tar.gz <span class="variable">$&#123;BASE_URL&#125;</span>/apache-maven-<span class="variable">$&#123;MAVEN_VERSION&#125;</span>-bin.tar.gz \</span></span><br><span class="line"><span class="bash">  &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;SHA&#125;</span>  /tmp/apache-maven.tar.gz&quot;</span> | sha256sum -c - \</span></span><br><span class="line"><span class="bash">  &amp;&amp; tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm -f /tmp/apache-maven.tar.gz \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ln -s /usr/share/maven/bin/mvn /usr/bin/mvn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MAVEN_HOME /usr/share/maven</span><br><span class="line"><span class="keyword">ENV</span> MAVEN_CONFIG <span class="string">&quot;$USER_HOME_DIR/.m2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> mvn-entrypoint.sh /usr/<span class="built_in">local</span>/bin/mvn-entrypoint.sh</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> settings-docker.xml /usr/share/maven/ref/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/usr/local/bin/mvn-entrypoint.sh&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;mvn&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h4 id="java"><a href="#java" class="headerlink" title="java"></a><a href="https://github.com/docker-library/openjdk/tree/master/8/jdk/alpine">java</a></h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> THIS DOCKERFILE IS GENERATED VIA &quot;update.sh&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># PLEASE DO NOT EDIT IT DIRECTLY.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A few reasons for installing distribution-provided OpenJDK:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  1. Oracle.  Licensing prevents us from redistributing the official JDK.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  2. Compiling OpenJDK also requires the JDK to be installed, and it gets</span></span><br><span class="line"><span class="comment">#     really hairy.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     For some sample build times, see Debian&#x27;s buildd logs:</span></span><br><span class="line"><span class="comment">#       https://buildd.debian.org/status/logs.php?pkg=openjdk-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default to UTF-8 file.encoding</span></span><br><span class="line"><span class="keyword">ENV</span> LANG C.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add a simple script that can auto-detect the appropriate JAVA_HOME value</span></span><br><span class="line"><span class="comment"># based on whether the JDK or only the JRE is installed</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> &#123; \</span></span><br><span class="line"><span class="bash">		<span class="built_in">echo</span> <span class="string">&#x27;#!/bin/sh&#x27;</span>; \</span></span><br><span class="line"><span class="bash">		<span class="built_in">echo</span> <span class="string">&#x27;set -e&#x27;</span>; \</span></span><br><span class="line"><span class="bash">		<span class="built_in">echo</span>; \</span></span><br><span class="line"><span class="bash">		<span class="built_in">echo</span> <span class="string">&#x27;dirname &quot;$(dirname &quot;$(readlink -f &quot;$(which javac || which java)&quot;)&quot;)&quot;&#x27;</span>; \</span></span><br><span class="line"><span class="bash">	&#125; &gt; /usr/<span class="built_in">local</span>/bin/docker-java-home \</span></span><br><span class="line"><span class="bash">	&amp;&amp; chmod +x /usr/<span class="built_in">local</span>/bin/docker-java-home</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/lib/jvm/java-<span class="number">1.8</span>-openjdk</span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:/usr/lib/jvm/java-<span class="number">1.8</span>-openjdk/jre/bin:/usr/lib/jvm/java-<span class="number">1.8</span>-openjdk/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_VERSION <span class="number">8</span>u171</span><br><span class="line"><span class="keyword">ENV</span> JAVA_ALPINE_VERSION <span class="number">8.171</span>.<span class="number">11</span>-r0</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -x \</span></span><br><span class="line"><span class="bash">	&amp;&amp; apk add --no-cache \</span></span><br><span class="line"><span class="bash">		openjdk8=<span class="string">&quot;<span class="variable">$JAVA_ALPINE_VERSION</span>&quot;</span> \</span></span><br><span class="line"><span class="bash">	&amp;&amp; [ <span class="string">&quot;<span class="variable">$JAVA_HOME</span>&quot;</span> = <span class="string">&quot;<span class="subst">$(docker-java-home)</span>&quot;</span> ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you&#x27;re reading this and have any feedback on how this image could be</span></span><br><span class="line"><span class="comment"># improved, please open an issue or a pull request so we can discuss it!</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   https://github.com/docker-library/openjdk/issues</span></span><br></pre></td></tr></table></figure>



<h4 id="gitrunner-docker-jdk-maven-npm-采用"><a href="#gitrunner-docker-jdk-maven-npm-采用" class="headerlink" title="gitrunner+docker+ jdk+maven+npm(采用)"></a>gitrunner+docker+ jdk+maven+npm(采用)</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> gitlab/gitlab-runner:alpine</span><br><span class="line"><span class="comment"># 公共需求+npm安装（nodejs nodejs-npm）(shadow 是 权限usermod修改)</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> http://dl-2.alpinelinux.org/alpine/edge/community/ &gt;&gt; /etc/apk/repositories \ </span></span><br><span class="line">&amp;&amp; apk <span class="keyword">add</span><span class="bash"> --no-cache curl tar bash procps nodejs nodejs-npm shadow \</span></span><br><span class="line"><span class="bash">&amp;&amp; npm install -g cnpm --registry=https://registry.npm.taobao.org</span></span><br><span class="line"><span class="comment"># docker</span></span><br><span class="line"><span class="keyword">ENV</span> VERSION <span class="string">&quot;18.06.0-ce&quot;</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -L -o /tmp/docker-<span class="variable">$VERSION</span>.tgz https://download.docker.com/linux/static/stable/x86_64/docker-<span class="variable">$VERSION</span>.tgz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xz -C /tmp -f /tmp/docker-<span class="variable">$VERSION</span>.tgz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mv /tmp/docker/docker /usr/bin \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /tmp/docker-<span class="variable">$VERSION</span>.tgz /tmp/docker \</span></span><br><span class="line"><span class="bash">    &amp;&amp; usermod -g root gitlab-runner</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># java</span></span><br><span class="line"><span class="keyword">ENV</span> LANG C.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add a simple script that can auto-detect the appropriate JAVA_HOME value</span></span><br><span class="line"><span class="comment"># based on whether the JDK or only the JRE is installed</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> &#123; \</span></span><br><span class="line"><span class="bash">		<span class="built_in">echo</span> <span class="string">&#x27;#!/bin/sh&#x27;</span>; \</span></span><br><span class="line"><span class="bash">		<span class="built_in">echo</span> <span class="string">&#x27;set -e&#x27;</span>; \</span></span><br><span class="line"><span class="bash">		<span class="built_in">echo</span>; \</span></span><br><span class="line"><span class="bash">		<span class="built_in">echo</span> <span class="string">&#x27;dirname &quot;$(dirname &quot;$(readlink -f &quot;$(which javac || which java)&quot;)&quot;)&quot;&#x27;</span>; \</span></span><br><span class="line"><span class="bash">	&#125; &gt; /usr/<span class="built_in">local</span>/bin/docker-java-home \</span></span><br><span class="line"><span class="bash">	&amp;&amp; chmod +x /usr/<span class="built_in">local</span>/bin/docker-java-home</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/lib/jvm/java-<span class="number">1.8</span>-openjdk</span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:/usr/lib/jvm/java-<span class="number">1.8</span>-openjdk/jre/bin:/usr/lib/jvm/java-<span class="number">1.8</span>-openjdk/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_VERSION <span class="number">8</span>u171</span><br><span class="line"><span class="keyword">ENV</span> JAVA_ALPINE_VERSION <span class="number">8.171</span>.<span class="number">11</span>-r0</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -x \</span></span><br><span class="line"><span class="bash">	&amp;&amp; apk add --no-cache \</span></span><br><span class="line"><span class="bash">		openjdk8=<span class="string">&quot;<span class="variable">$JAVA_ALPINE_VERSION</span>&quot;</span> \</span></span><br><span class="line"><span class="bash">	&amp;&amp; [ <span class="string">&quot;<span class="variable">$JAVA_HOME</span>&quot;</span> = <span class="string">&quot;<span class="subst">$(docker-java-home)</span>&quot;</span> ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># maven</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> MAVEN_VERSION=<span class="number">3.5</span>.<span class="number">4</span></span><br><span class="line"><span class="keyword">ARG</span> USER_HOME_DIR=<span class="string">&quot;/root&quot;</span></span><br><span class="line"><span class="keyword">ARG</span> SHA=ce50b1c91364cb77efe3776f756a6d92b76d9038b0a0782f7d53acf1e997a14d</span><br><span class="line"><span class="keyword">ARG</span> BASE_URL=https://apache.osuosl.org/maven/maven-<span class="number">3</span>/$&#123;MAVEN_VERSION&#125;/binaries</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/share/maven /usr/share/maven/ref \</span></span><br><span class="line"><span class="bash">  &amp;&amp; curl -fsSL -o /tmp/apache-maven.tar.gz <span class="variable">$&#123;BASE_URL&#125;</span>/apache-maven-<span class="variable">$&#123;MAVEN_VERSION&#125;</span>-bin.tar.gz \</span></span><br><span class="line"><span class="bash">  &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;SHA&#125;</span>  /tmp/apache-maven.tar.gz&quot;</span> | sha256sum -c - \</span></span><br><span class="line"><span class="bash">  &amp;&amp; tar -xzf /tmp/apache-maven.tar.gz -C /usr/share/maven --strip-components=1 \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm -f /tmp/apache-maven.tar.gz \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ln -s /usr/share/maven/bin/mvn /usr/bin/mvn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MAVEN_HOME /usr/share/maven</span><br><span class="line"><span class="keyword">ENV</span> MAVEN_CONFIG <span class="string">&quot;$USER_HOME_DIR/.m2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> mvn-entrypoint.sh /usr/<span class="built_in">local</span>/bin/mvn-entrypoint.sh</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> settings-docker.xml /usr/share/maven/ref/</span></span><br></pre></td></tr></table></figure>



<p>/usr/share/maven/ref/repository</p>
<h3 id="maven-docker-gitlab-runner-jdk-感觉不对废弃-找不到apline安装包"><a href="#maven-docker-gitlab-runner-jdk-感觉不对废弃-找不到apline安装包" class="headerlink" title="maven+docker+gitlab-runner+jdk(感觉不对废弃,找不到apline安装包)"></a>maven+docker+gitlab-runner+jdk(感觉不对废弃,找不到apline安装包)</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> maven:alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --update --no-cache \</span></span><br><span class="line"><span class="bash">    bash \</span></span><br><span class="line"><span class="bash">    ca-certificates \</span></span><br><span class="line"><span class="bash">    git \</span></span><br><span class="line"><span class="bash">    openssl \</span></span><br><span class="line"><span class="bash">    tzdata \</span></span><br><span class="line"><span class="bash">    wget \</span></span><br><span class="line"><span class="bash">    curl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker</span></span><br><span class="line"><span class="keyword">ENV</span> VERSION <span class="string">&quot;18.06.0-ce&quot;</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -L -o /tmp/docker-<span class="variable">$VERSION</span>.tgz https://download.docker.com/linux/static/stable/x86_64/docker-<span class="variable">$VERSION</span>.tgz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xz -C /tmp -f /tmp/docker-<span class="variable">$VERSION</span>.tgz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mv /tmp/docker/docker /usr/bin \</span></span><br><span class="line"><span class="bash"> </span></span><br><span class="line"><span class="comment"># gitlab-runner </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> adduser -D -S -h /home/gitlab-runner gitlab-runner</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> DOCKER_MACHINE_VERSION</span><br><span class="line"><span class="keyword">ARG</span> DUMB_INIT_VERSION</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> gitlab-runner-linux-amd64 /usr/bin/gitlab-runner</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> checksums /tmp/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /usr/bin/gitlab-runner &amp;&amp; \</span></span><br><span class="line"><span class="bash">    ln -s /usr/bin/gitlab-runner /usr/bin/gitlab-ci-multi-runner &amp;&amp; \</span></span><br><span class="line"><span class="bash">    gitlab-runner --version &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mkdir -p /etc/gitlab-runner/certs &amp;&amp; \</span></span><br><span class="line"><span class="bash">    chmod -R 700 /etc/gitlab-runner &amp;&amp; \</span></span><br><span class="line"><span class="bash">    wget -q https://github.com/docker/machine/releases/download/v<span class="variable">$&#123;DOCKER_MACHINE_VERSION&#125;</span>/docker-machine-Linux-x86_64 -O /usr/bin/docker-machine &amp;&amp; \</span></span><br><span class="line"><span class="bash">    chmod +x /usr/bin/docker-machine &amp;&amp; \</span></span><br><span class="line"><span class="bash">    docker-machine --version &amp;&amp; \</span></span><br><span class="line"><span class="bash">    wget -q https://github.com/Yelp/dumb-init/releases/download/v<span class="variable">$&#123;DUMB_INIT_VERSION&#125;</span>/dumb-init_<span class="variable">$&#123;DUMB_INIT_VERSION&#125;</span>_amd64 -O /usr/bin/dumb-init &amp;&amp; \</span></span><br><span class="line"><span class="bash">    chmod +x /usr/bin/dumb-init &amp;&amp; \</span></span><br><span class="line"><span class="bash">    dumb-init --version &amp;&amp; \</span></span><br><span class="line"><span class="bash">    sha256sum -c -w /tmp/checksums</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> entrypoint /</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /entrypoint</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;/etc/gitlab-runner&quot;</span>, <span class="string">&quot;/home/gitlab-runner&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/usr/bin/dumb-init&quot;</span>, <span class="string">&quot;/entrypoint&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;run&quot;</span>, <span class="string">&quot;--user=gitlab-runner&quot;</span>, <span class="string">&quot;--working-directory=/home/gitlab-runner&quot;</span>] </span></span><br></pre></td></tr></table></figure>







<h3 id="常见问题总结"><a href="#常见问题总结" class="headerlink" title="常见问题总结"></a>常见问题总结</h3><ol>
<li><p>注册之后，运行时找不到runner,一直提示pending</p>
<p>解决：在runner设置里勾选上<code>Run untagged jobs</code></p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Indicates whether this runner can pick jobs without tags</li>
</ul>
</li>
<li><p>使用<code>docker</code>注册时，镜像用<code>docker:stable</code>在配置文件<code>config.toml</code>添加<code> volumes = [&quot;/var/run/docker.sock:/var/run/docker.sock&quot;,&quot;/cache&quot;]</code></p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">concurrent</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">check_interval</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[runners]]</span></span><br><span class="line">  <span class="attr">name</span> = <span class="string">&quot;test&quot;</span></span><br><span class="line">  <span class="attr">url</span> = <span class="string">&quot;http://gitlab/&quot;</span></span><br><span class="line">  <span class="attr">token</span> = <span class="string">&quot;8db125c537f652e20349100517a4d6&quot;</span></span><br><span class="line">  <span class="attr">executor</span> = <span class="string">&quot;docker&quot;</span></span><br><span class="line">  <span class="section">[runners.docker]</span></span><br><span class="line">    <span class="attr">tls_verify</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">image</span> = <span class="string">&quot;docker:stable&quot;</span></span><br><span class="line">    <span class="attr">privileged</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">disable_cache</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">volumes</span> = [<span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span>,<span class="string">&quot;/cache&quot;</span>]</span><br><span class="line">    <span class="attr">shm_size</span> = <span class="number">0</span></span><br><span class="line">  <span class="section">[runners.cache]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注册后，无权限操作<code>mkdir: can&#39;t create directory &#39;/home/gitlab-runner/builds/&#39;: Permission denied </code></p>
<p>解决：通过<code>gitlab-runner </code>用户进行注册，<a href="https://docs.gitlab.com/runner/register/index.html#gnu-linux">官网注册教程</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --rm -t -i -v &#x2F;dockerdata&#x2F;v-gitlab-runner&#x2F;config:&#x2F;etc&#x2F;gitlab-runner --name gitlab_gitlab-runner gitlab&#x2F;gitlab-runner register</span><br></pre></td></tr></table></figure>





</li>
</ol>
<p>脚本语法：</p>
<p><a href="https://docs.gitlab.com/ee/ci/yaml/README.html">https://docs.gitlab.com/ee/ci/yaml/README.html</a></p>
<p><a href="https://github.com/chrootLogin/docker-nextcloud/issues/3">安装usermode</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RUN <span class="built_in">echo</span> http://dl-2.alpinelinux.org/alpine/edge/community/ &gt;&gt; /etc/apk/repositories</span><br><span class="line">RUN apk --no-cache add shadow </span><br></pre></td></tr></table></figure>

<p><a href="http://blog.51cto.com/zhaochj/1309903">使用usermode</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改用户gitlab-runner到root组</span></span><br><span class="line">usermod -g root gitlab-runner</span><br><span class="line"><span class="comment">#查看用户属于的组</span></span><br><span class="line">id gitlab-runner</span><br><span class="line"><span class="comment">#改变文件的组为root,原来的组为docker</span></span><br><span class="line">chown :root /var/run/docker.sock</span><br></pre></td></tr></table></figure>

<p>docker添加组</p>
<p><a href="https://stackoverflow.com/questions/49955097/how-to-add-a-user-group-in-alpine-linux-to-prevent-your-app-to-run-as-root">https://stackoverflow.com/questions/49955097/how-to-add-a-user-group-in-alpine-linux-to-prevent-your-app-to-run-as-root</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Gitlab</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Gitlab-Update-Migrate</title>
    <url>/2018/07/26/docker-gitlab-update-migrate/</url>
    <content><![CDATA[<h3 id="gitlab-升级迁移"><a href="#gitlab-升级迁移" class="headerlink" title="gitlab 升级迁移"></a>gitlab 升级迁移</h3><h4 id="方式一：挂在卷复制迁移（镜像版本相同）"><a href="#方式一：挂在卷复制迁移（镜像版本相同）" class="headerlink" title="方式一：挂在卷复制迁移（镜像版本相同）"></a>方式一：挂在卷复制迁移（镜像版本相同）</h4><p>直接复制所有挂在卷，但是有可能出现问题1</p>
<h4 id="方式二：备份打包迁移"><a href="#方式二：备份打包迁移" class="headerlink" title="方式二：备份打包迁移"></a>方式二：备份打包迁移</h4><p>注意：<code>docker-compose.yml</code>里面的镜像版本要和之前的版本一致</p>
<p>更多rake命令具体看官网</p>
<ol>
<li><p>gitlab停止运行，并删除挂掉的容器（未成功，因为存在问题1）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建备份</span></span><br><span class="line">docker-compose run --rm gitlab app:rake gitlab:backup:create</span><br><span class="line"><span class="comment">#恢复备份</span></span><br><span class="line">docker-compose run --rm gitlab app:rake gitlab:backup:restore</span><br></pre></td></tr></table></figure>
</li>
<li><p>gitlab运行的情况</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看环境信息</span></span><br><span class="line">docker-compose <span class="built_in">exec</span> --user git gitlab bundle <span class="built_in">exec</span> rake gitlab:env:info RAILS_ENV=production</span><br><span class="line"><span class="comment">#创建备份（采用）</span></span><br><span class="line">docker-compose <span class="built_in">exec</span> --user git gitlab bundle <span class="built_in">exec</span> rake gitlab:backup:create RAILS_ENV=production</span><br><span class="line"><span class="comment">#查看备份</span></span><br><span class="line">docker-compose <span class="built_in">exec</span> --user git gitlab bundle <span class="built_in">exec</span> rake gitlab:backup:restore RAILS_ENV=production</span><br><span class="line"><span class="comment">#恢复备份</span></span><br><span class="line">docker-compose <span class="built_in">exec</span> --user git gitlab bundle <span class="built_in">exec</span> rake gitlab:backup:restore BACKUP=1532580339_2018_07_26_10.7.3 RAILS_ENV=production</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h4><p>进入gitlab容器执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#恢复</span></span><br><span class="line">/sbin/entrypoint.sh app:rake gitlab:backup:restore</span><br><span class="line"><span class="comment">#备份</span></span><br><span class="line">/sbin/entrypoint.sh app:rake gitlab:backup:create</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Starting the gitlab container</span><br><span class="line">Enter the gitlab<span class="string">&#x27;s bash shell</span></span><br><span class="line"><span class="string">Execute /sbin/entrypoint.sh app:rake gitlab:backup:restore to restore a backup</span></span><br><span class="line"><span class="string">When restore finish, just restart gitlab container, and all is done.</span></span><br><span class="line"><span class="string">For backup procedure, simply execute /sbin/entrypoint.sh app:rake gitlab:backup:create command when you&#x27;</span>re <span class="keyword">in</span> gitlab container<span class="string">&#x27;s shell.</span></span><br></pre></td></tr></table></figure>

<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li><p>迁移时，重启时,报500错误,日志提示</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="number">2018</span>-<span class="number">07</span>-<span class="number">26</span> <span class="number">05</span>:<span class="number">53</span>:<span class="number">41</span>,<span class="number">648</span> INFO spawned: &#x27;sidekiq&#x27; <span class="keyword">with</span> pid <span class="number">1066</span>,</span><br><span class="line"><span class="number">2018</span>-<span class="number">07</span>-<span class="number">26</span> <span class="number">05</span>:<span class="number">53</span>:<span class="number">42</span>,<span class="number">649</span> INFO success: sidekiq entered RUNNING state, process has stayed up <span class="keyword">for</span> &gt; than <span class="number">1</span> seconds (startsecs),</span><br><span class="line"><span class="number">2018</span>-<span class="number">07</span>-<span class="number">26</span> <span class="number">05</span>:<span class="number">53</span>:<span class="number">50</span>,<span class="number">996</span> INFO exited: sidekiq (exit status <span class="number">1</span>; <span class="keyword">not</span> expected),</span><br><span class="line"><span class="number">2018</span>-<span class="number">07</span>-<span class="number">26</span> <span class="number">05</span>:<span class="number">53</span>:<span class="number">51</span>,<span class="number">998</span> INFO spawned: &#x27;sidekiq&#x27; <span class="keyword">with</span> pid <span class="number">1075</span>,</span><br><span class="line"><span class="number">2018</span>-<span class="number">07</span>-<span class="number">26</span> <span class="number">05</span>:<span class="number">53</span>:<span class="number">52</span>,<span class="number">999</span> INFO success: sidekiq entered RUNNING state, process has stayed up <span class="keyword">for</span> &gt; than <span class="number">1</span> seconds (startsecs),</span><br></pre></td></tr></table></figure>

<p>具体原因进入容器<code>cat /var/log/gitlab/gitlab/production.log</code>查看日志，内容如下</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">Redis::CommandError (DENIED Redis is running in <span class="keyword">protected</span> mode because <span class="keyword">protected</span> mode is enabled, no <span class="keyword">bind</span> address was specified, no authentication password is requested to clients. In <span class="keyword">this</span> mode connections are only accepted from the loopback <span class="keyword">interface</span>. If you want to connect from external computers to Redis you may adopt one of the following solutions: <span class="number">1</span>) Just <span class="keyword">disable</span> <span class="keyword">protected</span> mode sending the command &#x27;CONFIG SET <span class="keyword">protected</span>-mode no&#x27; from the loopback <span class="keyword">interface</span> by connecting to Redis from the same host the server is running, however MAKE SURE Redis is <span class="keyword">not</span> publicly accessible from internet <span class="keyword">if</span> you <span class="keyword">do</span> so. Use CONFIG REWRITE to make <span class="keyword">this</span> change permanent. <span class="number">2</span>) Alternatively you can just <span class="keyword">disable</span> the <span class="keyword">protected</span> mode by editing the Redis configuration file, <span class="keyword">and</span> setting the <span class="keyword">protected</span> mode option to &#x27;no&#x27;, <span class="keyword">and</span> then restarting the server. <span class="number">3</span>) If you started the server manually just <span class="keyword">for</span> testing, restart it <span class="keyword">with</span> the &#x27;--<span class="keyword">protected</span>-mode no&#x27; option. <span class="number">4</span>) Setup a <span class="keyword">bind</span> address <span class="keyword">or</span> an authentication password. NOTE: You only need to <span class="keyword">do</span> one of the abovethings in order <span class="keyword">for</span> the server to start accepting connections from the outside.):</span><br><span class="line">  lib/gitlab/middleware/multipart<span class="variable">.rb</span>:<span class="number">95</span>:in <span class="meta">`call&#x27;</span></span><br><span class="line">  lib/gitlab/request_profiler/middleware<span class="variable">.rb</span>:<span class="number">14</span>:in <span class="meta">`call&#x27;</span></span><br><span class="line">  lib/gitlab/middleware/go<span class="variable">.rb</span>:<span class="number">17</span>:in <span class="meta">`call&#x27;</span></span><br><span class="line">  lib/gitlab/etag_caching/middleware<span class="variable">.rb</span>:<span class="number">11</span>:in <span class="meta">`call&#x27;</span></span><br><span class="line">  lib/gitlab/middleware/read_only/controller<span class="variable">.rb</span>:<span class="number">28</span>:in <span class="meta">`call&#x27;</span></span><br><span class="line">  lib/gitlab/middleware/read_only<span class="variable">.rb</span>:<span class="number">16</span>:in <span class="meta">`call&#x27;</span></span><br><span class="line">  lib/gitlab/request_context<span class="variable">.rb</span>:<span class="number">18</span>:in <span class="meta">`call&#x27;</span></span><br><span class="line">  lib/gitlab/metrics/requests_rack_middleware<span class="variable">.rb</span>:<span class="number">27</span>:in <span class="meta">`call&#x27;</span></span><br><span class="line">  lib/gitlab/middleware/release_env<span class="variable">.rb</span>:<span class="number">10</span>:in <span class="meta">`call&#x27;</span></span><br><span class="line">  <span class="keyword">config</span><span class="variable">.ru</span>:<span class="number">23</span>:in <span class="meta">`block (2 levels) in &lt;main&gt;&#x27;</span></span><br><span class="line">  <span class="keyword">config</span><span class="variable">.ru</span>:<span class="number">31</span>:in <span class="meta">`&lt;main&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>解决：从日志可以看出是安全原因，因此进入redis容器执行<code>redis-cli</code>然后执行命令<code>CONFIG SET protected-mode no</code>到此就可以了，这样更改下次重启又会失效，如果要永久生效，多执行一条<code>CONFIG REWRITE</code>,但是删除死掉的容器会失效</p>
</li>
<li><p>redis版本过高，初始化时用低版本，<code>latest</code>如果时最新的存在权限问题也就是问题1</p>
<p>解决，重新用指定版本号<code>3.0.6</code>的docker-compose启动，然后redis容器挂在卷下的<code>dump.rdb</code>单独复制进去，如果存在权限问题，把旧的删了，重新复制进去，然后在redis容器<code>/var/lib/redis/</code>执行<code>chown redis:redis -R dump.rdb</code></p>
</li>
</ol>
<h3 id="总结数据升级麻烦"><a href="#总结数据升级麻烦" class="headerlink" title="总结数据升级麻烦"></a>总结数据升级麻烦</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://hearrain.com/gitlab-sheng-ji-shi-bai-hui-fu">GitLab升级失败恢复</a></p>
<p><a href="https://hub.docker.com/r/sameersbn/gitlab/#creating-backups">sameersbn/gitlab官方Rake Tasks</a></p>
<p><a href="https://github.com/sameersbn/docker-gitlab/issues/1655">https://github.com/sameersbn/docker-gitlab/issues/1655</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 安装与使用基础</title>
    <url>/2017/10/10/docker-install-base/</url>
    <content><![CDATA[<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps [-a] <span class="comment">#查看运行容器状态，-a 查看所有容器</span></span><br><span class="line">docker stop &lt;容器id&gt; <span class="comment">#停止运行容器</span></span><br><span class="line">docker rm &lt;容器id&gt; [-f] <span class="comment">#删除容器，-f 删除运行的</span></span><br><span class="line">docker rmi &lt;镜像id&gt; <span class="comment">#删除镜像</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;容器id&gt; &lt;/bin/bash或者sh&gt; 进入容器（bash或者sh）</span><br><span class="line"><span class="comment"># -p端口映射 -v挂载 -d后台，--name容器名字，--rm和-d不能通用，--rm启动停止后删除</span></span><br><span class="line">docker run -p 80:80 -v /data:/data --name mynginx -d nginx:latest  </span><br><span class="line"><span class="comment"># 运行容器并进去,一次性</span></span><br><span class="line">docker run -it --rm ubuntu:18.04 /bin/bash </span><br><span class="line"><span class="built_in">exit</span> <span class="comment">#退出容器</span></span><br><span class="line"><span class="comment">#添加标签</span></span><br><span class="line">docker node update --label-add &lt;KEY&gt;=&lt;VALUE&gt; &lt;NODE ID|NAME&gt;</span><br><span class="line"><span class="comment">#查看节点详细信息</span></span><br><span class="line">docker node inspect &lt;NODE ID|NAME&gt;</span><br><span class="line"><span class="comment">#查看网络</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="comment">#推镜像到仓库</span></span><br><span class="line">docker push exxk/gitlab_cloud:tagname</span><br><span class="line"><span class="comment">#拉取镜像</span></span><br><span class="line">docker pull exxk/gitlab_cloud:tagname</span><br><span class="line"><span class="comment">#远程连接</span></span><br><span class="line">sudo docker -H tcp://ip:port &lt;docker名令&gt;</span><br><span class="line"><span class="comment">#eg查看远程的又什么镜像</span></span><br><span class="line">sudo docker -H tcp://10.14.0.4:2375 images</span><br></pre></td></tr></table></figure>

<h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a><a href="https://docs.docker.com/engine/installation/linux/docker-ce/centos/#install-using-the-repository">docker</a>安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#或者阿里镜像</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum install docker-ce</span><br><span class="line">systemctl start docker.service</span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">sudo docker run hello-world</span><br><span class="line">sudo docker version</span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure>

<h4 id="daemon设置"><a href="#daemon设置" class="headerlink" title="daemon设置"></a>daemon设置</h4><p>修改/etc/docker/daemon.json文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"><span class="comment">#改完后重新加载配置</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment">#重启docker</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h5 id="docker加速阿里云加速地址"><a href="#docker加速阿里云加速地址" class="headerlink" title="docker加速阿里云加速地址"></a><a href="https://cr.console.aliyun.com/?spm=5176.2020520152.210.d103.5dbcab35Yw8obw#/accelerator">docker加速阿里云加速地址</a></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#等效于添加daemon.json文件</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;*****.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;hosts&quot;:[&quot;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h5 id="远程访问docker"><a href="#远程访问docker" class="headerlink" title="远程访问docker"></a><a href="https://jingyan.baidu.com/article/c843ea0bcf8a2777931e4ae7.html">远程访问docker</a></h5><h6 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h6><p>在daemo.json添加<code>&quot;hosts&quot;:[&quot;tcp://0.0.0.0:2375&quot;,&quot;unix:///var/run/docker.sock&quot;]</code></p>
<p>hosts 分tcp,uninx,fd三种模式，第一中时tcp指定网络连接方式，0.0.0.0:2375是指所有网络都可以连接，不安全，因此一般会加上stl证书形式，这里我用的局域网，所有没有加证书，指定局域网设置主机所属ip例如网卡2的ip为10.14.0.2，因此设置为10.14.0.2,只有10.14.0这个局域网可以访问，第二种uninx时指本地可以自由连接docker，第三种，理解不是很清楚，不发表见解</p>
<h6 id="方法2（方法1能采用尽量用1）"><a href="#方法2（方法1能采用尽量用1）" class="headerlink" title="方法2（方法1能采用尽量用1）"></a>方法2（方法1能采用尽量用1）</h6><p>直接修改服务的启动文件，添加-H参数指定</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解决portainner添加节点失败centos7.2 修改 /lib/systemd/system/docker.service</span></span><br><span class="line"><span class="comment">#ExecStart=/usr/bin/dockerd</span></span><br><span class="line"><span class="comment">#修改为</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure>

<h6 id="参考：docker-远程连接"><a href="#参考：docker-远程连接" class="headerlink" title="参考：docker 远程连接"></a>参考：<a href="https://www.jianshu.com/p/7ba1a93e6de4">docker 远程连接</a></h6><h3 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a><a href="https://docs.docker.com/compose/install/#uninstallation">docker-compose</a>安装</h3><h5 id="法一-当前采用"><a href="#法一-当前采用" class="headerlink" title="法一(当前采用)"></a>法一(当前采用)</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pip安装方式</span></span><br><span class="line">pip install docker-compose</span><br><span class="line"><span class="comment">#pip卸载方式</span></span><br><span class="line">pip uninstall docker-compose</span><br></pre></td></tr></table></figure>

<h5 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h5><p>安装<a href="https://github.com/docker/compose/releases">docker-compose</a>（以容器类型安装）</p>
<h5 id="法三"><a href="#法三" class="headerlink" title="法三"></a>法三</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"><span class="comment">#安装脚本，替换为最新的版本 ，这一步会失败，执行sudo -i</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment">#添加执行权限</span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment">#测试(失败，需要执行./docker-compose --version  没全局)</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>

<h4 id="基本常用命令"><a href="#基本常用命令" class="headerlink" title="基本常用命令"></a>基本常用命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line">docker-compose down</span><br><span class="line">docker-compose stop</span><br><span class="line">docker-compose rm</span><br><span class="line">docker-compose logs</span><br></pre></td></tr></table></figure>

<h3 id="docker-machine"><a href="#docker-machine" class="headerlink" title="docker-machine"></a><a href="https://docs.docker.com/machine/install-machine/#installing-machine-directly">docker-machine</a></h3><p>linux</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -L https://github.com/docker/machine/releases/download/v0.12.2/docker-machine-`uname -s`-`uname -m` &gt;/tmp/docker-machine &amp;&amp;</span><br><span class="line">chmod +x /tmp/docker-machine &amp;&amp;</span><br><span class="line">sudo cp /tmp/docker-machine /usr/local/bin/docker-machine</span><br></pre></td></tr></table></figure>

<p>windos git bash</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [[ ! -d &quot;$HOME/bin&quot; ]]; then mkdir -p &quot;$HOME/bin&quot;; fi &amp;&amp; \</span><br><span class="line">curl -L https://github.com/docker/machine/releases/download/v0.12.2/docker-machine-Windows-x86_64.exe &gt; &quot;$HOME/bin/docker-machine.exe&quot; &amp;&amp; \</span><br><span class="line">chmod +x &quot;$HOME/bin/docker-machine.exe&quot;</span><br></pre></td></tr></table></figure>



<h3 id="问题以及解决方法"><a href="#问题以及解决方法" class="headerlink" title="问题以及解决方法"></a>问题以及解决方法</h3><ol>
<li><p><code>docker info</code> 出现如下警告</p>
<p>奇葩现象，在mongo里面添加了用户之后，springboot连接数据库就连接不是，但是外面能连接上，然后<code>docker info</code>会出现下面的错误，然后执行下面 的解决方案就可以连接上了</p>
<p>可能(阿里云概率)会导致一个stack服务无法通过宿主机内网ip访问第二个stack服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WARNING: bridge-nf-call-iptables is disabled</span><br><span class="line">WARNING: bridge-nf-call-ip6tables is disabled</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<p>方式一</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/bridge/bridge-nf-call-iptables</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/bridge/bridge-nf-call-ip6tables</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">vi /etc/sysctl.conf</span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line"><span class="comment">#最后执行</span></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
</li>
<li><p>问题：构建镜像不能用<code>-</code>减号命名镜像的名字，使用docker-statck 部署找不到镜像</p>
</li>
<li><p>问题: 执行<code>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lfadmin ~]<span class="comment"># sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line">已加载插件：fastestmirror, langpacks</span><br><span class="line">adding repo from: https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">grabbing file https://download.docker.com/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">Could not fetch/save url https://download.docker.com/linux/centos/docker-ce.repo to file /etc/yum.repos.d/docker-ce.repo: [Errno 12] Timeout on https://download.docker.com/linux/centos/docker-ce.repo: (28, <span class="string">&#x27;Resolving timed out after 30541 milliseconds&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<p><code>vim /etc/yum.repos.d/docker-ce.repo</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[docker-ce-stable]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">Docker CE Stable - $basearch</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/7/$basearch/stable</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/gpg</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">[docker-ce-stable-debuginfo]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">Docker CE Stable - Debuginfo $basearch</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/7/debug-$basearch/stable</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/gpg</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">[docker-ce-stable-source]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">Docker CE Stable - Sources</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/7/source/stable</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/gpg</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">[docker-ce-edge]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">Docker CE Edge - $basearch</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/7/$basearch/edge</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/gpg</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">[docker-ce-edge-debuginfo]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">Docker CE Edge - Debuginfo $basearch</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/7/debug-$basearch/edge</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/gpg</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">[docker-ce-edge-source]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">Docker CE Edge - Sources</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/7/source/edge</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/gpg</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">[docker-ce-test]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">Docker CE Test - $basearch</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/7/$basearch/test</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/gpg</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">[docker-ce-test-debuginfo]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">Docker CE Test - Debuginfo $basearch</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/7/debug-$basearch/test</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/gpg</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">[docker-ce-test-source]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">Docker CE Test - Sources</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/7/source/test</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/gpg</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">[docker-ce-nightly]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">Docker CE Nightly - $basearch</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/7/$basearch/nightly</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/gpg</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">[docker-ce-nightly-debuginfo]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">Docker CE Nightly - Debuginfo $basearch</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/7/debug-$basearch/nightly</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/gpg</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">[docker-ce-nightly-source]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">Docker CE Nightly - Sources</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/7/source/nightly</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=<span class="string">https://mirrors.ustc.edu.cn/docker-ce/linux/centos/gpg</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>问题：<code>sudo yum install docker-ce</code>提示如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Delta RPMs disabled because &#x2F;usr&#x2F;bin&#x2F;applydeltarpm not installed.</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum provides <span class="string">&#x27;*/applydeltarpm&#x27;</span></span><br><span class="line">yum install deltarpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>问题<code>docker structure needs cleaning</code></p>
<p>解决：<code>docker system prune -a</code></p>
</li>
<li><p>问题设置daemo.json中hosts远程tcp连接时，不能启动</p>
<p>解决：<code>vim /lib/systemd/system/docker.service </code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">ExecStart</span>=<span class="string">/usr/bin/dockerd -H fd://</span></span><br><span class="line"><span class="comment">#修改为</span></span><br><span class="line"><span class="attr">ExecStart</span>=<span class="string">/usr/bin/dockerd</span></span><br></pre></td></tr></table></figure>

<p>然后重载配置<code>systemctl daemon-reload</code></p>
<p>重启docker服务<code>systemctl restart docker.service</code></p>
<p>原因：冲突和hosts</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker集群之Docker-machine安装</title>
    <url>/2017/10/10/docker-install-docker-machine/</url>
    <content><![CDATA[<h3 id="Docker-machine单独安装-废弃"><a href="#Docker-machine单独安装-废弃" class="headerlink" title="Docker-machine单独安装 (废弃)"></a>Docker-machine单独安装 (废弃)</h3><h6 id="官网：docker-machine"><a href="#官网：docker-machine" class="headerlink" title="官网：docker/machine"></a>官网：<a href="https://github.com/docker/machine">docker/machine</a></h6><h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><ul>
<li>win10</li>
<li>gitbash</li>
</ul>
<h4 id="安装-On-Windows-with-git-bash"><a href="#安装-On-Windows-with-git-bash" class="headerlink" title="安装(On Windows with git bash)"></a>安装(On Windows with git bash)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ if [[ ! -d &quot;$HOME&#x2F;bin&quot; ]]; then mkdir -p &quot;$HOME&#x2F;bin&quot;; fi &amp;&amp; \</span><br><span class="line">curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;machine&#x2F;releases&#x2F;download&#x2F;v0.12.2&#x2F;docker-machine-Windows-x86_64.exe &gt; &quot;$HOME&#x2F;bin&#x2F;docker-machine.exe&quot; &amp;&amp; \</span><br><span class="line">chmod +x &quot;$HOME&#x2F;bin&#x2F;docker-machine.exe&quot;</span><br></pre></td></tr></table></figure>

<p>执行上面的命令半天下载不下来，可以手动下载<a href="https://github.com/docker/machine/releases/download/v0.12.2/docker-machine-Windows-x86_64.exe%E7%84%B6%E5%90%8E%E6%89%A7%E8%A1%8C">https://github.com/docker/machine/releases/download/v0.12.2/docker-machine-Windows-x86_64.exe然后执行</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [[ ! -d &quot;$HOME&#x2F;bin&quot; ]]; then mkdir -p &quot;$HOME&#x2F;bin&quot;; fi &amp;&amp; mv docker-machine-Windows-x86_64.exe $HOME&#x2F;bin&#x2F;docker-machine.exe &amp;&amp; chmod +x &quot;$HOME&#x2F;bin&#x2F;docker-machine.exe&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>nginx</tag>
        <tag>集群</tag>
        <tag>Swarm</tag>
        <tag>overlay</tag>
        <tag>ingress</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-install-Gogs</title>
    <url>/2019/02/14/docker-install-gogs/</url>
    <content><![CDATA[<h3 id="gitlab类似仓库Gogs"><a href="#gitlab类似仓库Gogs" class="headerlink" title="gitlab类似仓库Gogs"></a>gitlab类似仓库Gogs</h3><p>Gogs内存占用小</p>
<p>部署脚本<code>docker-compose.yml</code></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  gogs:</span><br><span class="line">    restart: always</span><br><span class="line">    image: gogs/gogs</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;14080:3000&quot;</span></span><br><span class="line">      - <span class="string">&quot;14022:22&quot;</span></span><br><span class="line">    volumes:   </span><br><span class="line">      - /dockerdata/v-gogs:/data</span><br><span class="line">    deploy:</span><br><span class="line">      replicas: <span class="number">1</span></span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      placement:</span><br><span class="line">        constraints: [node.hostname == xuanps]</span><br></pre></td></tr></table></figure>

<p>第一次运行需要初始化，网页里面设置见<a href="https://github.com/gogs/gogs/tree/master/docker#application">Application</a></p>
<p>后面可以通过脚本<code>/dockerdata/v-gogs/gogs/conf/app.ini</code>修改所有配置</p>
<p><a href="https://github.com/gogs/gogs/tree/master/docker">github:gogs/gogs</a></p>
<p><a href="https://gogs.io/docs/advanced/configuration_cheat_sheet.html">app.ini配置文档</a></p>
<h3 id="镜像仓库设置"><a href="#镜像仓库设置" class="headerlink" title="镜像仓库设置"></a>镜像仓库设置</h3>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Gogs</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Install-Jenkins</title>
    <url>/2018/05/21/docker-install-jenkins/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>github文档：<a href="https://github.com/jenkinsci/docker/blob/master/README.md">jenkinsci/docker</a></p>
<p><a href="https://jenkins.io/">jenkins官网</a></p>
<p>Docker hub：<a href="https://hub.docker.com/r/jenkins/jenkins/">jenkins/jenkins</a></p>
<p><a href="https://jenkins.io/doc/book/blueocean/getting-started/">蓝色主题版</a>:<a href="https://hub.docker.com/r/jenkinsci/blueocean/">jenkinsci/blueocean</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>脚本文件<a href="https://github.com/xuanfong1/config/blob/master/dockerStack/stack-jenkins.yml">https://github.com/xuanfong1/config/blob/master/dockerStack/stack-jenkins.yml</a></p>
<p>创建挂载目录</p>
<p>启动提示：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">touch: cannot touch &#x27;/<span class="keyword">var</span>/jenkins_home/copy_reference_file<span class="variable">.log</span>&#x27;: Permission denied</span><br><span class="line"></span><br><span class="line">Can <span class="keyword">not</span> write to /<span class="keyword">var</span>/jenkins_home/copy_reference_file<span class="variable">.log</span>. Wrong volume permissions?</span><br></pre></td></tr></table></figure>

<p>解决：执行<code>chown -R 1000:1000 /dockerdata/v-jenkins/jenkins_home</code>改变用户组为1000 用户1000</p>
<h3 id="jenkins-之docker插件"><a href="#jenkins-之docker插件" class="headerlink" title="jenkins 之docker插件"></a>jenkins 之docker插件</h3><p><a href="https://plugins.jenkins.io/docker-build-step">docker-build-step</a> 构建步骤使用docker命令</p>
<p><a href="https://plugins.jenkins.io/docker-build-publish">CloudBees Docker Build and Publish</a>镜像构建以及推送仓库</p>
<p><a href="https://plugins.jenkins.io/docker-plugin">Docker</a> 远程连接docker进行代理构建</p>
<p><a href="https://plugins.jenkins.io/docker-java-api">Docker API</a>提供其他插件docker服务api</p>
<p><a href="https://plugins.jenkins.io/docker-custom-build-environment">CloudBees Docker Custom Build Environment</a>构建镜像或从仓库拉去镜像</p>
<p><a href="https://plugins.jenkins.io/docker-swarm">Docker Swarm</a>集群</p>
<p><a href="https://github.com/boxboat/jenkins-demo">https://github.com/boxboat/jenkins-demo</a></p>
<p>错误处理</p>
<ol>
<li><p>连接错误，解决添加挂在卷<code>&quot;/var/run/docker.sock:/var/run/docker.sock&quot; </code></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">Cannot connect to the Docker daemon at unix:<span class="comment">///var/run/docker.sock. Is the docker daemon running?</span></span><br><span class="line"></span><br><span class="line">script returned exit code <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>连接没权限,解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Got permission denied while trying to connect to the Docker daemon socket at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock: Post http:&#x2F;&#x2F;%2Fvar%2Frun%2Fdocker.sock&#x2F;v1.35&#x2F;build?buildargs&#x3D;%7B%7D&amp;cachefrom&#x3D;%5B%5D&amp;cgroupparent&#x3D;&amp;cpuperiod&#x3D;0&amp;cpuquota&#x3D;0&amp;cpusetcpus&#x3D;&amp;cpusetmems&#x3D;&amp;cpushares&#x3D;0&amp;dockerfile&#x3D;Dockerfile&amp;labels&#x3D;%7B%7D&amp;memory&#x3D;0&amp;memswap&#x3D;0&amp;networkmode&#x3D;default&amp;rm&#x3D;1&amp;session&#x3D;6ec5bc5a7afd427649abb0a03b733c9586dd9271474c89359e31a3910ed971e8&amp;shmsize&#x3D;0&amp;t&#x3D;e5e2d0e18760db6972a9c42a9a81653e633ff131&amp;target&#x3D;&amp;ulimits&#x3D;null: dial unix &#x2F;var&#x2F;run&#x2F;docker.sock: connect: permission denied</span><br><span class="line"></span><br><span class="line">script returned exit code 1</span><br></pre></td></tr></table></figure>

<p>执行<code>sudo ls -la /var/run/docker.sock </code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srw-rw----. 1 root docker 0 5月  15 16:36 &#x2F;var&#x2F;run&#x2F;docker.sock</span><br></pre></td></tr></table></figure>

<p><code>--group-add=$(stat -c %g /var/run/docker.sock)</code></p>
<p><code>sudo usermod -a -G docker jenkins</code></p>
<p>解决方案</p>
<h5 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h5><p>改变socke所属的用户组</p>
<p>用root用户进入jenkins容器</p>
<p>执行<code>chown :jenkins /var/run/docker.sock</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">-------------宿主机------------------------------</span><br><span class="line">[<span class="type">root</span>@<span class="type">worker</span> ~]<span class="comment"># ls -la /var/run/docker.sock</span></span><br><span class="line">srw<span class="literal">-rw</span>----. <span class="number">1</span> root docker <span class="number">0</span> <span class="number">6</span>月   <span class="number">6</span> <span class="number">16</span>:<span class="number">58</span> /var/run/docker.sock</span><br><span class="line">执行后</span><br><span class="line">[<span class="type">root</span>@<span class="type">worker</span> ~]<span class="comment"># ls -la /var/run/docker.sock</span></span><br><span class="line">srw<span class="literal">-rw</span>----. <span class="number">1</span> root <span class="number">1000</span> <span class="number">0</span> <span class="number">6</span>月   <span class="number">6</span> <span class="number">16</span>:<span class="number">58</span> /var/run/docker.sock</span><br><span class="line">-----------------<span class="literal">-jenkins</span>容器---------------------</span><br><span class="line">srw<span class="literal">-rw</span>---- <span class="number">1</span> root <span class="number">994</span> <span class="number">0</span> Jun  <span class="number">6</span> <span class="number">08</span>:<span class="number">58</span> var/run/docker.sock</span><br><span class="line">执行后</span><br><span class="line">srw<span class="literal">-rw</span>---- <span class="number">1</span> root jenkins <span class="number">0</span> Jun  <span class="number">6</span> <span class="number">08</span>:<span class="number">58</span> var/run/docker.sock</span><br></pre></td></tr></table></figure>

<p><code>cat /etc/group</code>查看用户组id</p>
<p>自我理解：</p>
<p>这里通过挂载卷的形式共享/var/run/docker.sock套接字，但是默认套接字属于root docker组，这里docker的组id为994，但是容器内没有994的组，所以直接显示994，最后执行这个<code>chown :jenkins /var/run/docker.sock</code>之后把组更改为乐jenkins组，但是默认宿主机是没有jenkins组，所以直接显示jenkins的id 1000，这里直接修改为jenkins用户组，虽然可以解决权限问题，不知道会不会影响其他的使用该sock套接字（<strong>隐患</strong>）</p>
<p>完善思路：</p>
<p>新建个jenkins组</p>
<p>添加docker用户到jenkins组</p>
<p>但是发现</p>
<p>宿主机<code>id docker</code> 没有docker用户</p>
<p>且docker组没有任何用户，因此可以放心更改组，所以要不要新建组待考虑</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/group #查看组信息</span><br><span class="line">cgred:x:995:</span><br><span class="line">docker:x:994:jenkins</span><br><span class="line"><span class="meta">#</span><span class="bash">组名:口令(默认空/*):组标识号(gid):组内用户列表</span></span><br></pre></td></tr></table></figure>

<h5 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h5><p>自我新思路</p>
<p>宿主机创建个jenkins用户组指定id1000</p>
<p>宿主机执行<code>useradd -u 1000 jenkins</code></p>
<p>然后执行<code>sudo usermod -a -G docker jenkins</code></p>
<p>失败，没有权限</p>
<h5 id="方案三-未实验"><a href="#方案三-未实验" class="headerlink" title="方案三(未实验)"></a>方案三(未实验)</h5><p>root用户可以访问docker,需要重写dockerfile</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM &lt;base-image&gt;</span><br><span class="line">USER root</span><br></pre></td></tr></table></figure>

<p>隐患：不知到用root用户登陆会不会影响jenkins的一些功能</p>
<h5 id="方案四-未实验"><a href="#方案四-未实验" class="headerlink" title="方案四(未实验)"></a>方案四(未实验)</h5><p>修改<code>groupadd -g 994 docker</code>，找不到命令</p>
<p>然后执行<code>usermod -a -G docker jenkins</code></p>
<p>此法每次重启容器都会丢失配置，虽然可以通过挂载目录形式保存设置，太麻烦。</p>
</li>
<li><p>Jenkins 第一次打开，一直显示启动中</p>
<p>解决：</p>
<p>修改jenkins_home/updates/default.json</p>
<p>把 “connectionCheckUrl”:”<a href="http://www.google.com/&quot;">http://www.google.com/&quot;</a> 改为 “connectionCheckUrl”:”<a href="http://www.baidu.com/&quot;">http://www.baidu.com/&quot;</a></p>
<p><a href="https://github.com/jenkinsci/docker/issues/263">https://github.com/jenkinsci/docker/issues/263</a></p>
</li>
</ol>
<h2 id="centos-安装jenkins-需要jdk8"><a href="#centos-安装jenkins-需要jdk8" class="headerlink" title="centos 安装jenkins,需要jdk8"></a>centos 安装jenkins,需要jdk8</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class="line">yum install jenkins</span><br><span class="line">sudo service jenkins start/stop/restart</span><br><span class="line">sudo chkconfig jenkins on</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker集群之安装Kubernetes</title>
    <url>/2017/09/14/docker-install-kubernetes/</url>
    <content><![CDATA[<h1 id="kubectl安装"><a href="#kubectl安装" class="headerlink" title="kubectl安装"></a>kubectl安装</h1><p><a href="https://github.com/GoogleCloudPlatform/kubernetes">kubectl</a> 是 Kubernetes 自带的客户端，可以用它来直接操作 Kubernetes。</p>
<h6 id="官方文档：Install-and-Set-Up-kubectl"><a href="#官方文档：Install-and-Set-Up-kubectl" class="headerlink" title="官方文档：Install and Set Up kubectl"></a>官方文档：<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">Install and Set Up kubectl</a></h6><h3 id="window平台（需要bash-on-ubuntu环境）"><a href="#window平台（需要bash-on-ubuntu环境）" class="headerlink" title="window平台（需要bash on ubuntu环境）"></a>window平台（需要bash on ubuntu环境）</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切换bash on Ubuntu命令</span></span><br><span class="line">bash</span><br><span class="line"><span class="comment">#下载kubectl</span></span><br><span class="line"><span class="built_in">curl</span> <span class="literal">-LO</span> https://storage.googleapis.com/kubernetes<span class="literal">-release</span>/release/<span class="variable">$</span>(<span class="built_in">curl</span> <span class="literal">-s</span> https://storage.googleapis.com/kubernetes<span class="literal">-release</span>/release/stable.txt)/bin/windows/amd64/kubectl.exe</span><br><span class="line"><span class="comment">#退出bash</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"><span class="comment">#查看版本</span></span><br><span class="line">.\kubectl.exe version</span><br></pre></td></tr></table></figure>

<h3 id="Linux平台"><a href="#Linux平台" class="headerlink" title="Linux平台"></a>Linux平台</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载kubectl</span></span><br><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl</span><br><span class="line"><span class="meta">#</span><span class="bash">添加权限</span></span><br><span class="line">chmod +x ./kubectl</span><br><span class="line"><span class="meta">#</span><span class="bash">设置全局命令（环境变量）</span></span><br><span class="line">sudo mv ./kubectl /usr/local/bin/kubectl</span><br><span class="line"><span class="meta">#</span><span class="bash">检查安装成功与否</span></span><br><span class="line">kubectl version</span><br></pre></td></tr></table></figure>

<h1 id="Minikube安装"><a href="#Minikube安装" class="headerlink" title="Minikube安装"></a>Minikube安装</h1><h6 id="官方文档kubernetes-minikube"><a href="#官方文档kubernetes-minikube" class="headerlink" title="官方文档kubernetes/minikube"></a>官方文档<a href="https://github.com/kubernetes/minikube/releases">kubernetes/minikube</a></h6><p><a href="https://www.virtualbox.org/wiki/Linux_Downloads">virtualBox</a></p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装配置minikube</span></span><br><span class="line">curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.22.1/minikube-linux-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/local/bin/</span><br><span class="line"><span class="meta">#</span><span class="bash">查看版本</span></span><br><span class="line">minikube version</span><br><span class="line"><span class="meta">#</span><span class="bash">下载virtualbox</span></span><br><span class="line">wget http://download.virtualbox.org/virtualbox/5.1.26/VirtualBox-5.1-5.1.26_117224_el7-1.x86_64.rpm</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Windos"><a href="#Windos" class="headerlink" title="Windos"></a>Windos</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装配置minikube</span></span><br><span class="line"><span class="built_in">curl</span> <span class="literal">-Lo</span> minikube.exe https://storage.googleapis.com/minikube/releases/v0.<span class="number">22.1</span>/minikube<span class="literal">-windows</span><span class="literal">-amd64</span>.exe</span><br><span class="line"><span class="comment">#查看版本</span></span><br><span class="line">./minikube.exe version</span><br></pre></td></tr></table></figure>

<h3 id="。。。。。放弃，转用swarm-已卸载相关下载文件"><a href="#。。。。。放弃，转用swarm-已卸载相关下载文件" class="headerlink" title="。。。。。放弃，转用swarm ,已卸载相关下载文件"></a>。。。。。放弃，转用swarm ,已卸载相关下载文件</h3><p>弃坑理由：安装负杂，需要安装虚拟机，对环境要求高，学习成本高，swarm和Kubernetes对dockers的差距越来越小</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>集群</tag>
        <tag>k8s</tag>
        <tag>kubectl</tag>
        <tag>Minikube</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-install-mongo</title>
    <url>/2019/01/23/docker-install-mongo/</url>
    <content><![CDATA[<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">mongo:</span><br><span class="line">  image: mongo</span><br><span class="line">  restart: always</span><br><span class="line">  ports:</span><br><span class="line">    - <span class="number">14017</span>:<span class="number">27017</span></span><br><span class="line"><span class="comment">#  environment:</span></span><br><span class="line"><span class="comment">#    MONGO_INITDB_ROOT_USERNAME: root</span></span><br><span class="line"><span class="comment">#    MONGO_INITDB_ROOT_PASSWORD: example</span></span><br><span class="line">  volumes:</span><br><span class="line">    - /dockerdata/v-yinfu/mongo/configdb:/data/configdb</span><br><span class="line">    - /dockerdata/v-yinfu/mongo/db:/data/db   </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Install-RabbitMQ</title>
    <url>/2018/04/10/docker-install-rabbitmq/</url>
    <content><![CDATA[<h3 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h3><p><a href="https://hub.docker.com/r/_/rabbitmq/">docker-hub/rabbitmq</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="comment">#-------------------------不带管理界面---------------------------------------------</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">xuanps</span> <span class="comment">#节点名字</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">RABBITMQ_DEFAULT_USER:</span> <span class="string">root</span> <span class="comment">#设置用户名</span></span><br><span class="line">      <span class="attr">RABBITMQ_DEFAULT_PASS:</span> <span class="string">*******</span> <span class="comment">#设置密码</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">14002</span><span class="string">:5672</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/dockerdata/v-rabbitmq:/var/lib/rabbitmq&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">xuanps</span>]</span><br><span class="line"><span class="comment">#--------------带管理界面（从带管理界面升级要清空挂载目录）---------------------------------        </span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq:3.7-management-alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">me</span> <span class="comment">#节点名字</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">RABBITMQ_DEFAULT_USER:</span> <span class="string">test</span> <span class="comment">#设置用户名</span></span><br><span class="line">      <span class="attr">RABBITMQ_DEFAULT_PASS:</span> <span class="string">test</span> <span class="comment">#设置密码</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">14012</span><span class="string">:5672</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">14013</span><span class="string">:15672</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/home/dockerdata/v-nantian-dev/rabbitmq:/var/lib/rabbitmq&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">me</span>]          </span><br></pre></td></tr></table></figure>

<h3 id="springboot-连接mq"><a href="#springboot-连接mq" class="headerlink" title="springboot 连接mq"></a>springboot 连接mq</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>mq连接配置<code>application.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">112.74</span><span class="number">.51</span><span class="number">.136</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">14002</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">********</span></span><br></pre></td></tr></table></figure>

<p>mq发送数据（测试类）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AmqpTemplate rabbitTemplate;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String context=<span class="string">&quot;hello&quot;</span>+<span class="keyword">new</span> Date();</span><br><span class="line">    System.out.print(<span class="string">&quot;send context:&quot;</span>+context);</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;hello&quot;</span>,context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mq配置类<code>MqConfig.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue; <span class="comment">//注意不要导错包</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">helloQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mq接受数据类<code>MqReceiver.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">//注解必须加</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String hello)</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;receiver:&quot;</span>+hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试效果：先启动主程序，再点击测试类发送，主程序就可以接收到消息了。（先发送后启动主程序是接受不到的）</p>
<h3 id="centos7-install-RabbitMQ"><a href="#centos7-install-RabbitMQ" class="headerlink" title="centos7 install RabbitMQ"></a>centos7 install RabbitMQ</h3><ol>
<li><p>首先下载<a href="http://47.98.114.63:14018/s/J9B2LHJqZkPCGmG">安装包</a>:erlang、socat、rabbitmq以此用<code>rpm -ivh &lt;&gt;</code>安装这三个</p>
</li>
<li><p>新建修改配置文件<code>vi /etc/rabbitmq/rabbitmq.config</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[</span></span><br><span class="line"><span class="meta">&#123;rabbit,</span> <span class="string">[&#123;tcp_listeners, [5672]&#125;, &#123;loopback_users, [&quot;admin&quot;]&#125;]&#125;</span></span><br><span class="line"><span class="attr">].</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动rabbitmq服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">systemctl start rabbitmq-server</span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">systemctl status rabbitmq-server</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置远程管理web界面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_stomp</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_web_stomp</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置用户远程访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新建用户test密码test</span></span><br><span class="line">rabbitmqctl add_user <span class="built_in">test</span> <span class="built_in">test</span></span><br><span class="line">rabbitmqctl set_user_tags <span class="built_in">test</span> administrator</span><br><span class="line">rabbitmqctl set_permissions -p / <span class="built_in">test</span> <span class="string">&#x27;.*&#x27;</span> <span class="string">&#x27;.*&#x27;</span> <span class="string">&#x27;.*&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启rabbitmq服务执行<code>systemctl restart rabbitmq-server</code></p>
</li>
<li><p>添加防火墙访问端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加15672端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=15672/tcp --permanent</span><br><span class="line"><span class="comment">#加载配置</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment">#查看配置是否生效</span></span><br><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试，浏览器访问<code>http://&lt;服务器ip&gt;:15672/</code>使用test,test用户密码登陆</p>
</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>问题1：<code>.erlang.cookie must be accessible by owner only </code>不断重启</p>
<p>解决：删除整个挂载目录，包括<code>rabbitmq</code>，然后重建</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker swarm</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装Registry</title>
    <url>/2018/01/24/docker-install-registry/</url>
    <content><![CDATA[<h3 id="Registry官网"><a href="#Registry官网" class="headerlink" title="Registry官网"></a><a href="https://hub.docker.com/_/registry/">Registry</a>官网</h3><h3 id="本地仓库安装无绑定oss"><a href="#本地仓库安装无绑定oss" class="headerlink" title="本地仓库安装无绑定oss"></a>本地仓库安装无绑定oss</h3><ol>
<li><p><a href="http://www.awesometool.org/Generate/Htpasswd">htpasswd</a>网页生成密码保存到<code>./auth/htpasswd</code>，加密方式选中<strong>bcrypt</strong>，或者执行命令生成<code>htpasswd -Bbn test 123456 &gt; auth/htpasswd</code></p>
</li>
<li><p>编辑<code>vim docker-compose.yml</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">registry</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">restart</span>: <span class="string">always</span></span><br><span class="line">  <span class="attr">image</span>: <span class="string">&quot;registry:2.6.2&quot;</span></span><br><span class="line">  <span class="attr">ports</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">14005:5000</span></span><br><span class="line">  <span class="attr">environment</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">REGISTRY_AUTH=htpasswd #授权模式</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd #密码的地址</span></span><br><span class="line">  <span class="attr">volumes</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">./auth:/auth #密码存储的挂载卷</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">./data:/var/lib/registry #本地仓库挂载的卷</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动容器<code>docker-compose up</code></p>
</li>
<li><p>创建镜像<code>docker tag &lt;镜像名字&gt; 127.0.0.1:14005&lt;镜像名字&gt;</code></p>
</li>
<li><p>登陆仓库<code>docker login 127.0.0.1:14005</code>输入账号密码或者<code>docker login -u admin -p 123456 127.0.0.1:14005</code></p>
</li>
<li><p>上传镜像<code>docker push 127.0.0.1:14005&lt;镜像名字&gt;</code> 或者拉取镜像<code>docker pull 127.0.0.1:14005&lt;镜像名字&gt;</code></p>
</li>
</ol>
<h3 id="绑定oss"><a href="#绑定oss" class="headerlink" title="绑定oss"></a>绑定oss</h3><ol>
<li><p>修改上面的第6步骤</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">registry</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">restart</span>: <span class="string">always</span></span><br><span class="line">  <span class="attr">image</span>: <span class="string">&quot;registry:2.6.2&quot;</span></span><br><span class="line">  <span class="attr">ports</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">14005:5000</span></span><br><span class="line">  <span class="attr">environment</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">REGISTRY_AUTH=htpasswd</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">REGISTRY_STORAGE=oss #必填</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">REGISTRY_STORAGE_OSS_ACCESSKEYID=你的阿里云ACCESSKEYID，带oss权限 #必填</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">REGISTRY_STORAGE_OSS_ACCESSKEYSECRET=你的阿里云ACCESSKEYSECRET，带oss权限 #必填</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">REGISTRY_STORAGE_OSS_REGION=节点区域（oss-cn-hangzhou） #必填</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">REGISTRY_STORAGE_OSS_BUCKET=buket的名字（t-docker-registry） #必填</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">REGISTRY_STORAGE_OSS_ENDPOINT=t-docker-registry.oss-cn-hangzhou.aliyuncs.com #非必填</span></span><br><span class="line">  <span class="attr">volumes</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">-</span> <span class="string">./auth:/auth</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果报如下错误</p>
<h5 id="参考Private-registry-push-fail-server-gave-HTTP-response-to-HTTPS-client"><a href="#参考Private-registry-push-fail-server-gave-HTTP-response-to-HTTPS-client" class="headerlink" title="参考Private registry push fail: server gave HTTP response to HTTPS client"></a>参考<a href="https://github.com/docker/distribution/issues/1874">Private registry push fail: server gave HTTP response to HTTPS client</a></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error response from daemon: received unexpected HTTP status: 503 Service Unavailable</span><br><span class="line"><span class="meta">#</span><span class="bash">或者</span></span><br><span class="line">Error response from daemon: login attempt to http://127.0.0.1:14005/v2/ failed with status: 503 Service Unavailable</span><br><span class="line"><span class="meta">#</span><span class="bash">或者</span></span><br><span class="line">Error response from daemon: Get https://112.74.51.136:14005/v2/: http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure>

<p>设置<code>vim /etc/docker/daemon.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">//这句是仓库加速地址，以前的</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;your aliyun 加速地址&quot;</span>],</span><br><span class="line">  <span class="comment">//添加这句,只有通过这个ip访问才不报错，如果有其他ip访问，也要加进来，不然就不用那个ip访问</span></span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;112.74.51.136:14005&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后<code>sudo systemctl daemon-reload</code>重启<code>systemctl restart docker</code></p>
<h6 id="幻觉：失败了一次，重启又可以了？"><a href="#幻觉：失败了一次，重启又可以了？" class="headerlink" title="幻觉：失败了一次，重启又可以了？"></a>幻觉：失败了一次，重启又可以了？</h6></li>
</ol>
<h3 id="docker-registry-证书配置"><a href="#docker-registry-证书配置" class="headerlink" title="docker registry 证书配置"></a>docker registry 证书配置</h3><p>部署配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">registry:</span><br><span class="line">  restart: always</span><br><span class="line">  image: &quot;registry:2.6.2&quot;</span><br><span class="line">  ports:</span><br><span class="line">    - 14005:5000</span><br><span class="line">  environment:</span><br><span class="line">    - REGISTRY_AUTH&#x3D;htpasswd #授权模式</span><br><span class="line">    - REGISTRY_AUTH_HTPASSWD_REALM&#x3D;Registry Realm</span><br><span class="line">    - REGISTRY_AUTH_HTPASSWD_PATH&#x3D;&#x2F;auth&#x2F;htpasswd #密码的地址</span><br><span class="line">    - REGISTRY_HTTP_TLS_KEY&#x3D;&#x2F;certs&#x2F;domain.key</span><br><span class="line">    - REGISTRY_HTTP_TLS_CERTIFICATE&#x3D;&#x2F;certs&#x2F;domain.crt</span><br><span class="line">  volumes:</span><br><span class="line">    - &#x2F;dockerdata&#x2F;v-registry&#x2F;auth:&#x2F;auth #密码存储的挂载卷</span><br><span class="line">    - &#x2F;dockerdata&#x2F;v-registry&#x2F;registry:&#x2F;var&#x2F;lib&#x2F;registry #本地仓库挂载的卷</span><br><span class="line">    - &#x2F;dockerdata&#x2F;v-registry&#x2F;certs:&#x2F;certs #https</span><br></pre></td></tr></table></figure>

<p> 在<code>/dockerdata/v-registry/</code>生成证书,注意在hostname设置时，不要忽略www</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@environment-test1 v-registry]<span class="comment"># sudo mkdir -p certs &amp;&amp; sudo openssl req -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key -x509 -days 365 -out certs/domain.crt</span></span><br><span class="line">Generating a 4096 bit RSA private key</span><br><span class="line">...........................................................++</span><br><span class="line">..++</span><br><span class="line">writing new private key to <span class="string">&#x27;certs/domain.key&#x27;</span></span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:</span><br><span class="line">Locality Name (eg, city) [Default City]:</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:</span><br><span class="line">Organizational Unit Name (eg, section) []:</span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:www.3sreform.com</span></span><br><span class="line"><span class="string">Email Address []:</span></span><br></pre></td></tr></table></figure>

<p>再各个使用仓库的宿主机创建目录<code>mkdir -p /etc/docker/certs.d/www.3sreform.com:14005 </code></p>
<p>然后把生成的证书放到该目录下并改名为<code>ca.crt</code></p>
<p>最后重启docker</p>
<p><code>sudo systemctl daemon-reload</code>和<code>sudo systemctl restart docker</code></p>
<p>最后用<code>docker login www.3sreform.com:14005 -u admin -p &lt;密码&gt;</code>测试</p>
<p>最后push是，镜像开头必须是<code>www.3sreform.com</code></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.jianshu.com/p/55ee4b6a72b6">Docker搭建registry 私人仓库</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>集群</tag>
        <tag>Swarm</tag>
        <tag>registry</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-install-solr</title>
    <url>/2019/01/23/docker-install-solr/</url>
    <content><![CDATA[<h3 id="solr清除数据"><a href="#solr清除数据" class="headerlink" title="solr清除数据"></a>solr清除数据</h3><p>步骤：</p>
<ol>
<li><p>登录solr网页</p>
</li>
<li><p>搜索对应的core</p>
</li>
<li><p>点击Documents –&gt; Document Type –&gt; 选择XML类型 </p>
</li>
<li><p>定格编写语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;delete&gt;&lt;query&gt;*:*&lt;&#x2F;query&gt;&lt;&#x2F;delete&gt;</span><br><span class="line">&lt;commit&#x2F;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后点击Submit  Document</p>
</li>
</ol>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>docker-compose.yml</code></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">solr:</span><br><span class="line">  image: solr:<span class="number">5.5</span>.<span class="number">5</span></span><br><span class="line">  restart: always</span><br><span class="line">  ports:</span><br><span class="line">    - <span class="number">14093</span>:<span class="number">8983</span></span><br></pre></td></tr></table></figure>

<p>访问<a href="">ip:14093</a></p>
<p>常见问题</p>
<p>问题1： index已经锁定<code>Caused by: org.apache.solr.common.SolrException: Index locked for write for core XXX</code></p>
<p>解决：</p>
<p>solr数据备份注意目录复制时权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除这个文件</span></span><br><span class="line">rm /data/soft/solr/data/index/write.lock</span><br><span class="line"><span class="comment">#以root权限进入容器执行</span></span><br><span class="line">docker <span class="built_in">exec</span> -it --user root &lt;容器id&gt; bash</span><br><span class="line"><span class="built_in">cd</span> /opt/solr/server/solr</span><br><span class="line">chown -R solr:solr sure-core</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>solr</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker集群之安装Swarm</title>
    <url>/2017/09/14/docker-install-swarm/</url>
    <content><![CDATA[<h3 id="Docker-Swarm官网"><a href="#Docker-Swarm官网" class="headerlink" title="Docker Swarm官网"></a><a href="https://docs.docker.com/engine/swarm/">Docker Swarm</a>官网</h3><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#centos7.3</span></span><br><span class="line">Docker version <span class="number">17.06</span>.<span class="number">2</span><span class="literal">-ce</span>, build cec0b72</span><br><span class="line"><span class="comment">#win10</span></span><br><span class="line">Docker version <span class="number">17.06</span>.<span class="number">2</span><span class="literal">-ce</span>, build cec0b72</span><br></pre></td></tr></table></figure>

<ul>
<li>TCP 2377 集群管理通信</li>
<li>TCP/UDP 7946 容器(container)网络发现</li>
<li>UDP 4789 容器(container)入口网络</li>
</ul>
<h2 id="Swarm-安装"><a href="#Swarm-安装" class="headerlink" title="Swarm 安装"></a>Swarm 安装</h2><p>centos manager(xuanPs)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#初始化节点</span></span><br><span class="line">docker swarm init --advertise-addr 112.74.51.136</span><br><span class="line"><span class="comment">#echo输出如下内容，在work节点执行改命令加入改manger(windos执行)</span></span><br><span class="line">docker swarm join --token SWMTKN-1-34egnv0ksgzg6enh47wmze0ncx90bo2218yaetm88p6s028i2s-c46n408x51lklv1n3myhmpt1a 112.74.51.136:2377</span><br><span class="line"><span class="comment">#查看节点</span></span><br><span class="line">docker node ls</span><br></pre></td></tr></table></figure>

<h4 id="创建和删除服务"><a href="#创建和删除服务" class="headerlink" title="创建和删除服务"></a>创建和删除服务</h4><h6 id="参考inspect-service、scale-service、delete-service"><a href="#参考inspect-service、scale-service、delete-service" class="headerlink" title="参考inspect-service、scale-service、delete-service"></a>参考<a href="https://docs.docker.com/engine/swarm/swarm-tutorial/inspect-service/">inspect-service</a>、<a href="https://docs.docker.com/engine/swarm/swarm-tutorial/scale-service/">scale-service</a>、<a href="https://docs.docker.com/engine/swarm/swarm-tutorial/delete-service/">delete-service</a></h6><p><code>docker service create --replicas 1 --name helloworld alpine ping docker.com</code></p>
<ul>
<li><code>docker service create</code> 创建服务</li>
<li><code>--name</code> 服务的名字</li>
<li><code>--replicas</code> 指定实例运行数量</li>
<li><code>alpine ping docker.com</code>指定alpine执行ping命令</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看运行的服务</span></span><br><span class="line">docker service ls</span><br><span class="line"><span class="comment">#查看某服务状态</span></span><br><span class="line">docker service ps &lt;服务名&gt;</span><br><span class="line"><span class="comment">#运行5个helloworld服务</span></span><br><span class="line">docker service scale helloworld=5</span><br><span class="line"><span class="comment">#移除helloworld服务</span></span><br><span class="line">docker service rm helloworld</span><br><span class="line"><span class="comment">#检查helloworld是否存在</span></span><br><span class="line">docker service inspect helloworld</span><br></pre></td></tr></table></figure>

<h4 id="升级服务"><a href="#升级服务" class="headerlink" title="升级服务"></a>升级服务</h4><p><code>docker service create --replicas 3 --name redis --update-delay 10s redis:3.0.6</code></p>
<ul>
<li><code>--update-delay</code>多个服务启动时之间的时间间隔eg:<code>4h2m1s</code></li>
</ul>
<h6 id="参考rolling-update"><a href="#参考rolling-update" class="headerlink" title="参考rolling-update"></a>参考<a href="https://docs.docker.com/engine/swarm/swarm-tutorial/rolling-update/">rolling-update</a></h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建运行rdeis3.0.6服务</span></span><br><span class="line">docker service create -<span class="literal">-replicas</span> <span class="number">3</span> -<span class="literal">-name</span> redis -<span class="literal">-update</span><span class="literal">-delay</span> <span class="number">10</span>s redis:<span class="number">3.0</span>.<span class="number">6</span></span><br><span class="line"><span class="comment">#查看redis images版本为3.0.6</span></span><br><span class="line">docker service inspect -<span class="literal">-pretty</span> redis</span><br><span class="line"><span class="comment">#更新redis镜像到3.0.7</span></span><br><span class="line">docker service update -<span class="literal">-image</span> redis:<span class="number">3.0</span>.<span class="number">7</span> redis</span><br><span class="line"><span class="comment">#更新redis服务为最新镜像</span></span><br><span class="line">docker service update -<span class="literal">-detach</span>=false redis</span><br><span class="line"><span class="comment">#查看是否为3.0.7</span></span><br><span class="line">docker service <span class="built_in">ps</span> redis</span><br></pre></td></tr></table></figure>

<h4 id="关闭一个节点"><a href="#关闭一个节点" class="headerlink" title="关闭一个节点"></a>关闭一个节点</h4><h6 id="参考drain-node"><a href="#参考drain-node" class="headerlink" title="参考drain-node"></a>参考<a href="https://docs.docker.com/engine/swarm/swarm-tutorial/drain-node/">drain-node</a></h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭moby节点Availability为drain</span></span><br><span class="line">docker node update -<span class="literal">-availability</span> drain moby</span><br><span class="line"><span class="comment">#查看rdeis服务还是三个只不过在其他机器上</span></span><br><span class="line">docker service <span class="built_in">ps</span> redis</span><br><span class="line"><span class="comment">#查看moby节点状态</span></span><br><span class="line">docker node inspect -<span class="literal">-pretty</span> moby</span><br><span class="line"><span class="comment">#开启moby节点</span></span><br><span class="line">docker node update -<span class="literal">-availability</span> active moby</span><br></pre></td></tr></table></figure>

<h4 id="使用群组路由模式"><a href="#使用群组路由模式" class="headerlink" title="使用群组路由模式"></a>使用群组路由模式</h4><h6 id="参考Use-swarm-mode-routing-mesh"><a href="#参考Use-swarm-mode-routing-mesh" class="headerlink" title="参考Use swarm mode routing mesh"></a>参考<a href="https://docs.docker.com/engine/swarm/ingress/">Use swarm mode routing mesh</a></h6>  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://rq98iipq.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>集群</tag>
        <tag>Swarm</tag>
      </tags>
  </entry>
  <entry>
    <title>docker入门学习</title>
    <url>/2020/11/30/docker-leaning/</url>
    <content><![CDATA[<h1 id="docker-名词解释"><a href="#docker-名词解释" class="headerlink" title="docker 名词解释"></a>docker 名词解释</h1><p>下面简单解释下名词的含义，后面会详细介绍：</p>
<ul>
<li>docker：docker代表这一个技术的名词，下面<strong>一个docker</strong>代表一台机器上装的一个docker服务</li>
<li>container：docker容器，相当于一个轻量的沙盒系统（可以暂时理解一个运行好的虚拟机系统）一个容器只运行一个服务</li>
<li>images：docker镜像，相当于一个安装包（可以暂时理解成一个系统iso镜像）</li>
<li>service：docker服务，多个相同的容器组成的一个服务，相当于容器的多个复制，提高了扩展性</li>
<li>swarm：docker集群，将一个docker或多个docker组成的一个资源集合，包含了网络、负载均衡、多个服务节点、服务发现、服务伸缩</li>
<li>node：docker节点，一台实际机器上的一个docker算一个节点，节点只有在docker初始化为集群才存在该概念</li>
<li>docker-compose.yml：服务编排脚本，该脚本只支持单机docker服务编排，相当于服务的启动参数，服务数量都在该脚本配置</li>
<li>stack：docker集群服务编排模式,stack.yml为集群部署模式的配置文件，文件name可以自定义，这个是多节点服务编排部署模式，在单机的基础上面多支持了容器在那个节点运行，及运行个数等</li>
<li>DockerFile：docker镜像编排脚本</li>
<li><a href="https://hub.docker.com/search?q=&type=image">Docker-hub</a>：官方docker仓库</li>
<li>registry：可搭建的私有镜像仓库</li>
<li>集群-无状态服务vs有状态服务(共享存储/NAS)</li>
<li>分布式集群</li>
</ul>
<p>docker swarm服务关系</p>
<p><a href="https://imgtu.com/i/6VVz11"><img src="https://s3.ax1x.com/2021/03/04/6VVz11.png" alt="6VVz11.png"></a></p>
<p>docker编排部署流程</p>
<p><a href="https://imgtu.com/i/6VZP0O"><img src="https://s3.ax1x.com/2021/03/04/6VZP0O.png" alt="6VZP0O.png"></a></p>
<h1 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a><a href="https://www.docker.com/resources/what-container">docker简介</a></h1><p>容器是打包代码及其所有依赖项的软件的标准单元，因此应用程序可以从一个计算环境快速可靠地运行到另一个计算环境。Docker容器映像是一个轻量级的，独立的，可执行的软件软件包，其中包含运行应用程序所需的一切：代码，运行时，系统工具，系统库和设置。</p>
<h4 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h4><ul>
<li><strong>标准：</strong> Docker创建了容器的行业标准，因此它们可以在任何地方移植</li>
<li><strong>轻巧：</strong>容器共享计算机的OS系统内核，因此不需要每个应用程序都具有OS，从而提高了服务器效率，并降低了服务器和许可成本</li>
<li><strong>安全：</strong>容器中的应用程序更安全，Docker提供业界最强大的默认隔离功能</li>
</ul>
<h4 id="虚机vs容器"><a href="#虚机vs容器" class="headerlink" title="虚机vs容器"></a>虚机vs容器</h4><p>容器虚化的是操作系统而不是硬件，容器更加便携和高效</p>
<p><a href="https://imgtu.com/i/6VJ3LQ"><img src="https://s3.ax1x.com/2021/03/04/6VJ3LQ.png" alt="6VJ3LQ.png"></a></p>
<h1 id="docker安装部署"><a href="#docker安装部署" class="headerlink" title="docker安装部署"></a><a href="https://blog.iexxk.com/2017/10/10/docker-install-base/?highlight=docker">docker安装部署</a></h1><h4 id="centos安装"><a href="#centos安装" class="headerlink" title="centos安装"></a><a href="https://docs.docker.com/engine/install/centos/">centos安装</a></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">systemctl start docker.service</span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<h4 id="docker-swarm-初始化"><a href="#docker-swarm-初始化" class="headerlink" title="docker swarm 初始化"></a><a href="https://blog.iexxk.com/2017/09/14/docker-install-swarm/?highlight=docker+swarm">docker swarm 初始化</a></h4><h1 id="DockerFile镜像编排"><a href="#DockerFile镜像编排" class="headerlink" title="DockerFile镜像编排"></a><a href="https://docs.docker.com/engine/reference/builder/">DockerFile镜像编排</a></h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 镜像编排命令</span></span><br><span class="line">docker build -t image-name:tag .</span><br></pre></td></tr></table></figure>

<p>dockerfile常见命令说明</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础镜像选择alpine 小巧安全流行方便</span></span><br><span class="line"><span class="keyword">FROM</span> exxk/tomcat:<span class="number">8</span>-alpine-cst-font</span><br><span class="line"><span class="comment">#指定用户</span></span><br><span class="line"><span class="keyword">USER</span> patrick</span><br><span class="line"><span class="comment">#指定工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /path/to/workdir</span></span><br><span class="line"><span class="comment">#编译时的环境参数</span></span><br><span class="line"><span class="keyword">ARG</span> DOCKER_MACHINE_VERSION</span><br><span class="line"><span class="comment">#暴露的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/udp</span><br><span class="line"><span class="comment">#拷贝文件到镜像的指定目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> geoserver /usr/<span class="built_in">local</span>/tomcat/webapps/geoserver</span></span><br><span class="line"><span class="comment">#拷贝文件，但是add功能比copy多，压缩文件会自动解压，不建议用高级的add</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> geoserver /usr/<span class="built_in">local</span>/tomcat/webapps/geoserver</span></span><br><span class="line"><span class="comment">#设置环境变量，启动时可以通过参数进行覆盖</span></span><br><span class="line"><span class="keyword">ENV</span> GEOSERVER_HOME=/usr/local/tomcat/webapps/geoserver/data</span><br><span class="line"><span class="comment">#运行编译时的命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /usr/bin/gitlab-runner</span></span><br><span class="line"><span class="comment">#健康检查/类似心跳，前面命令执行的时间，cmd后面为心跳检测的命令</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="bash"> --interval=5m --timeout=3s CMD curl -f http://localhost/ || <span class="built_in">exit</span> 1</span></span><br><span class="line"><span class="comment">#设置挂在卷</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;/etc/gitlab-runner&quot;</span>, <span class="string">&quot;/home/gitlab-runner&quot;</span>]</span></span><br><span class="line"><span class="comment">#启动时容器时，初始化容器的命令脚本</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/usr/bin/dumb-init&quot;</span>, <span class="string">&quot;/entrypoint&quot;</span>]</span></span><br><span class="line"><span class="comment">#入口启动命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;catalina.sh&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h2 id="Docker-hub-和-registry"><a href="#Docker-hub-和-registry" class="headerlink" title="Docker-hub 和 registry"></a><a href="https://hub.docker.com/?ref=login">Docker-hub</a> 和 <a href="https://blog.iexxk.com/2018/01/24/docker-install-registry/?highlight=regis">registry</a></h2><h1 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a><a href="https://blog.iexxk.com/2018/04/28/docker-compose-file/?highlight=compose">docker-compose</a></h1><p><a href="https://docs.docker.com/compose/compose-file/">官方文档</a></p>
<h1 id="docker-swarm-VS-k8s-Kubernetes"><a href="#docker-swarm-VS-k8s-Kubernetes" class="headerlink" title="docker swarm VS k8s(Kubernetes)"></a><a href="https://blog.iexxk.com/2017/09/14/docker-install-swarm/?highlight=swarm">docker swarm</a> VS k8s(Kubernetes)</h1><p><a href="https://imgtu.com/i/6eAkhd"><img src="https://s3.ax1x.com/2021/03/05/6eAkhd.jpg" alt="6eAkhd.jpg"></a></p>
<h2 id="平台安装部署流程"><a href="#平台安装部署流程" class="headerlink" title="平台安装部署流程"></a>平台安装部署流程</h2><p><a href="https://imgtu.com/i/6e1abd"><img src="https://s3.ax1x.com/2021/03/05/6e1abd.png" alt="6e1abd.png"></a></p>
<p><a href="https://imgtu.com/i/6e1UDH"><img src="https://s3.ax1x.com/2021/03/05/6e1UDH.png" alt="6e1UDH.png"></a></p>
<p><a href="https://imgtu.com/i/6e1NKe"><img src="https://s3.ax1x.com/2021/03/05/6e1NKe.png" alt="6e1NKe.png"></a></p>
<h2 id="springboot和docker-环境变量"><a href="#springboot和docker-环境变量" class="headerlink" title="springboot和docker 环境变量"></a>springboot和docker 环境变量</h2><p>springboot 支持系统环境变量<br>docker 支持容器环境变量设置</p>
<p>设计原理，不改变基础镜像的情况下，适应不同的环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">优先级由高到低</span><br><span class="line">1	启动命令中指定的配置项；</span><br><span class="line">2	操作系统配置项；</span><br><span class="line">3	环境变量</span><br><span class="line">4	配置中心中的配置文件；</span><br><span class="line">5	本地的application.properties(yml)</span><br><span class="line">5	本地boostrap.properties（yml）</span><br></pre></td></tr></table></figure>
<p><a href="https://imgtu.com/i/6eGvIs"><img src="https://s3.ax1x.com/2021/03/05/6eGvIs.png" alt="6eGvIs.png"></a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 制作 gitlabRunner+gradle镜像</title>
    <url>/2018/01/17/docker-madeimg-gitlabrunnergradle/</url>
    <content><![CDATA[<h3 id="gitlabRunner-镜像"><a href="#gitlabRunner-镜像" class="headerlink" title="gitlabRunner 镜像"></a>gitlabRunner 镜像</h3><p><a href="">gitlab/gitlab-runner:latest</a></p>
<h3 id="安装java环境"><a href="#安装java环境" class="headerlink" title="安装java环境"></a>安装java环境</h3><ol>
<li><p>下载jre,jre只是运行环境jdk包括jre还有编译环境</p>
<p><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">server-jre-8u161-linux-x64.tar.gz</a></p>
</li>
<li><p>移动文件到挂载卷<code>sudo mv server-jre-8u161-linux-x64.tar.gz  /var/lib/docker/volumes/gitLabRuner_home/_data</code></p>
</li>
<li><p>进入gitlab-runner 容器<code>sudo docker exec -it &lt;容器id&gt; bash</code></p>
</li>
<li><p>进入挂载目录<code>cd /home/gitlab-runner/</code></p>
</li>
<li><p>解压文件<code>tar zxvf server-jre-8u161-linux-x64.tar.gz</code></p>
</li>
<li><p>创建目录<code> </code>然后移动文件并重命名<code>mkdir /usr/lib/jvm &amp;&amp; mv jdk1.8.0_161 /usr/lib/jvm/java-8-oracle</code></p>
</li>
<li><p>添加环境变量配置文件<code>vim /etc/profile.d/jdk.sh</code>然后再添加执行权限<code>chmod +x /etc/profile.d/jdk.sh</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> J2SDKDIR=/usr/lib/jvm/java-8-oracle</span><br><span class="line"><span class="built_in">export</span> J2REDIR=/usr/lib/jvm/java-8-oracle/jre</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/lib/jvm/java-8-oracle/bin:/usr/lib/jvm/java-8-oracle/db/bin:/usr/lib/jvm/java-8-oracle/jre/bin</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-8-oracle</span><br><span class="line"><span class="built_in">export</span> DERBY_HOME=/usr/lib/jvm/java-8-oracle/db</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行脚本使环境变量生效<code>source /etc/profile</code></p>
</li>
<li><p>测试<code>echo $JAVA_HOME</code>输出<code>/usr/lib/jvm/java-8-oracle</code>或者<code>java -version</code></p>
</li>
</ol>
<h3 id="安装Gradle环境"><a href="#安装Gradle环境" class="headerlink" title="安装Gradle环境"></a>安装Gradle环境</h3><ol>
<li><p>下载<a href="https://gradle.org/releases/">gradle-4.4.1-bin.zip</a></p>
</li>
<li><p>移动文件到挂载卷<code>sudo mv gradle-4.4.1-bin.zip /var/lib/docker/volumes/gitLabRuner_home/_data/</code></p>
</li>
<li><p>解压<code>unzip /var/lib/docker/volumes/gitLabRuner_home/_data/gradle-4.4.1-bin.zip</code></p>
</li>
<li><p>进入gitlab-runner 容器<code>sudo docker exec -it &lt;容器id&gt; bash</code></p>
</li>
<li><p>进入挂载目录<code>cd /home/gitlab-runner/</code></p>
</li>
<li><p>移动目录<code>mv gradle-4.4.1 /usr/lib/gradle </code></p>
</li>
<li><p><code>vim /etc/profile.d/gradle.sh</code>并添加执行权限``</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GRADLE_HOME=/usr/lib/gradle </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GRADLE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行脚本使环境变量生效<code>source /etc/profile</code></p>
</li>
<li><p>测试<code>gradle -version</code></p>
</li>
</ol>
<h3 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h3><ol>
<li>清理安装包</li>
<li>清理命令历史<code>history -c</code></li>
<li><code>ctrl+p+q</code>退出容器不留记录 </li>
<li><code>sudo docker commit -m &quot;add java gradle&quot; -a &quot;iexxk&quot; db38 exxk/gitlab-runner-gradle:v1.0</code></li>
</ol>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li><p>通过exec命令进入容器后执行<code>source /etc/profile</code>生效环境变量，再次进入就没有该变量了，commit制作的镜像也没有生效环境变量</p>
<p>解决：1.通过启动容器时设置环境变量或执行命令，再commit保存，不采用因为每一次提交都会使镜像变大，且是黑盒不易维护</p>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过commit方法制作镜像会成为黑盒，且不容易维护，而且没提交一次，都会增大镜像的容量，因此采用dockerfile的形式制作镜像， commit适合用于保存犯罪现场。</p>
<h5 id="对应操作记录docker通过commit制作带Gradle和java环境的镜像"><a href="#对应操作记录docker通过commit制作带Gradle和java环境的镜像" class="headerlink" title="对应操作记录docker通过commit制作带Gradle和java环境的镜像"></a>对应操作记录<a href="https://jingyan.baidu.com/article/af9f5a2d704e6343140a45e6.html">docker通过commit制作带Gradle和java环境的镜像</a></h5>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>gitlab</tag>
        <tag>runner</tag>
        <tag>gradle</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-make-ffmpeg-nginx</title>
    <url>/2018/08/22/docker-make-ffmpeg-nginx/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk update</span><br><span class="line"><span class="comment">#安装ngix 和 ffmpeg</span></span><br><span class="line">apk add nginx-mod-rtmp ffmpeg</span><br><span class="line"><span class="comment">#创建目录解决pid错误问题</span></span><br><span class="line">mkdir /var/run/nginx</span><br><span class="line"><span class="comment">#启动nginx</span></span><br><span class="line">nginx</span><br><span class="line"><span class="comment">#使用ffmpeg进行转流</span></span><br><span class="line">ffmpeg -rtsp_transport tcp -i rtsp://admin:12345@192.168.1.193:554  -vcodec copy -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 -f flv rtmp://127.0.0.1:1935/hls/video1</span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="attribute">user</span> nginx;</span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">#error_log /var/log/nginx/error.log warn;</span></span><br><span class="line"><span class="comment"># 包含插件rtmp</span></span><br><span class="line"><span class="attribute">include</span> /etc/nginx/modules/<span class="regexp">*.conf</span>;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">	<span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">rtmp</span> &#123;    </span><br><span class="line">        <span class="section">server</span> &#123;    </span><br><span class="line">            <span class="attribute">listen</span> <span class="number">1935</span>;    </span><br><span class="line">        </span><br><span class="line">            <span class="attribute">application</span> myapp &#123;    </span><br><span class="line">                <span class="attribute">live</span> <span class="literal">on</span>;    </span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="attribute">application</span> hls &#123;    </span><br><span class="line">                <span class="attribute">live</span> <span class="literal">on</span>;    </span><br><span class="line">                <span class="attribute">hls</span> <span class="literal">on</span>;    </span><br><span class="line">                <span class="attribute">hls_path</span> /tmp/hls;    </span><br><span class="line">        				<span class="attribute">hls_fragment</span> <span class="number">1s</span>;     </span><br><span class="line">       	        <span class="attribute">hls_playlist_length</span> <span class="number">3s</span>;   </span><br><span class="line">	 				 &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>成功输出：</p>
<p><a href="https://imgtu.com/i/62oge0"><img src="https://s3.ax1x.com/2021/03/18/62oge0.png" alt="62oge0.png"></a></p>
<h3 id="dockerfile编写"><a href="#dockerfile编写" class="headerlink" title="dockerfile编写"></a>dockerfile编写</h3><p>方式一:集成版</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成镜像name:tomcat:8-alpine-ffmpeg</span></span><br><span class="line"><span class="keyword">FROM</span> tomcat:<span class="number">8</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> nginx.conf /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> supervisord.conf /conf/supervisord.conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  apk add --no-cache tzdata nginx-mod-rtmp ffmpeg supervisor \</span></span><br><span class="line"><span class="bash">	&amp;&amp; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mkdir -p /var/run/nginx </span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/usr/bin/supervisord&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/conf/supervisord.conf&quot;</span>] </span></span><br></pre></td></tr></table></figure>



<h4 id="解决nginx重启端口占用"><a href="#解决nginx重启端口占用" class="headerlink" title="解决nginx重启端口占用"></a>解决nginx重启端口占用</h4><p>修改<code>supervisord.conf</code>中的<code>command= nginx</code>为</p>
<p><code>command= nginx -g &quot;daemon off;&quot;</code></p>
<h5 id="supervisord-conf"><a href="#supervisord-conf" class="headerlink" title="supervisord.conf"></a>supervisord.conf</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[supervisord]</span></span><br><span class="line"><span class="meta">;</span> <span class="string">启动到前端, 用于docker</span></span><br><span class="line"><span class="attr">nodaemon</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">;</span> <span class="string">设置pid文件路径</span></span><br><span class="line"><span class="attr">pidfile</span>=<span class="string">/var/run/supervisord.pid</span></span><br><span class="line"></span><br><span class="line"><span class="meta">;</span> <span class="string">配置nginx</span></span><br><span class="line"><span class="meta">[program</span>:<span class="string">nginx]</span></span><br><span class="line"><span class="meta">;</span> <span class="string">配置日志输出到控制台, 用于docker收集日志</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=<span class="string">/dev/stdout</span></span><br><span class="line"><span class="meta">;</span> <span class="string">去掉日志rotation</span></span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">priority</span>=<span class="string">900</span></span><br><span class="line"><span class="attr">command</span>= <span class="string">nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">;</span> <span class="string">配置ffmpeg</span></span><br><span class="line"><span class="meta">[program</span>:<span class="string">ffmpeg]</span></span><br><span class="line"><span class="meta">;</span> <span class="string">配置日志输出到控制台, 用于docker收集日志</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=<span class="string">/dev/stdout</span></span><br><span class="line"><span class="meta">;</span> <span class="string">去掉日志rotation</span></span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">priority</span>=<span class="string">800</span></span><br><span class="line"><span class="attr">command</span>=<span class="string">ffmpeg -rtsp_transport tcp -i rtsp://admin:12345@192.168.1.193:554  -vcodec copy -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 -f flv rtmp://127.0.0.1:1935/hls/video1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">;</span> <span class="string">配置tomcat</span></span><br><span class="line"><span class="meta">[program</span>:<span class="string">tomcat]</span></span><br><span class="line"><span class="meta">;</span> <span class="string">配置日志输出到控制台, 用于docker收集日志</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=<span class="string">/dev/stdout</span></span><br><span class="line"><span class="meta">;</span> <span class="string">去掉日志rotation</span></span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">priority</span>=<span class="string">700</span></span><br><span class="line"><span class="attr">command</span>=<span class="string">catalina.sh run</span></span><br></pre></td></tr></table></figure>



<h5 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h5><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="attribute">user</span> nginx;</span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">#error_log /var/log/nginx/error.log warn;</span></span><br><span class="line"><span class="comment"># 包含插件rtmp</span></span><br><span class="line"><span class="attribute">include</span> /etc/nginx/modules/<span class="regexp">*.conf</span>;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">	<span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">rtmp</span> &#123;    </span><br><span class="line">        <span class="section">server</span> &#123;    </span><br><span class="line">            <span class="attribute">listen</span> <span class="number">1935</span>;    </span><br><span class="line">        </span><br><span class="line">            <span class="attribute">application</span> myapp &#123;    </span><br><span class="line">                <span class="attribute">live</span> <span class="literal">on</span>;    </span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="attribute">application</span> hls &#123;    </span><br><span class="line">                <span class="attribute">live</span> <span class="literal">on</span>;    </span><br><span class="line">                <span class="attribute">hls</span> <span class="literal">on</span>;    </span><br><span class="line">                <span class="attribute">hls_path</span> /tmp/hls;    </span><br><span class="line">        				<span class="attribute">hls_fragment</span> <span class="number">1s</span>;     </span><br><span class="line">       	        <span class="attribute">hls_playlist_length</span> <span class="number">3s</span>;   </span><br><span class="line">	 				 &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础镜像选择alpine 小巧安全流行方便</span></span><br><span class="line"><span class="keyword">FROM</span> tomcat:<span class="number">8</span>-alpine-ffmpeg</span><br><span class="line"><span class="comment">#复制固定路径下打包好的jar包(target/*.jar)并重命名到容器跟目录(/app.jar)，或ADD</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> target/hikvision.war /usr/<span class="built_in">local</span>/tomcat/webapps/</span></span><br><span class="line"><span class="comment">#覆写配置</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> supervisord.conf /conf/supervisord.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#健康检查 -s 静默模式，不下载文件</span></span><br><span class="line"><span class="comment">#HEALTHCHECK CMD wget -s http://127.0.0.1:14030/actuator/health || exit 1</span></span><br><span class="line"><span class="comment">#启动容器执行的命令 java -jar app.jar ,如果加其他参数加 ,&quot;-参数&quot;,</span></span><br><span class="line"><span class="comment"># 不需要该命令通过镜像上层的supervisor进行控制</span></span><br><span class="line"><span class="comment">#CMD [&quot;catalina.sh&quot;, &quot;run&quot;]</span></span><br></pre></td></tr></table></figure>

<h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hikvision:</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">manage/test/ygl/hikvision:latest</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/logs/ygl-hikvision:/app/log</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">14085</span><span class="string">:8080</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">14086</span><span class="string">:1935</span></span><br></pre></td></tr></table></figure>

<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>使用vle media player进行网络串流播放<code>rtmp://192.168.1.230:14086/hls/video1</code></p>
<p>方式二:独立版(centos7)</p>
<p>资源准备</p>
<p>Nginx: <a href="https://nginx.org/download/">https://nginx.org/download/</a></p>
<p>Pure(rewrite模块): <a href="https://ftp.pcre.org/pub/pcre/">https://ftp.pcre.org/pub/pcre/</a></p>
<p>zlib(gzip模块): <a href="http://www.zlib.net/fossils/">http://www.zlib.net/fossils/</a></p>
<p>openssl(ssl 功能):<a href="https://www.openssl.org/source/">https://www.openssl.org/source/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.15.12.tar.gz</span><br><span class="line">tar -zxvf openssl-1.1.0l.tar.gz</span><br><span class="line">tar -zxvf zlib-1.2.11.tar.gz</span><br><span class="line">tar -zxvf pcre-8.43.tar.gz  </span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> pcre-8.43/</span><br><span class="line">./configure </span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../zlib-1.2.11/</span><br><span class="line">./configure </span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../openssl-1.1.0l/</span><br><span class="line">./config</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../nginx-1.15.12/</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-pcre=../pcre-8.43 --with-zlib=../zlib-1.2.11 --with-openssl=../openssl-1.1.0l --add-module=../nginx-rtmp-module-1.2.1  </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>安装ffpmeg</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装epel包</span></span><br><span class="line">yum install -y epel-release </span><br><span class="line"><span class="meta">#</span><span class="bash">导入签名</span></span><br><span class="line">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br><span class="line"><span class="meta">#</span><span class="bash">导入签名</span></span><br><span class="line">rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro </span><br><span class="line"><span class="meta">#</span><span class="bash">升级软件包</span></span><br><span class="line">rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm</span><br><span class="line"><span class="meta">#</span><span class="bash">更新软件包</span></span><br><span class="line">yum update -y</span><br><span class="line"><span class="meta">#</span><span class="bash">安装ffmpeg</span></span><br><span class="line">yum install -y ffmpeg</span><br><span class="line"><span class="meta">#</span><span class="bash">检查版本</span></span><br><span class="line">ffmpeg -version</span><br></pre></td></tr></table></figure>

<p>配置测试</p>
<p>nginx配置vim /usr/local/nginx/conf/nginx.conf</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span> root;</span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">	<span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># rtmp流</span></span><br><span class="line"><span class="section">rtmp</span> &#123;</span><br><span class="line">        <span class="section">server</span> &#123;</span><br><span class="line">            <span class="attribute">listen</span> <span class="number">1935</span>;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">application</span> myapp &#123;</span><br><span class="line">                <span class="attribute">live</span> <span class="literal">on</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attribute">application</span> hls &#123;</span><br><span class="line">                <span class="attribute">live</span> <span class="literal">on</span>;</span><br><span class="line">                <span class="attribute">hls</span> <span class="literal">on</span>;</span><br><span class="line">                <span class="attribute">hls_path</span> /tmp/hls;</span><br><span class="line">        	<span class="attribute">hls_fragment</span> <span class="number">1s</span>;</span><br><span class="line">       	        <span class="attribute">hls_playlist_length</span> <span class="number">3s</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># hls流</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8888</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /tmp/hikvision/video;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> /hls &#123;</span><br><span class="line">           <span class="section">types</span> &#123;</span><br><span class="line">             application/vnd.apple.mpegurl m3u8;</span><br><span class="line">             video/mp2t ts;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="attribute">root</span> /tmp;</span><br><span class="line">           <span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-cache;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#本地视频测试rtmp://10.30.11.150:1935/myapp/test1</span></span><br><span class="line">ffmpeg -re -i <span class="string">&quot;/root/nginxbuild/test.mp4&quot;</span> -vcodec libx264 -vprofile baseline -acodec aac  -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://10.30.11.150:1935/myapp/test1</span><br><span class="line"><span class="comment">#rtmp视频测试rtmp://10.30.11.150:1935/myapp/video1</span></span><br><span class="line">ffmpeg -rtsp_transport tcp -i rtsp://admin:admin@10.30.11.119:554/h264/ch1/main/av_stream  -vcodec copy -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 704x576 -q 10 -f flv rtmp://10.30.11.150:1935/myapp/video1</span><br><span class="line">ffmpeg -i rtsp://admin:admin@10.30.11.119:554/h264/ch1/main/av_stream -tune zerolatency -vcodec libx264 -preset ultrafast -b:v 400k -s 720x576 -r 25 -acodec libfaac -b:a 64k -f flv rtmp://10.30.11.150:1935/myapp/video1</span><br><span class="line"><span class="comment">#hls测试http://10.30.11.150:8888/hls/video1.m3u8</span></span><br><span class="line">ffmpeg -rtsp_transport tcp -i rtsp://admin:admin@10.30.11.119:554/h264/ch1/sub/av_stream  -vcodec copy -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 704x576 -q 10 -f flv rtmp://10.30.11.150:1935/hls/video1</span><br></pre></td></tr></table></figure>



<h3 id="supervisor多服务"><a href="#supervisor多服务" class="headerlink" title="supervisor多服务"></a>supervisor多服务</h3><p><a href="https://docs.docker.com/config/containers/multi-service_container/">supervisor</a></p>
<p><a href="https://my.oschina.net/funwun/blog/710877">Alpine Linux Repository本地镜像制作 v2</a></p>
<p><a href="https://www.jianshu.com/p/aa7f9e204a62">centos7+nginx+rtmp+ffmpeg搭建流媒体服务器</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>nginx</tag>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>Hyper-v虚拟机网络测试</title>
    <url>/2017/11/28/docker-network-test-on-hyper-v/</url>
    <content><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h5 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h5><ul>
<li>Hyper-v虚拟机</li>
<li>boot2docker镜像:17.11.0-ce</li>
</ul>
<h5 id="网络环境"><a href="#网络环境" class="headerlink" title="网络环境"></a>网络环境</h5><table>
<thead>
<tr>
<th>网络名</th>
<th>状态</th>
<th>设备名</th>
<th>网络信息（ip/掩码）</th>
<th>route</th>
</tr>
</thead>
<tbody><tr>
<td>以太网</td>
<td>外网</td>
<td>Realtek PCIe</td>
<td>192.168.210.85<br />255.255.252.0</td>
<td></td>
</tr>
<tr>
<td>以太网2</td>
<td>无外网</td>
<td>TAPV9(ovpn)</td>
<td>10.10.0.126<br />255.255.255.252</td>
<td>10.10.0.0<br />192.168.12.0</td>
</tr>
<tr>
<td>以太网3</td>
<td>无外网</td>
<td>TAPV9 #2(ovpn)</td>
<td>10.14.0.3<br />255.255.255.0</td>
<td>10.14.0.0<br />192.168.123.0</td>
</tr>
<tr>
<td>vEthernet(默认网关)</td>
<td>无外网</td>
<td>Hyper-v(虚拟机)</td>
<td>172.21.117.33<br />255.255.255.240</td>
<td></td>
</tr>
<tr>
<td>vEthernet(xuan-docker)</td>
<td>无外网</td>
<td>Hyper-v #2(虚拟机)</td>
<td>169.254.55.239<br />255.255.0.0</td>
<td></td>
</tr>
<tr>
<td>eth0(v-h)</td>
<td></td>
<td></td>
<td>192.168.211.31<br />192.168.211.255</td>
<td></td>
</tr>
</tbody></table>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h5 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h5><p>xuan-docker(内部网络) 桥接 以太网2</p>
<h6 id="现象：以太网2无法连接"><a href="#现象：以太网2无法连接" class="headerlink" title="现象：以太网2无法连接"></a>现象：以太网2无法连接</h6><h5 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h5><p>xuan-docker(内部网络) 桥接 以太网</p>
<h6 id="现象：以太网无法连网"><a href="#现象：以太网无法连网" class="headerlink" title="现象：以太网无法连网"></a>现象：以太网无法连网</h6><h5 id="场景三"><a href="#场景三" class="headerlink" title="场景三"></a>场景三</h5><p>外部网络到以太网</p>
<h6 id="现象：IP自动分配，但是网段非正常，设置不来"><a href="#现象：IP自动分配，但是网段非正常，设置不来" class="headerlink" title="现象：IP自动分配，但是网段非正常，设置不来"></a>现象：IP自动分配，但是网段非正常，设置不来</h6><h5 id="场景四"><a href="#场景四" class="headerlink" title="场景四"></a>场景四</h5><p>外部网络到以太网3</p>
<p>######现象：ip无法分配，获取不到ip，设置不来静态ip</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.cnblogs.com/wanggege/p/4749990.html">Hyper-V 2012 R2 网络配置</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>boot2docker</tag>
        <tag>Hyper-v</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Svn-Server</title>
    <url>/2018/07/27/docker-svn-server/</url>
    <content><![CDATA[<h3 id="docker运行安装svn服务器"><a href="#docker运行安装svn服务器" class="headerlink" title="docker运行安装svn服务器"></a>docker运行安装svn服务器</h3><h4 id="elleflorio-svn-server"><a href="#elleflorio-svn-server" class="headerlink" title="elleflorio/svn-server"></a><a href="https://hub.docker.com/r/elleflorio/svn-server/">elleflorio/svn-server</a></h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">svn:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elleflorio/svn-server</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/dockerdata/v-svn:/home/svn</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;14009:3690&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;14008:80&quot;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>创建仓库，进入容器执行<code>svnadmin create --pre-1.6-compatible /home/svn/rep</code>不考虑兼容,可以不加<code>--pre-1.6-compatible</code></p>
</li>
<li><p>添加用户名和密码<code>htpasswd -bc /etc/subversion/passwd lx 123456</code> 其中<code>lx</code>是用户名，<code>123456</code>是密码，其中<code>httpasswd</code>命令参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-c：创建一个加密文件；</span><br><span class="line">-n：不更新加密文件，只将加密后的用户名密码显示在屏幕上；</span><br><span class="line">-m：默认采用MD5算法对密码进行加密；</span><br><span class="line">-d：采用CRYPT算法对密码进行加密；</span><br><span class="line">-p：不对密码进行进行加密，即明文密码；</span><br><span class="line">-s：采用SHA算法对密码进行加密；</span><br><span class="line">-b：在命令行中一并输入用户名和密码而不是根据提示输入密码；</span><br><span class="line">-D：删除指定的用户。</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后访问<code>192.168.1.230:14008/svn</code>就会弹出输入用户名和密码窗口</p>
</li>
<li><p>使用svn客户端输入<a href="http://192.168.1.230:14008/svn/rep/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%A3%80%E5%87%BA%E4%BA%86">http://192.168.1.230:14008/svn/rep/就可以检出了</a></p>
</li>
</ol>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li><p>由于配置文件放在容器的，因此容器重启会重新设置密码</p>
<p>解决：</p>
<ol>
<li>挂载密码的文件目录</li>
<li>重新编译<a href="https://github.com/elleFlorio/svn-docker">dockerfile</a></li>
</ol>
</li>
</ol>
<p>参考：<a href="https://www.jianshu.com/p/0146b5ba69a6">5-使用docker-svn镜像</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Svn</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Swarm之HelloWorld</title>
    <url>/2017/12/05/docker-swarm-helloworld/</url>
    <content><![CDATA[<h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>服务发现组件记录了（大规模）分布式系统中所有服务的信息，人们或者其它服务可以据此找到这些服务。 DNS 就是一个简单的例子。当然，复杂系统的服务发现组件要提供更多的功能，例如，服务元数据存储、健康监控、多种查询和实时更新等。</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><table>
<thead>
<tr>
<th>ID</th>
<th>Hostname(role)</th>
<th>IP</th>
<th>端口（不包括必须的）</th>
</tr>
</thead>
<tbody><tr>
<td>ywtryezli3s9hvhnmzgndi118</td>
<td>xuanps(manager)</td>
<td>10.14.0.1:2377</td>
<td>TCP14000-14020</td>
</tr>
<tr>
<td>n8jomnk98nrog10tsspp3u38u</td>
<td>localhost.localdomain(worker)</td>
<td>10.14.0.4</td>
<td>TCP14000-14020</td>
</tr>
<tr>
<td>kpbotld5edj55azexhbjfixai</td>
<td>xuan-ubuntu(worker)</td>
<td>192.168.123.2</td>
<td></td>
</tr>
</tbody></table>
<p>镜像：<a href="https://hub.docker.com/r/marshalw/hello-service/tags/">marshalw/hello-service</a></p>
<p>创建服务<code>docker service create -p 3000:3000 --name hello-service marshalw/hello-service:0.1.0</code></p>
<p>然后再三台主机都能访问下面任何一个地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;10.14.0.4:14000&#x2F;hello&#x2F;name</span><br><span class="line">curl http:&#x2F;&#x2F;10.14.0.1:14000&#x2F;hello&#x2F;name</span><br><span class="line">curl http:&#x2F;&#x2F;192.168.123.2:14000&#x2F;hello&#x2F;name</span><br><span class="line">curl http:&#x2F;&#x2F;112.74.51.136:14000&#x2F;hello&#x2F;name</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>nginx</tag>
        <tag>集群</tag>
        <tag>Swarm</tag>
        <tag>overlay</tag>
        <tag>ingress</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker集群之Swarm网络测试</title>
    <url>/2017/09/19/docker-swarm-network-test/</url>
    <content><![CDATA[<h3 id="Swarm-网络连通测试"><a href="#Swarm-网络连通测试" class="headerlink" title="Swarm 网络连通测试"></a>Swarm 网络连通测试</h3><h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><ul>
<li>docker for  windos 17.06.2(10.0.75.1)</li>
<li>centos7.3 docker</li>
</ul>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">manager&gt;创建overlay网络</span></span><br><span class="line">docker network create --driver overlay --subnet 10.0.9.0/24 my-network</span><br><span class="line"><span class="meta">#</span><span class="bash">查看网络</span></span><br><span class="line">docker network ls</span><br><span class="line"><span class="meta">#</span><span class="bash">manager&gt;创建nginx</span></span><br><span class="line">docker service create --replicas 2 --name my-web --network my-network nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">查看my-web服务</span></span><br><span class="line">docker service ps my-web</span><br><span class="line"><span class="meta">#</span><span class="bash">查看my-network网络详情</span></span><br><span class="line">docker network inspect my-network</span><br><span class="line"><span class="meta">#</span><span class="bash">manager&gt;创建busybox工具箱</span></span><br><span class="line">docker service create --name my-busybox --network my-network busybox sleep 3000</span><br><span class="line"><span class="meta">#</span><span class="bash">查看工具箱在那个节点</span></span><br><span class="line">docker service ps my-busybox</span><br><span class="line"><span class="meta">#</span><span class="bash">去工具箱的节点</span></span><br><span class="line"> docker ps</span><br><span class="line"><span class="meta">#</span><span class="bash">进入工具箱</span></span><br><span class="line"> docker exec -it &lt;工具箱的di or name&gt; /bin/sh</span><br><span class="line"><span class="meta">#</span><span class="bash">从busybox容器内部，查询DNS来查看my-web的VIP</span></span><br><span class="line">nslookup my-web</span><br><span class="line"><span class="meta">#</span><span class="bash">从busybox容器内部，使用特殊查询查询DNS，来找到my-web服务的所有容器的IP地址：</span></span><br><span class="line">nslookup tasks.my-web</span><br><span class="line"><span class="meta">#</span><span class="bash">从busybox容器内部，通过wget来访问my-web服务中运行的nginx网页服务器</span></span><br><span class="line">wget -O- my-web</span><br><span class="line"><span class="meta">#</span><span class="bash">增加实例</span></span><br><span class="line">docker service update my-busybox --replicas 2</span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://andyyoung01.github.io/2016/11/26/%E5%9F%BA%E4%BA%8ESwarm%E7%9A%84%E5%A4%9A%E4%B8%BB%E6%9C%BA%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C/">基于Swarm的多主机容器网络</a></p>
<p><a href="https://docs.docker.com/engine/swarm/ingress/">官网</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>nginx</tag>
        <tag>集群</tag>
        <tag>Swarm</tag>
        <tag>overlay</tag>
        <tag>ingress</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker swarm搭建总结</title>
    <url>/2017/12/05/docker-swarm-sunmmary/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><a href="https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/">Get Docker CE for Ubuntu</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看可安装版本</span></span><br><span class="line">apt-cache madison docker-ce</span><br><span class="line"><span class="comment">#安装指定版本(降级)</span></span><br><span class="line">sudo apt install docker-ce=17.09.1~ce-0~ubuntu</span><br></pre></td></tr></table></figure>

<ol>
<li><p><code>docker-ce | 17.12.0~ce-0~ubuntu</code> 安装gitlab出现 <code>Failed to find a load balance…</code> 错误</p>
<p>解决降级版本17.09.1解决</p>
</li>
</ol>
<h4 id="挂载卷Volume与Bind"><a href="#挂载卷Volume与Bind" class="headerlink" title="挂载卷Volume与Bind"></a>挂载卷Volume与Bind</h4><h5 id="Volume-数据卷"><a href="#Volume-数据卷" class="headerlink" title="Volume 数据卷"></a>Volume 数据卷</h5><p>会把container的一个目录映射到一个数据卷，一个目录只能映射一个数据卷，不需要新建目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[containner目录] --&gt; |映射| B[数据卷]</span><br></pre></td></tr></table></figure>

<h5 id="Bind-绑定本地目录"><a href="#Bind-绑定本地目录" class="headerlink" title="Bind 绑定本地目录"></a>Bind 绑定本地目录</h5><p>container的一个目录会加载本地目录，因此需要在本地提前新建该目录，不然启动会找不到目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[本地目录] --&gt; |指向| B[containner目录]</span><br></pre></td></tr></table></figure>

<h5 id="方案选型与测试"><a href="#方案选型与测试" class="headerlink" title="方案选型与测试"></a>方案选型与测试</h5><p>方案有</p>
<ul>
<li><p>Flannel</p>
</li>
<li><p>Open vSwitch</p>
<p><a href="http://dockone.io/article/228">http://dockone.io/article/228</a></p>
</li>
<li><p>Weave</p>
</li>
<li><p>pipework</p>
</li>
<li><p>libnetwork</p>
<p><a href="http://dockone.io/article/1100">Docker Libnetwork 使用</a></p>
</li>
<li><p>动态路由</p>
<p><a href="http://dockone.io/article/466">一条命令取代etcd+flannel，全网贯通无需端口映射</a></p>
</li>
</ul>
<h4 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a><a href="https://docs.docker.com/compose/startup-order/">启动顺序</a></h4><p>[[vishnubob]/**wait-for-it</p>
<h4 id="entrypoint-vs-cmd"><a href="#entrypoint-vs-cmd" class="headerlink" title="entrypoint vs cmd"></a>entrypoint vs cmd</h4><p>entrypoint 必须执行服务话</p>
<p>cmd 命令型，可执行</p>
<p>总结：</p>
<ol>
<li>如果用<a href="https://github.com/eficode/wait-for">wait-for</a>支持alpine,使用sh，<a href="https://github.com/vishnubob/wait-for-it">wait-for-it</a>使用bash</li>
<li>dockercompose会覆盖dockerfile里面的cmd命令</li>
<li>通过挂载形式把脚本放进去执行，或者通过dockerfile 构建时构建进去</li>
<li>在容器内进行测试时，发现不能跟/actuator/health，会连接超时，</li>
<li>直接执行时,如果服务没启动也会超时，但是可以跟可以跟参数<code>-t</code>设置为0不超时，会一直等待</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#不能加/actuator/health，请求超时，不能用wait-for-it.sh  ,不支持alpine ，经测试感觉怪，还使用 depends_on</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;./wait-for.sh&quot;</span>, <span class="string">&quot;config-server:14030&quot;</span>, <span class="string">&quot;--&quot;</span>, <span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;app.jar&quot;</span>]</span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">config-server</span></span><br></pre></td></tr></table></figure>

<h3 id="镜像升级"><a href="#镜像升级" class="headerlink" title="镜像升级"></a>镜像升级</h3><p>portainer升级命令</p>
<p><code>docker service update --image portainer/portainer:latest portainer_portainer</code></p>
<p>然后重启portainer服务</p>
<h5 id="docker-service-upadte-命令参数详解"><a href="#docker-service-upadte-命令参数详解" class="headerlink" title="docker service upadte 命令参数详解"></a><code>docker service upadte</code> 命令参数详解</h5><ul>
<li><p><code>--force</code> 强制更新重启服务，无论是否配置或镜像改变都更新</p>
</li>
<li><p><code>--image &lt;image:tag&gt;</code> 制定更新的镜像</p>
</li>
<li><p><code>--with-registry-auth</code> 私有仓库需要携带该参数，否则提示</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">image <span class="number">192</span><span class="variable">.168</span><span class="variable">.1</span><span class="variable">.230</span>:<span class="number">14005</span>/manage/test/ygl/app:latest could <span class="keyword">not</span> be accessed on a registry to record</span><br><span class="line">its digest. Each node will access <span class="number">192</span><span class="variable">.168</span><span class="variable">.1</span><span class="variable">.230</span>:<span class="number">14005</span>/manage/test/ygl/app:latest independently,</span><br><span class="line">possibly leading to different nodes running different</span><br></pre></td></tr></table></figure>





</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登陆仓库</span></span><br><span class="line">docker login 192.168.1.230:14005 -u admin -p password</span><br></pre></td></tr></table></figure>



<h3 id="节点升级"><a href="#节点升级" class="headerlink" title="节点升级"></a>节点升级</h3><p><code>docker node update --role manager node</code> </p>
<p>该命令只会更改角色，部分权限并没有立即更新，因此执行服务操作时有可能提示该错误<code>Error response from daemon: rpc error: code = DeadlineExceeded desc = context deadline exceeded</code></p>
<p>立即生效更新节点为manger 执行<code>docker node promote node</code></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>集群</tag>
        <tag>Swarm</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 配置 tls 安全远程连接</title>
    <url>/2021/03/08/docker-tls/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>官方设置<a href="https://docs.docker.com/engine/security/protect-access/">Protect the Docker daemon socket</a></p>
<p>tls(https)安全连接是通过证书进行验证，因为连接协议是https，所以连接的时候端口变成了<strong>2376</strong></p>
<p>阿里云开放端口: 2376</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#服务端需要的文件</span></span><br><span class="line"> <span class="string">&quot;tlscacert&quot;</span>: <span class="string">&quot;/docker_data/cert/ca.pem&quot;</span>,</span><br><span class="line"> <span class="string">&quot;tlscert&quot;</span>: <span class="string">&quot;/docker_data/cert/server-cert.pem&quot;</span>,</span><br><span class="line"> <span class="string">&quot;tlskey&quot;</span>: <span class="string">&quot;/docker_data/cert/server-key.pem&quot;</span>,</span><br><span class="line"><span class="comment">#客户端需要的文件</span></span><br><span class="line">--tlscacert=/docker_data/cert/ca.pem </span><br><span class="line">--tlscert=/docker_data/cert/cert.pem </span><br><span class="line">--tlskey=/docker_data/cert/key.pem</span><br></pre></td></tr></table></figure>



<h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /docker_data/cert/</span><br><span class="line"><span class="built_in">cd</span> /docker_data/cert/</span><br><span class="line"><span class="comment">#生成ca证书ca-key.pem</span></span><br><span class="line">openssl genrsa -aes256 -out ca-key.pem 4096</span><br><span class="line">&gt;Enter pass phrase <span class="keyword">for</span> ca-key.pem: 设置密码</span><br><span class="line">&gt;Verifying - Enter pass phrase <span class="keyword">for</span> ca-key.pem: 输入刚刚设置的密码</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据ca-key.pem创建ca公钥ca.pem</span></span><br><span class="line">openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem</span><br><span class="line">&gt;Enter pass phrase <span class="keyword">for</span> ca-key.pem:输入刚刚设置的密码</span><br><span class="line">&gt;Country Name (2 letter code) [XX]:CN</span><br><span class="line">&gt;State or Province Name (full name) []:guangzhou</span><br><span class="line">&gt;Locality Name (eg, city) [Default City]:guangzhou</span><br><span class="line">&gt;Organization Name (eg, company) [Default Company Ltd]:nantian</span><br><span class="line">&gt;Organizational Unit Name (eg, section) []:chanpingsanbu</span><br><span class="line">&gt;Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:192.168.0.76(这个host似乎可以随便输入)</span></span><br><span class="line"><span class="string">&gt;Email Address []:</span></span><br><span class="line"><span class="string">#生成服务key</span></span><br><span class="line"><span class="string">openssl genrsa -out server-key.pem 4096</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">openssl req -subj &quot;/CN=192.168.0.76&quot; -sha256 -new -key server-key.pem -out server.csr</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#这里在这个ip列表里面的ip，才能访问，例如通过阿里云外网ip进行访问，需要加入阿里云的外网ip，DNS似乎也已随便输入</span></span><br><span class="line"><span class="string">echo subjectAltName = DNS:192.168.0.76,IP:192.168.0.76,IP:127.0.0.1,IP:47.119.116.142 &gt;&gt; extfile.cnf</span></span><br><span class="line"><span class="string">echo extendedKeyUsage = serverAuth &gt;&gt; extfile.cnf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">openssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem \</span></span><br><span class="line"><span class="string">  -CAcreateserial -out server-cert.pem -extfile extfile.cnf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">openssl genrsa -out key.pem 4096</span></span><br><span class="line"><span class="string">openssl req -subj &#x27;</span>/CN=client<span class="string">&#x27; -new -key key.pem -out client.csr</span></span><br><span class="line"><span class="string">echo extendedKeyUsage = clientAuth &gt; extfile-client.cnf</span></span><br><span class="line"><span class="string">openssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem \</span></span><br><span class="line"><span class="string">  -CAcreateserial -out cert.pem -extfile extfile-client.cnf </span></span><br></pre></td></tr></table></figure>

<p>修改<code>vim /etc/docker/daemon.json</code>文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://registry.docker-cn.com&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;hosts&quot;</span>: [<span class="string">&quot;unix:///var/run/docker.sock&quot;</span>, <span class="string">&quot;tcp://192.168.0.76:2376&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;tls&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;tlscacert&quot;</span>: <span class="string">&quot;/docker_data/cert/ca.pem&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tlscert&quot;</span>: <span class="string">&quot;/docker_data/cert/server-cert.pem&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tlskey&quot;</span>: <span class="string">&quot;/docker_data/cert/server-key.pem&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tlsverify&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置完成后重启docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#服务端测试</span></span><br><span class="line">docker --tlsverify --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem -H=47.119.116.142:2376 version</span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端测试,需要先从服务器拷贝这三个文件</span></span><br><span class="line">curl https://47.119.116.142:2376/images/json --cert cert.pem --key key.pem --cacert ca.pem</span><br></pre></td></tr></table></figure>



<h4 id="portioner-连接"><a href="#portioner-连接" class="headerlink" title="portioner 连接"></a>portioner 连接</h4><h4 id="idea客户端连接方式"><a href="#idea客户端连接方式" class="headerlink" title="idea客户端连接方式"></a>idea客户端连接方式</h4><p>拷贝<code>ca.pem 、cert.pem、key.pem </code>三个文件到cert目录，然后idea指向cert目录，url用<code>https://ip:2376</code></p>
<p><a href="https://imgtu.com/i/6lVZGV"><img src="https://s3.ax1x.com/2021/03/08/6lVZGV.png" alt="6lVZGV.png"></a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker集群之Docker-machine使用</title>
    <url>/2017/10/10/docker-use-docker-machine/</url>
    <content><![CDATA[<h3 id="Docker-machine"><a href="#Docker-machine" class="headerlink" title="Docker-machine"></a>Docker-machine</h3><p>安装 <a href="https://www.docker.com/docker-toolbox">Docker Toolbox</a></p>
<p>官网：<a href="https://github.com/docker/machine">docker/machine</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建manager docker主机</span></span><br><span class="line">docker<span class="literal">-machine</span> create <span class="literal">-d</span> hyperv manager</span><br><span class="line"><span class="comment">#查看主机</span></span><br><span class="line">docker<span class="literal">-machine</span> <span class="built_in">ls</span></span><br><span class="line"><span class="comment">#删除主机</span></span><br><span class="line">docker<span class="literal">-machine</span> <span class="built_in">rm</span> <span class="operator">-f</span> manager</span><br><span class="line"><span class="comment">#进入docker主机</span></span><br><span class="line">docker<span class="literal">-machine</span> ssh manager</span><br><span class="line"><span class="comment">#退出主机</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">    docker swarm join -<span class="literal">-token</span> SWMTKN<span class="literal">-1</span><span class="literal">-2483wscrxzqlzn1ulk8o3izurjqdzcrg38uihaontlll788mq5</span><span class="literal">-d55xj8yaycb2392q5kv02v4kq</span> <span class="number">192.168</span>.<span class="number">100.214</span>:<span class="number">2377</span></span><br></pre></td></tr></table></figure>

<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果使用power-shell,记得用<strong>管理员</strong>权限</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>nginx</tag>
        <tag>集群</tag>
        <tag>Swarm</tag>
        <tag>overlay</tag>
        <tag>ingress</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-volume-plugin</title>
    <url>/2018/03/04/docker-volume-plugin/</url>
    <content><![CDATA[<h2 id="docker-安装docker-volume-glusterfs"><a href="#docker-安装docker-volume-glusterfs" class="headerlink" title="docker 安装docker-volume-glusterfs"></a>docker 安装docker-volume-glusterfs</h2><p>前提，首先安装好GlusterFS分布式文件系统，可以参考<a href="">centos7 安装 GlusterFS</a></p>
<h4 id="sapk-docker-volume-gluster安装-弃"><a href="#sapk-docker-volume-gluster安装-弃" class="headerlink" title="sapk/docker-volume-gluster安装(弃)"></a><a href="https://github.com/sapk/docker-volume-gluster">sapk/docker-volume-gluster</a>安装(弃)</h4><p>不足：无法删除volume，且无法复用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装插件，三台主机都安装（保险起见）</span></span><br><span class="line">docker plugin install sapk/plugin-gluster</span><br><span class="line"><span class="comment"># docker volume create --driver sapk/plugin-gluster --opt voluri=&quot;&lt;volumeserver&gt;,&lt;otherserver&gt;,&lt;otheroptionalserver&gt;:&lt;volumename&gt;&quot; --name test</span></span><br><span class="line"><span class="comment">#volumeserver 主机名，可以指定多个，volumenam是 GlusterFS文件系统的挂载劵名，test是swarm挂载卷名</span></span><br><span class="line">docker volume create --driver sapk/plugin-gluster --opt voluri=<span class="string">&quot;worker,home,xuanps:swarm-volume&quot;</span> --name <span class="built_in">test</span></span><br><span class="line"><span class="comment">#运行ubuntu容器进行测试</span></span><br><span class="line">docker run -v <span class="built_in">test</span>:/mnt --rm -ti ubuntu</span><br><span class="line"><span class="comment">#进去之后创建文件，其他系统盘也能看到该文件了， 但是其他系统不会创建挂载卷</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span>&gt;/mnt/testfile</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>docker-compose 使用</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">some_vol</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">driver</span>: <span class="string">sapk/plugin-gluster</span></span><br><span class="line">    <span class="attr">driver_opts</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">voluri</span>: <span class="string">&quot;&lt;volumeserver&gt;:&lt;volumename&gt;&quot;</span></span><br></pre></td></tr></table></figure>



<h4 id="calavera-docker-volume-glusterfs官方安装（-废弃-测试时发现运行找不到插件，太老了，换新插件）"><a href="#calavera-docker-volume-glusterfs官方安装（-废弃-测试时发现运行找不到插件，太老了，换新插件）" class="headerlink" title="calavera/docker-volume-glusterfs官方安装（**废弃**   测试时发现运行找不到插件，太老了，换新插件）"></a><a href="https://github.com/calavera/docker-volume-glusterfs">calavera/docker-volume-glusterfs</a>官方安装（**<em>废弃**</em>   测试时发现运行找不到插件，太老了，换新插件）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#---------------------------废弃，网络原因下载不下来--------------------------------</span></span><br><span class="line"><span class="comment">#为了环境干净，安装docker golang容器工具（--rm参数，运行后销毁容器）</span></span><br><span class="line">docker run -v /tmp/bin:/go/bin \</span><br><span class="line">--rm golang go get github.com/golang/example/hello/...</span><br><span class="line"><span class="comment">#测试，执行该命令会输出Hello, Go examples!，如果没输出，说明容器环境和主机环境不一致</span></span><br><span class="line">/tmp/bin/hello</span><br><span class="line"><span class="comment">#----------------准备工作完成正式开始安装---------------------------------------------------------</span></span><br><span class="line"><span class="comment">#通过golang容器工具下载插件，下载到/tmp/bin目录</span></span><br><span class="line">docker run -v /tmp/bin:/go/bin --rm golang go get github.com/calavera/docker-volume-glusterfs</span><br></pre></td></tr></table></figure>

<p>手动去<a href="https://github.com/calavera/docker-volume-glusterfs/releases">下载</a>,通过sftp等工具传到服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv docker-volume-glusterfs_linux_amd64 docker-volume-glusterfs   <span class="comment">#重命名</span></span><br><span class="line">cp ./docker-volume-glusterfs /usr/bin <span class="comment">#放到bin目录</span></span><br><span class="line">chmod 777 /usr/bin/docker-volume-glusterfs <span class="comment">#添加权限</span></span><br><span class="line"><span class="comment">#其他两台主机，然后复制到其他服务器上</span></span><br><span class="line">scp root@10.14.0.1:~/docker-volume-glusterfs ~</span><br><span class="line"><span class="comment">#依次放到bin目录添加权限</span></span><br><span class="line">cp ~/docker-volume-glusterfs /usr/bin </span><br><span class="line">chmod 777 /usr/bin/docker-volume-glusterfs</span><br><span class="line"><span class="comment"># 三台主机都执行该命令，该命令会前端运行</span></span><br><span class="line">docker-volume-glusterfs -servers xuanps:worker:home</span><br><span class="line"><span class="comment"># 测试使用</span></span><br><span class="line">sudo docker run --volume-driver glusterfs --volume swarm-volume:/data alpine ash</span><br><span class="line">touch /data/helo</span><br></pre></td></tr></table></figure>

<h3 id="额外的-docker-卷插件"><a href="#额外的-docker-卷插件" class="headerlink" title="额外的 docker 卷插件"></a>额外的 docker 卷插件</h3><p><a href="https://docs.docker.com/engine/extend/legacy_plugins/#volume-plugins">官方插件列表</a></p>
<p><a href="https://store.docker.com/search?category=volume&q=&type=plugin">官方插件商店</a></p>
<h4 id="rancher-convoy"><a href="#rancher-convoy" class="headerlink" title="rancher/convoy"></a><a href="https://github.com/rancher/convoy">rancher/convoy</a></h4><p>主要功能快照、备份、还原</p>
<p>总结：适用于单节点，单主机，的本地卷管理</p>
<h4 id="calavera-docker-volume-glusterfs"><a href="#calavera-docker-volume-glusterfs" class="headerlink" title="calavera/docker-volume-glusterfs"></a><a href="https://github.com/calavera/docker-volume-glusterfs">calavera/<strong>docker-volume-glusterfs</strong></a></h4><p>看<a href="">centos7 安装 GlusterFS</a></p>
<h4 id="Pure-Storage-Docker-Volume-Plugin"><a href="#Pure-Storage-Docker-Volume-Plugin" class="headerlink" title="Pure Storage Docker Volume Plugin"></a><a href="https://store.docker.com/plugins/pure-docker-volume-plugin?tab=description">Pure Storage Docker Volume Plugin</a></h4><h4 id="Hedvig-Docker-Volume-Plugin"><a href="#Hedvig-Docker-Volume-Plugin" class="headerlink" title="Hedvig Docker Volume Plugin"></a><a href="https://store.docker.com/plugins/hedvig-docker-volume-plugin">Hedvig Docker Volume Plugin</a></h4><p>依赖于hedvig cluster</p>
<h4 id="REX-Ray"><a href="#REX-Ray" class="headerlink" title="REX-Ray"></a><a href="https://rexray.readthedocs.io/en/stable/user-guide/schedulers/docker/plug-ins/">REX-Ray</a></h4><p>github: <a href="https://github.com/rexray/rexray">rexray/rexray</a></p>
<p>参考：<a href="https://www.ibm.com/developerworks/community/blogs/132cfa78-44b0-4376-85d0-d3096cd30d3f/entry/Swarm_%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE_%E6%AF%8F%E5%A4%A95%E5%88%86%E9%92%9F%E7%8E%A9%E8%BD%AC_Docker_%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF_103?lang=en">每天5分钟玩转 OpenStack <strong>Rex-Ray</strong></a></p>
<p>………..居然没找到一个合适的提供者</p>
<p><a href="https://github.com/rexray/csi-nfs">rexray/cis-nfs</a>  待测试，NFS似乎不满足需求</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://yq.aliyun.com/articles/225444">Docker与Golang的巧妙结合</a></p>
<p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-glusterfs-docker-volume/index.html">基于 GlusterFS 实现 Docker 集群的分布式存储</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>volume</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-volume-use</title>
    <url>/2018/03/12/docker-volume-use/</url>
    <content><![CDATA[<h2 id="docker-挂载卷应用"><a href="#docker-挂载卷应用" class="headerlink" title="docker 挂载卷应用"></a>docker 挂载卷应用</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><blockquote>
<p>官网说明<a href="https://docs.docker.com/storage/bind-mounts/">Use bind mounts</a></p>
<p>官网compose文件：<a href="https://docs.docker.com/compose/compose-file/">Compose file version 3 reference</a></p>
</blockquote>
<p>bind 挂载，就是宿主机路径对应容器路径，该挂载需要先创建目录，简称<code>/path:/path</code></p>
<p>volume挂载，不需要提前创建目录，他是以volume形式，简称<code>volume-name:/path</code></p>
<p>其中<code>z</code>和<code>Z</code>的使用,eg:<code>/path:/path:z</code></p>
<p><code>z</code>小写的是可以容器共享</p>
<p><code>Z</code>大写的是私有，容器不可共享</p>
<p><code>ro</code>只读挂载</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>利用gluterfs作为分布式文件系统做同步用，利用虚拟机挂载一个volume专门的存储硬盘</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk -l <span class="comment">#查看磁盘</span></span><br><span class="line"><span class="comment">#mount [-参数] [设备名称] [挂载点]</span></span><br><span class="line">mount /dev/sdb /mnt/<span class="built_in">test</span></span><br><span class="line"><span class="comment">#umount [设备名称或挂载点]</span></span><br><span class="line">umount mnt/<span class="built_in">test</span></span><br><span class="line"><span class="comment">#gluster卷状态[status\start\stop\delete]</span></span><br><span class="line">gluster volume status v-portainer</span><br><span class="line"><span class="comment">#节点添加与删除[probe\detach]</span></span><br><span class="line">gluster peer detach home</span><br><span class="line"><span class="comment">#节点连接状态，没有卷的情况容易端口连接，删除添加节点可解决</span></span><br><span class="line">gluster peer status</span><br></pre></td></tr></table></figure>

<h5 id="单步步骤"><a href="#单步步骤" class="headerlink" title="单步步骤"></a>单步步骤</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /dockerdata <span class="comment">#创建数据存储盘</span></span><br><span class="line"><span class="comment">#虚拟机挂载该磁盘，作为存储，因为阿里云没有多余磁盘，所有不挂载，直接存到/dockerdata</span></span><br><span class="line">mount /dev/sdb /dockerdata </span><br><span class="line">df -h <span class="comment">#查看是否挂载成功</span></span><br><span class="line"><span class="comment">#设置开机自动挂在该目录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;dev/sdb /dockerdata ext4 defaults 0 0&quot;</span>&gt;&gt;/etc/fstab</span><br><span class="line">mkdir /dockerdata/v-portainer</span><br><span class="line"><span class="comment">#创建分布式存储卷，force忽略在root目录创建挂在卷的警告</span></span><br><span class="line">gluster volume create v-portainer replica 2 home:/dockerdata/v-portainer xuanps:/dockerdata/v-portainer force</span><br><span class="line"><span class="comment">#启动分布式存储卷</span></span><br><span class="line">gluster volume start v-portainer</span><br><span class="line"><span class="comment">#创建挂载目录</span></span><br><span class="line">mkdir /volume/v-portainer</span><br><span class="line"><span class="comment">#挂载存储卷目录，似乎挂载才会同步</span></span><br><span class="line">mount -t glusterfs home:/v-portainer /volume/v-portainer</span><br><span class="line"><span class="comment">#设置开机挂载,两台单独设置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;home:/v-portainer /volume/v-portainer glusterfs defaults 0 1&quot;</span> &gt;&gt; /etc/fstab</span><br><span class="line"><span class="comment">#部署应用</span></span><br><span class="line">docker stack deploy -c docker-compose.yml gitlab</span><br></pre></td></tr></table></figure>

<h5 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h5><ol>
<li>使用之后，存储数据受网络印象，导致部分应用因为长时间连接不上而导致，不能启动，因此搁置</li>
<li>如果出现节点disconnect，在disconnect节点执行<code>systemctl restart glusterd</code>重启</li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>swarm</tag>
        <tag>gluterfs</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab-runner镜像自定义</title>
    <url>/2018/01/20/dockerfile-gitlab-diy-gradle/</url>
    <content><![CDATA[<h2 id="gitlab-runner镜像自定义"><a href="#gitlab-runner镜像自定义" class="headerlink" title="gitlab-runner镜像自定义"></a>gitlab-runner镜像自定义</h2><p>仓库<a href="https://hub.docker.com/"><strong>DockerHub</strong></a>:<a href="https://hub.docker.com/r/gitlab/gitlab-runner/">gitlab/gitlab-runner</a></p>
<h3 id="gitlab版本"><a href="#gitlab版本" class="headerlink" title="gitlab版本"></a>gitlab版本</h3><p><a href="https://gitlab.com/gitlab-org/gitlab-runner/tree/master/dockerfiles/ubuntu">gitlab-runner</a> (2018.1.16)</p>
<p><a href="https://packages.gitlab.com/runner/gitlab-runner?filter=debs">gitlab-runner_amd64.deb</a></p>
<h6 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h6><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://packages.gitlab.com/runner/gitlab-runner/packages/linuxmint/sonya/gitlab-runner_10.3.0_amd64.deb/download -O gitlab-runner_amd64.deb</span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line">sudo docker build -t xuan-runner:v1 .</span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update -y &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get upgrade -y &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get install -y ca-certificates wget apt-transport-https vim nano &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get clean &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> DOCKER_MACHINE_VERSION=<span class="number">0.13</span>.<span class="number">0</span></span><br><span class="line"><span class="keyword">ARG</span> DUMB_INIT_VERSION=<span class="number">1.0</span>.<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> gitlab-runner_amd64.deb /tmp/</span></span><br><span class="line"><span class="comment">#COPY checksums /tmp/</span></span><br><span class="line"><span class="comment">#runner diy</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> jdk1.8.0_161 /usr/lib/jvm/java-8-oracle</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> gradle-4.4.1 /usr/lib/gradle</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dpkg -i /tmp/gitlab-runner_amd64.deb; \</span></span><br><span class="line"><span class="bash">    apt-get update &amp;&amp;  \</span></span><br><span class="line"><span class="bash">    apt-get -f install -y &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get clean &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /var/lib/apt/lists/* &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm /tmp/gitlab-runner_amd64.deb &amp;&amp; \</span></span><br><span class="line"><span class="bash">    gitlab-runner --version &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mkdir -p /etc/gitlab-runner/certs &amp;&amp; \</span></span><br><span class="line"><span class="bash">    chmod -R 700 /etc/gitlab-runner &amp;&amp; \</span></span><br><span class="line"><span class="bash">    wget -q https://github.com/docker/machine/releases/download/v<span class="variable">$&#123;DOCKER_MACHINE_VERSION&#125;</span>/docker-machine-Linux-x86_64 -O /usr/bin/docker-machine &amp;&amp; \</span></span><br><span class="line"><span class="bash">    chmod +x /usr/bin/docker-machine &amp;&amp; \</span></span><br><span class="line"><span class="bash">    docker-machine --version &amp;&amp; \</span></span><br><span class="line"><span class="bash">    wget -q https://github.com/Yelp/dumb-init/releases/download/v<span class="variable">$&#123;DUMB_INIT_VERSION&#125;</span>/dumb-init_<span class="variable">$&#123;DUMB_INIT_VERSION&#125;</span>_amd64 -O /usr/bin/dumb-init &amp;&amp; \</span></span><br><span class="line"><span class="bash">    chmod +x /usr/bin/dumb-init &amp;&amp; \</span></span><br><span class="line"><span class="bash">    dumb-init --version </span></span><br><span class="line">    <span class="comment">#&amp;&amp; \</span></span><br><span class="line"> <span class="comment">#   sha256sum --check --strict /tmp/checksums</span></span><br><span class="line"><span class="keyword">ENV</span> J2SDKDIR /usr/lib/jvm/java-<span class="number">8</span>-oracle</span><br><span class="line"><span class="keyword">ENV</span> J2REDIR /usr/lib/jvm/java-<span class="number">8</span>-oracle/jre</span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:/usr/lib/jvm/java-<span class="number">8</span>-oracle/bin:/usr/lib/jvm/java-<span class="number">8</span>-oracle/db/bin:/usr/lib/jvm/java-<span class="number">8</span>-oracle/jre/bin</span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/lib/jvm/java-<span class="number">8</span>-oracle</span><br><span class="line"><span class="keyword">ENV</span> DERBY_HOME /usr/lib/jvm/java-<span class="number">8</span>-oracle/db</span><br><span class="line"><span class="keyword">ENV</span> GRADLE_HOME /usr/lib/gradle </span><br><span class="line"><span class="keyword">ENV</span> PATH $GRADLE_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> entrypoint /</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /entrypoint</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;/etc/gitlab-runner&quot;</span>, <span class="string">&quot;/home/gitlab-runner&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/usr/bin/dumb-init&quot;</span>, <span class="string">&quot;/entrypoint&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;run&quot;</span>, <span class="string">&quot;--user=gitlab-runner&quot;</span>, <span class="string">&quot;--working-directory=/home/gitlab-runner&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> gitlab-runner data directory</span></span><br><span class="line">DATA_DIR=&quot;/etc/gitlab-runner&quot;</span><br><span class="line">CONFIG_FILE=$&#123;CONFIG_FILE:-$DATA_DIR/config.toml&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> custom certificate authority path</span></span><br><span class="line">CA_CERTIFICATES_PATH=$&#123;CA_CERTIFICATES_PATH:-$DATA_DIR/certs/ca.crt&#125;</span><br><span class="line">LOCAL_CA_PATH=&quot;/usr/local/share/ca-certificates/ca.crt&quot;</span><br><span class="line"></span><br><span class="line">update_ca() &#123;</span><br><span class="line">  echo &quot;Updating CA certificates...&quot;</span><br><span class="line">  cp &quot;$&#123;CA_CERTIFICATES_PATH&#125;&quot; &quot;$&#123;LOCAL_CA_PATH&#125;&quot;</span><br><span class="line">  update-ca-certificates --fresh &gt;/dev/null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [ -f &quot;$&#123;CA_CERTIFICATES_PATH&#125;&quot; ]; then</span><br><span class="line"><span class="meta">  #</span><span class="bash"> update the ca <span class="keyword">if</span> the custom ca is different than the current</span></span><br><span class="line">  cmp --silent &quot;$&#123;CA_CERTIFICATES_PATH&#125;&quot; &quot;$&#123;LOCAL_CA_PATH&#125;&quot; || update_ca</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> launch gitlab-runner passing all arguments</span></span><br><span class="line">exec gitlab-runner &quot;$@&quot;</span><br></pre></td></tr></table></figure>



<h3 id="dockerhub版本（废弃）"><a href="#dockerhub版本（废弃）" class="headerlink" title="dockerhub版本（废弃）"></a>dockerhub版本（废弃）</h3><p>原因：该版本安装的是gitlab-ci-multi-runner是之前的版本现在已更名为gitlab-runner，而且运行报错</p>
<p><code>[dumb-init] /entrypoint: Exec format error</code>，以为是最后句名字报错，但是修改报同样的错</p>
<p><a href="https://github.com/ayufan/gitlab-ci-multi-runner/tree/master/dockerfiles/ubuntu">ayufan/gitlab-ci-multi-runner</a> (2016.5月更新)</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#--file name--Dockerfile---</span></span><br><span class="line"><span class="comment">#指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#远程拷贝文件到指定目录，带自动解压功能</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> https://github.com/Yelp/dumb-init/releases/download/v1.0.2/dumb-init_1.0.2_amd64 /usr/bin/dumb-init</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /usr/bin/dumb-init</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update -y &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get upgrade -y &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get install -y ca-certificates wget apt-transport-https vim nano &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get clean &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;deb https://packages.gitlab.com/runner/gitlab-ci-multi-runner/ubuntu/ `lsb_release -cs` main&quot;</span> &gt; /etc/apt/sources.list.d/runner_gitlab-ci-multi-runner.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    wget -q -O - https://packages.gitlab.com/gpg.key | apt-key add - &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get update -y &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get install -y gitlab-ci-multi-runner &amp;&amp; \</span></span><br><span class="line"><span class="bash">    wget -q https://github.com/docker/machine/releases/download/v0.7.0/docker-machine-Linux-x86_64 -O /usr/bin/docker-machine &amp;&amp; \</span></span><br><span class="line"><span class="bash">    chmod +x /usr/bin/docker-machine &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get clean &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mkdir -p /etc/gitlab-runner/certs &amp;&amp; \</span></span><br><span class="line"><span class="bash">    chmod -R 700 /etc/gitlab-runner &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> entrypoint /</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /entrypoint</span></span><br><span class="line"><span class="comment">#匿名卷，如果运行时没有指定卷则自动创建匿名卷</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;/etc/gitlab-runner&quot;</span>, <span class="string">&quot;/home/gitlab-runner&quot;</span>]</span></span><br><span class="line"><span class="comment">#应用运行前执行的脚本</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/usr/bin/dumb-init&quot;</span>, <span class="string">&quot;/entrypoint&quot;</span>]</span></span><br><span class="line"><span class="comment">#启动容器前执行的命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;run&quot;</span>, <span class="string">&quot;--user=gitlab-runner&quot;</span>, <span class="string">&quot;--working-directory=/home/gitlab-runner&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">--file name--entrypoint---</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> gitlab-ci-multi-runner data directory</span></span><br><span class="line">DATA_DIR=&quot;/etc/gitlab-runner&quot;</span><br><span class="line">CONFIG_FILE=$&#123;CONFIG_FILE:-$DATA_DIR/config.toml&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> custom certificate authority path</span></span><br><span class="line">CA_CERTIFICATES_PATH=$&#123;CA_CERTIFICATES_PATH:-$DATA_DIR/certs/ca.crt&#125;</span><br><span class="line">LOCAL_CA_PATH=&quot;/usr/local/share/ca-certificates/ca.crt&quot;</span><br><span class="line"></span><br><span class="line">update_ca() &#123;</span><br><span class="line">  echo &quot;Updating CA certificates...&quot;</span><br><span class="line">  cp &quot;$&#123;CA_CERTIFICATES_PATH&#125;&quot; &quot;$&#123;LOCAL_CA_PATH&#125;&quot;</span><br><span class="line">  update-ca-certificates --fresh &gt;/dev/null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [ -f &quot;$&#123;CA_CERTIFICATES_PATH&#125;&quot; ]; then</span><br><span class="line"><span class="meta">  #</span><span class="bash"> update the ca <span class="keyword">if</span> the custom ca is different than the current</span></span><br><span class="line">  cmp --silent &quot;$&#123;CA_CERTIFICATES_PATH&#125;&quot; &quot;$&#123;LOCAL_CA_PATH&#125;&quot; || update_ca</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> launch gitlab-ci-multi-runner passing all arguments</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这句报错，版本问题，似乎是multi-runner是之前的版本，先更新为gtilab-runner</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">exec</span> gitlab-ci-multi-runner <span class="string">&quot;<span class="variable">$@</span>&quot;</span> ,</span></span><br><span class="line">exec gitlab-runner &quot;$@&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>gitlab</tag>
        <tag>runner</tag>
        <tag>Dockerfile</tag>
      </tags>
  </entry>
  <entry>
    <title>Dokcer-build-face</title>
    <url>/2020/05/21/dokcer-build-face/</url>
    <content><![CDATA[<h3 id="ubuntu-install-conda"><a href="#ubuntu-install-conda" class="headerlink" title="ubuntu install conda"></a><a href="https://www.howtoing.com/how-to-install-anaconda-on-ubuntu-18-04-quickstart">ubuntu install conda</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://www.anaconda.com/products/individual</span><br><span class="line">Linux </span><br><span class="line">Python 3.7</span><br><span class="line">64-Bit (x86) Installer (522 MB)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo-BaseBuild</title>
    <url>/2018/05/08/dubbo-basebuild/</url>
    <content><![CDATA[<p><a href="https://dubbo.incubator.apache.org/">dubbo官网</a>/<a href="https://mvnrepository.com/artifact/com.alibaba/dubbo">dubbo仓库地址</a></p>
<ol>
<li><p>环境准备新建一个空的project，分别三个model</p>
<table>
<thead>
<tr>
<th>model名称</th>
<th>model类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>common_interface</td>
<td>java类型空项目</td>
<td>用于存放服务提供者和服务消费者的公共接口，避免写两次而已</td>
</tr>
<tr>
<td>consumer</td>
<td>springboot空项目</td>
<td>消费者服务依赖<code>common_interface </code>  model</td>
</tr>
<tr>
<td>provider</td>
<td>springboot空项目</td>
<td>提供者服务依赖<code>common_interface </code>  model</td>
</tr>
</tbody></table>
</li>
<li><p>上面项目建立好，model依赖关系加好之后，下面开始引入dubbo框架</p>
</li>
<li><p>两个springboot项目都引入dubbo依赖这里用的gradle，仓库地址可以去<a href="https://mvnrepository.com/artifact/com.alibaba/dubbo">dubbo仓库地址</a>查看</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="attr">group:</span> <span class="string">&#x27;com.alibaba&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;dubbo&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;2.6.1&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>common_interface</code>项目中添加一个接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exxk.dubbo.commonimpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>provider</code>项目中实现<code>DemoService</code>接口，在java目录下新建impl包，并添加一个<code>DemoServiceImpl</code>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exxk.dubbo.provider.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> exxk.dubbo.commonimpl.DemoService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title">DemoService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>+ name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>provider</code>项目中<code>resource</code>目录下添加一个dubbo配置文件<code>dubbo-provider.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该提供者服务名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;dubbo-provider&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组播模式的注册中心，推荐用zookeeper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;multicast://224.5.6.7:1234&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--暴露的端口服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明暴露服务公共接口类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;exxk.dubbo.commonimpl.DemoService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;demoService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--提供者实现类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demoService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;exxk.dubbo.provider.impl.DemoServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>provider</code>项目中<code>java</code>目录下添加一个dubbo 启动类<code>Provider.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exxk.dubbo.provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">&quot;dubbo-provider.xml&quot;</span>&#125;); <span class="comment">//读取dubbo配置文件</span></span><br><span class="line">        context.start();</span><br><span class="line">        <span class="comment">//按任何键推出</span></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>上面的服务提供者基本完成，然后启动服务提供者，直接运行<code>Provider.java</code>静态方法即可</p>
</li>
<li><p>在<code>consumer</code>项目中<code>resource</code>目录下添加一个dubbo配置文件<code>dubbo-consumer.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;dubbo-consumer&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册中心地址（多播）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;multicast://224.5.6.7:1234&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;demoService&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;exxk.dubbo.commonimpl.DemoService&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>consumer</code>项目中<code>java</code>目录下添加一个dubbo 启动类<code>Consumer.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exxk.dubbo.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> exxk.dubbo.commonimpl.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">&quot;dubbo-consumer.xml&quot;</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line">        DemoService demoService= (DemoService) context.getBean(<span class="string">&quot;demoService&quot;</span>);</span><br><span class="line">        String hello= demoService.sayHello(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        System.out.print(hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动<code>consumer</code>服务消费者项目，这里用debug模式运行<code>Consumer.java</code>在里面打断点，主要是日志不好找，因此debug</p>
</li>
</ol>
<h3 id="基于springboot优化启动类"><a href="#基于springboot优化启动类" class="headerlink" title="基于springboot优化启动类"></a>基于springboot优化启动类</h3><p>在springboot启动类添加dubbo启动，去掉默认的dubbo启动</p>
<ol>
<li><p>最直接的是把dubbo启动类的配置xml内容直接放到application启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(ProviderApplication.class, args);</span><br><span class="line">		ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">&quot;dubbo-provider.xml&quot;</span>&#125;); <span class="comment">//读取dubbo配置文件</span></span><br><span class="line">        context.start();</span><br><span class="line">        <span class="comment">//同步锁，保持该线程一直运行</span></span><br><span class="line">        <span class="keyword">synchronized</span> (Provider.class)&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Provider.class.wait();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;synchronized===:&quot;</span>+e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>这种当然不优雅，可以直接把xml配置文件配置到注解<code>@ImportResource</code>上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(ProviderApplication.class, args);</span><br><span class="line">        <span class="comment">//同步锁，保持该线程一直运行</span></span><br><span class="line">        <span class="keyword">synchronized</span> (Provider.class)&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Provider.class.wait();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;synchronized===:&quot;</span>+e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码是少了，但是据说，dubbo包含web框架，会让springboot当成web程序运行，这里自定义<code>SpringApplicationBuilder</code>禁用web</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ApplicationContext context= <span class="keyword">new</span> SpringApplicationBuilder()</span><br><span class="line">				.sources(ProviderApplication.class)</span><br><span class="line">				.web(WebApplicationType.NONE)  <span class="comment">//禁用web服务</span></span><br><span class="line">				.run(args);</span><br><span class="line">        <span class="comment">//同步锁，保持该线程一直运行</span></span><br><span class="line">        <span class="keyword">synchronized</span> (Provider.class)&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Provider.class.wait();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;synchronized===:&quot;</span>+e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步锁线程也换种方式实现,利用同步工具类<code>CountDownLatch</code>,该工具类的大概作用就是有等待指定线程（数）执行完了，再执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ImportResource(&#123;&quot;classpath:dubbo-provider.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CountDownLatch <span class="title">closeLatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">//SpringApplication.run(ProviderApplication.class, args);</span></span><br><span class="line">		ApplicationContext context= <span class="keyword">new</span> SpringApplicationBuilder()</span><br><span class="line">				.sources(ProviderApplication.class)</span><br><span class="line">				.web(WebApplicationType.NONE)  <span class="comment">//禁用web服务</span></span><br><span class="line">				.run(args);</span><br><span class="line"></span><br><span class="line">		CountDownLatch closeLatch=context.getBean(CountDownLatch.class);</span><br><span class="line">		closeLatch.await(); <span class="comment">//等待所有子线程完成</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后删除旧的启动器，到此大功告成</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo-Gradle-Build</title>
    <url>/2018/05/14/dubbo-gradle-build/</url>
    <content><![CDATA[<p>源码：<a href="https://github.com/xuanfong1/DubboLearning">https://github.com/xuanfong1/DubboLearning</a></p>
<ol>
<li><p>新建目录<code> mkdir DubboLearning</code>,然后<code>cd Dubbolearning</code>进去之后执行<code>gradle init</code>初始化gradle项目</p>
</li>
<li><p>新建三个子项目目录<code>mkdir library,provider,consumer </code>分别为公共依赖项目、提供者、消费者</p>
</li>
<li><p>复制build.gradle到三个子项目目录</p>
</li>
<li><p>分别为三个子项目创建目录<code>mkdir -p src/main/java,src/test/java,src/main/resources</code></p>
</li>
<li><p>修改顶级项目目录的setting.gradle添加三个子项目</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">include <span class="string">&#x27;library&#x27;</span></span><br><span class="line">inclede <span class="string">&#x27;provider&#x27;</span></span><br><span class="line">inclede <span class="string">&#x27;consumer&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>复制项目helloworld的源码到项目目录</p>
</li>
<li><p>然后修改顶级项目目录build.gradle</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&quot;org.springframework.boot&quot;</span> version <span class="string">&quot;2.0.1.RELEASE&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter() <span class="comment">//将jcenter仓库配置到所有项目</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">subprojects &#123;</span><br><span class="line">    version = <span class="string">&#x27;1.0&#x27;</span> <span class="comment">//设置版本号</span></span><br><span class="line">&#125;</span><br><span class="line">configure(subprojects.findAll &#123;it.name == <span class="string">&#x27;provider&#x27;</span> || it.name == <span class="string">&#x27;consumer&#x27;</span>&#125; ) &#123;</span><br><span class="line"></span><br><span class="line">    apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br><span class="line">    apply <span class="attr">plugin:</span> <span class="string">&#x27;eclipse&#x27;</span></span><br><span class="line">    apply <span class="attr">plugin:</span> <span class="string">&quot;org.springframework.boot&quot;</span></span><br><span class="line">    apply <span class="attr">plugin:</span> <span class="string">&#x27;io.spring.dependency-management&#x27;</span></span><br><span class="line"></span><br><span class="line">    group = <span class="string">&#x27;exxk.dubbo&#x27;</span></span><br><span class="line">    version = <span class="string">&#x27;0.0.1-SNAPSHOT&#x27;</span></span><br><span class="line">    sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        compile(<span class="string">&#x27;org.springframework.boot:spring-boot-starter&#x27;</span>)</span><br><span class="line">        compile <span class="attr">group:</span> <span class="string">&#x27;com.alibaba&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;dubbo&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;2.6.1&#x27;</span></span><br><span class="line">        testCompile(<span class="string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span>)</span><br><span class="line">        compile project(<span class="string">&#x27;:library&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ol>
<h3 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h3><p><a href="https://plugins.gradle.org/plugin/org.springframework.boot">https://plugins.gradle.org/plugin/org.springframework.boot</a></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//低版本，动态</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">    ext &#123;</span><br><span class="line">        springBootVersion = <span class="string">&#x27;2.0.1.RELEASE&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">&quot;org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等效于</span></span><br><span class="line"><span class="comment">//高版本</span></span><br><span class="line">plugins &#123;</span><br><span class="line">  id <span class="string">&quot;org.springframework.boot&quot;</span> version <span class="string">&quot;2.0.2.RELEASE&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: org&#x2F;apache&#x2F;curator&#x2F;RetryPolicy</span><br><span class="line">	at com.alibaba.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter.connect(CuratorZookeeperTransporter.java:26)</span><br></pre></td></tr></table></figure>

<p>解决：添加依赖<code>compile group: &#39;org.apache.curator&#39;, name: &#39;curator-framework&#39;, version: &#39;4.0.1&#39;</code></p>
]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>Dubbo</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo-Gradle-Config</title>
    <url>/2018/05/16/dubbo-gradle-config/</url>
    <content><![CDATA[<h4 id="配置方式一xml"><a href="#配置方式一xml" class="headerlink" title="配置方式一xml"></a>配置方式一<code>xml</code></h4><p>在resources目录<code>dubbo-provider.xml</code>配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该提供者服务名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;dubbo-provider&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组播模式的注册中心，推荐用zookeeper--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dubbo:registry address=&quot;zookeeper://10.14.1.7:2181&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--暴露的端口服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明暴露服务公共接口类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;exxk.dubbo.commonimpl.DemoService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;demoService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--提供者实现类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;demoService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;exxk.dubbo.provider.impl.DemoServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要在dubbo启动器指向xml名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">&quot;dubbo-provider.xml&quot;</span>&#125;); <span class="comment">//读取dubbo配置文件</span></span><br><span class="line">        context.start();</span><br></pre></td></tr></table></figure>

<h4 id="配置方式二dubbo-properties"><a href="#配置方式二dubbo-properties" class="headerlink" title="配置方式二dubbo.properties"></a>配置方式二<code>dubbo.properties</code></h4><p>注：配置文件名字是固定的</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://10.14.1.7:2181</span></span><br></pre></td></tr></table></figure>

<h4 id="配置方式三jvm"><a href="#配置方式三jvm" class="headerlink" title="配置方式三jvm"></a>配置方式三<code>jvm</code></h4><p>注：gradle application task run启动vm设置无效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Ddubbo.registry.address&#x3D;zookeeper:&#x2F;&#x2F;10.14.1.7:2181</span><br></pre></td></tr></table></figure>

<h3 id="覆盖策略"><a href="#覆盖策略" class="headerlink" title="覆盖策略"></a>覆盖策略</h3><p>JVM&gt;XML&gt;Properties其中jvm优先级最高</p>
]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>Dubbo</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Git-repo</title>
    <url>/2019/12/18/git-repo/</url>
    <content><![CDATA[<h2 id="git多项目管理方案"><a href="#git多项目管理方案" class="headerlink" title="git多项目管理方案"></a>git多项目管理方案</h2><ul>
<li><a href="https://git-scm.com/docs/git-submodule">Git-submodule</a></li>
<li><a href="http://gitslave.sourceforge.net/">Gitslave</a></li>
<li><a href="https://github.com/apenwarr/git-subtree/">Git-subtree</a></li>
<li><a href="https://gerrit.googlesource.com/git-repo/">Git-repo</a> 采用(原因安卓几百个子项目都采用它)</li>
</ul>
<h3 id="git-repo-多项目管理"><a href="#git-repo-多项目管理" class="headerlink" title="git-repo 多项目管理"></a>git-repo 多项目管理</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="https://storage.googleapis.com/git-repo-downloads/repo">安装</a></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Debian/Ubuntu. 系统</span></span><br><span class="line">$ sudo apt-get install repo</span><br><span class="line"><span class="comment"># Gentoo. 系统</span></span><br><span class="line">$ sudo emerge dev-vcs/repo</span><br><span class="line"><span class="comment"># 其他系统下载脚本</span></span><br><span class="line">curl https://storage.googleapis.com/git-repo-downloads/repo</span><br><span class="line"><span class="comment"># 添加执行权限</span></span><br><span class="line">chmod a+rx repo</span><br><span class="line"><span class="comment"># 需要全局执行命令根据自己的系统进行配置环境变量,也可以放进项目里面，再项目里面运行</span></span><br><span class="line"><span class="comment"># mac 安装</span></span><br><span class="line">mv repo /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a><a href="https://source.android.com/source/using-repo.html">使用</a></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改repo文件里面的地址，不然需要外网</span></span><br><span class="line"><span class="comment">#  REPO_URL = &#x27;https://gerrit.googlesource.com/git-repo&#x27;</span></span><br><span class="line">   REPO_URL = <span class="string">&#x27;https://mirrors.ustc.edu.cn/aosp/git-repo&#x27;</span></span><br><span class="line"><span class="comment"># 也可以使用环境变量，或者使用命令时代参数</span></span><br><span class="line">repo init --repo-url=https://gerrit-google.tuna.tsinghua.edu.cn/git-repo</span><br></pre></td></tr></table></figure>

<h5 id="repo-init"><a href="#repo-init" class="headerlink" title="repo init"></a>repo init</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./repo init -u your_project_git_url</span><br><span class="line">./repo init -u git@github.com:xuanfong1/springLeaning.git</span><br><span class="line"><span class="comment">#----------------------可选参数-----------------------------------------</span></span><br><span class="line"><span class="comment">#-b 选取的 manifest 仓库分支，默认 master</span></span><br><span class="line"><span class="comment">#-m 选取的默认配置文件，默认 default.xml</span></span><br><span class="line"><span class="comment">#--depth=1 git clone 的深度，一般如在 Jenkins 上打包时可用，加快代码 clone 速度</span></span><br><span class="line"><span class="comment">#--repo-url=URL 使用自定义的 git-repo 代码，如前面说到的 fix 了 bug 的 git-repo</span></span><br><span class="line"><span class="comment">#--no-repo-verify 不验证 repo 的源码，如果自定义了 repo url 那么这个一般也加上</span></span><br><span class="line"><span class="comment">#----------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>repo</tag>
      </tags>
  </entry>
  <entry>
    <title>greenDAO3.1框架（二）入门</title>
    <url>/2016/08/27/greendao3-2-getstart/</url>
    <content><![CDATA[<h1 id="主流的ORM框架"><a href="#主流的ORM框架" class="headerlink" title="主流的ORM框架"></a>主流的ORM框架</h1><blockquote>
<ul>
<li>LitePal</li>
<li>AFinal</li>
<li>greenDAO<br><a href="http://www.jianshu.com/p/8287873d97cd">区别与性能分析</a></li>
</ul>
</blockquote>
<h1 id="greenDAO3-1-安装"><a href="#greenDAO3-1-安装" class="headerlink" title="greenDAO3.1 安装"></a>greenDAO3.1 安装</h1><h3 id="配置build-gradle"><a href="#配置build-gradle" class="headerlink" title="配置build.gradle"></a>配置build.gradle</h3><p>在model的build.gradle文件添加如下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &#39;org.greenrobot:greendao-gradle-plugin:3.1.0&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: &#39;org.greenrobot.greendao&#39;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile &#39;org.greenrobot:greendao:3.1.0&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数据库的设置（可选项）"><a href="#数据库的设置（可选项）" class="headerlink" title="数据库的设置（可选项）"></a>数据库的设置（可选项）</h3><p>在model的build.gradle文件添加如下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">greendao &#123;</span><br><span class="line">    schemaVersion 2</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参数解释</p>
<blockquote>
<ul>
<li>schemaVersion： 数据库schema版本，也可以理解为数据库版本号（默认1）</li>
<li>daoPackage：设置DaoMaster 、DaoSession、Dao包名（默认为你实体的名字）</li>
<li>targetGenDir：设置DaoMaster 、DaoSession、Dao目录(默认build/generated/source/greendao)</li>
<li>testsGenSrcDir：设置生成单元测试目录（默认src/androidTest/java）</li>
<li>generateTests：设置自动生成单元测试用例</li>
</ul>
</blockquote>
<h3 id="新建实体"><a href="#新建实体" class="headerlink" title="新建实体"></a>新建实体</h3><p>添加注解@</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id(autoincrement = true)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> tes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTes</span><span class="params">(<span class="keyword">long</span> tes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tes = tes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h3><blockquote>
<ul>
<li>targetGenDir目录(默认build/generated/source/greendao)下自动生成自动生成DaoMaster.java 、DaoSession.java、Dao.java</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>实体test.java自动新增如下代码</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Generated(hash = 838475940)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">test</span><span class="params">(<span class="keyword">long</span> tes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tes = tes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Generated(hash = 1102163179)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="简单的使用"><a href="#简单的使用" class="headerlink" title="简单的使用"></a>简单的使用</h3><h4 id="新建DBManager-java管理类"><a href="#新建DBManager-java管理类" class="headerlink" title="新建DBManager.java管理类"></a>新建DBManager.java管理类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String dbName = <span class="string">&quot;test_db&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DBManager mInstance;</span><br><span class="line">    <span class="keyword">private</span> DaoMaster.DevOpenHelper openHelper;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBManager</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        openHelper = <span class="keyword">new</span> DaoMaster.DevOpenHelper(context, dbName, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单例引用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DBManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DBManager.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mInstance = <span class="keyword">new</span> DBManager(context);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取可读数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SQLiteDatabase <span class="title">getReadableDatabase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (openHelper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            openHelper = <span class="keyword">new</span> DaoMaster.DevOpenHelper(context, dbName, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SQLiteDatabase db = openHelper.getReadableDatabase();</span><br><span class="line">        <span class="keyword">return</span> db;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取可写数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SQLiteDatabase <span class="title">getWritableDatabase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (openHelper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            openHelper = <span class="keyword">new</span> DaoMaster.DevOpenHelper(context, dbName, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SQLiteDatabase db = openHelper.getWritableDatabase();</span><br><span class="line">        <span class="keyword">return</span> db;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> test</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(test test)</span> </span>&#123;</span><br><span class="line">        DaoMaster daoMaster = <span class="keyword">new</span> DaoMaster(getWritableDatabase());</span><br><span class="line">        DaoSession daoSession = daoMaster.newSession();</span><br><span class="line">        testDao userDao = daoSession.getTestDao();</span><br><span class="line">        userDao.insert(test);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;test&gt; <span class="title">queryUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DaoMaster daoMaster = <span class="keyword">new</span> DaoMaster(getReadableDatabase());</span><br><span class="line">        DaoSession daoSession = daoMaster.newSession();</span><br><span class="line">        testDao userDao = daoSession.getTestDao();</span><br><span class="line">        QueryBuilder&lt;test&gt; qb = userDao.queryBuilder();</span><br><span class="line">        List&lt;test&gt; list = qb.list();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">daotest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DBManager dbManager=DBManager.getInstance(<span class="keyword">this</span>);</span><br><span class="line">    dbManager.insertUser(<span class="keyword">new</span> test(<span class="number">10</span>));</span><br><span class="line">    Log.i(<span class="string">&quot;sssss&quot;</span>,<span class="string">&quot;ddddd&quot;</span>+dbManager.queryUserList().get(<span class="number">0</span>).getTes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.tuicool.com/articles/63I3EfB">Android数据存储之GreenDao 3.0 详解</a><br><a href="http://greenrobot.org/greendao/documentation/updating-to-greendao-3-and-annotations/">官方教程</a></p>
]]></content>
      <categories>
        <category>greenDAO</category>
      </categories>
      <tags>
        <tag>greenDAO</tag>
        <tag>ORM</tag>
      </tags>
  </entry>
  <entry>
    <title>github博客之更新完善</title>
    <url>/2017/12/07/hexo-blog-update/</url>
    <content><![CDATA[<h3 id="wsl安装nodejs8-x"><a href="#wsl安装nodejs8-x" class="headerlink" title="wsl安装nodejs8.x"></a>wsl安装<a href="https://nodejs.org/en/download/">nodejs8.x</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -</span><br><span class="line">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure>

<h3 id="wsl安装hexo-cli"><a href="#wsl安装hexo-cli" class="headerlink" title="wsl安装hexo-cli"></a>wsl安装<a href="https://hexo.io/zh-cn/docs/">hexo-cli</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /mnt/f/</span><br><span class="line">sudo npm install -g hexo-cli</span><br><span class="line">hexo --version #1.0.4</span><br><span class="line">hexo init hexo &amp;&amp; cd hexo</span><br><span class="line">hexo new hello #创建新文章</span><br><span class="line">hexo g #生产静态页面</span><br><span class="line">hexo s #启动本地测试服务</span><br></pre></td></tr></table></figure>

<h3 id="hexo安装next主题"><a href="#hexo安装next主题" class="headerlink" title="hexo安装next主题"></a>hexo安装next主题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br><span class="line"><span class="meta">#</span><span class="bash">复制next主题到hexo\themes目录下，修改配置文件_config.yml中的theme为next</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>



<h3 id="hexo引入gitment评论"><a href="#hexo引入gitment评论" class="headerlink" title="hexo引入gitment评论"></a>hexo引入<a href="https://github.com/imsun/gitment">gitment</a>评论</h3><p>参考：<a href="https://imsun.net/posts/gitment-introduction/">Gitment：使用 GitHub Issues 搭建评论系统</a></p>
<p>简介：<a href="https://github.com/imsun/gitment">Gitment</a> 是作者实现的一款基于 GitHub Issues 的评论系统。</p>
<p><code>hexo\themes\next\_config.yml</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">  #菜单</span></span><br><span class="line">  <span class="attr">tags</span>: <span class="string">/tags/ || tags</span></span><br><span class="line">  <span class="attr">updated</span>: <span class="string">2018-01-28 21:41:27</span></span><br><span class="line"><span class="attr">categories</span>: <span class="string">/categories/ || th</span></span><br><span class="line"><span class="comment">  #样式</span></span><br><span class="line">  <span class="attr">scheme</span>: <span class="string">Pisces</span></span><br><span class="line"><span class="comment">  #评论</span></span><br><span class="line">  <span class="attr">gitment</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">enable</span>: <span class="string">true</span></span><br><span class="line">  <span class="attr">mint</span>: <span class="string">true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span></span><br><span class="line">  <span class="attr">count</span>: <span class="string">true # Show comments count in post meta area</span></span><br><span class="line">  <span class="attr">lazy</span>: <span class="string">false # Comments lazy loading with a button</span></span><br><span class="line">  <span class="attr">cleanly</span>: <span class="string">false # Hide &#x27;Powered by ...&#x27; on footer, and more</span></span><br><span class="line">  <span class="attr">language</span>: <span class="string"># Force language, or auto switch by theme</span></span><br><span class="line">  <span class="attr">github_user</span>: <span class="string">xuanfong1 # MUST HAVE, Your Github ID</span></span><br><span class="line">  <span class="attr">github_repo</span>: <span class="string">hexo # MUST HAVE, The repo you use to store Gitment comments</span></span><br><span class="line">  <span class="attr">client_id</span>: <span class="string">ff47a05197bc142b8dc0 # MUST HAVE, Github client id for the Gitment</span></span><br><span class="line">  <span class="attr">client_secret</span>: <span class="string">b52d05ee5566230edfcf653efab9fd9fce6756c8 # EITHER this or proxy_gateway, Github access secret token for the Gitment</span></span><br><span class="line">  <span class="attr">proxy_gateway</span>: <span class="string"># Address of api proxy, See: https://github.com/aimingoo/intersect</span></span><br><span class="line">  <span class="attr">redirect_protocol</span>: <span class="string"># Protocol of redirect_uri with force_redirect_protocol when mint enabled</span></span><br></pre></td></tr></table></figure>



<h3 id="Hexo配置和next主题配置"><a href="#Hexo配置和next主题配置" class="headerlink" title="Hexo配置和next主题配置"></a><a href="https://hexo.io/docs/deployment.html">Hexo配置</a>和<a href="http://theme-next.iissnan.com/theme-settings.html#fonts-customization">next主题配置</a></h3><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><p>leancould开启评论需要在控制台先创建<code>Counter</code> Class</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
        <tag>Travis</tag>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>github博客之Travis自动部署Hexo</title>
    <url>/2017/12/07/hexo-github-blog-travis/</url>
    <content><![CDATA[<h3 id="自动部署原理流程"><a href="#自动部署原理流程" class="headerlink" title="自动部署原理流程"></a>自动部署原理流程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">O[本地新增博客文件] --&gt; |git push|A[github:hexo分支] </span><br><span class="line">A --&gt; |hexo编译源码|B[Travis CI编译]</span><br><span class="line">B --&gt; |静态网页文件 git push|C[github:master分支]</span><br><span class="line">C --&gt; D(博客显示)</span><br></pre></td></tr></table></figure>



<h3 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ol>
<li>注册<a href="https://travis-ci.org/">Travis CI</a></li>
<li>github生成access token</li>
<li>在travis同步项目，以及配置token</li>
<li>github添加空白分支</li>
<li>在空白分支里放入Hexo源码</li>
<li>添加Travis CI配置文件</li>
<li>注意Hexo源码里theme文件里面的过滤文件删掉，不然会上传不了主题，造成博客空白</li>
<li>然后push到新建的空白分支</li>
</ol>
<h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><p>hexo编译源码地址：<a href="https://github.com/xuanfong1/xuanfong1.github.io/tree/hexo">https://github.com/xuanfong1/xuanfong1.github.io/tree/hexo</a></p>
<p>静态网页生产文件地址：<a href="https://github.com/xuanfong1/xuanfong1.github.io/tree/master">https://github.com/xuanfong1/xuanfong1.github.io/tree/master</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.jianshu.com/p/5e74046e7a0f">使用 Travis CI 自动部署 Hexo</a></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
        <tag>Travis</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-gitment-init</title>
    <url>/2018/02/24/hexo-gitment-init/</url>
    <content><![CDATA[<h2 id="自动初始化gitment评论"><a href="#自动初始化gitment评论" class="headerlink" title="自动初始化gitment评论"></a>自动初始化gitment评论</h2><p><strong>暂时不采用，见不足。</strong></p>
<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>每次发布文章，会自动产生issue但是发布一篇就要点击<code>initialize comments</code>按钮才能初始化评论，下面的步骤通过GitHub api实现ruby脚本自动初始化评论</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li><p>添加sitemap,参考<a href="https://jingyan.baidu.com/article/d621e8da7f4c542864913f10.html">hexo seo优化Google添加站点地图</a></p>
<p>主要再配置文件<code>.travis.yml</code>添加<code> - npm install hexo-generator-sitemap --save</code>,编译后会产生一个<code>sitemap.xml</code>对应url:<a href="http://bolg.iexxk.com/sitemap.xml">http://bolg.iexxk.com/sitemap.xml</a>,url后面会用到</p>
</li>
<li><p>在github的<code>setting-&gt;Developer settings-&gt; Personal access tokens-&gt;Generate new token</code>生成一个新的token 勾选<code>repo</code>，记住保存好token只会显示一次</p>
</li>
<li><p>在travis-ci添加<code>GITMENT</code>环境变量存储上一步生成的token，似乎GitHub不能把token明码直接放到脚本里，会导致GitHub的token失效消失</p>
</li>
<li><p>新建脚本文件<code>comment.rb</code>，放到<code>source\</code>目录,一次填入自己的信息，这里新加了忽略openssl的校验，以及token通过命令传参进行传入</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">username = <span class="string">&quot;xuanfong1&quot;</span> <span class="comment"># GitHub 用户名</span></span><br><span class="line">new_token = ARGV.first  <span class="comment"># GitHub Token，通过命令行参数传进来，获取第一个参数</span></span><br><span class="line">repo_name = <span class="string">&quot;xuanfong1.github.io&quot;</span> <span class="comment"># 存放 issues</span></span><br><span class="line">sitemap_url = <span class="string">&quot;http://bolg.iexxk.com/sitemap.xml&quot;</span> <span class="comment"># sitemap</span></span><br><span class="line">kind = <span class="string">&quot;gitment&quot;</span> <span class="comment"># &quot;Gitalk&quot; or &quot;gitment&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;open-uri&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;faraday&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;active_support&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;active_support/core_ext&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;sitemap-parser&#x27;</span></span><br><span class="line"><span class="comment"># 忽略openssl校验</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;openssl&#x27;</span></span><br><span class="line">OpenSSL::SSL::VERIFY_PEER = OpenSSL::SSL::VERIFY_NONE</span><br><span class="line"></span><br><span class="line">puts<span class="string">&quot;Token: <span class="subst">#&#123;new_token&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">sitemap = SitemapParser.new sitemap_url</span><br><span class="line">urls = sitemap.to_a</span><br><span class="line"></span><br><span class="line">conn = Faraday.new(<span class="symbol">:url</span> =&gt; <span class="string">&quot;https://api.github.com/repos/<span class="subst">#&#123;username&#125;</span>/<span class="subst">#&#123;repo_name&#125;</span>/issues&quot;</span>) <span class="keyword">do</span> <span class="params">|conn|</span></span><br><span class="line">  conn.basic_auth(username, new_token)</span><br><span class="line">  conn.adapter  Faraday.<span class="function"><span class="keyword">def</span><span class="title">ault_adapter</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">urls.each_with_index <span class="keyword">do</span> <span class="params">|url, index|</span></span><br><span class="line">  title = open(url).read.scan(<span class="regexp">/&lt;title&gt;(.*?)&lt;\/title&gt;/</span>).first.first.force_encoding(<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line">  response = conn.post <span class="keyword">do</span> <span class="params">|req|</span></span><br><span class="line">    req.body = &#123; <span class="symbol">body:</span> url, <span class="symbol">labels:</span> [kind, url], <span class="symbol">title:</span> title &#125;.to_json</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  puts response.body</span><br><span class="line">  sleep <span class="number">15</span> <span class="keyword">if</span> index % <span class="number">20</span> == <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加脚本执行命令，在<code>.travis.yml</code>添加安装<code>  - gem install faraday activesupport sitemap-parser</code>和执行脚本<code> - ruby comment.rb $&#123;GITMENT&#125;</code></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">language:</span> node_js</span><br><span class="line"><span class="symbol">node_js:</span> stable</span><br><span class="line"><span class="symbol">install:</span></span><br><span class="line">  - npm install</span><br><span class="line">  - npm install hexo-generator-sitemap --save</span><br><span class="line">  - npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">  - gem install faraday activesupport sitemap-parser</span><br><span class="line"><span class="symbol">script:</span></span><br><span class="line">  - hexo cl</span><br><span class="line">  - hexo g</span><br><span class="line"><span class="symbol">after_script:</span></span><br><span class="line">  - cd ./public</span><br><span class="line">  - git init</span><br><span class="line">  - git config user.name <span class="string">&quot;xuanfong1&quot;</span></span><br><span class="line">  - git config user.email <span class="string">&quot;xuan.fong1@163.com&quot;</span></span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m <span class="string">&quot;update&quot;</span></span><br><span class="line">  - git push --force --quiet <span class="string">&quot;https://$&#123;BLOG_GITHUB&#125;@$&#123;GH_REF&#125;&quot;</span> <span class="symbol">master:</span>master</span><br><span class="line">  - ruby comment.rb <span class="variable">$&#123;</span>GITMENT&#125;</span><br><span class="line"><span class="symbol">branches:</span></span><br><span class="line">  <span class="symbol">only:</span></span><br><span class="line">    - hexo</span><br><span class="line"><span class="symbol">env:</span></span><br><span class="line"> <span class="symbol">global:</span></span><br><span class="line">   - <span class="symbol">GH_REF:</span> github.com/xuanfong1/xuanfong1.github.io.git</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h5 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h5><ol>
<li>会初始化多余的评论，例如目录页，没做过滤</li>
<li>编译时间长</li>
<li>相同issues可以创建多次，而且官方没提供删除接口</li>
<li>概率性出现验证失败</li>
</ol>
<h5 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h5><ol>
<li><p>证书错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OpenSSL::SSL::SSLError SSL_connect returned&#x3D;1 errno&#x3D;0 state&#x3D;SSLv3 read server certificate B: certificate verify failed</span><br></pre></td></tr></table></figure>

<p>解决，在脚本添加忽略证书校验</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require &#39;openssl&#39;</span><br><span class="line">OpenSSL::SSL::VERIFY_PEER &#x3D; OpenSSL::SSL::VERIFY_NONE</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://draveness.me/git-comments-initialize">自动初始化 Gitalk 和 Gitment 评论</a></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>bolg</tag>
        <tag>gitment</tag>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础之抽象类</title>
    <url>/2017/02/10/java-abstract/</url>
    <content><![CDATA[<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><h6 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h6><p>动物-&gt;抽象类，猴子-&gt;子类</p>
<h6 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h6><ol>
<li>抽象类不能被实例化，实例化的工作应该交由它的子类来完成，它只需要有一个引用即可。</li>
<li>抽象方法必须由子类来进行重写。</li>
<li>只要包含一个抽象方法的类，该类必须要定义成抽象类。</li>
<li>抽象类中可以包含具体的方法，当然也可以不包含抽象方法。</li>
<li>子类中的抽象方法不能与父类的抽象方法同名。</li>
<li>abstract不能与final并列修饰同一个类。</li>
<li>abstract 不能与private、static、final或native并列修饰同一个方法。<h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6></li>
</ol>
<p>子类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">baseActity</span> </span>&#123;</span><br><span class="line">    TextView textView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        textView = (TextView) findViewById(R.id.aa);</span><br><span class="line">        <span class="keyword">super</span>.initdata(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        textView.setText(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽象类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">baseActity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initdata</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">        send(a + i++);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String data)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p> <a href="http://blog.csdn.net/chenssy/article/details/12858267">java提高篇（四）—–抽象类与接口</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>继承</tag>
        <tag>抽象</tag>
        <tag>abstract</tag>
        <tag>父类</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 list分组</title>
    <url>/2018/09/15/java-collectors/</url>
    <content><![CDATA[<h2 id="实战按月分类list数据"><a href="#实战按月分类list数据" class="headerlink" title="实战按月分类list数据"></a>实战按月分类list数据</h2><p>数据源：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;2018年08月&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;createTime&quot;</span>:<span class="string">&quot;2018-08-15 15:51:16&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;createTime&quot;</span>:<span class="string">&quot;2018-08-15 15:51:15&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;2018年09月&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;createTime&quot;</span>:<span class="string">&quot;2018-09-15 15:51:16&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;createTime&quot;</span>:<span class="string">&quot;2018-09-15 15:51:15&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-----------------实体类-----------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThematicMap</span> <span class="keyword">extends</span> <span class="title">BaseBean</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMonth</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Date createTime= <span class="keyword">this</span>.getCreateTime(); <span class="comment">//获取basebean的时间</span></span><br><span class="line">        SimpleDateFormat format1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> format1.format(createTime.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------------------------</span></span><br><span class="line"></span><br><span class="line">List&lt;ThematicMap&gt; thematicMapList = thematicMapMapper.listForPage(params);</span><br><span class="line"><span class="comment">//getMonth方法获取数据，</span></span><br><span class="line">Map&lt;String,List&lt;ThematicMap&gt;&gt; stringListMap=thematicMapList.stream().collect(Collectors.groupingBy(ThematicMap::getMonth,LinkedHashMap::<span class="keyword">new</span>,Collectors.toList()));</span><br></pre></td></tr></table></figure>



<p><code>Collectors.groupingBy(Function&lt;? super T, ? extends K&gt; classifier, ​                                  Supplier&lt;M&gt; mapFactory, ​                                  Collector&lt;? super T, A, D&gt; downstream)</code>有三个参数</p>
<p>如果不考虑顺序一个参数即可<code>thematicMapList.stream().collect(Collectors.groupingBy(ThematicMap::getMonth));</code></p>
<p>第二个参数是指定容器：默认值是<code>HashMap::new</code>,但是它会导致乱序，因此使用<code>LinkedHashMap</code></p>
<p>最终数据结构</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;2018年08月&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;createTime&quot;</span>:<span class="string">&quot;2018-08-15 15:51:16&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;createTime&quot;</span>:<span class="string">&quot;2018-08-15 15:51:15&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;2018年09月&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;createTime&quot;</span>:<span class="string">&quot;2018-09-15 15:51:16&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;createTime&quot;</span>:<span class="string">&quot;2018-09-15 15:51:15&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;       </span><br></pre></td></tr></table></figure>





<h6 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h6><p><a href="https://www.cnblogs.com/zhshlimi/p/9070543.html">Collectors.groupingBy分组后的排序问题</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java8</tag>
        <tag>Collectors</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 日期总结</title>
    <url>/2018/04/05/java-date/</url>
    <content><![CDATA[<h3 id="java-日期操作"><a href="#java-日期操作" class="headerlink" title="java 日期操作"></a>java 日期操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java8</span></span><br><span class="line">LocalDateTime today_start = LocalDateTime.of(LocalDate.now(), LocalTime.MIN);<span class="comment">//当天零点</span></span><br><span class="line">LocalDateTime today_start = LocalDateTime.of(LocalDate.now(), LocalTime.MAX);<span class="comment">//当天23:59:59</span></span><br><span class="line">today_start.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>)); <span class="comment">//时间格式化</span></span><br><span class="line"><span class="comment">//LocalDateTime 转 Date</span></span><br><span class="line">Date out = Date.from(today_start.atZone(ZoneId.systemDefault()).toInstant()); </span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>);</span><br><span class="line">sdf.format(out);  <span class="comment">//时间格式化</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Date</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-Ftp</title>
    <url>/2018/07/14/java-ftp/</url>
    <content><![CDATA[<h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><h5 id="问题1：-文件损坏"><a href="#问题1：-文件损坏" class="headerlink" title="问题1： 文件损坏"></a>问题1： 文件损坏</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该格式会转码导致部分数据丢失</span></span><br><span class="line">ftp.setFileType(FTP.ASCII_FILE_TYPE);  </span><br><span class="line"><span class="comment">//该格式不会丢失数据</span></span><br><span class="line">ftp.setFileType(FTP.BINARY_FILE_TYPE);</span><br></pre></td></tr></table></figure>

<h5 id="问题2：上传失败"><a href="#问题2：上传失败" class="headerlink" title="问题2：上传失败"></a>问题2：上传失败</h5><p>发现在虚拟机运行代码时发现通过FTP上传文件总是失败返回<code>500 Illegal PORT command</code></p>
<p>查资料所得发现FTP工作协议分：参考<a href="https://blog.csdn.net/jsd2honey/article/details/76572410">FTP时显示500 Illegal PORT command的解决</a></p>
<ul>
<li>主动模式：服务器向客户端敲门，然后客户端开门(端口) </li>
<li>被动模式：客户端向服务器敲门，然后服务器开门(端口) </li>
</ul>
<p>从上面分析就知道，主动模式肯定不行的，虚拟机里的服务开放端口，然后告诉服务器，但是服务器并不能访问虚拟机的端口，他只能访问虚拟机宿主机的端口，因此导致了本地可以运行，但是放到虚拟机却上传失败了</p>
<h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>然后在代码里添加<code>ftp.enterLocalPassiveMode();</code>设置为被动模式，记得上传下载都要设置。</p>
<p>不设置默认为主动模式<code>enterLocalActiveMode()</code></p>
<h5 id="附代码"><a href="#附代码" class="headerlink" title="附代码"></a>附代码</h5><p>pom.xml添加ftp依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-net<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-net<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ftp工具类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ftp上传下载工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FtpUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description: 向FTP服务器上传文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host     FTP服务器hostname</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port     FTP服务器端口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username FTP登录账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password FTP登录密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePath FTP服务器基础目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath FTP服务器文件存放路径。例如分日期存放：/2015/01/01。文件的路径为basePath+filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename 上传到FTP服务器上的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input    输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">uploadFile</span><span class="params">(String host, <span class="keyword">int</span> port, String username, String password, String basePath,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     String filePath, String filename, InputStream input)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        FTPClient ftp = <span class="keyword">new</span> FTPClient();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> reply;</span><br><span class="line">            ftp.connect(host, port);<span class="comment">// 连接FTP服务器</span></span><br><span class="line">            <span class="comment">// 如果采用默认端口，可以使用ftp.connect(host)的方式直接连接FTP服务器</span></span><br><span class="line">            ftp.login(username, password);<span class="comment">// 登录</span></span><br><span class="line">            reply = ftp.getReplyCode();</span><br><span class="line">            <span class="keyword">if</span> (!FTPReply.isPositiveCompletion(reply)) &#123;</span><br><span class="line">                ftp.disconnect();</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            ftp.enterLocalPassiveMode();  <span class="comment">//设置被动模式</span></span><br><span class="line">            <span class="comment">//切换到上传目录</span></span><br><span class="line">            <span class="keyword">if</span> (!ftp.changeWorkingDirectory(basePath + filePath)) &#123;</span><br><span class="line">                <span class="comment">//如果目录不存在创建目录</span></span><br><span class="line">                String[] dirs = filePath.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">                String tempPath = basePath;</span><br><span class="line">                <span class="keyword">for</span> (String dir : dirs) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> == dir || <span class="string">&quot;&quot;</span>.equals(dir)) <span class="keyword">continue</span>;</span><br><span class="line">                    tempPath += <span class="string">&quot;/&quot;</span> + dir;</span><br><span class="line">                    <span class="keyword">if</span> (!ftp.changeWorkingDirectory(tempPath)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!ftp.makeDirectory(tempPath)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> result;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            ftp.changeWorkingDirectory(tempPath);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//设置上传文件的类型为二进制类型</span></span><br><span class="line">            ftp.setFileType(FTP.BINARY_FILE_TYPE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//上传文件</span></span><br><span class="line">            <span class="keyword">if</span> (!ftp.storeFile(filename, input)) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            input.close();</span><br><span class="line">            ftp.logout();</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           <span class="comment">// e.printStackTrace();</span></span><br><span class="line">           <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ftp.isConnected()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ftp.disconnect();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description: 从FTP服务器下载文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host       FTP服务器hostname</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port       FTP服务器端口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username   FTP登录账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password   FTP登录密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> remotePath FTP服务器上的相对路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName   要下载的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> localPath  下载后保存到本地的路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">downloadFile</span><span class="params">(String host, <span class="keyword">int</span> port, String username, String password, String remotePath,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       String fileName, String localPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        FTPClient ftp = <span class="keyword">new</span> FTPClient();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> reply;</span><br><span class="line">            ftp.connect(host, port);</span><br><span class="line">            <span class="comment">// 如果采用默认端口，可以使用ftp.connect(host)的方式直接连接FTP服务器</span></span><br><span class="line">            ftp.login(username, password);<span class="comment">// 登录</span></span><br><span class="line">            reply = ftp.getReplyCode();</span><br><span class="line">            <span class="keyword">if</span> (!FTPReply.isPositiveCompletion(reply)) &#123;</span><br><span class="line">                ftp.disconnect();</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            ftp.enterLocalPassiveMode();  <span class="comment">//设置被动模式</span></span><br><span class="line">            ftp.changeWorkingDirectory(remotePath);<span class="comment">// 转移到FTP服务器目录</span></span><br><span class="line">            FTPFile[] fs = ftp.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (FTPFile ff : fs) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ff.getName().equals(fileName)) &#123;</span><br><span class="line">                    File localFile = <span class="keyword">new</span> File(localPath + <span class="string">&quot;/&quot;</span> + ff.getName());</span><br><span class="line">                    OutputStream is = <span class="keyword">new</span> FileOutputStream(localFile);</span><br><span class="line">                    ftp.retrieveFile(ff.getName(), is);</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ftp.logout();</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ftp.isConnected()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ftp.disconnect();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除FTP上指定路径的文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ftpDirAndFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteFile</span><span class="params">(String host, <span class="keyword">int</span> port, String username, String password, String ftpDirAndFileName)</span> </span>&#123;</span><br><span class="line">        FTPClient ftp = <span class="keyword">new</span> FTPClient();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> reply;</span><br><span class="line">            ftp.connect(host, port);</span><br><span class="line">            <span class="comment">// 如果采用默认端口，可以使用ftp.connect(host)的方式直接连接FTP服务器</span></span><br><span class="line">            ftp.login(username, password);<span class="comment">// 登录</span></span><br><span class="line">            reply = ftp.getReplyCode();</span><br><span class="line">            <span class="keyword">if</span> (!FTPReply.isPositiveCompletion(reply)) &#123;</span><br><span class="line">                ftp.disconnect();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">boolean</span> hasDelete = ftp.deleteFile(ftpDirAndFileName);</span><br><span class="line"></span><br><span class="line">            ftp.logout();</span><br><span class="line">            <span class="keyword">return</span> hasDelete;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ftp.isConnected()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ftp.disconnect();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="问题3：docker部署，无权限问题"><a href="#问题3：docker部署，无权限问题" class="headerlink" title="问题3：docker部署，无权限问题"></a>问题3：docker部署，无权限问题</h5><p>原因：由于使用ftp登陆时默认跟目录<code>/</code>其实时用户ftp home目录，因此设置home目录因该是挂载卷的子目录，不然同级回提示没权限，如果新配置记得删除passwd的文件或删除，不然配置修改无效</p>
<p>正确的配置文件如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ftpd-server:</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">stilliard/pure-ftpd:hardened</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/dockerdata/v-manager-test-ygl/ftpdata:/home/ftpusers</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/dockerdata/v-manager-test-ygl/ftpconfig:/etc/pure-ftpd/passwd</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;14821:21&quot;</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;30000-30009:30000-30009&quot;</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">PUBLICHOST:</span> <span class="string">&quot;192.168.1.230&quot;</span></span><br><span class="line">    <span class="attr">FTP_USER_NAME:</span> <span class="string">&quot;ftpuser&quot;</span></span><br><span class="line">    <span class="attr">FTP_USER_PASS:</span> <span class="string">&quot;ftpuser&quot;</span></span><br><span class="line">    <span class="attr">FTP_USER_HOME:</span> <span class="string">&quot;/home/ftpusers/ftpuser&quot;</span></span><br></pre></td></tr></table></figure>



<h4 id="问题4：ftp-被动模式依赖iptable服务"><a href="#问题4：ftp-被动模式依赖iptable服务" class="headerlink" title="问题4：ftp 被动模式依赖iptable服务"></a>问题4：ftp 被动模式依赖iptable服务</h4>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>greenDAO3.1框架（一）认识</title>
    <url>/2016/08/27/java-greendao3-1-base/</url>
    <content><![CDATA[<h1 id="主流的ORM框架"><a href="#主流的ORM框架" class="headerlink" title="主流的ORM框架"></a>主流的ORM框架</h1><blockquote>
<ul>
<li>LitePal</li>
<li>AFinal</li>
<li>greenDAO<br><a href="http://www.jianshu.com/p/8287873d97cd">区别与性能分析</a></li>
</ul>
</blockquote>
<h1 id="greenDAO"><a href="#greenDAO" class="headerlink" title="greenDAO"></a>greenDAO</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>greenDAO是一种Android数据库ORM（object/relational mapping）框架，与OrmLite、ActiveOrm、LitePal等数据库相比，单位时间内可以插入、更新和查询更多的数据，而且提供了大量的灵活通用接口。<br><a href="https://github.com/greenrobot/greenDAO">源码github</a><br><a href="http://greenrobot.org/greendao/">官网</a></p>
<h2 id="GreenDao-3-0改动："><a href="#GreenDao-3-0改动：" class="headerlink" title="GreenDao 3.0改动："></a>GreenDao 3.0改动：</h2><p>   使用过GreenDao的同学都知道，3.0之前需要通过新建GreenDaoGenerator工程生成Java数据对象（实体）和DAO对象，非常的繁琐而且也加大了使用成本。</p>
<p>GreenDao  3.0最大的变化就是采用注解的方式通过编译方式生成Java数据对象和DAO对象。</p>
]]></content>
      <categories>
        <category>greenDAO</category>
      </categories>
      <tags>
        <tag>greenDAO</tag>
        <tag>ORM</tag>
      </tags>
  </entry>
  <entry>
    <title>greenDAO3.1框架（三）常用注解</title>
    <url>/2016/08/27/java-greendao3-3-common/</url>
    <content><![CDATA[<h3 id="类注解"><a href="#类注解" class="headerlink" title="类注解"></a>类注解</h3><blockquote>
<ul>
<li><em>@Entity</em> 标记了一个Java类作为一个greenDAO实体</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基本属性注解"><a href="#基本属性注解" class="headerlink" title="基本属性注解"></a>基本属性注解</h3><blockquote>
<ul>
<li><em>@Id</em> 必须是long类型，在数据库作为主键，参数autoincrement是否自增</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Id(autoincrement = true)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><em>@Property</em> 指定改字段的列名，如果不指定将使用默认值（eg:customName对应数据库列名为CUSTOM_NAME）</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Property(nameInDb = &quot;USER_NAME&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String customName;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><em>@Transient</em> 这个属性将不会作为数据表中的一个字段</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> tempUsageCount;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><em>@NotNull</em> 该字段不能为null（作用于long, int, short, byte类型）</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> repos;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><em>@Index</em> 索引(unique唯一)</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Index(unique = true)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><em>@Unique</em> 添加唯一键（隐含为其创建了一个索引）</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Unique</span> <span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>知识点：int 是基本类型，直接存数值，而integer是对象，用一个引用指向这个对象<br>问题描述：在实体类用int等基本类型，默认不标记注解，在建数据库也会全部设置NOT NULL<br>解决：因此需要在实体类里写对象类型。<br>2016-11-29 16:18:24 发现使用中文字段名默认生成为ANSI,出现乱码，尽量使用因为的字段别名</p>
]]></content>
      <categories>
        <category>greenDAO</category>
      </categories>
      <tags>
        <tag>greenDAO</tag>
        <tag>ORM</tag>
      </tags>
  </entry>
  <entry>
    <title>greenDAO3.1框架（四）添加全局初始化及基本使用</title>
    <url>/2016/08/31/java-greendao3-4-init-use/</url>
    <content><![CDATA[<h3 id="全局初始化greenDAO设置"><a href="#全局初始化greenDAO设置" class="headerlink" title="全局初始化greenDAO设置"></a>全局初始化greenDAO设置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserGlobalApp</span> <span class="keyword">extends</span> <span class="title">Application</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UserGlobalApp application;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String dbName = <span class="string">&quot;HiJia&quot;</span>; <span class="comment">//数据库名字</span></span><br><span class="line">    <span class="comment">/** A flag to show how easily you can switch from standard SQLite to the encrypted SQLCipher. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> ENCRYPTED = <span class="keyword">false</span>;  <span class="comment">//改为true需要加入包compile &#x27;net.zetetic:android-database-sqlcipher:3.5.1&#x27;</span></span><br><span class="line">    <span class="keyword">private</span> DaoSession daoSession;</span><br><span class="line">	  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        application=<span class="keyword">this</span>;</span><br><span class="line">       initDb();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 初始化greenDao</span></span><br><span class="line"><span class="comment">     * 数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDb</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DaoMaster.DevOpenHelper helper = <span class="keyword">new</span> DaoMaster.DevOpenHelper(<span class="keyword">this</span>, ENCRYPTED ? dbName+<span class="string">&quot;-encrypted.db&quot;</span> : dbName+<span class="string">&quot;.db&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">    Database db = ENCRYPTED ? helper.getEncryptedWritableDb(<span class="string">&quot;super-secret&quot;</span>) : helper.getWritableDb();</span><br><span class="line">    daoSession = <span class="keyword">new</span> DaoMaster(db).newSession();</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DaoSession <span class="title">getDaoSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> daoSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserGlobalApp <span class="title">getApplication</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> application;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>添加数据，查询数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserGlobalApp.getApplication().getDaoSession().getTrackPointDao().insert(<span class="keyword">new</span> TrackPoint((<span class="keyword">long</span>) <span class="number">10</span>,System.currentTimeMillis(),<span class="number">10.01</span>,<span class="number">10.02</span>,<span class="number">1</span>));</span><br><span class="line">Log.i(<span class="string">&quot;sssss&quot;</span>,<span class="string">&quot;&quot;</span>+UserGlobalApp.getApplication().getDaoSession().getTrackPointDao().loadAll().size());</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="生成的dao目录配置（非必须）"><a href="#生成的dao目录配置（非必须）" class="headerlink" title="生成的dao目录配置（非必须）"></a>生成的dao目录配置（非必须）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;------------greenDAO数据库配置-----------</span><br><span class="line">greendao &#123;</span><br><span class="line">    schemaVersion 1   &#x2F;&#x2F;数据库版本</span><br><span class="line">    daoPackage&#39;com.xuan.bledemo.db.greendao&#39;  &#x2F;&#x2F;dao的存放目录</span><br><span class="line">    targetGenDir&#39;src&#x2F;main&#x2F;java&#39; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>数据库加密问题<br>在全局配置中如果要加密，要设置为true，但是设置为ture会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> ENCRYPTED = <span class="keyword">false</span>;  <span class="comment">//改为true需要加入包compile </span></span><br></pre></td></tr></table></figure>
<p>解决：因为没有加密包，需要添加依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile &#39;net.zetetic:android-database-sqlcipher:3.5.1&#39;</span><br></pre></td></tr></table></figure>

<h1 id="数据库路径设置"><a href="#数据库路径设置" class="headerlink" title="数据库路径设置"></a>数据库路径设置</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File path=<span class="keyword">new</span> File(Environment.getExternalStorageDirectory(),<span class="string">&quot;BleDemo/db/&quot;</span>+dbName);  <span class="comment">//设置存储路径</span></span><br><span class="line">path.getParentFile().mkdirs();</span><br><span class="line">DaoMaster.DevOpenHelper helper = <span class="keyword">new</span> DaoMaster.DevOpenHelper(<span class="keyword">this</span>, ENCRYPTED ? path.getAbsolutePath()+<span class="string">&quot;-encrypted.db&quot;</span> : path.getAbsolutePath()+<span class="string">&quot;.db&quot;</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>greenDAO</category>
      </categories>
      <tags>
        <tag>greenDAO</tag>
        <tag>ORM</tag>
        <tag>application</tag>
        <tag>path</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面试总结</title>
    <url>/2018/04/08/java-interview-summary/</url>
    <content><![CDATA[<h2 id="面试百问"><a href="#面试百问" class="headerlink" title="面试百问"></a>面试百问</h2><ol>
<li><p>Http2.0与http1.0</p>
<ul>
<li>性能大幅提升</li>
<li>多路复用</li>
<li>header压缩</li>
</ul>
</li>
<li><p>重写equals为何要重写hashcode</p>
<p>hashcode:是jdk根据对象的地址或者字符串或者数字算出来的int类型的数值。</p>
<p>实战：向<code>HashSet</code>添加对象，自动去除重复的对象</p>
<p>原理：<code>HashSet</code> 的 <code>add</code> 方法判断两个对象是否“相同”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">q[hashset.add对象]--&gt;a&#123;调用对象内hashCode判断&#125;</span><br><span class="line">a--&gt;|相等|b&#123;调用对象内equlas判断&#125;</span><br><span class="line">a--&gt;|不相等|c[添加到集合hashset]</span><br><span class="line">b--&gt;|相等|d[不添加对象到hashset]</span><br><span class="line">b--&gt;|不相等|c</span><br></pre></td></tr></table></figure>

<p>举例测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet&lt;Xy&gt; xys=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">xys.add(<span class="keyword">new</span> Xy(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">xys.add(<span class="keyword">new</span> Xy(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">xys.add(<span class="keyword">new</span> Xy(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">System.out.print(xys.toString()); <span class="comment">//输出[&#123;2,2&#125;, &#123;1,2&#125;]</span></span><br><span class="line"> System.out.print(<span class="keyword">new</span> Xy(<span class="number">1</span>,<span class="number">2</span>).equals(<span class="keyword">new</span> Xy(<span class="number">1</span>,<span class="number">2</span>))); <span class="comment">//输出true</span></span><br></pre></td></tr></table></figure>

<p>对象类的实现必须覆写<code>equals</code>和<code>hashCode</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Xy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">    Xy(<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;</span><br><span class="line">        <span class="keyword">this</span>.x=x;</span><br><span class="line">        <span class="keyword">this</span>.y=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(x,y); <span class="comment">//生成hashcode，只要保证不同的值生成不同的hashcode即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Xy))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Xy test= (Xy) obj;</span><br><span class="line">        <span class="keyword">return</span> (test.x == x) &amp;&amp; (y == test.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&quot;</span>+x+<span class="string">&quot;,&quot;</span>+y+<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>java对象的生命周期</p>
<ol>
<li>创建阶段(created) <code>分配存储空间-&gt;构造对象-&gt;static初始化(超类到子类)-&gt;变量构造方法初始化(超到子类)</code></li>
<li>应用阶段(InUse)<code>至少被一个强引用持有（Object object=new Object();）</code></li>
<li>不可见阶段(Invisible)<code>不在被任何强引用持有(但是可能被jvm持有),超出对象作用域(方法内定义了变量,方法外该变量就是不可见,编译报错)</code></li>
<li>不可达阶段(Unreachable)<code>不在被任何强引用持有</code></li>
<li>收集阶段(collected)<code>已经被垃圾回收器发现,会调用finazlie方法,所以一般不要重写,会影响垃圾回收</code></li>
<li>终结阶段(Finalized)<code>对象执行完finazlie仍处于不可达，则进入该阶段等待垃圾回收</code></li>
<li>对象空间重写分配阶段(Deallocated)<code>垃圾已经回收，空间处于再分配状态</code></li>
</ol>
</li>
<li><p>java创建对象的几种方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User(); <span class="comment">//new方式</span></span><br><span class="line">User user = User.class.newInstance(); <span class="comment">//反射方式1.newInstance,无参的构造对象</span></span><br><span class="line">Constructor&lt;User&gt; constructor = User.class.getConstructor();</span><br><span class="line">User user = constructor.newInstance(); <span class="comment">//反射方式2.Constructor 有参构造对象</span></span><br><span class="line"><span class="comment">//public class CloneTest implements Cloneable&#123;&#125; //clone需要实现该接口</span></span><br><span class="line">CloneTest copyClone = (CloneTest) cloneTest.clone(); <span class="comment">//clone浅克隆，深克隆(含内部自定义对象)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Serializable</span>//反序列化,文件反序列化为对象</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>反射invoke</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正常的调用</span></span><br><span class="line">Xy xy = <span class="keyword">new</span> Xy();</span><br><span class="line">xy.setX(<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;xy x:&quot;</span> + xy.getX());</span><br><span class="line"><span class="comment">//使用反射调用</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class xy2 = Class.forName(<span class="string">&quot;com.example.demo.Xy&quot;</span>); <span class="comment">//找到class</span></span><br><span class="line">    Method setxMethod = xy2.getMethod(<span class="string">&quot;setX&quot;</span>, <span class="keyword">int</span>.class); <span class="comment">//获得set方法</span></span><br><span class="line">    Object xyObj = xy2.newInstance();<span class="comment">//必须有不带参的构造(不然运行InstantiationException)</span></span><br><span class="line">    setxMethod.invoke(xyObj, <span class="number">5</span>);  <span class="comment">//调用set方法</span></span><br><span class="line">    Method getXMethod = xy2.getMethod(<span class="string">&quot;getX&quot;</span>); <span class="comment">//获得get方法</span></span><br><span class="line">    System.out.println(<span class="string">&quot;xy x:&quot;</span> + getXMethod.invoke(xyObj)); <span class="comment">//调用get方法</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>集合<code>Collections</code></p>
<ul>
<li><code>List </code>有序可重复对象,<code>Arraylist</code>存读效率高(数组存储方式)，<code>LinkedList</code>大数据插入删除效率高(双向循环链表)，<code>Vector</code>同步（现场安全），<code>Arraylist</code>非同步</li>
</ul>
</li>
</ol>
<ul>
<li><p><code>Map</code> 键值对，key不可重复，<code>HashMap</code>非线程安全，<code>Hashtable</code>线程安全(<code>ConcurrentHashMap</code>升级版)，<code>HashSet</code>元素唯一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);list.add(<span class="number">2</span>);list.add(<span class="number">3</span>);</span><br><span class="line">List&lt;Integer&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list2.add(<span class="number">2</span>);list2.add(<span class="number">3</span>);list2.add(<span class="number">4</span>);</span><br><span class="line">list.addAll(list2);  <span class="comment">//并集(123234)</span></span><br><span class="line">list.retainAll(list2);  <span class="comment">//交集(23)</span></span><br><span class="line">list.removeAll(list2);  <span class="comment">//差集(1)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Set </code>不允许重复</p>
<p>Q1:list找出重复元素，java8(Stream),hashmap,去重(set),然后转换list，差集得出重复元素</p>
<p>Q2:list排序重写<code>Comparator定制排序</code></p>
</li>
</ul>
<ol start="7">
<li><p>多线程</p>
<p>​</p>
</li>
<li><p>线程安全</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-jconsole</title>
    <url>/2020/05/27/java-jconsole/</url>
    <content><![CDATA[<h2 id="springboot-配置jconsole"><a href="#springboot-配置jconsole" class="headerlink" title="springboot 配置jconsole"></a>springboot 配置jconsole</h2><ol>
<li>设置远程连接访问密码</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看java安装目录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 切换到java安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/jvm/jdk1.8.0_77/jre/lib/management</span><br><span class="line"><span class="comment"># 创建一个密码文件</span></span><br><span class="line">cp jmxremote.password.template jmxremote.password</span><br><span class="line"><span class="comment"># 添加文件可写权限</span></span><br><span class="line">chmod +x jmxremote.password</span><br><span class="line"><span class="comment"># 取消最后两行注释 monitorRole  QED  和controlRole   R&amp;D</span></span><br><span class="line">vim jmxremote.password</span><br><span class="line"><span class="comment"># 修改文件权限为400或600解决启动`错误: 必须限制口令文件读取访问`</span></span><br><span class="line">chmod 400 jmxremote.password</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改启动命令，启动springboot</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#方式一</span></span><br><span class="line"><span class="comment">##环境变量</span></span><br><span class="line">JAVA_OPTS=<span class="string">&#x27;-Djava.rmi.server.hostname=当前服务器公网ip </span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=8888 </span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.rmi.port=8888 </span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.authenticate=true </span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.ssl=false&#x27;</span></span><br><span class="line"><span class="comment">##启动命令</span></span><br><span class="line">java <span class="variable">$JAVA_OPTS</span> -jar springboot.jar</span><br><span class="line"><span class="comment">#方式二 直接在启动命令里面加，不通过环境变量</span></span><br><span class="line">java Djava.rmi.server.hostname=当前服务器公网ip </span><br><span class="line">-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=8888 </span><br><span class="line">-Dcom.sun.management.jmxremote.rmi.port=8888 </span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=<span class="literal">true</span> </span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=<span class="literal">false</span></span><br><span class="line">-jar springboot.jar</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>在本地启动jconsole</p>
<p>终端里面执行<code>jconsole</code>就会打开jconsole</p>
<p>然后选择远程连接，输入ip:端口 eg:10.10.10.11:8888然后输入用户名(monitorRole)和密码(QED)或者用户名：controlRole密码：R&amp;D</p>
</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/Box_clf/article/details/88344631">基于Springboot项目使用jconsole远程监控JVM</a></p>
<p><a href="https://blog.csdn.net/yejin191258966/article/details/100097592">Linux 错误: 必须限制口令文件读取访问: /sy/java/jdk1.6.0_26/jre/lib/management/jmxremote.password</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>jvm</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-JVM</title>
    <url>/2018/08/20/java-jvm/</url>
    <content><![CDATA[<h2 id="JVM-基本参数"><a href="#JVM-基本参数" class="headerlink" title="JVM 基本参数"></a>JVM 基本参数</h2><ul>
<li><p><code>-Xmx</code>  : <strong>运行最大内存</strong>（memory maximum）</p>
<p>是指设定程序运行期间最大可占用的内存大小。如果程序运行需要占用更多的内存，超出了这个设置值，就会抛出OutOfMemory异常。堆的最大内存数，等同于-XX:MaxHeapSize</p>
</li>
<li><p><code>-Xms</code>：<strong>启动内存</strong>(memory startup)</p>
<p>是指设定程序启动时占用内存大小。一般来讲，大点，程序会启动的快一点，但是也可能会导致机器暂时间变慢。堆的初始化初始化大小</p>
</li>
<li><p><code>-Xmn</code> ：(memory nursery/new)</p>
<p>堆中新生代初始及最大大小，如果需要进一步细化，初始化大小用-XX:NewSize，最大大小用-XX:MaxNewSize</p>
</li>
<li><p><code>-Xss</code> ：(stack size)</p>
<p>线程栈大小，等同于-XX:ThreadStackSize</p>
</li>
</ul>
<h4 id="jvm设置的值查看"><a href="#jvm设置的值查看" class="headerlink" title="jvm设置的值查看"></a>jvm设置的值查看</h4><p>执行<code>ps -ef | grep tomcat</code>或<code>ps -ef | grep java</code>输出如下</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">root      <span class="number">1882</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">8</span>月<span class="number">02</span> ?       <span class="number">01</span>:<span class="number">39</span>:<span class="number">42</span> /root/SoftwareInstall/jdk/bin/java -Djava<span class="variable">.util</span><span class="variable">.logging</span><span class="variable">.config</span><span class="variable">.file</span>=/usr/<span class="keyword">local</span>/tomcat-geoserver/conf/logging<span class="variable">.properties</span> -Djava<span class="variable">.util</span><span class="variable">.logging</span><span class="variable">.manager</span>=org<span class="variable">.apache</span><span class="variable">.juli</span><span class="variable">.ClassLoaderLogManager</span> -server </span><br><span class="line">-Xms3072M -Xmx3072M -Xmn512M -Xss512k </span><br><span class="line">-XX:+AggressiveOpts -</span><br><span class="line">.....    </span><br><span class="line">org<span class="variable">.apache</span><span class="variable">.catalina</span><span class="variable">.startup</span><span class="variable">.Bootstrap</span> start</span><br></pre></td></tr></table></figure>

<p>如果没有设置，默认是不会有<code>-Xms3072M -Xmx3072M -Xmn512M -Xss512k</code>值打印</p>
<h4 id="docker-compose设置jvm"><a href="#docker-compose设置jvm" class="headerlink" title="docker-compose设置jvm"></a>docker-compose设置jvm</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">environment:</span><br><span class="line">  - JAVA_OPTS= <span class="string">&#x27;-Xmx3072m&#x27;</span> </span><br></pre></td></tr></table></figure>

<h2 id="JVM问题总结"><a href="#JVM问题总结" class="headerlink" title="JVM问题总结"></a>JVM问题总结</h2><ol>
<li><p>geoserver添加图层预览时提示<code>java.lang.OutOfMemoryError: GC overhead limit exceeded</code>该错误</p>
<p>解决把<code>-Xmx</code>设置更大</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-protobuf</title>
    <url>/2019/02/15/java-protobuf/</url>
    <content><![CDATA[<h3 id="protobuf介绍"><a href="#protobuf介绍" class="headerlink" title="protobuf介绍"></a>protobuf介绍</h3><p>就是一种</p>
<h3 id="protobuf简单测试"><a href="#protobuf简单测试" class="headerlink" title="protobuf简单测试"></a>protobuf简单测试</h3><p>项目源码见<a href="https://github.com/xuanfong1/springLeaning/tree/master/protobuf">xuanfong1/springLeaning/protobuf</a></p>
<ol>
<li><p>在项目引入maven/gradle依赖<code>compile &#39;com.google.protobuf:protobuf-java:3.6.1&#39;</code></p>
</li>
<li><p>下载<a href="https://github.com/protocolbuffers/protobuf/releases">代码生成工具</a>，作用是将<code>file.proto</code>文件转换成其他语言（java/C++/GO/Python/C#/Dart）的文件,eg：这里选择window平台，版本和maven版本一致，因此选择<a href="https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protoc-3.6.1-win32.zip">protoc-3.6.1-win32.zip</a>,其他操作系统选择对应平台即可,然后解压，在bin目录可以看到<code>protoc.exe</code>文件，复制重命名<code>protoc-3.6.1-win32.exe</code>为了好区分版本，其他文件用不着</p>
</li>
<li><p>编写一个测试<code>PersonMsg.proto</code>文件</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ID（必需）</span></span><br><span class="line">    <span class="keyword">required</span> <span class="built_in">int32</span> id = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 姓名（必需）</span></span><br><span class="line">    <span class="keyword">required</span> <span class="built_in">string</span> name = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// email（可选）</span></span><br><span class="line">    <span class="keyword">optional</span> <span class="built_in">string</span> email = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 朋友（集合）</span></span><br><span class="line">    <span class="keyword">repeated</span> <span class="built_in">string</span> friends = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用工具进行java代码生成，执行<code>.\protobuf\protoc-3.6.1-win32.exe --java_out=.\protobuf\src\main\java\com\exxk\protobuf\  .\protobuf\src\test\protobuf\PersonMsg.proto</code></p>
<p>注意，这里生成的代码<code>PersonMsg.java</code>里面是没有包名的，可以手动加入</p>
</li>
<li><p>在<code>ProtobufApplicationTests.java</code>编写测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="comment">//@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtobufApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 按照定义的数据结构，创建一个Person</span></span><br><span class="line">        PersonMsg.Person.Builder personBuilder = PersonMsg.Person.newBuilder();</span><br><span class="line">        personBuilder.setId(<span class="number">1</span>);</span><br><span class="line">        personBuilder.setName(<span class="string">&quot;叉叉哥&quot;</span>);</span><br><span class="line">        personBuilder.setEmail(<span class="string">&quot;xxg@163.com&quot;</span>);</span><br><span class="line">        personBuilder.addFriends(<span class="string">&quot;Friend A&quot;</span>);</span><br><span class="line">        personBuilder.addFriends(<span class="string">&quot;Friend B&quot;</span>);</span><br><span class="line">        PersonMsg.Person xxg = personBuilder.build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数据写到输出流，如网络输出流，这里就用ByteArrayOutputStream来代替</span></span><br><span class="line">        ByteArrayOutputStream output = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            xxg.writeTo(output);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// -------------- 分割线：上面是发送方，将数据序列化后发送 ---------------</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] byteArray = output.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// -------------- 分割线：下面是接收方，将数据接收后反序列化 ---------------</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收到流并读取，如网络输入流，这里用ByteArrayInputStream来代替</span></span><br><span class="line">        ByteArrayInputStream input = <span class="keyword">new</span> ByteArrayInputStream(byteArray);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        PersonMsg.Person xxg2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            xxg2 = PersonMsg.Person.parseFrom(input);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;ID:&quot;</span> + xxg2.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + xxg2.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;email:&quot;</span> + xxg2.getEmail());</span><br><span class="line">        System.out.println(<span class="string">&quot;friend:&quot;</span>);</span><br><span class="line">        List&lt;String&gt; friends = xxg2.getFriendsList();</span><br><span class="line">        <span class="keyword">for</span>(String friend : friends) &#123;</span><br><span class="line">            System.out.println(friend);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置自动生成包名，修改<code>PersonMsg.proto</code>文件</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定编译版本2或3</span></span><br><span class="line">syntax = <span class="string">&quot;proto2&quot;</span>;</span><br><span class="line"><span class="comment">//当前包名</span></span><br><span class="line"><span class="keyword">package</span> PersonMsg;</span><br><span class="line"><span class="comment">//包路径</span></span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">&quot;com.exxk.protobuf&quot;</span>;</span><br><span class="line"><span class="comment">//类名</span></span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;PersonMsg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ID（必需）</span></span><br><span class="line">    <span class="keyword">required</span> <span class="built_in">int32</span> id = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 姓名（必需）</span></span><br><span class="line">    <span class="keyword">required</span> <span class="built_in">string</span> name = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// email（可选）</span></span><br><span class="line">    <span class="keyword">optional</span> <span class="built_in">string</span> email = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 朋友（集合）</span></span><br><span class="line">    <span class="keyword">repeated</span> <span class="built_in">string</span> friends = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">car</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改命令<code>.\protobuf\protoc-3.6.1-win32.exe --java_out=.\protobuf\src\main\java\  .\protobuf\src\test\protobuf\PersonMsg.proto</code></p>
</li>
</ol>
<h3 id="protoc-gradle插件"><a href="#protoc-gradle插件" class="headerlink" title="protoc gradle插件"></a>protoc gradle插件</h3><p>插件地址：<a href="https://github.com/google/protobuf-gradle-plugin#latest-version">google/protobuf-gradle-plugin</a></p>
<ol>
<li><p>在父级<code>build.gradle</code>添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">  &#125;</span><br><span class="line">  dependencies &#123;</span><br><span class="line">    classpath <span class="string">&#x27;com.google.protobuf:protobuf-gradle-plugin:0.8.8&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子项目<code>build.gradle</code>添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.google.protobuf&#x27;</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">&#x27;com.google.protobuf:protobuf-java:3.6.1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        proto &#123;</span><br><span class="line">            <span class="comment">// In addition to the default &#x27;src/main/proto&#x27;</span></span><br><span class="line">            <span class="comment">//proto输入目录</span></span><br><span class="line">            srcDir <span class="string">&#x27;src/main/protobuf&#x27;</span></span><br><span class="line">            srcDir <span class="string">&#x27;src/main/protocolbuffers&#x27;</span></span><br><span class="line">            srcDir <span class="string">&#x27;src/main/protocol buffers&#x27;</span></span><br><span class="line">            <span class="comment">// In addition to &#x27;**/*.proto&#x27; (use with caution).</span></span><br><span class="line">            <span class="comment">// Using an extension other than &#x27;proto&#x27; is NOT recommended, because when</span></span><br><span class="line">            <span class="comment">// proto files are published along with class files, we can only tell the</span></span><br><span class="line">            <span class="comment">// type of a file from its extension.</span></span><br><span class="line">            include <span class="string">&#x27;**/*.protodevel&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    test &#123;</span><br><span class="line">        proto &#123;</span><br><span class="line">            <span class="comment">// In addition to the default &#x27;src/test/proto&#x27;</span></span><br><span class="line">            srcDir <span class="string">&#x27;src/test/protocolbuffers&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">protobuf &#123;</span><br><span class="line">    <span class="comment">//输出目录</span></span><br><span class="line">    generatedFilesBaseDir = <span class="string">&quot;$projectDir/src&quot;</span></span><br><span class="line">    protoc &#123;</span><br><span class="line">        <span class="comment">//protoc编译版本</span></span><br><span class="line">        artifact = <span class="string">&#x27;com.google.protobuf:protoc:3.0.0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后点击右侧gradle<code>protobuf-&gt;Tasks-&gt;other-&gt;generateProto</code>编译proto文件生成java文件</p>
</li>
</ol>
<h3 id="protoc-maven插件"><a href="#protoc-maven插件" class="headerlink" title="protoc maven插件"></a>protoc maven插件</h3><p>解决不同平台开发编译问题，功能能实现自动根据不同系统(os/win/linux)调用不同的protoc工具</p>
<h3 id="插件一os72-protoc-jar-maven-plugin"><a href="#插件一os72-protoc-jar-maven-plugin" class="headerlink" title="插件一os72/protoc-jar-maven-plugin"></a>插件一<a href="https://github.com/os72/protoc-jar-maven-plugin">os72/protoc-jar-maven-plugin</a></h3><p>配置更改一直不生效，一直使用最新的3.6.0版本的protoc工具</p>
<h3 id="插件二org-xolstice-maven-plugins-protobuf-maven-plugin"><a href="#插件二org-xolstice-maven-plugins-protobuf-maven-plugin" class="headerlink" title="插件二org.xolstice.maven.plugins/protobuf-maven-plugin"></a>插件二<a href="https://www.xolstice.org/protobuf-maven-plugin/">org.xolstice.maven.plugins/protobuf-maven-plugin</a></h3><p><a href="https://my.oschina.net/u/573325/blog/1617416">Maven工程处理Protobuf</a></p>
<p>目录结构：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│  │  ├─java //proto生成java文件目录</span><br><span class="line">│  │  │  └─com</span><br><span class="line">│  │  │      └─surelive</span><br><span class="line">│  │  │          └─app</span><br><span class="line">│  │  │              └─server</span><br><span class="line">│  │  │                  └─protocol</span><br><span class="line">│  │  │                      ├─request  </span><br><span class="line">│  │  │                      └─response</span><br><span class="line">│  │  └─resources </span><br><span class="line">│  │      └─proto //proto文件目录</span><br><span class="line">│  │          ├─request</span><br><span class="line">│  │          └─response</span><br><span class="line">│  └─test</span><br><span class="line">│      └─java</span><br><span class="line">├─pom.xml</span><br></pre></td></tr></table></figure>



<p>编写<code>pom.xml</code>添加插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span>    </span><br><span class="line">    ....</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">defaultGoal</span>&gt;</span>package<span class="tag">&lt;/<span class="name">defaultGoal</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--识别系统类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>kr.motd.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>os-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- protobuf 编译组件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xolstice.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--proto源文件目录--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">protoSourceRoot</span>&gt;</span>$&#123;project.basedir&#125;/src/main/proto<span class="tag">&lt;/<span class="name">protoSourceRoot</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--输出目录--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/java<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--设置是否在生成java文件之前清空outputDirectory的文件，默认值为true，设置为false时也会覆盖同名文件--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">clearOutputDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">clearOutputDirectory</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--编译命令及版本，$&#123;os.detected.classifier&#125;识别版本号，依赖os-maven-plugin插件--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">protocArtifact</span>&gt;</span>com.google.protobuf:protoc:2.5.0:exe:$&#123;os.detected.classifier&#125;<span class="tag">&lt;/<span class="name">protocArtifact</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用，点击右侧插件里面的<code>protobuf-&gt;protobuf:compile</code>或者执行<code>mvn protobuf:compile</code></p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ol>
<li>不添加输出目录识别不了多级目录（奇怪）</li>
<li>设置目录<code>protoSourceRoot</code>目录是，是以该目录为相对路径，因此代码里面的<code>import &quot;response/xxx.proto</code>要加上<code>response</code>二级目录，但是如果可以设置protoSourceRoot为两个或二级目录就不需要修改，<code>clearOutputDirectory</code>设置true，也不会清理其他目录中其他文件</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>protobuf</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-remote-debug</title>
    <url>/2018/12/20/java-remote-debug/</url>
    <content><![CDATA[<h2 id="idea远程debug总结"><a href="#idea远程debug总结" class="headerlink" title="idea远程debug总结"></a>idea远程debug总结</h2><h4 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h4><p>启动参数添加<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</code></p>
<p>docker环境配置:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005&quot;</span>,<span class="string">&quot;-Dspring.profiles.active=sit&quot;</span>,<span class="string">&quot;app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p><a href="https://jingyan.baidu.com/article/4ae03de3ca29393eff9e6b8d.html">idea springboot 远程调试模式之本地</a><br><a href="https://jingyan.baidu.com/article/6181c3e0d1f3a8152ef1538d.html">idea基于springboot远程调试之docker环境</a></p>
<h4 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h4><p><code>catalina.sh</code>文件添加<code>CATALINA_OPTS=&quot;-Xdebug -Xrunjdwp:transport=dt_socket,address=5005,suspend=n,server=y&quot;</code></p>
<p>docker环境配置:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">environment:</span><br><span class="line">  CATALINA_OPTS: <span class="string">&quot;-Xdebug -Xrunjdwp:transport=dt_socket,address=5005,suspend=n,server=y&quot;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>ieda</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>Retrofit学习之一介绍</title>
    <url>/2016/08/25/java-retrofit-1-base/</url>
    <content><![CDATA[<h1 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h1><p>当前的网络开源库有许多，如volley，okhttp，retrofit等，这三个库当前是比较火的，其中，okhttp和retrofit由square团队开发。</p>
<blockquote>
<ul>
<li>okhttp是高性能的http库，等同于httpclient,6.0将替换httpclient</li>
<li>简化了网络请求流程，同时自己内部对OkHtttp客户端做了封装</li>
<li>gson库是为了将返回数据转化为实体类</li>
</ul>
</blockquote>
<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><h3 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a><a href="http://square.github.io/retrofit/">Retrofit</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile &#39;com.squareup.retrofit2:retrofit:2.1.0&#39;</span><br></pre></td></tr></table></figure>
<h3 id="gson"><a href="#gson" class="headerlink" title="gson"></a>gson</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;将请求结果转换成json的json转换包，如果导入了这个依赖，就不用再导入Gson包，因为这个已经包含了Gson包</span><br><span class="line">compile &#39;com.squareup.retrofit2:converter-gson:2.1.0&#39;</span><br></pre></td></tr></table></figure>
<h3 id="网络权限"><a href="#网络权限" class="headerlink" title="网络权限"></a>网络权限</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用于访问网络，网络定位需要上网 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Retrofit</category>
      </categories>
      <tags>
        <tag>网络框架</tag>
        <tag>Retrofit</tag>
      </tags>
  </entry>
  <entry>
    <title>Retrofit学习之二请求json</title>
    <url>/2016/08/25/java-retrofit-2-json/</url>
    <content><![CDATA[<h1 id="创建json对应得实体类"><a href="#创建json对应得实体类" class="headerlink" title="创建json对应得实体类"></a>创建json对应得实体类</h1><p>测试网址：<a href="http://api.zdoz.net/DDD2DMS.aspx?gps=108.2345">http://api.zdoz.net/DDD2DMS.aspx?gps=108.2345</a></p>
<blockquote>
<ul>
<li>新建一个实体类Test.java，把json数据通过gsonFormat插件生成对应得属性方法</li>
</ul>
</blockquote>
<h1 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h1><blockquote>
<ul>
<li>新建一个接口类Itest.java</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Itest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GET(&quot;DDD2DMS.aspx&quot;)</span></span><br><span class="line">    <span class="function">Call&lt;Test&gt; <span class="title">getTest</span><span class="params">(<span class="meta">@Query(&quot;gps&quot;)</span> <span class="keyword">double</span> gps)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="请求json数据"><a href="#请求json数据" class="headerlink" title="请求json数据"></a>请求json数据</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Retrofit retrofit=<span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">		<span class="comment">//如果是json数据必须加这句</span></span><br><span class="line">              .addConverterFactory(GsonConverterFactory.create())  </span><br><span class="line">              .baseUrl(<span class="string">&quot;http://api.zdoz.net/&quot;</span>)</span><br><span class="line">		.build();</span><br><span class="line">      Itest itest=retrofit.create(Itest.class);</span><br><span class="line">      Call&lt;Test&gt; testCall= itest.getTest(<span class="number">108.2345</span>);</span><br><span class="line">      testCall.enqueue(<span class="keyword">new</span> Callback&lt;Test&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;Test&gt; call, Response&lt;Test&gt; response)</span> </span>&#123;</span><br><span class="line">             Log.e(<span class="string">&quot;得到得json数据&quot;</span>,<span class="string">&quot;&quot;</span>+response.body().getD());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;Test&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h3><blockquote>
<ul>
<li>enqueue 异步请求</li>
<li>execute 同步请求</li>
<li>baseUrl参数以’/‘结束</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Retrofit</category>
      </categories>
      <tags>
        <tag>网络框架</tag>
        <tag>Retrofit</tag>
      </tags>
  </entry>
  <entry>
    <title>Retrofit学习之三离线缓存</title>
    <url>/2016/08/26/java-retrofit-3-cache/</url>
    <content><![CDATA[<h2 id="创建拦截器（Interceptor）"><a href="#创建拦截器（Interceptor）" class="headerlink" title="创建拦截器（Interceptor）"></a>创建拦截器（Interceptor）</h2><p>可以分开写两个拦截器一个有网的一个离线的，这里只写了一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建拦截器（Interceptor）</span></span><br><span class="line">Interceptor REWRITE_CACHE_CONTROL_INTERCEPTOR = <span class="keyword">new</span> Interceptor() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> okhttp3.<span class="function">Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        okhttp3.Response originalResponse = chain.proceed(chain.request());</span><br><span class="line">        <span class="keyword">if</span> (com.xuan.bledemo.util.Utils.isNetworkAvailable(MainActivity.<span class="keyword">this</span>)) &#123;   <span class="comment">//判断是否有网络判断</span></span><br><span class="line">            <span class="keyword">int</span> maxAge = <span class="number">60</span>; <span class="comment">//在线缓存在一分钟内读取</span></span><br><span class="line">            Log.i(<span class="string">&quot;缓存测试&quot;</span>, <span class="string">&quot;在线&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> originalResponse.newBuilder()</span><br><span class="line">                    .removeHeader(<span class="string">&quot;Pragma&quot;</span>)   <span class="comment">//作用未知</span></span><br><span class="line">                    .header(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;public,max-age=&quot;</span> + maxAge)</span><br><span class="line">                    .build();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> maxStale = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">28</span>; <span class="comment">//离线时缓存保存4周</span></span><br><span class="line">            Log.i(<span class="string">&quot;缓存测试&quot;</span>, <span class="string">&quot;离线&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> originalResponse.newBuilder()</span><br><span class="line">                    .removeHeader(<span class="string">&quot;Pragma&quot;</span>)</span><br><span class="line">                    .header(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;public, only-if-cached, max-stale=&quot;</span> + maxStale)</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="设置缓存文件"><a href="#设置缓存文件" class="headerlink" title="设置缓存文件"></a>设置缓存文件</h2><p>问题？关于缓存文件在手机上的地方，目前未找到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置缓存文件</span></span><br><span class="line">File cacheFile=<span class="keyword">new</span> File(<span class="keyword">this</span>.getCacheDir(),<span class="string">&quot;xuanCache&quot;</span>);</span><br><span class="line">Log.i(<span class="string">&quot;缓存测试&quot;</span>,<span class="string">&quot;缓存目录&quot;</span>+<span class="keyword">this</span>.getCacheDir().getPath());</span><br><span class="line">Cache cache=<span class="keyword">new</span> Cache(cacheFile,<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">100</span>); <span class="comment">//100mb</span></span><br></pre></td></tr></table></figure>

<h2 id="创建httpclient"><a href="#创建httpclient" class="headerlink" title="创建httpclient"></a>创建httpclient</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建httpclient</span></span><br><span class="line">   OkHttpClient okHttpClient=<span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">	.cache(cache)</span><br><span class="line">	.addNetworkInterceptor(REWRITE_CACHE_CONTROL_INTERCEPTOR) <span class="comment">//添加有网过滤器</span></span><br><span class="line">	.addInterceptor(REWRITE_CACHE_CONTROL_INTERCEPTOR) <span class="comment">//添加无网络过滤器，可以分别定义</span></span><br><span class="line">	.retryOnConnectionFailure(<span class="keyword">true</span>)  <span class="comment">//出现错误时重新连接</span></span><br><span class="line">	.connectTimeout(<span class="number">5</span>, TimeUnit.SECONDS) <span class="comment">//设置超时时间</span></span><br><span class="line">	.build();</span><br></pre></td></tr></table></figure>

<h2 id="将httpclient添加到retrofit"><a href="#将httpclient添加到retrofit" class="headerlink" title="将httpclient添加到retrofit"></a>将httpclient添加到retrofit</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将http client添加到retrofit</span></span><br><span class="line">    Retrofit retrofit=<span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">    .addConverterFactory(GsonConverterFactory.create())  <span class="comment">//添加gson包</span></span><br><span class="line">    .client(okHttpClient)  <span class="comment">//添加自定义的httpclient</span></span><br><span class="line">    .baseUrl(<span class="string">&quot;http://api.zdoz.net/&quot;</span>) <span class="comment">//添加网址头,注意‘/’结尾</span></span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure>

<h2 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h2><p>第一次必须有网络，后面无网络就是请求缓存</p>
<blockquote>
<ul>
<li>enqueue 异步</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Itest itest=retrofit.create(Itest.class); <span class="comment">//接口</span></span><br><span class="line"> Call&lt;Test&gt; getCall= itest.getTest(<span class="number">108.2345</span>);   <span class="comment">//传接口参数</span></span><br><span class="line"> <span class="comment">//异步网络请求json数据</span></span><br><span class="line"> getCall.enqueue(<span class="keyword">new</span> Callback&lt;Test&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;Test&gt; call, Response&lt;Test&gt; response)</span> </span>&#123;</span><br><span class="line">        Log.e(<span class="string">&quot;缓存测试&quot;</span>,<span class="string">&quot;请求成功&quot;</span>+response.body().getD());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;Test&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line">        Log.e(<span class="string">&quot;缓存测试&quot;</span>,<span class="string">&quot;请求失败&quot;</span>+t.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="问题，未验证"><a href="#问题，未验证" class="headerlink" title="问题，未验证"></a>问题，未验证</h2><blockquote>
<ul>
<li>相当与数据库的 POST(创建)、PUT(更新)、GET(查看)、DELETE(删除)</li>
<li>缓存根据查找的资料，好像只有GET可以缓存</li>
</ul>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<ul>
<li>上述缓存，是同一缓存的配置，如果要单个请求配置，可以设置接口的head,在里面传参数，然后在统一的缓存配置中用参数动态变化没次的不同缓存策略及时间。</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Retrofit</category>
      </categories>
      <tags>
        <tag>网络框架</tag>
        <tag>Retrofit</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJava之RxBus替代EventBus</title>
    <url>/2016/09/28/java-rxjava-rxbus2eventbus/</url>
    <content><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://brucezz.itscoder.com/articles/2016/06/02/a-simple-rxbus-implementation/">RxBus 的简单实现</a></li>
<li><a href="http://www.jianshu.com/p/ca090f6e2fe2/">用RxJava实现事件总线(Event Bus)</a></li>
</ul>
<h4 id="创建RxJava-java"><a href="#创建RxJava-java" class="headerlink" title="创建RxJava.java"></a>创建RxJava.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxBus</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> RxBus instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Subject&lt;Object, Object&gt; BUS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// PublishSubject只会把在订阅发生的时间点之后来自原始Observable的数据发射给观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RxBus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BUS = <span class="keyword">new</span> SerializedSubject&lt;&gt;(PublishSubject.create());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例RxBus</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RxBus <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (RxBus.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> RxBus();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送一个新的事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        BUS.onNext(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据传递的 eventType 类型返回特定类型(eventType)的 被观察者</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">toObservable</span><span class="params">(Class&lt;T&gt; eventType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BUS.ofType(eventType);</span><br><span class="line"><span class="comment">//        这里感谢小鄧子的提醒: ofType = filter + cast</span></span><br><span class="line"><span class="comment">//        return bus.filter(new Func1&lt;Object, Boolean&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public Boolean call(Object o) &#123;</span></span><br><span class="line"><span class="comment">//                return eventType.isInstance(o);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;) .cast(eventType);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RxBus.getDefault().toObservable(String.class).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">              Toast.makeText(BleActivity.<span class="keyword">this</span>,s,Toast.LENGTH_SHORT).show();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="注意取消订阅"><a href="#注意取消订阅" class="headerlink" title="注意取消订阅"></a>注意取消订阅</h4><ul>
<li>CompositeSubscription 可以把 Subscription 收集到一起，方便 Activity 销毁时取消订阅，防止内存泄漏。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> CompositeSubscription allSubscription = <span class="keyword">new</span> CompositeSubscription();</span><br><span class="line"><span class="comment">//添加订阅到列表  </span></span><br><span class="line">allSubscription.add(RxBus.getDefault()</span><br><span class="line">                .toObserverable(OneEvent.class).subscribe(<span class="keyword">this</span>::response));</span><br><span class="line"><span class="comment">//销毁时删除订阅                </span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        <span class="keyword">if</span> (allSubscription != <span class="keyword">null</span> &amp;&amp; !allSubscription.isUnsubscribed())</span><br><span class="line">            allSubscription.unsubscribe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>RxJava</category>
      </categories>
      <tags>
        <tag>RxJava</tag>
        <tag>总线</tag>
        <tag>EventBus</tag>
        <tag>RxBus</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJava概念(1)</title>
    <url>/2016/09/08/java-rxjava-use-1/</url>
    <content><![CDATA[<h3 id="button点击事件"><a href="#button点击事件" class="headerlink" title="button点击事件"></a>button点击事件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   button.performClick(); <span class="comment">//触发点击事件</span></span><br></pre></td></tr></table></figure>
<p>从上面代码理解：<br><strong>被观察者</strong><code>Observable</code>—–&gt;<code>button</code>—–&gt;一些操作，事件，任务（相当于我们不知道<code>button</code>什么时候被点击）<br><strong>观察者</strong><code>Observer</code>/<code>Subscriber</code>—–&gt;<code>OnClickListener</code>—–&gt;决定事件触发的时候将有怎样的行为<br><strong>订阅</strong><code>Subscribe</code>—–&gt;<code>setOnClickListener</code>—–&gt;注册事件关联<br><strong>事件</strong><code>onNext()</code>/<code>onCompleted()</code>/<code>onError()</code>—–&gt;<code>onClick()</code>—–&gt;回调，最终结果(<code>Subscriber</code>多了<code>onStart()``unsubscribe()</code>)</p>
<h3 id="Observable-被观察者"><a href="#Observable-被观察者" class="headerlink" title="Observable 被观察者"></a><code>Observable</code> <strong>被观察者</strong></h3><p>创建被观察者</p>
<blockquote>
<ul>
<li><code>creat()</code> 最基本的创造事件序列的方法</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observable observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">&quot;Aloha&quot;</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>just()</code>  快捷创建事件序列</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observable observable = Observable.just(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Hi&quot;</span>, <span class="string">&quot;Aloha&quot;</span>);</span><br><span class="line"><span class="comment">// 将会依次调用：</span></span><br><span class="line"><span class="comment">// onNext(&quot;Hello&quot;);</span></span><br><span class="line"><span class="comment">// onNext(&quot;Hi&quot;);</span></span><br><span class="line"><span class="comment">// onNext(&quot;Aloha&quot;);</span></span><br><span class="line"><span class="comment">// onCompleted();</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>from()</code>  传入的数组或 Iterable 拆分成具体对象后，依次发送出来</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] words = &#123;<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Hi&quot;</span>, <span class="string">&quot;Aloha&quot;</span>&#125;;</span><br><span class="line">Observable observable = Observable.from(words);</span><br><span class="line"><span class="comment">// 将会依次调用：</span></span><br><span class="line"><span class="comment">// onNext(&quot;Hello&quot;);</span></span><br><span class="line"><span class="comment">// onNext(&quot;Hi&quot;);</span></span><br><span class="line"><span class="comment">// onNext(&quot;Aloha&quot;);</span></span><br><span class="line"><span class="comment">// onCompleted();</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><code>ActionX</code> 自定义(<code>onCompleted</code>,<code>onError</code>,<code>onNext</code>) 无返回值</li>
<li><code>FuncX</code> 有返回值</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Action1&lt;String&gt; onNextAction = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">    <span class="comment">// onNext()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Action1&lt;Throwable&gt; onErrorAction = <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</span><br><span class="line">    <span class="comment">// onError()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Error handling</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Action0 onCompletedAction = <span class="keyword">new</span> Action0() &#123;</span><br><span class="line">    <span class="comment">// onCompleted()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">&quot;completed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 来定义 onNext()</span></span><br><span class="line">observable.subscribe(onNextAction);</span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()</span></span><br><span class="line">observable.subscribe(onNextAction, onErrorAction);</span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()</span></span><br><span class="line">observable.subscribe(onNextAction, onErrorAction, onCompletedAction);</span><br></pre></td></tr></table></figure>
<h3 id="Scheduler-线程控制-调度器"><a href="#Scheduler-线程控制-调度器" class="headerlink" title="Scheduler 线程控制(调度器)"></a><code>Scheduler</code> 线程控制(调度器)</h3><blockquote>
<ul>
<li><code>Schedulers.immediate()</code>:直接在当前线程运行，相当于不指定线程。这是默认的 <code>Scheduler</code>。</li>
<li><code>Schedulers.newThread()</code>:总是启用新线程，并在新线程执行操作。</li>
<li><code>Schedulers.io()</code>: I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</li>
<li><code>Schedulers.computation()</code>:计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</li>
<li><code>AndroidSchedulers.mainThread()</code>:指定的操作将在 Android 主线程运行。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    .subscribeOn(Schedulers.io()) <span class="comment">// 指定 subscribe() 发生在 IO 线程</span></span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 指定 Subscriber 的回调发生在主线程</span></span><br><span class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer number)</span> </span>&#123;</span><br><span class="line">            Log.d(tag, <span class="string">&quot;number:&quot;</span> + number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h3><blockquote>
<ul>
<li><code>map()</code></li>
<li><code>flatMap()</code></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>RxJava</category>
      </categories>
      <tags>
        <tag>RxJava</tag>
        <tag>异步</tag>
        <tag>简洁</tag>
        <tag>观察者</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJava之操作符(2)</title>
    <url>/2016/09/18/java-rxjava-use-2/</url>
    <content><![CDATA[<h3 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h3><blockquote>
<ul>
<li><a href="http://blog.csdn.net/Job_Hesc/article/category/2919759">Android RxJava使用介绍</a></li>
<li><a href="http://blog.csdn.net/u010163442/article/category/6270573">RxJava</a></li>
<li><a href="http://reactivex.io/documentation/operators.html">RxJava官方文档</a></li>
</ul>
</blockquote>
<h3 id="使用过的操作符"><a href="#使用过的操作符" class="headerlink" title="使用过的操作符"></a>使用过的操作符</h3><blockquote>
<ul>
<li><strong><code>concat</code></strong> 连接多个Observables(被观察者)<br><img src="https://s3.ax1x.com/2021/03/18/62hShj.png" alt="concat"><br>最多有9个参数，但是可以嵌套，传的数据必须是相同类型</li>
<li><strong><code>mergeDelayError</code></strong> 合并发送<br><img src="https://s3.ax1x.com/2021/03/18/62hK3R.png" alt="MergeDelayError"><br>合并两个发送，如果一个出错不马上发送错误，而是延时到都发送完</li>
<li><strong><code>interval</code></strong> 定时循环发送<br><img src="https://s3.ax1x.com/2021/03/18/62h8HO.png" alt="interval"></li>
<li><strong><code>map</code></strong> 数据类型转换(同步)<br><img src="https://s3.ax1x.com/2021/03/18/62hUCd.png" alt="map"></li>
<li><strong><code>flatmap</code></strong> 传入数据，生成新的Observable，一般处理异步任务，连接能实现concat功能<br><img src="https://s3.ax1x.com/2021/03/18/62hwvt.png" alt="flatmap"></li>
<li><strong><code>distinct</code></strong> 过滤去重操作符<br><img src="https://s3.ax1x.com/2021/03/18/62h6Ug.png" alt="distinct"></li>
<li><strong><code>distinct(Func1)</code></strong> 自定义过滤操作符<br><img src="https://s3.ax1x.com/2021/03/18/62hR8s.png" alt="distintF1"><br>可以以其中的某个重复项为过滤条件</li>
<li><strong><code>repeat</code></strong> 重复发送<br><img src="https://s3.ax1x.com/2021/03/18/624pVO.png" alt="repeat"><br>重复订阅</li>
<li><strong><code>retry</code></strong> 错误重试<br><img src="https://s3.ax1x.com/2021/03/18/6249aD.png" alt="retry"><br>发送一个错误(onError),重新订阅</li>
<li><strong><code>retryWhen(Func1)</code></strong> 判断错误，根据错误(func1)决定是否重新订阅<br><img src="https://s3.ax1x.com/2021/03/18/62hxr6.png" alt="retryWhen"><br>发送一个错误(onError),通过func1处理错误，决定是否再次订阅</li>
<li><strong><code>Timeout</code></strong> 超时发送一个onError<br><img src="https://s3.ax1x.com/2021/03/18/62hzqK.png" alt="Timeout"></li>
<li><strong><code>zip</code></strong> 组合<br><img src="https://s3.ax1x.com/2021/03/18/62hvKx.png" alt="zip"></li>
<li><strong><code>zipwith</code></strong> 组合<br><img src="https://s3.ax1x.com/2021/03/18/624CIe.png" alt="zipwith"><br>两个都发送onnext后组合，如果另外一个未发，等待组合后才开始发下一个</li>
<li><strong><code>delay</code></strong>  延时发送<br><img src="https://s3.ax1x.com/2021/03/18/624iPH.png" alt="delay"></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>RxJava</category>
      </categories>
      <tags>
        <tag>Rxjava</tag>
        <tag>操作符</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJava之操作符常用场景(3)</title>
    <url>/2016/11/29/java-rxjava-use-3/</url>
    <content><![CDATA[<h3 id="定时心跳"><a href="#定时心跳" class="headerlink" title="定时心跳"></a>定时心跳</h3><h6 id="场景描述："><a href="#场景描述：" class="headerlink" title="场景描述："></a>场景描述：</h6><ol>
<li>一个发送数据出口</li>
<li>定时循环发送一个数据</li>
<li>当需要发送一个数据临时插入一个数据从出口发送</li>
</ol>
<h6 id="需要用到的操作符"><a href="#需要用到的操作符" class="headerlink" title="需要用到的操作符"></a>需要用到的操作符</h6><p><code>repat</code> 重复发送<br><code>delay</code> 延时发送<br><code>just</code> 快速创建被观察者，插入心跳数据<br><code>mergeDelayError</code> 合并发送，错误延时</p>
<h6 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h6><p>主要是创建两个被观察者，一个负责心跳的发送，另外一个负责数据的发送</p>
<h6 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Observable alive=Observable.just(temp_send).delay(<span class="number">4000</span>,TimeUnit.MILLISECONDS).repeat(); <span class="comment">//心跳数据（每隔4s重复发一次）</span></span><br><span class="line">Observable send=  Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;<span class="keyword">byte</span>[]&gt;() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> <span class="keyword">byte</span>[]&gt; subscriber)</span> </span>&#123;</span><br><span class="line">         subscriberSend=subscriber;   <span class="comment">//负责数据的发送</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="comment">//合并，订阅</span></span><br><span class="line">send_subscribe= Observable.mergeDelayError(alive,send).subscribe(<span class="keyword">new</span> Action1&lt;<span class="keyword">byte</span>[]&gt;() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(<span class="keyword">byte</span>[] bs)</span> </span>&#123;</span><br><span class="line">         send(bs);  <span class="comment">//数据出口</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="重复执行某个动作直到成功，或失败，或超时"><a href="#重复执行某个动作直到成功，或失败，或超时" class="headerlink" title="重复执行某个动作直到成功，或失败，或超时"></a>重复执行某个动作直到成功，或失败，或超时</h3><h6 id="场景描述：-1"><a href="#场景描述：-1" class="headerlink" title="场景描述："></a>场景描述：</h6><ol>
<li>重复执行某个动作</li>
<li>成功后中断继续执行操作</li>
<li>错误继续执行</li>
<li>未响应发出超时错误，并继续执行</li>
<li>达到超时次数，终止执行</li>
</ol>
<h6 id="需要用到的操作符-1"><a href="#需要用到的操作符-1" class="headerlink" title="需要用到的操作符"></a>需要用到的操作符</h6><p><code>distinct</code> 过滤<br><code>timeout</code> 超时发出错误<br><code>retryWhen</code> 错误重试<br><code>zipWith</code> 合并（用于统计错误重试次数）<br><code>delay</code> 延时（用于发送错误后等待一段时间继续发送）</p>
<h6 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h6><p>发出动作请求，等待结果，过滤结果。</p>
<ol>
<li>结果为onError立马重新发出动作请求</li>
<li>等待指定时间没有结果，发出超时onError然后重新发出动作请求</li>
<li>结果为成功结果终止动作请求</li>
<li>直到成功为止，或者超过重试的指定次数</li>
</ol>
<h6 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">xuanSend</span><span class="params">(<span class="keyword">final</span> String str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;TASK_SHOW&quot;</span>,<span class="string">&quot;任务：&quot;</span>+str+<span class="string">&quot;，状态：开始执行，发送数据：空&quot;</span>);</span><br><span class="line">            strTask=str;</span><br><span class="line">            subscriber.onNext(str+<span class="string">&quot;中......&quot;</span>);</span><br><span class="line">            subscriberTask=subscriber;   <span class="comment">//执行结果的入口</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).distinct().timeout(<span class="number">5000</span>,TimeUnit.MILLISECONDS).retryWhen(<span class="keyword">new</span> Func1&lt;Observable&lt;? extends Throwable&gt;, Observable&lt;?&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Observable&lt;?&gt; call(<span class="keyword">final</span> Observable&lt;? extends Throwable&gt; observable) &#123;</span><br><span class="line">            <span class="keyword">return</span> observable.zipWith(Observable.range(<span class="number">1</span>, <span class="number">5</span>), <span class="keyword">new</span> Func2&lt;Throwable, Integer, Object&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">(Throwable throwable, Integer integer)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(throwable.getMessage()==<span class="keyword">null</span>)</span><br><span class="line">                        Log.d(<span class="string">&quot;TASK_SHOW&quot;</span>,<span class="string">&quot;任务：&quot;</span>+str+<span class="string">&quot;，状态：异常结束，异常：&quot;</span>+<span class="string">&quot;第&quot;</span>+integer+<span class="string">&quot;次,执行超时&quot;</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        Log.d(<span class="string">&quot;TASK_SHOW&quot;</span>,<span class="string">&quot;任务：&quot;</span>+str+<span class="string">&quot;，状态：异常结束，异常：&quot;</span>+throwable.getMessage());</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).delay(<span class="number">10000</span>,TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="任务流-循环"><a href="#任务流-循环" class="headerlink" title="任务流(循环)"></a>任务流(循环)</h3><h6 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h6><ol>
<li>一个动作完成后才执行下一个动作</li>
<li>所有动作完成后重复继续执行</li>
</ol>
<h6 id="需要用到的操作符-2"><a href="#需要用到的操作符-2" class="headerlink" title="需要用到的操作符"></a>需要用到的操作符</h6><p><code>concat</code> 连接操作符（只能连接9个，但是可以嵌套）<br><code>repat</code> 循环</p>
<h6 id="流程-2"><a href="#流程-2" class="headerlink" title="流程"></a>流程</h6><p>使用flatmap创建一个基本异步任务，用concat实现连接，用reapt实现循环</p>
<h6 id="实现代码-2"><a href="#实现代码-2" class="headerlink" title="实现代码"></a>实现代码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//任务流</span></span><br><span class="line">  Observable&lt;String&gt; task=Observable.concat(mBle.connet(bleDevicesList.getmBleDevicesList_test()),mBle.enableRX(),mBle.xuanSend(sendData.setStart(<span class="keyword">false</span>),Ble.START),mBle.xuanSend(sendData.setsafe(<span class="keyword">false</span>,<span class="keyword">false</span>),Ble.CANCELSAFE),mBle.disConnet());</span><br><span class="line">                </span><br><span class="line">	task.repeat().subscribeOn(Schedulers.computation()).observeOn(AndroidSchedulers.mainThread()).subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">						<span class="comment">//所有任务完成，但是如果reapt（）,始终是不会完成的</span></span><br><span class="line">					   &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                       <span class="comment">//发生错误时</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">                       <span class="comment">//任务完成</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>RxJava</category>
      </categories>
      <tags>
        <tag>RxJava</tag>
        <tag>操作符</tag>
        <tag>使用场景</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-servlet</title>
    <url>/2019/12/11/java-servlet/</url>
    <content><![CDATA[<h3 id="Mac-安装tomcat"><a href="#Mac-安装tomcat" class="headerlink" title="Mac 安装tomcat"></a>Mac 安装tomcat</h3><ol>
<li>下载<a href="https://tomcat.apache.org/download-80.cgi">tomcat8</a>，选择zip，双击解压</li>
<li>执行<code>sudo mv ~/Downloads/apache-tomcat-8.5.49 /Library</code></li>
<li>idea配置tomact</li>
<li>Idea添加web</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-sqlite-jdbc</title>
    <url>/2018/07/13/java-sqlite-jdbc/</url>
    <content><![CDATA[<h4 id="java读取sqlit-db文件"><a href="#java读取sqlit-db文件" class="headerlink" title="java读取sqlit db文件"></a>java读取sqlit db文件</h4><p>首先在<code>pom.xml</code>引入依赖包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xerial<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sqlite-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.23.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>读取数据db</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadDb</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = DriverManager.getConnection(<span class="string">&quot;jdbc:sqlite:C:\\Users\\Administrator\\Desktop\\data.db&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    	e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>读取完关闭数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单行读取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">queryMap</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    HashMap row = <span class="keyword">null</span>;</span><br><span class="line">    System.out.print(<span class="string">&quot;执行：&quot;</span> + sql);</span><br><span class="line">    ResultSet rs = connection.createStatement().executeQuery(sql);</span><br><span class="line">    <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">        ResultSetMetaData md = rs.getMetaData();</span><br><span class="line">        <span class="keyword">int</span> columns = md.getColumnCount();</span><br><span class="line">        row = <span class="keyword">new</span> HashMap(columns);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= columns; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">1</span>) System.out.print(<span class="string">&quot;,  &quot;</span>);</span><br><span class="line">            row.put(md.getColumnName(i), rs.getObject(i));</span><br><span class="line">            System.out.print(rs.getObject(i) + <span class="string">&quot; &quot;</span> + md.getColumnName(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rs.close();</span><br><span class="line">    <span class="keyword">return</span> row;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多行读取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">queryList</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    System.out.print(<span class="string">&quot;执行：&quot;</span> + sql);</span><br><span class="line">    ResultSet rs = connection.createStatement().executeQuery(sql);</span><br><span class="line">    ResultSetMetaData md = rs.getMetaData();</span><br><span class="line">    <span class="keyword">int</span> columns = md.getColumnCount();</span><br><span class="line">    ArrayList list = <span class="keyword">new</span> ArrayList(<span class="number">50</span>);</span><br><span class="line">    <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">        HashMap row = <span class="keyword">new</span> HashMap(columns);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= columns; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">1</span>) System.out.print(<span class="string">&quot;,  &quot;</span>);</span><br><span class="line">            row.put(md.getColumnName(i), rs.getObject(i));</span><br><span class="line">            System.out.print(rs.getObject(i) + <span class="string">&quot; &quot;</span> + md.getColumnName(i));</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(row);</span><br><span class="line">    &#125;</span><br><span class="line">    rs.close();</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol>
<li><p><code>ResultSet</code>连续查询会覆盖之前的，无论是不是新的<code>ResultSet</code>都是共享一个，因此读完数据保存到map马上关闭</p>
</li>
<li><p><code> connection.createStatement()</code>这个对象也不能共享全局，会出现数据库未关闭的错误</p>
</li>
<li><p>问题，该驱动目前好像不支持alpine系统，因此用docker打包式，基础镜像用alpine会加载不了驱动</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">[WARN]: Failed to load native <span class="keyword">library</span>:sqlite-<span class="number">3</span><span class="variable">.15</span><span class="variable">.1</span>-<span class="number">6</span>f7bc1af-<span class="number">1</span>dba-<span class="number">4675</span>-<span class="number">84</span>c7-aaf90017dff0-libsqlitejdbc<span class="variable">.so</span>. osinfo: Linux/x86_64</span><br><span class="line">[WARN]: java<span class="variable">.lang</span><span class="variable">.UnsatisfiedLinkError</span>: /tmp/sqlite-<span class="number">3</span><span class="variable">.15</span><span class="variable">.1</span>-<span class="number">6</span>f7bc1af-<span class="number">1</span>dba-<span class="number">4675</span>-<span class="number">84</span>c7-aaf90017dff0-libsqlitejdbc<span class="variable">.so</span>: Error relocating /tmp/sqlite-<span class="number">3</span><span class="variable">.15</span><span class="variable">.1</span>-<span class="number">6</span>f7bc1af-<span class="number">1</span>dba-<span class="number">4675</span>-<span class="number">84</span>c7-aaf90017dff0-libsqlitejdbc<span class="variable">.so</span>: <span class="number">__</span>isnan: symbol <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure>

<p>解决：替换基础镜像，这里用<code>java:8-jre</code>他的基础系统是<code>debian </code></p>
<p>参考: <a href="https://github.com/itzg/dockerfiles/issues/133">Failed to load native library:sqlite-3.15.1</a></p>
<p>解决：居然是版本问题，换成<code>3.8.11.2</code>可以读取</p>
</li>
</ol>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>利用docker镜像测试jdbc驱动包</p>
<p>准备测试代码<code>SQLiteJDBC.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLiteJDBC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Connection c = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Class.forName(<span class="string">&quot;org.sqlite.JDBC&quot;</span>);</span><br><span class="line">      c = DriverManager.getConnection(<span class="string">&quot;jdbc:sqlite:test.db&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">      System.err.println( e.getClass().getName() + <span class="string">&quot;: &quot;</span> + e.getMessage() );</span><br><span class="line">      System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;Opened database successfully&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后准备好db测试数据库文件、<code>SQLiteJDBC.java</code>测试代码文件、<a href="https://bitbucket.org/xerial/sqlite-jdbc/downloads/">sqlit-jdbc驱动包</a>:<a href="https://bitbucket.org/xerial/sqlite-jdbc/downloads/sqlite-jdbc-3.8.11.2.jar">sqlite-jdbc-3.8.11.2.jar</a> 这几个文件都放在同一个目录，然后切合到该目录执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编译生成class文件</span></span><br><span class="line">docker run --rm -v <span class="string">&quot;<span class="variable">$PWD</span>&quot;</span>:/usr/src/myapp -w /usr/src/myapp java:8-jdk-alpine javac SQLiteJDBC.java</span><br><span class="line"><span class="comment">#运行class文件</span></span><br><span class="line">docker run --rm -v <span class="string">&quot;<span class="variable">$PWD</span>&quot;</span>:/usr/src/myapp -w /usr/src/myapp java:8-jdk-alpine java -classpath <span class="string">&quot;.:sqlite-jdbc-3.8.11.2.jar&quot;</span> SQLiteJDBC</span><br></pre></td></tr></table></figure>

<p><code>docker run --rm -v &quot;$PWD&quot;:/usr/src/myapp -w /usr/src/myapp &lt;java镜像名字&gt; &lt;java命令&gt;</code>该命令意思是当前挂载当前路径到myapp目录，<code>--rm</code> 是一次性，用完即毁</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Sqlite</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-synchronized</title>
    <url>/2018/04/09/java-synchronized/</url>
    <content><![CDATA[<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="关键词概念"><a href="#关键词概念" class="headerlink" title="关键词概念"></a>关键词概念</h3><ol>
<li><p>线程饥饿：某些线程优先级过低，导致永远无法得倒运行</p>
</li>
<li><p>守护线程与用户线程：用户线程会阻止jvm的正常停止，守护线程重要性不高，一般用来做监控，是否守护线程父线程决定。</p>
</li>
<li><p>工作线程(后台线程)：用户执行特定任务。</p>
</li>
<li><p>多线程编程的优缺点</p>
<ul>
<li>优点：提高系统吞吐率、响应性、多核处理资源、最小化对系统资源的使用、简化程序结构</li>
<li>缺点(风险)：线程安全、线程活性(死锁与活锁)、上下文切换(额外资源消耗)、可靠性</li>
</ul>
</li>
<li><p>串发(顺序执行)、并发(宏观同时运行，微观轮流运行)、并行(严格同时进行)</p>
</li>
<li><p>竞态(Race Condition)：计算结果的正确性依赖于相对时间顺序或者线程的交错(多个线程对共享变量进行修改)。</p>
</li>
<li><p>原子性：一个线程对共享变量的更新，从另一个线程的角度来看，它要么完成，要么尚未发生。</p>
</li>
<li><p>可见性：一个线程对共享变量的更新对于另一个线程而言是否可见</p>
</li>
<li><p>重排序：1.分配对象的内存空间，2.初始化对象instance，3.设置instance指向刚分配的内存地址.2和3可能发生重排序，可能出现线程安全问题。</p>
</li>
<li><p>上下文切换：一个线程被暂停，即被剥夺处理器的使用权，另外一个线程被选中开始或者继续运行的过程</p>
</li>
<li><p>非公平调度策略(吞吐量大/申请资源时间长容易导致饥饿现象)与公平调度策略(相反)</p>
</li>
<li><p>临界区：锁的持有线程在其获得锁之后和释放锁之前的这段时间内所执行的代码被称为临界区。</p>
</li>
<li><p>内部锁(<strong>synchronized</strong>)：内部锁表现为整体并发中的局部串行</p>
</li>
<li><p>显示锁(<strong>Lock接口</strong>)：多读单写</p>
</li>
<li><p>并发集合</p>
<ol>
<li>ArrayList—-CopyOnWriteArrayList     快照实现遍历</li>
<li>HashSet—CopyOnWriteArraySet        快照实现遍历</li>
<li>LinkedList—ConcurrentLinkedQueue    准实时</li>
<li>HashMap—ConcurrentHashMap       准实时</li>
<li>TreeMap—ConcurrentSkipListMap     准实时</li>
<li>TreeSet—ConcurrentSkipListSet          准实时</li>
</ol>
</li>
<li><p>捕获线程异常不用<code>try catch</code>，用<code>UncaughtExceptionHandler</code></p>
<p>​</p>
<p>​</p>
</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/qq_25827845/article/details/76730459">Java多线程编程实战指南（核心篇）读书笔记（五）</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>线程安全</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-Type</title>
    <url>/2018/05/29/java-type/</url>
    <content><![CDATA[<p>type泛型解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; map;</span><br><span class="line"></span><br><span class="line">type.getRawType();   <span class="comment">//返回Map</span></span><br><span class="line">type.getActualTypeArguments()[<span class="number">0</span>];  <span class="comment">//返回string</span></span><br><span class="line">type.getActualTypeArguments()[<span class="number">1</span>];  <span class="comment">//返回Integer</span></span><br></pre></td></tr></table></figure>





<p>参考：</p>
<p><a href="https://github.com/jeasonlzy/okhttp-OkGo/wiki/JsonCallback">https://github.com/jeasonlzy/okhttp-OkGo/wiki/JsonCallback</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Type</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-video</title>
    <url>/2018/08/24/java-video/</url>
    <content><![CDATA[<h2 id="java视频监控二次开发"><a href="#java视频监控二次开发" class="headerlink" title="java视频监控二次开发"></a>java视频监控二次开发</h2><h4 id="工具环境："><a href="#工具环境：" class="headerlink" title="工具环境："></a>工具环境：</h4><ol>
<li><a href="https://pan.baidu.com/s/1c2OxIwS">SADP</a>设备网络搜索软件：改密，查询海康设备参数型号，访问地址等</li>
<li>VLC mdeia player网络视频流测试工具</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>视频设置有两种一种通过硬盘录像机管理所有单个录像摄像头进行直播，二是单个摄像头进行直播流设置</p>
<h5 id="RTSP端口"><a href="#RTSP端口" class="headerlink" title="RTSP端口"></a>RTSP端口</h5><p>查看登陆设备：高级-&gt;网络-&gt;端口-&gt;RTSP</p>
<p>应用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 7544 为 RTSP端口，摄像头独立直播流配置</span></span><br><span class="line">ffmpeg -rtsp_transport tcp -i rtsp://admin:12345@192.0.0.63:554/h264/ch1/main/av_stream  -vcodec copy -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 704x576 -q 10 -f flv rtmp://127.0.0.1:1935/hls/video1</span><br></pre></td></tr></table></figure>



<h5 id="SDK-端口-服务端口"><a href="#SDK-端口-服务端口" class="headerlink" title="SDK 端口/服务端口"></a>SDK 端口/服务端口</h5><p>高级-&gt;网络-&gt;端口-&gt;SDK端口或服务端口</p>
<p>硬盘录像机：服务端口，应用<code>hikvision_port=2004</code> 其中2004为服务端口（也叫sdk端口）</p>
<p>摄像头：sdk端口，应用<code>hikvision_video_username_password2 = 34,192.168.1.193,8000,admin,12345</code>其中8000为服务端口（也叫sdk端口）</p>
<h4 id="控制原理"><a href="#控制原理" class="headerlink" title="控制原理"></a>控制原理</h4><p><img src="https://s3.ax1x.com/2021/03/18/627AD1.png" alt="1535084718762"></p>
<h3 id="dvr视频录像机统一-做直播预览与回放"><a href="#dvr视频录像机统一-做直播预览与回放" class="headerlink" title="dvr视频录像机统一 做直播预览与回放"></a>dvr视频录像机统一 做直播预览与回放</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#tracks为回放</span></span><br><span class="line"><span class="comment">#为dvr的ip和rstp端口，其中101 代表通道1主码流01</span></span><br><span class="line">rtsp://admin:12345@192.168.1.195:5555/Streaming/tracks/101?starttime=20180911t063812z&amp;endtime=20180911t064816z</span><br><span class="line"></span><br><span class="line"><span class="comment">#Channels为直播</span></span><br><span class="line">rtsp://admin:12345@192.168.1.195:5555/Streaming/Channels/</span><br><span class="line"></span><br><span class="line"><span class="comment">#回播推流,报Too many packets buffered for output stream 0:0.，加了-max_muxing_queue_size 1024 转码期间不能播放，强制结束才开始播放，似乎源不能拖动进度条</span></span><br><span class="line">ffmpeg -rtsp_transport tcp -i <span class="string">&quot;rtsp://admin:12345@192.168.1.195:5555/Streaming/tracks/101?starttime=20180911t063812z&amp;endtime=20180911t064016z&quot;</span> -max_muxing_queue_size 10240 -vcodec copy -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 -f flv <span class="string">&quot;rtmp://127.0.0.1:1935/hls/video7&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="回放下载"><a href="#回放下载" class="headerlink" title="回放下载"></a>回放下载</h3><p>回访下载，然后实时播放增长的文件，可以用vlc播放，但是ckplayer播放不了，需要解码，可以用ffmpeg命令，因此做实施解码相对比较麻烦</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NativeLong hPlayback;</span><br><span class="line">String filename=sFileName+<span class="string">&quot;.mp4&quot;</span>;</span><br><span class="line">String flvfilename=sFileName+<span class="string">&quot;.flv&quot;</span>;</span><br><span class="line">String savePath=recordStore+filename;</span><br><span class="line"></span><br><span class="line">File file=<span class="keyword">new</span> File(savePath);</span><br><span class="line">logger.info(<span class="string">&quot;创建目录：&quot;</span>+file.getParentFile());</span><br><span class="line"><span class="keyword">if</span> (!file.getParentFile().exists()) &#123;</span><br><span class="line">    <span class="keyword">boolean</span> result = file.getParentFile().mkdirs();</span><br><span class="line">    <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;创建失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;已经在下载了&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( (hPlayback =  hCNetSDK.NET_DVR_GetFileByName(nUserId, sFileName, savePath)).intValue() &lt; <span class="number">0</span> )&#123;</span><br><span class="line">    logger.error( <span class="string">&quot;GetFileByName failed. error[%d]\n&quot;</span>+hCNetSDK.NET_DVR_GetLastError());</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!hCNetSDK.NET_DVR_PlayBackControl_V40(hPlayback, hCNetSDK.NET_DVR_PLAYSTART, <span class="keyword">null</span>,<span class="number">0</span>,<span class="keyword">null</span>,<span class="keyword">null</span>))</span><br><span class="line">&#123;</span><br><span class="line">    logger.error(<span class="string">&quot;play back control failed [%d]\n&quot;</span>+hCNetSDK.NET_DVR_GetLastError());</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (!ExecuteCodecs.exchangeToFlv(ffmpegBin, savePath,recordStore+ flvfilename))&#123;</span><br><span class="line">     logger.error(<span class="string">&quot;mp4 to flv \n&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>









<h4 id="海康录像机RTSP取流路径"><a href="#海康录像机RTSP取流路径" class="headerlink" title="海康录像机RTSP取流路径"></a><a href="http://haikang.faqrobot.cn/servlet/WXShow?action=sac&wxcId=63&sysNum=145716889796196&FromUserName=oNNCAjviKiFIfdX5IhEPUmQzP8Vg&sId=236075&subId=218733">海康录像机RTSP取流路径</a></h4><p>2012年之前的设备支持老的取流格式，之后的设备新老取流格式都支持。</p>
<p>【老URL，小于64路的NVR或混合录像机的IP通道从33开始；大于等于64路的NVR的IP通道从1开始】</p>
<p><code>rtsp://username:password@&lt;ipaddress&gt;/&lt;videotype&gt;/ch&lt;number&gt;/&lt;streamtype&gt;</code></p>
<p><strong>详细描述：</strong></p>
<p><strong><img src="http://haikang.faqrobot.cn/upload/web/145716889796196/20170808/71391502161074550.png" alt="blob.png"></strong></p>
<p> <strong>举例说明：</strong></p>
<p>DS-9016HF-ST的IP通道01主码流：</p>
<p>rtsp://admin:<a href="mailto:&#x31;&#50;&#x33;&#52;&#x35;&#64;&#49;&#x37;&#50;&#x2e;&#54;&#46;&#x32;&#x32;&#x2e;&#49;&#x30;&#54;">&#x31;&#50;&#x33;&#52;&#x35;&#64;&#49;&#x37;&#50;&#x2e;&#54;&#46;&#x32;&#x32;&#x2e;&#49;&#x30;&#54;</a>:554/h264/ch33/main/av_stream</p>
<p>DS-9016HF-ST的模拟通道01子码流：</p>
<p>rtsp://admin:<a href="mailto:&#49;&#x32;&#x33;&#x34;&#53;&#x40;&#x31;&#55;&#50;&#x2e;&#x36;&#46;&#50;&#50;&#x2e;&#x31;&#48;&#54;">&#49;&#x32;&#x33;&#x34;&#53;&#x40;&#x31;&#55;&#50;&#x2e;&#x36;&#46;&#50;&#50;&#x2e;&#x31;&#48;&#54;</a>:554/h264/ch1/sub/av_stream</p>
<p>【新URL，通道号全部按顺序从1开始】</p>
<p><strong>详细描述：</strong></p>
<p><code>rtsp://username:password@&lt;address&gt;:&lt;port&gt;/Streaming/Channels/&lt;id&gt;(?parm1=value1&amp;parm2-=value2…)</code></p>
<p><img src="http://haikang.faqrobot.cn/upload/web/145716889796196/20170808/86951502161663245.png" alt="blob.png"></p>
<p><strong>举例说明：</strong></p>
<p>DS-9632N-ST的IP通道01主码流，：</p>
<p>rtsp://admin:<a href="mailto:&#49;&#50;&#51;&#52;&#53;&#64;&#x31;&#55;&#x32;&#46;&#54;&#x2e;&#x32;&#x32;&#46;&#x32;&#x33;&#52;">&#49;&#50;&#51;&#52;&#53;&#64;&#x31;&#55;&#x32;&#46;&#54;&#x2e;&#x32;&#x32;&#46;&#x32;&#x33;&#52;</a>:554/Streaming/Channels/101</p>
<p>DS-9632N-ST的IP通道01子码流：</p>
<p>rtsp://admin:<a href="mailto:&#49;&#50;&#51;&#52;&#x35;&#64;&#49;&#55;&#50;&#x2e;&#x36;&#46;&#x32;&#50;&#x2e;&#50;&#51;&#x34;">&#49;&#50;&#51;&#52;&#x35;&#64;&#49;&#55;&#50;&#x2e;&#x36;&#46;&#x32;&#50;&#x2e;&#50;&#51;&#x34;</a>:554/Streaming/Channels/102</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE-add-maven</title>
    <url>/2019/02/13/javaee-add-maven/</url>
    <content><![CDATA[<h3 id="java项目添加maven框架"><a href="#java项目添加maven框架" class="headerlink" title="java项目添加maven框架"></a>java项目添加maven框架</h3><ol>
<li><p><code>右键项目-&gt;Add Frameworks Support-&gt;[✔]maven</code>会自动整理项目结构</p>
</li>
<li><p>修改<code>pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.surelive.api<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ApiServer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置打包格式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置File encoding,没设置默认GBK会提示错误--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置java编译版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置maven地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这里的id要和maven里的的settings.xml的id一致--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://112.74.51.136:14002/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://112.74.51.136:14002/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加maven解决依赖,可以解压jar查看具体版本（有的没有，可以上传到nexus仓库）</p>
<p>注意：编译不报错，不代表maven依赖正确</p>
</li>
<li><p>在<code>APP\src\main\webapp\WEB-INF\web.xml</code>添加<code>web.xml</code>,里面有启动顺序</p>
</li>
<li><p>移动配置文件conf复制到<code>APP\src\main\resources</code></p>
</li>
<li><p>代码如果采用绝对路径引用配置文件，去掉<code>CONFIG_PATH = &quot;/mybatis-config.xml&quot;;</code>里面的<code>/</code>会读取默认的<code>APP\src\main\resources</code>目录下的配置文件</p>
<p>注意：win10下注意tomcat的路径不能含空格等特殊符号，例如<code>Program Files</code>等，错误显示为某某文件找不到</p>
</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li><p>现象</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">WARNING</span>] <span class="keyword">Using</span> platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!</span><br><span class="line">[<span class="type">ERROR</span>] /D:/xuan/workspace/ApiServer/src/main/java/com/xx/api/server/timer/BaseTimerTask.java:[<span class="number">25</span>,<span class="number">77</span>] 编码GBK的不 可映射字符</span><br></pre></td></tr></table></figure>

<p>解决：在pom.xml添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置File encoding,没设置默认GBK会提示错误--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>[ERROR] /.../SysData.java:[12,81] -source 1.5 中不支持 diamond 运算符 (请使用 -source 7 或更高版本以启用 diamond 运算符)</code></p>
<p>解决：在pom.xml添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置java编译版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span>      </span><br></pre></td></tr></table></figure>
</li>
<li><p><code>NoClassDefFoundError: redis/clients/jedis/JedisCommands</code></p>
<p>分析：编译打包时并没有任何错误，因为其他包里面有jedis的这个子包，所以编译通过了，但是运行时却找不到相应的版本所以导致该错</p>
<p>解决：添加相应的<code>jedis</code>依赖</p>
</li>
<li><p><code>SchedulerException: SchedulerPlugin class &#39;org.quartz.plugins.xml.XMLSchedulingDataProcessorPlugin&#39; could not be instantiated.</code></p>
<p>分析：因为使用声明式的不能直接分析出依赖问题</p>
<p>解决：找到<code>XMLSchedulingDataProcessorPlugin</code>该class，复制该类的所有<code>import</code>到项目里面的一个随便的java文件，查看是否找不到包（有红线），然后添加缺的包的依赖</p>
</li>
</ol>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p><code>NoClassDefFoundError</code>  一般是指没有jar</p>
<p><a href="https://my.oschina.net/jasonultimate/blog/166932">ClassNotFoundException和NoClassDefFoundError的区别</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyUi的使用</title>
    <url>/2017/12/14/javaee-easyui/</url>
    <content><![CDATA[<h3 id="EasyUi-Demo"><a href="#EasyUi-Demo" class="headerlink" title="EasyUi Demo"></a><a href="https://www.jeasyui.com/demo/main/index.php">EasyUi Demo</a></h3><h4 id="ComboBox自定义多选下拉加模糊搜索的功能"><a href="#ComboBox自定义多选下拉加模糊搜索的功能" class="headerlink" title="ComboBox自定义多选下拉加模糊搜索的功能"></a>ComboBox自定义多选下拉加模糊搜索的功能</h4><ol>
<li>添加控件引用</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;th&gt;多选模糊搜素&lt;/th&gt;</span><br><span class="line">    &lt;td&gt;</span><br><span class="line">        &lt;select id=&quot;comboboxid&quot; name=&quot;comboboxname&quot; class=&quot;easyui-combobox&quot; placeholder=&quot;aa&quot; multiline=&quot;true&quot; data-options=&quot;required:false,prompt:&#x27;不选默认为全部&#x27;&quot; style=&quot;width:228px;height: 29px;&quot;&gt;&lt;/select&gt;</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure>

<p>其中<code>prompt:&#39;不选默认为全部&#39;</code>为背景提示语，<code>multiline=&quot;true&quot;</code>为控件显示多行滚动条</p>
<ol start="2">
<li>在<code>&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code>添加js功能代码</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> lent=<span class="number">0</span>;</span><br><span class="line">$(<span class="string">&#x27;#comboboxid&#x27;</span>).combobox(&#123;</span><br><span class="line">      url:<span class="string">&#x27;$&#123;pageContext.request.contextPath&#125;/invitationCodeController/tree?checkAuthority=1&#x27;</span>,</span><br><span class="line">      multiple:<span class="literal">true</span>,</span><br><span class="line">      valueField:<span class="string">&#x27;invatationcode&#x27;</span>,</span><br><span class="line">      textField: <span class="string">&#x27;invatationcode&#x27;</span>,</span><br><span class="line">      value: <span class="string">&#x27;$&#123;setInvitationCodes&#125;&#x27;</span>,</span><br><span class="line">      onBeforeLoad:<span class="function"><span class="keyword">function</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;user&quot;</span>,<span class="string">&#x27;$&#123;user.getMemberUnitId()&#125;&#x27;</span>);</span><br><span class="line">          param.memberUnitId=<span class="string">&#x27;$&#123;user.getMemberUnitId()&#125;&#x27;</span>;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;param&quot;</span>,param);</span><br><span class="line">      &#125;,</span><br><span class="line">      formatter: <span class="function"><span class="keyword">function</span> (<span class="params">row</span>) </span>&#123;</span><br><span class="line">          row.codeRemark= row.invatationcode+<span class="string">&quot;(&quot;</span>+row.remark+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">          <span class="keyword">return</span>  row.codeRemark;</span><br><span class="line">      &#125;,</span><br><span class="line">      filter:<span class="function"><span class="keyword">function</span>(<span class="params">q,row</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> row.codeRemark.indexOf(q)!=-<span class="number">1</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      onSelect: <span class="function"><span class="keyword">function</span> (<span class="params">row</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;onSelect&quot;</span>,row);</span><br><span class="line">          <span class="keyword">var</span> values=$(<span class="built_in">this</span>).combobox(<span class="string">&#x27;getValues&#x27;</span>);</span><br><span class="line">          <span class="keyword">var</span> getData=$(<span class="built_in">this</span>).combobox(<span class="string">&#x27;getData&#x27;</span>);</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;getdata&quot;</span>,getData);</span><br><span class="line">          <span class="keyword">var</span> valuesT=[];</span><br><span class="line">          <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;values.length;i++)&#123;</span><br><span class="line">             <span class="keyword">for</span> (ii=<span class="number">0</span>;ii&lt;getData.length;ii++)&#123;</span><br><span class="line">                 <span class="keyword">if</span> (values[i]==getData[ii].invatationcode)&#123;</span><br><span class="line">                     valuesT.push(values[i]);</span><br><span class="line">                     <span class="built_in">console</span>.log(<span class="string">&quot;有效&quot;</span>,valuesT);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (lent==valuesT.length-<span class="number">1</span>)&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&quot;==&quot;</span>);</span><br><span class="line">              lent= valuesT.length;</span><br><span class="line">              $(<span class="built_in">this</span>).combobox(<span class="string">&#x27;setValues&#x27;</span>,valuesT);</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&quot;!=&quot;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>数据请求设置<code> url:&#39;$&#123;pageContext.request.contextPath&#125;/invitationCodeController/tree?checkAuthority=1&#39;,</code></p>
<p>参数设置,其中<code>&#39;$&#123;user.getMemberUnitId()&#125;&#39;</code>是从java后端传过来，等于<code>&amp;memberUnitId=$&#123;user.getMemberUnitId()&#125;&#39;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onBeforeLoad:<span class="function"><span class="keyword">function</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;user&quot;</span>,<span class="string">&#x27;$&#123;user.getMemberUnitId()&#125;&#x27;</span>);</span><br><span class="line">    param.memberUnitId=<span class="string">&#x27;$&#123;user.getMemberUnitId()&#125;&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;param&quot;</span>,param);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><code>  valueField:&#39;invatationcode&#39;, textField: &#39;invatationcode&#39;,</code>一个id一个展示的值，展示的值通过<code>formatter</code>自定义，显示样式为<code>27490008(测试)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">formatter: <span class="function"><span class="keyword">function</span> (<span class="params">row</span>) </span>&#123;</span><br><span class="line">        row.codeRemark= row.invatationcode+<span class="string">&quot;(&quot;</span>+row.remark+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>  row.codeRemark;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p><code> value: &#39;$&#123;setInvitationCodes&#125;&#39;,</code>这句设置是从java后端获取出数值，默认选择或加载的值，在输入框会显示该值</p>
<p>设置模糊搜索，通过过滤函数<code>filter</code>意思是row中包含q查询参数就显示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">filter:<span class="function"><span class="keyword">function</span>(<span class="params">q,row</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> row.codeRemark.indexOf(q)!=-<span class="number">1</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>上面设置完了模糊搜索加多选是实现了，但是输入的模糊查找的字符不会自动去掉，下面设置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onSelect: <span class="function"><span class="keyword">function</span> (<span class="params">row</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;onSelect&quot;</span>,row);</span><br><span class="line">    <span class="keyword">var</span> values=$(<span class="built_in">this</span>).combobox(<span class="string">&#x27;getValues&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> getData=$(<span class="built_in">this</span>).combobox(<span class="string">&#x27;getData&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;getdata&quot;</span>,getData);</span><br><span class="line">    <span class="keyword">var</span> valuesT=[];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;values.length;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span> (ii=<span class="number">0</span>;ii&lt;getData.length;ii++)&#123;</span><br><span class="line">           <span class="keyword">if</span> (values[i]==getData[ii].invatationcode)&#123;</span><br><span class="line">               valuesT.push(values[i]);</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&quot;有效&quot;</span>,valuesT);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lent==valuesT.length-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;==&quot;</span>);</span><br><span class="line">        lent= valuesT.length;</span><br><span class="line">        $(<span class="built_in">this</span>).combobox(<span class="string">&#x27;setValues&#x27;</span>,valuesT);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;!=&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过遍历源数据<code>  var getData=$(this).combobox(&#39;getData&#39;);</code>和选中的数据（输入框的数据）<code> var values=$(this).combobox(&#39;getValues&#39;);</code>对比得到有效的选中数据，但是还需要在合适的时间设置有效选择数据</p>
<p><code>onSelect</code>方法在输入框输入字和选择时都会触发，因此加个判断<code>if (lent==valuesT.length-1)</code>当选中有效数据每增加1个时触发因此比较长度即可，<code>lent</code>为全局变量，做历史长度存储</p>
<p>数据返回json格式</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;invatationcode&quot;</span>: <span class="string">&quot;27491007&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;createdate&quot;</span>: <span class="number">1510284005000</span>, </span><br><span class="line">        <span class="attr">&quot;updatedate&quot;</span>: <span class="number">1510284005000</span>, </span><br><span class="line">        <span class="attr">&quot;flag&quot;</span>: <span class="number">1</span>, </span><br><span class="line">        <span class="attr">&quot;remark&quot;</span>: <span class="string">&quot;我是账号备注&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  .........</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;invatationcode&quot;</span>: <span class="string">&quot;27490008&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;createdate&quot;</span>: <span class="number">1510284334000</span>, </span><br><span class="line">        <span class="attr">&quot;updatedate&quot;</span>: <span class="number">1510284334000</span>, </span><br><span class="line">        <span class="attr">&quot;flag&quot;</span>: <span class="number">1</span>, </span><br><span class="line">        <span class="attr">&quot;remark&quot;</span>: <span class="string">&quot;测试&quot;</span>, </span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>jsp</tag>
        <tag>EasyUi</tag>
        <tag>ComboBox</tag>
      </tags>
  </entry>
  <entry>
    <title>eclipse项目导入idea</title>
    <url>/2017/04/20/javaee-eclipsetoidea/</url>
    <content><![CDATA[<h3 id="Project-Structure设置"><a href="#Project-Structure设置" class="headerlink" title="Project Structure设置"></a>Project Structure设置</h3><h5 id="Modules-设置"><a href="#Modules-设置" class="headerlink" title="Modules 设置"></a>Modules 设置</h5><h6 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">—— e:\workspace\test    &#x2F;&#x2F;工程目录</span><br><span class="line">—— ——.idea</span><br><span class="line">—— ——.settings</span><br><span class="line">—— ——.build</span><br><span class="line">—— —— ——.classes</span><br><span class="line">—— ——META-INF</span><br><span class="line">—— ——out                 &#x2F;&#x2F;默认输出目录(设置为Excluded)</span><br><span class="line">—— —— ——artifacts</span><br><span class="line">—— —— —— ——test           &#x2F;&#x2F;编译好的webapp</span><br><span class="line">—— —— ——production</span><br><span class="line">—— ——src             &#x2F;&#x2F;java代码目录(设置为Sources)</span><br><span class="line">—— ——WebContent   &#x2F;&#x2F;web静态代码目录(含js、jsp、html、css...)</span><br></pre></td></tr></table></figure>

<h6 id="Paths"><a href="#Paths" class="headerlink" title="Paths"></a>Paths</h6><p>编译输出目录选择默认选项Inherit project….path</p>
<h6 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h6><p>添加工程需要jar包，一般在<code>/WebContent/WEB-INF/lib</code>，必须添加tomcat的library,不然servlet着不到包</p>
<h5 id="Facets-设置"><a href="#Facets-设置" class="headerlink" title="Facets 设置"></a>Facets 设置</h5><p>添加**<em>Web**</em>选择自己的项目</p>
<ul>
<li>更改Deployment Descriptors为自己项目的web.xml路径（<code>/WebContent/WEB-INF/web.xml</code>）</li>
<li>更改Web Resource Directories为自己项目的web资源目录(<code>.../WebContent</code>)  path … root 设置为<code>/</code>根目录</li>
<li>Source Roots勾选…/src路径</li>
</ul>
<h5 id="Artifacts"><a href="#Artifacts" class="headerlink" title="Artifacts"></a>Artifacts</h5><p>设置webapp发布部署输出目录</p>
<p> 添加<code>Web Application:Exploded</code></p>
<p>output directory: <code>c:\develop\tomcat\webapp\test</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">——output root    &#x2F;&#x2F;这个是output directory设置的目录</span><br><span class="line">—— ——WEB-INF</span><br><span class="line">—— —— ——classes</span><br><span class="line">—— —— —— ——&#39;test&#39; compile output   &#x2F;&#x2F;项目Java编译src中java输出class的目录</span><br><span class="line">—— —— ——lib              &#x2F;&#x2F;jar包目录</span><br><span class="line">—— ——&#39;test&#39; module:&#39;web&#39; facet resources &#x2F;&#x2F;设置facet resources 为自己的web目录（&#x2F;WebContent）</span><br><span class="line">&#x2F;&#x2F;Available Elements(右边)是提示，可以双击直接在右边生成建议目录，设置了test下没有二级目录</span><br></pre></td></tr></table></figure>

<h3 id="配置运行tomcat-Server"><a href="#配置运行tomcat-Server" class="headerlink" title="配置运行tomcat Server"></a>配置运行tomcat Server</h3><h5 id="Run-Debug-Configurations设置"><a href="#Run-Debug-Configurations设置" class="headerlink" title="Run/Debug Configurations设置"></a>Run/Debug Configurations设置</h5><h6 id="Server-默认"><a href="#Server-默认" class="headerlink" title="Server 默认"></a>Server 默认</h6><h6 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h6><ul>
<li>点击+，添加要运行的test项目</li>
<li>application context 设置为<code>/test</code></li>
</ul>
<p>访问地址<a href="localhost:8080/test">localhost:8080/test</a>或<a href="http://127.0.0.1:8080/test">http://127.0.0.1:8080/test</a></p>
<p><a href="http://jingyan.baidu.com/article/ca41422f2145641eae99edb9.html">eclipse java web项目导入到idea</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>JavaEE</tag>
        <tag>idea</tag>
        <tag>项目移植</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE-Header</title>
    <url>/2018/12/12/javaee-header/</url>
    <content><![CDATA[<h3 id="docker-nginx-vue-获取真实ip"><a href="#docker-nginx-vue-获取真实ip" class="headerlink" title="docker+nginx(vue)获取真实ip"></a>docker+nginx(vue)获取真实ip</h3><p>nginx必须安装<code>--with-http_realip_module</code>通过此命令<code>2&gt;&amp;1 nginx -V | tr -- - &#39;\n&#39; | grep http_realip_module</code>进行检查</p>
<p><code>nginx -V</code> 可以查看到的编译参数和编译的模块(静态和动态)</p>
<ol>
<li><p>nginx设置代理</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
</li>
<li><p>代码设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RestResult <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> User user,HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String ip = request.getHeader(<span class="string">&quot;X-Real-IP&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getRemoteAddr();</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;       </span><br></pre></td></tr></table></figure>
</li>
<li><p>请求头设置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/app/index/login HTTP/1.1</span></span><br><span class="line"><span class="attr">Host</span>: <span class="string">192.168.1.230:14083</span></span><br><span class="line"><span class="meta">Content-Type</span>: <span class="string">application/json</span></span><br><span class="line"><span class="meta">X-Real-IP</span>: <span class="string">192.16.1.1</span></span><br><span class="line"><span class="meta">cache-control</span>: <span class="string">no-cache</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>经测试：</p>
<p>只需2，3设置即可，1设置无效，如果只设置1和3还是不是真实ip，所以变量<code>remote_addr</code>不是真实ip（该ip实际从哪里来待确定？），<code>X-Real-IP</code>是自定义header头，相当于key，要一致</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h5 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h5><p>由于nginx安装在docker集群，nginx获取的ip（<code>remote_addr</code>）总是某个（不确定是哪里来的）的ip（10.255.0.3），因此1设置无效</p>
<p>解决nginx服务采用host模式，端口配置采用</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports</span>:<span class="string"></span></span><br><span class="line">  <span class="meta">-</span> <span class="string">target: 8888</span></span><br><span class="line">    <span class="attr">published</span>: <span class="string">14881   #只有worker能访问该端口</span></span><br><span class="line">    <span class="attr">protocol</span>: <span class="string">tcp</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">host  #版本要求3.2</span></span><br></pre></td></tr></table></figure>

<p>采用了host就没了负载均衡了</p>
<h5 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h5><p>是用客户端添加自定义头<code>X-Real-IP</code>但是前端请求暂时加不进去，且后端要修改获取ip的方法</p>
<p>参考</p>
<p><a href="https://www.imooc.com/article/19884">在使用了NGINX的时候，如何获取访问用户的IP</a></p>
<p><a href="https://github.com/moby/moby/issues/25526">Unable to retrieve user’s IP address in docker swarm mode</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>Header</tag>
        <tag>request</tag>
      </tags>
  </entry>
  <entry>
    <title>win10下JavaEE之环境搭建</title>
    <url>/2017/03/15/javaee-install-on-win10/</url>
    <content><![CDATA[<h4 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h4><ol>
<li><p>下载<a href="https://dev.mysql.com/downloads/mysql/">MySQL Community Server 5.7.17</a>文件名</p>
</li>
<li><p>安装目录<a href="C:\Develop\mysql-5.7.17-winx64">C:\Develop\mysql-5.7.17-winx64</a></p>
</li>
<li><p>设置工作目录复制<code>my-default.ini</code>重命名为<code>my.ini</code>修改里面</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># These are commonly set, remove the # and set as required.</span></span><br><span class="line"><span class="attr">basedir</span> = <span class="string">&quot;C:\Develop\mysql-5.7.17-winx64&quot;</span></span><br><span class="line"><span class="attr">datadir</span> = <span class="string">&quot;E:\DevelopmentWorkspace\mysql-5.7.17-workspase&quot;</span></span><br></pre></td></tr></table></figure>

<h6 id="注：其中-basedir-你的mysql目录，datadir-数据存放目录"><a href="#注：其中-basedir-你的mysql目录，datadir-数据存放目录" class="headerlink" title="注：其中 basedir=你的mysql目录，datadir=数据存放目录"></a>注：其中 basedir=你的mysql目录，datadir=数据存放目录</h6></li>
<li><p>以<strong>管理员</strong>身份运行cmd,切换到<code>C:\Develop\mysql-5.7.17-winx64\bin</code>执行<code>mysqld -install</code></p>
</li>
<li><p>执行<code>mysqld --initialize</code> 如果执行错误，删除数据存放目录，重新执行</p>
</li>
<li><p>运行mysql执行<code>net start mysql</code></p>
</li>
<li><p>停止mysql执行<code>net stop mysql</code></p>
<p>​</p>
</li>
</ol>
<h4 id="Tomcat-安装"><a href="#Tomcat-安装" class="headerlink" title="Tomcat 安装"></a>Tomcat 安装</h4><ol>
<li>下载<a href="http://tomcat.apache.org/download-80.cgi">apache-tomcat-8.5.12-windows-x64</a></li>
<li>安装目录<a href="C:\Develop\apache-tomcat-8.5.12">C:\Develop\apache-tomcat-8.5.12</a></li>
</ol>
<h4 id="idea-安装"><a href="#idea-安装" class="headerlink" title="idea 安装"></a>idea 安装</h4><ol>
<li>下载<a href="https://www.jetbrains.com/idea/">ideaIU-2016.3.5.exe</a></li>
<li>安装目录[C:\Develop\IntelliJ IDEA 2016.3.5](C:\Develop\IntelliJ IDEA 2016.3.5)</li>
<li>智能提示忽略大小写<code>Editor-&gt;General-&gt;Code Completion:&#123;Casesensitive completion:None&#125;</code></li>
<li>取消自动打开上次的项目<code>Appearance-&gt;System Settings:&#123;Reopen last project on startup:false&#125;</code></li>
</ol>
<h6 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h6><ol>
<li>安装<code>Material Theme UI插件</code> </li>
<li>下载主题样式<a href="http://color-themes.com/?view=index">http://color-themes.com</a></li>
<li>导入主题Ladies Night 2: <code>File-&gt;Import Settings...</code></li>
</ol>
<h4 id="eclipse-安装"><a href="#eclipse-安装" class="headerlink" title="eclipse 安装"></a>eclipse 安装</h4><p>1.下载<a href="https://eclipse.org/">https://eclipse.org/</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>JavaEE</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE之java基础概念</title>
    <url>/2017/06/19/javaee-java/</url>
    <content><![CDATA[<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="1-重写（Override）与重载（Overload）"><a href="#1-重写（Override）与重载（Overload）" class="headerlink" title="1 重写（Override）与重载（Overload）"></a>1 重写（Override）与重载（Overload）</h3><ul>
<li>重写：<strong>父类与子类之间多态性的一种表现</strong>(继承重写父类的方法)</li>
<li>重载：<strong>多态的具体表现形式</strong>（方法名相同，参数不同）</li>
</ul>
<h3 id="2-接口和抽象"><a href="#2-接口和抽象" class="headerlink" title="2 接口和抽象"></a>2 接口和抽象</h3><ul>
<li><p>接口：</p>
<ol>
<li>一个类可以实现多个接口</li>
<li>一个接口可以有多个方法</li>
<li>所有方法必须是抽象方法</li>
<li>接口不能包含成员变量，除了 static 和 final 变量</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NameOfInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//接口是隐式抽象的，当声明一个接口的时候，不必使用abstract关键字。</span></span><br><span class="line">  <span class="comment">//接口中每一个方法也是隐式抽象的，声明时同样不需要abstract关键子。</span></span><br><span class="line">  <span class="comment">//接口中的方法都是公有的。</span></span><br><span class="line">  <span class="comment">//任何类型 final, static 字段</span></span><br><span class="line">  <span class="comment">//抽象方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>抽象类(abstract)：<code>public abstract class Test&#123;&#125;</code></p>
<ol>
<li>抽象类<strong>不能实例化</strong></li>
</ol>
</li>
<li><p>抽象方法(abstract ): <code>public abstract double function();</code></p>
<ol>
<li>含有抽象方法的类必须是抽象类</li>
<li>实现类必须重写抽象方法</li>
<li>构造方法(static)不能抽象。</li>
</ol>
</li>
</ul>
<h3 id="3-线程"><a href="#3-线程" class="headerlink" title="3 线程"></a>3 线程</h3><ul>
<li>继承Thread</li>
<li>实现Runnable</li>
</ul>
<h3 id="4-Java集合框架的基本接口"><a href="#4-Java集合框架的基本接口" class="headerlink" title="4 Java集合框架的基本接口"></a>4 Java集合框架的基本接口</h3><ul>
<li>collection 接口：最基本的集合接口，一个 Collection 代表一组 Object，Java不提供直接继承自Collection的类，只提供继承于的子接口(如List和set)。</li>
<li>list接口：List接口是一个有序的Collection，使用此接口能够精确的控制每个元素插入的位置，能够通过索引(元素在List中位置，类似于数组的小标)来访问List中的元素，而且允许有相同的元素。</li>
<li>set 接口：Set 具有与 Collection 完全一样的接口，只是行为上不同，Set <strong>不保存重复的元素</strong>。</li>
<li>map接口：将唯一的键映射到值。</li>
</ul>
<h3 id="5-java中两种异常类型"><a href="#5-java中两种异常类型" class="headerlink" title="5  java中两种异常类型"></a>5  java中两种异常类型</h3><ul>
<li>error： 错误，由虚拟机生成并抛出，程序对其不做处理</li>
<li>Exception： 异常的父类，需要程序做出处理</li>
<li>Runtime Exception： 运行异常，被0除、下标越界等</li>
</ul>
<h3 id="6-Final、finally、finalize"><a href="#6-Final、finally、finalize" class="headerlink" title="6 Final、finally、finalize"></a>6 Final、finally、finalize</h3><ul>
<li><p>final： 最终，声明类不可继承、方法不可覆盖、属性不可改变</p>
</li>
<li><p>finally：是异常处理语句结构的一部分，一定会执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">//代码块</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">       </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">//Java 中的 Finally 关键一般与try一起使用，在程序进入try块之后，无论程序是因为异常而中止或其它方式返回终止的，finally块的内容一定会被执行 。</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>finalize：是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提高垃圾收集时的其他资源回收，例如关闭文件等。JVM不保证此方法总被调用。</p>
</li>
</ul>
<h3 id="7-序列化（Serializable）"><a href="#7-序列化（Serializable）" class="headerlink" title="7 序列化（Serializable）"></a>7 序列化（Serializable）</h3><p>  由于存在于内存中的对象都是暂时的，无法长期驻存，为了把对象的状态保持下来，这时需要把对象写入到磁盘或者其他介质中，这个过程就叫做序列化。实现Serializable接口表示该类可以被序列化。</p>
<p>使用场景：</p>
<ul>
<li>当你想把的内存中的对象状态保存到一个文件中或者数据库中时候</li>
<li>当你想用套接字在网络上传送对象的时候</li>
<li>当你想通过RMI传输对象的时候</li>
</ul>
<h3 id="8-设计模式"><a href="#8-设计模式" class="headerlink" title="8 设计模式"></a>8 设计模式</h3><ul>
<li>单例：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li>
<li>工厂：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</li>
<li>模板：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</li>
<li>装饰：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</li>
<li>代理：为其他对象提供一种代理以控制对这个对象的访问。</li>
<li>适配器：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</li>
<li>观察者：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</li>
</ul>
<h3 id="9-阻塞队列（BlockingQueue）"><a href="#9-阻塞队列（BlockingQueue）" class="headerlink" title="9 阻塞队列（BlockingQueue）"></a>9 阻塞队列（BlockingQueue）</h3><p>如果容器是空的，取东西会阻塞知道里面有东西，如果是满的，放东西会被阻塞，知道有空间放。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://bbs.itheima.com/thread-329950-1-1.html?srx">Java就业企业面试问题-Java基础（强烈推荐）</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>面试</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-快速入门</title>
    <url>/2017/03/06/javaee-javascript/</url>
    <content><![CDATA[<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol>
<li><p>JavaScript代码可以直接嵌在网页的任何地方，通常放到<code>&lt;head&gt;</code>中</p>
</li>
<li><p>由<code>&lt;script&gt;...&lt;/script&gt;</code>包裹代码</p>
</li>
<li><p>引入文件<code>&lt;script src=&quot;/src/js/xx.js&quot;&gt;&lt;/script&gt;</code></p>
</li>
<li><p><code>alert(&#39;hello world&#39;);</code>对话框</p>
</li>
<li><p><code>console.log(var类型);</code> 调试输出打印: 浏览器-&gt;右键-&gt;检查-&gt;Console</p>
</li>
<li><p>严格<strong>区分大小写</strong></p>
</li>
<li><p><code>==</code>自动转换数据类型再比较（缺陷），<code>===</code>先比较类型，在比较数据（比较完善）<em>注：NaN(<code>0/0;//NaN</code>)是个特殊的Number，<code>NaN===NaN;//false</code>  应该用<code>isNaN(NaN)</code></em></p>
</li>
<li><p>数组 <code>var arr=[1,2,3.14,&quot;helll&quot;,null,true];//可以是任意类型</code></p>
</li>
<li><p>对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">  name:<span class="string">&#x27;xx&#x27;</span>,</span><br><span class="line">  age:<span class="number">20</span>,</span><br><span class="line">  skill:[<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">  hasCar: <span class="literal">true</span>,</span><br><span class="line">  zipcode: <span class="literal">null</span></span><br><span class="line">&#125;;<span class="comment">//类似json字符串</span></span><br><span class="line">person.name; <span class="comment">//值为&#x27;xx&#x27;</span></span><br><span class="line">person.tags[<span class="number">0</span>];<span class="comment">//值为&#x27;js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">//调试打印出对象</span></span><br><span class="line">person.book=<span class="string">&#x27;hello&#x27;</span>; <span class="comment">//新增一个book属性</span></span><br><span class="line"><span class="keyword">delete</span>.person.book;<span class="comment">//删除book属性</span></span><br><span class="line"><span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> person;<span class="comment">// 返回true，判断person是否拥有name属性</span></span><br><span class="line">person.hasOwnProperty(<span class="string">&#x27;name&#x27;</span>); <span class="comment">//true判断一个属性是否是person自身拥有的，而不是继承得到的</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>全局变量<code>i=10;//i是全局变量</code>  会造成混乱这是一缺陷，弥补缺陷方法加 <code>&#39;use strict&#39;;//需要浏览器支持，如果用了i=10;，将出现ReferenceError错误</code></p>
</li>
<li><p>转义字符串 <code>&#39;I\&#39;m \&quot;ok\&quot;!; //字符串内容I&#39;m &quot;ok&quot;!  </code></p>
</li>
<li><p>多行字符串<code>  `这是一个多行字符串`;//替代了\n</code></p>
</li>
<li><p>模板字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&quot;xx&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> message=<span class="string">&#x27;你好,$&#123;name&#125;,年龄$&#123;age&#125;&#x27;</span>; <span class="comment">//模板字符串法，需要浏览器支持</span></span><br><span class="line"><span class="keyword">var</span> message=<span class="string">&#x27;你好,&#x27;</span>+name+<span class="string">&#x27;,年龄&#x27;</span>+age; <span class="comment">//两者等效</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="string">&#x27;hello world!&#x27;</span>;</span><br><span class="line">s.length; <span class="comment">//字符串长度</span></span><br><span class="line">s[<span class="number">0</span>];<span class="comment">//&#x27;h&#x27;</span></span><br><span class="line">s[<span class="number">5</span>];<span class="comment">//&#x27; &#x27;</span></span><br><span class="line">s[<span class="number">11</span>];<span class="comment">//&#x27;!&#x27; </span></span><br><span class="line">s[<span class="number">0</span>]=<span class="string">&#x27;x&#x27;</span>;<span class="comment">//&#x27;h&#x27; 只可读（赋值是不成功的）</span></span><br><span class="line">s=s.toUpperCase();<span class="comment">//&#x27;HELLO WORLD!&#x27; 转换为大写</span></span><br><span class="line">s=s.toLowerCase();<span class="comment">//转换为小写</span></span><br><span class="line">s.indexOf(<span class="string">&#x27;wo&#x27;</span>);<span class="comment">//返回它的位置6，如果没有wo则返回-1</span></span><br><span class="line">s.substring(<span class="number">0</span>,<span class="number">5</span>);<span class="comment">//从0开始到5结束（不包括5），&#x27;hello&#x27;</span></span><br><span class="line">s.substring(<span class="number">7</span>);<span class="comment">//从7开始到结束 &#x27;orld!&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">2</span>];</span><br><span class="line">arr.length; <span class="comment">//3</span></span><br><span class="line">arr.length=<span class="number">2</span>; <span class="comment">//[1,&#x27;2&#x27;]</span></span><br><span class="line">arr.length=<span class="number">4</span>; <span class="comment">//[1,&#x27;2&#x27;,undefined,undefined]</span></span><br><span class="line">arr[<span class="number">2</span>]=<span class="number">3</span>;<span class="comment">//[1,&#x27;2&#x27;,3,undefined]</span></span><br><span class="line">arr[<span class="number">4</span>]=<span class="number">6</span>;<span class="comment">//[1,&#x27;2&#x27;,3,undefined,6]</span></span><br><span class="line">arr.slice(<span class="number">0</span>,<span class="number">3</span>); <span class="comment">//等效于substring</span></span><br><span class="line"><span class="keyword">var</span> arrCopy= arr.slice(); <span class="comment">//从头到尾复制数组</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">arr.push(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>); <span class="comment">//返回长度4</span></span><br><span class="line">arr;<span class="comment">//[1,2,&#x27;a&#x27;,&#x27;b&#x27;]</span></span><br><span class="line">arr.pop(); <span class="comment">//返回&#x27;b&#x27;</span></span><br><span class="line">arr;<span class="comment">//[1,2,&#x27;a&#x27;]</span></span><br><span class="line">arr.unshift(<span class="string">&#x27;A&#x27;</span>); <span class="comment">//返回长度4</span></span><br><span class="line">arr;<span class="comment">//[&#x27;A&#x27;,1,2,&#x27;a&#x27;]</span></span><br><span class="line">arr.sort(); <span class="comment">//默认规则（0-9，A-Z,a-z）排序</span></span><br><span class="line">arr;<span class="comment">//[1,2,A,a]</span></span><br><span class="line">arr.shift(); <span class="comment">//&#x27;1&#x27;</span></span><br><span class="line">arr;<span class="comment">//[2,A,&#x27;a&#x27;] </span></span><br><span class="line">arr.reverse();</span><br><span class="line">arr;<span class="comment">//[&#x27;a&#x27;,A,2] 反转</span></span><br><span class="line"><span class="comment">//从索引1开始删除2个元素，然后再添加2个元素</span></span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>);<span class="comment">//返回[A,2]</span></span><br><span class="line">arr;<span class="comment">//[a,b,c]</span></span><br><span class="line"><span class="keyword">var</span> arr2=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> added=arr2.concat(arr); <span class="comment">//连接</span></span><br><span class="line">added;<span class="comment">//[1,2,3,a,b,c]</span></span><br><span class="line">arr2;<span class="comment">//[1,2,3]</span></span><br><span class="line">arr;<span class="comment">//[a,b,c]</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line">arr.concat(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]); <span class="comment">//返回[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3, 4]</span></span><br><span class="line">arr.join(<span class="string">&#x27;-&#x27;</span>);<span class="comment">//&#x27;A-B-C&#x27;</span></span><br><span class="line"><span class="keyword">var</span> arr=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="string">&#x27;-&#x27;</span>]; <span class="comment">//多维数组把数组看成一个元素</span></span><br><span class="line">arr[<span class="number">1</span>][<span class="number">2</span>];<span class="comment">//6</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>循环<code>for (var ? in ?)&#123;&#125;</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o=&#123;</span><br><span class="line">  name:<span class="string">&#x27;xx&#x27;</span>,</span><br><span class="line">  age:<span class="number">20</span>,</span><br><span class="line">  city:<span class="string">&#x27;cq&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//可以把一个对象的所有属性依次循环出来</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> o)&#123;</span><br><span class="line">  alert(key); <span class="comment">//&#x27;name&#x27;,&#x27;age&#x27;,&#x27;city&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="comment">//由于Array也是对象，而它的每个元素的索引被视为对象的属性</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> a)&#123;</span><br><span class="line">  alert(i); <span class="comment">//&#x27;0&#x27;,&#x27;1&#x27;,&#x27;2&#x27;</span></span><br><span class="line">  alert(a[i]); <span class="comment">//&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Map是一组键值对的结构，具有极快的查找速度。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m=<span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;oo&#x27;</span>,<span class="number">100</span>],[<span class="string">&#x27;xx&#x27;</span>,<span class="number">99</span>],[<span class="string">&#x27;qq&#x27;</span>,<span class="number">21</span>]]);</span><br><span class="line">m.get(<span class="string">&#x27;oo&#x27;</span>);<span class="comment">//100</span></span><br><span class="line"><span class="keyword">var</span> mm=<span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">//空Map</span></span><br><span class="line">mm.set(<span class="string">&#x27;aa&#x27;</span>,<span class="number">12</span>); <span class="comment">//添加键值对</span></span><br><span class="line">mm.has(<span class="string">&#x27;ss&#x27;</span>); <span class="comment">//是否存在key &#x27;ss&#x27;,不存在false</span></span><br><span class="line">mm.get(<span class="string">&#x27;aa&#x27;</span>); <span class="comment">//获取key &#x27;aa&#x27;的值12</span></span><br><span class="line">mm.delete(<span class="string">&#x27;aa&#x27;</span>); <span class="comment">//删除&#x27;aa&#x27;键值对</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Set:<code>Set</code>和<code>Map</code>类似，也是一组key的集合，但不存储value。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1=<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]); <span class="comment">//重复key字动过滤</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>iterable <code>Array</code>、<code>Map</code>和<code>Set</code>都属于<code>iterable</code>类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">of</span> a)&#123; <span class="comment">//遍历Array，Set，Map都可以</span></span><br><span class="line">  alert(x);  <span class="comment">//&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">a.name=<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">in</span> a)&#123;</span><br><span class="line">  alert(x);  <span class="comment">//&#x27;0&#x27;,&#x27;1&#x27;,&#x27;2&#x27;,&#x27;name&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for ... in循环将把name包括在内，但Array的length属性却不包括在内。</span></span><br><span class="line"><span class="comment">//for ... of循环则完全修复了这些问题，它只循环集合本身的元素。</span></span><br><span class="line">a.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element,index,array</span>))</span>&#123;</span><br><span class="line">  <span class="comment">//element: 指向当前元素的值</span></span><br><span class="line">  <span class="comment">//index：指向当前索引(可省略)</span></span><br><span class="line">  <span class="comment">//array：指向array对象本身(可省略)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]);</span><br><span class="line">s.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, sameElement, set</span>) </span>&#123;</span><br><span class="line">    alert(element);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">&#x27;x&#x27;</span>], [<span class="number">2</span>, <span class="string">&#x27;y&#x27;</span>], [<span class="number">3</span>, <span class="string">&#x27;z&#x27;</span>]]);</span><br><span class="line">m.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key, map</span>) </span>&#123;</span><br><span class="line">    alert(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>js</tag>
        <tag>入门</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE之java web基础概念</title>
    <url>/2017/06/19/javaee-javaweb/</url>
    <content><![CDATA[<h2 id="Java-Web基础"><a href="#Java-Web基础" class="headerlink" title="Java Web基础"></a>Java Web基础</h2><h3 id="1-Ajax"><a href="#1-Ajax" class="headerlink" title="1 Ajax"></a>1 Ajax</h3><p>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</p>
<p>AJAX 是与服务器交换数据并更新部分网页的艺术(新方法)，在不重新加载整个页面的情况下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;<span class="attr">url</span>:<span class="string">&quot;/jquery/test1.txt&quot;</span>,<span class="attr">async</span>:<span class="literal">false</span>&#125;); <span class="comment">//jQuery.ajax([settings])使用方法</span></span><br></pre></td></tr></table></figure>

<h3 id="2-cookie和session"><a href="#2-cookie和session" class="headerlink" title="2 cookie和session"></a>2 cookie和session</h3><p>Cookie是会话技术,将用户的信息保存到浏览器的对象.</p>
<p>Session也是会话技术,将Session的信息保存到服务器的对象.Session是基于Cookie的 利用Cookie向浏览器回写JSessionID.</p>
<h3 id="3-网站大量登陆访问session过多"><a href="#3-网站大量登陆访问session过多" class="headerlink" title="3 网站大量登陆访问session过多"></a>3 网站大量登陆访问session过多</h3><p>session默认保存在内存中，内存资源宝贵，session数据量大导致内存利用率高</p>
<ul>
<li>解决方案：<ol>
<li>设置session超时时间</li>
<li>将session中的数据序列化到硬盘中</li>
<li>不使用session，使用cookie（此方法存在安全性问题）</li>
</ol>
</li>
</ul>
<h3 id="4-Jsp九大内置对象"><a href="#4-Jsp九大内置对象" class="headerlink" title="4  Jsp九大内置对象"></a>4  Jsp九大内置对象</h3><ul>
<li>Page：指的是JSP被翻译成Servlet的对象的引用.</li>
<li>pageContext：对象可以用来获得其他8个内置对象,还可以作为JSP的域范围对象使用.pageContext中存的值是当前的页面的作用范围》</li>
<li>request：代表的是请求对象,可以用于获得客户机的信息,也可以作为域对象来使用，使用request保存的数据在一次请求范围内有效。</li>
<li>Session代表的是一次会话，可以用于保存用户的私有的信息,也可以作为域对象使用，使用session保存的数据在一次会话范围有效</li>
<li>Application：代表整个应用范围,使用这个对象保存的数据在整个web应用中都有效。</li>
<li>Response：是响应对象,代表的是从服务器向浏览器响应数据.</li>
<li>Out：out对象被封装为JSPWriter接口，是用于向页面输出内容的对象</li>
<li>Config：指的是ServletConfig用于JSP翻译成Servlet后 获得Servlet的配置的对象.</li>
<li>Exception：在页面中设置isErrorPage=”true”，即可使用，是Throwable的引用.用来获得页面的错误信息。</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://bbs.itheima.com/thread-329949-1-1.html">Java就业企业面试问题-Java Web（强烈推荐）</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>面试</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>jsp自定义模板（解决样式改变问题）</title>
    <url>/2017/06/09/javaee-jsp-diy-template/</url>
    <content><![CDATA[<h3 id="html转jsp页面样式发生改变"><a href="#html转jsp页面样式发生改变" class="headerlink" title="html转jsp页面样式发生改变"></a>html转jsp页面样式发生改变</h3><p>jsp页面DOCTYPE声明不对或者没有声明</p>
<p>修改idea jsp模板</p>
<p><code>file-&gt;settings-&gt;Editor-&gt;File and Code Templates-&gt;Other-&gt;jsp files</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%--不加这个样式会发生改变--%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;#[[$Title$]]#&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  #[[$END$]]#</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>idea默认jsp模板没有设置DOCTYPE</p>
<p>web2.5默认<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"></p>
<p>3.0默认<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"></p>
<p>html5默认<!DOCTYPE html></p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><h3 id="html转jsp页面样式发生改变-1"><a href="#html转jsp页面样式发生改变-1" class="headerlink" title="html转jsp页面样式发生改变"></a><a href="http://blog.csdn.net/qq_27039233/article/details/54092450">html转jsp页面样式发生改变</a></h3>]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>jsp</tag>
        <tag>idea</tag>
        <tag>DOCTYPE</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP基础语法</title>
    <url>/2017/03/06/javaee-jsp/</url>
    <content><![CDATA[<h3 id="什么是jsp"><a href="#什么是jsp" class="headerlink" title="什么是jsp"></a>什么是jsp</h3><p>是动态网页，可以嵌入java 代码 ，jsp 爷爷是servlet</p>
<h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%-- page指令，可以配置session，errorPage，iserrorpage等等 --%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%-- 包含指令：用于设置公共的部分（eg：页头、也脚） --%&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;/index.jsp&quot;</span>%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="comment">//  ！  定义在方法外面，可用做类的方法、属性</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String aa = <span class="string">&quot;xaa&quot;</span>; <span class="comment">//java 代码</span></span><br><span class="line">%&gt;</span><br><span class="line">&lt;%=aa%&gt;  &lt;%-- 相当于out.print(aa); --%&gt;</span><br></pre></td></tr></table></figure>
<h3 id="jsp九大隐式对象"><a href="#jsp九大隐式对象" class="headerlink" title="jsp九大隐式对象"></a>jsp九大隐式对象</h3><ul>
<li><strong>Reqeust</strong></li>
<li><strong>Response</strong></li>
<li><strong>Session</strong></li>
<li><strong>Application</strong></li>
<li><strong>Config</strong></li>
<li><strong>Page</strong></li>
<li><strong>Out</strong></li>
<li><strong>Exception</strong> (jsp独有)</li>
<li><strong>pageContext</strong> (jsp独有)</li>
</ul>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>jsp</tag>
        <tag>入门</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE之单元测试</title>
    <url>/2017/04/01/javaee-junit/</url>
    <content><![CDATA[<h4 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h4><p>Gradle-&gt;[Java,Web]-&gt;[GroupId:com.xuan,Artifactld:projectName]-&gt;[Use auto-import,Creat dir…..lly]</p>
<h4 id="添加测试"><a href="#添加测试" class="headerlink" title="添加测试"></a>添加测试</h4><p>选中要测试的-&gt;<code>ctrl+shift+t</code></p>
<p>被测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JunitHello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">printHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;hello junit&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello junit&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码(目录test/java下有效)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JunitHelloTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       JunitHello junitHello=<span class="keyword">new</span> JunitHello();</span><br><span class="line">        assertEquals(junitHello.printHello(),<span class="string">&quot;hellojunit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello junit</span><br><span class="line">org.junit.ComparisonFailure: </span><br><span class="line">Expected :hello junit</span><br><span class="line">Actual   :hellojunit</span><br><span class="line"> &lt;Click to see difference&gt;</span><br><span class="line"></span><br><span class="line">	at com.xuan.test.JunitHelloTest.printHello(JunitHelloTest.java:14)</span><br><span class="line">	</span><br><span class="line">Process finished with exit code -1</span><br></pre></td></tr></table></figure>

<h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><p>自动导入了junit的包、测试代码只能在\test目录下才能使用，不然招不到junit的包，不需要添加JUnitGenerator V2.0自动生成测试模块插件</p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>单元测试</tag>
        <tag>junit</tag>
        <tag>grade</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM实战之用户登陆流程</title>
    <url>/2017/05/17/javaee-login-mvc/</url>
    <content><![CDATA[<h3 id="1-显示层"><a href="#1-显示层" class="headerlink" title="1. 显示层"></a>1. 显示层</h3><p>前端页面<code>login.jsp</code></p>
<p>在<code>InternalResourceViewResolver</code>配置jsp目录</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;欢迎登陆&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form id=<span class="string">&quot;login&quot;</span> action=<span class="string">&quot;&lt;c:url value=&#x27;/user/login.do&#x27;/&gt;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;Log In&lt;/h1&gt;</span><br><span class="line">    &lt;fieldset id=<span class="string">&quot;inputs&quot;</span>&gt;</span><br><span class="line">        &lt;input id=<span class="string">&quot;username&quot;</span> name=<span class="string">&quot;name&quot;</span> type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;Username&quot;</span> autofocus required&gt;</span><br><span class="line">        &lt;input id=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span> type=<span class="string">&quot;password&quot;</span> placeholder=<span class="string">&quot;Password&quot;</span> required&gt;</span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">    &lt;fieldset id=<span class="string">&quot;actions&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> id=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Log in&quot;</span>&gt;</span><br><span class="line">        &lt;a href=&quot;&quot;&gt;Forgot your password?&lt;/a&gt;&lt;a href=&quot;&quot;&gt;Register&lt;/a&gt;</span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>前端控制层<code>UserController.java</code></p>
<p>在<code>spring-mvc.xml</code>配置<code>&lt;context:component-scan base-package=&quot;com.xuan.user.controller&quot;/&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">  	<span class="meta">@RequestMapping(value = &quot;/login&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">login</span><span class="params">(User user, HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;login&quot;</span>).addObject(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;登陆信息不能为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(user.getName()) || StringUtils.isEmpty(user.getPassword()))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;login&quot;</span>).addObject(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;用户名或密码不能为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        user = userService.login(user);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-业务控制层"><a href="#2-业务控制层" class="headerlink" title="2.业务控制层"></a>2.业务控制层</h3><p>service接口层</p>
<p>业务接口<code>UserService.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service接口实现层（impl）</p>
<p>业务实现<code>UserServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findByUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-持久层"><a href="#3-持久层" class="headerlink" title="3.持久层"></a>3.持久层</h3><p>在<code>spring-beans.xml</code>配置<code>MapperScannerConfigurer</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;context:component-scan base-package&#x3D;&quot;com.xuan&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>接口层<code>UserDao.jva</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span> <span class="comment">//注册为持久层的bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findByUser</span><span class="params">(<span class="meta">@Param(&quot;user&quot;)</span> User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sqlmapper数据库语句</p>
<p>在<code>spring-bean.xml</code>配置<code>SqlSessionFactoryBean</code></p>
<p><code>userMapper.xml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;!-- namespace的值就是dao接口的完整路劲，就这个demo而言namespace 就是TestDao.java的完整路劲 --&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.xuan.user.dao.UserDao&quot;&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;findByUser&quot; parameterType&#x3D;&quot;com.xuan.user.model.User&quot; resultType&#x3D;&quot;com.xuan.user.model.User&quot;&gt;</span><br><span class="line">        SELECT * FROM x_user WHERE (&#96;name&#96;&#x3D;#&#123;user.name&#125; OR &#96;email&#96;&#x3D;#&#123;user.email&#125; OR &#96;phone&#96;&#x3D;#&#123;user.phone&#125;) AND &#96;password&#96;&#x3D;#&#123;user.password&#125;;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-实体"><a href="#4-实体" class="headerlink" title="4. 实体"></a>4. 实体</h3><p>model实体层</p>
<p>在<code>mybatis-conf.xml</code>配置<code>&lt;typeAliases&gt;&lt;package name=&quot;com.xuan.user.model&quot;/&gt;&lt;/typeAliases&gt;</code></p>
<p>实体类<code>User.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line">  	.....</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">  	.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>gradle</tag>
        <tag>JavaEE</tag>
        <tag>idea</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>MyBatis</tag>
        <tag>实战</tag>
      </tags>
  </entry>
  <entry>
    <title>idea ssm 目录结构</title>
    <url>/2017/05/04/javaee-maven-dir-template/</url>
    <content><![CDATA[<h3 id="项目基本目录结构"><a href="#项目基本目录结构" class="headerlink" title="项目基本目录结构"></a>项目基本目录结构</h3><table>
<thead>
<tr>
<th align="left">项目根/</th>
<th>说明</th>
<th>Mark as</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pom.iml</td>
<td>项目资源目录配置文件[^可视化配置界面]</td>
<td><code>自动生成</code></td>
</tr>
<tr>
<td align="left">src/main/java</td>
<td>源代码目录，存放java代码</td>
<td>Sources</td>
</tr>
<tr>
<td align="left">src/main/resources</td>
<td>配置（资源）文件存放目录</td>
<td>Resources</td>
</tr>
<tr>
<td align="left">src/main/webapp</td>
<td>存放静态网页目录</td>
<td>web目录[^web目录设置]</td>
</tr>
<tr>
<td align="left">src/test/java</td>
<td>测试代码目录</td>
<td>Tests</td>
</tr>
<tr>
<td align="left">src/test/resources</td>
<td>测试配置（资源）文件目录</td>
<td>Tests Resources</td>
</tr>
<tr>
<td align="left">target/</td>
<td>输出根目录</td>
<td>Excluded</td>
</tr>
</tbody></table>
<p>[^可视化配置界面]: 在<code>Project Structure</code>-&gt;<code>Modules</code>-&gt;<code>Sources</code><br>[^web目录设置]: 在<code>Project Structure</code>-&gt;<code>Modules</code>-&gt;<code>项目名</code>-&gt;<code>Web</code>-&gt;<code>配置xml的位置和web的目录和保护的资源目录</code></p>
<h3 id="项目额外目录结构"><a href="#项目额外目录结构" class="headerlink" title="项目额外目录结构"></a>项目额外目录结构</h3><table>
<thead>
<tr>
<th>项目根/</th>
<th>说明</th>
<th>Mark as</th>
</tr>
</thead>
<tbody><tr>
<td>src/site</td>
<td>与site相关资源目录</td>
<td></td>
</tr>
<tr>
<td>src/main/filters</td>
<td>资源过滤文件目录</td>
<td></td>
</tr>
<tr>
<td>src/main/assembly</td>
<td>Assembly descriptors</td>
<td></td>
</tr>
<tr>
<td>src/mian/config</td>
<td>配置文件目录</td>
<td></td>
</tr>
<tr>
<td>src/main/scripts</td>
<td>Application/Library scripts</td>
<td></td>
</tr>
<tr>
<td>src/test/filters</td>
<td>测试资源过滤文件目录</td>
<td></td>
</tr>
<tr>
<td>target/classes</td>
<td>项目主体输出目录</td>
<td></td>
</tr>
<tr>
<td>target/test-calsses</td>
<td>项目测试输出目录</td>
<td></td>
</tr>
<tr>
<td>target/site</td>
<td>项目site输出目录</td>
<td></td>
</tr>
<tr>
<td>LICENSE.md</td>
<td>项目license</td>
<td></td>
</tr>
<tr>
<td>NOTICE.md</td>
<td>Notices and attributions required by libraries that the project depends on</td>
<td></td>
</tr>
<tr>
<td>README.md</td>
<td>项目readme</td>
<td></td>
</tr>
</tbody></table>
<h5 id="子项目打包"><a href="#子项目打包" class="headerlink" title="子项目打包"></a>子项目打包</h5><p><code>mvn clean package -pl module_name -am </code></p>
<p><code>mvn clean package -pl pf_model/bpf_pf_platform,pf_model/bpf_pf_process -am</code></p>
<p>-am –also-make 同时构建所列模块的依赖模块； </p>
<p>-amd -also-make-dependents 同时构建依赖于所列模块的模块；</p>
<p> -pl –projects <arg> 构建制定的模块，模块间用逗号分隔；</p>
<p> -rf -resume-from <arg> 从指定的模块恢复反应堆。 </p>
<h5 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h5><p><a href="http://www.cnblogs.com/haippy/archive/2012/07/05/2577233.html">7天学会Maven（第二天——Maven 标准目录结构）</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>JavaEE</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE之MVC目录结构</title>
    <url>/2017/03/17/javaee-mvc-dir-template/</url>
    <content><![CDATA[<h2 id="mvc目录结构"><a href="#mvc目录结构" class="headerlink" title="mvc目录结构"></a>mvc目录结构</h2><p>模块内分mvc层，mvc层内分模块</p>
<p>eg：下面介绍以功能模块（model）进行mvc分层,类的命名以<code>功能模块名字Dao.java</code>命名</p>
<h6 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a><code>dao</code>层</h6><p>ModelDao.java文件结构如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.goods.model.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.jdbc.TxQueryRunner;</span><br><span class="line"><span class="keyword">import</span> com.xuan.goods.model.domain.Model;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">*模块持久层， 操作数据库</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelDao</span></span>&#123;</span><br><span class="line"> <span class="keyword">private</span> QueryRunner qr=<span class="keyword">new</span> TxQueryRunner();</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *抛出异常</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Model <span class="title">findByName</span><span class="params">(String name)</span><span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">  String sql=<span class="string">&quot;select result from model where name=?&quot;</span>;  <span class="comment">//数据库语句</span></span><br><span class="line">   <span class="comment">//？的值为第三个name参数值，多个问号依次像后面增加参数</span></span><br><span class="line">  <span class="keyword">return</span> qr.query(sql, <span class="keyword">new</span> BeanHandler&lt;Model&gt;(Model.class),name); </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="domain层"><a href="#domain层" class="headerlink" title="domain层"></a><code>domain</code>层</h6><p>Model.java文件结构如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.goods.model.domain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*实体层</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">  	<span class="comment">//对应数据库</span></span><br><span class="line"><span class="keyword">private</span> String uid;<span class="comment">//主键</span></span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">//名字</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> uid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(String uid)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.uid = uid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*get方法可以在jsp页面里直接用标签引用获得值，$&#123;model.name&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="service层"><a href="#service层" class="headerlink" title="service层"></a><code>service</code>层</h6><p>ModelService.java文件结构如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.goods.user.service;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">*业务逻辑层</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelService</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> ModelDao modelDao=<span class="keyword">new</span> ModelDao(); <span class="comment">//连接数据库操作层</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *业务逻辑</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Model <span class="title">findModel</span><span class="params">(String name)</span> throw ModelException</span>&#123;</span><br><span class="line">   Model model=modelDao.findByName(name);</span><br><span class="line">    <span class="keyword">if</span> (model=<span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="comment">//将错误转换为自定义异常ModelException自定义异常类只需要extends Exception这个类 </span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ModelException(<span class="string">&quot;未找到模块！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> model;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);<span class="comment">//转换异常，并传递异常</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="web层"><a href="#web层" class="headerlink" title="web层"></a><code>web</code>层</h6><p>servlet 包下ModelServlet.java文件结构如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.goods.model.web.servlet;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">*页面显示层</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> ModelService modelService=<span class="keyword">new</span> ModelService(); <span class="comment">//连接业务逻辑层</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> string <span class="title">findName</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		String name = req.getParameter(<span class="string">&quot;name&quot;</span>); <span class="comment">// 获取名</span></span><br><span class="line">		Model model = modelService.findModel(name);<span class="comment">// 通过service得到结果</span></span><br><span class="line">    	req.setAttribute(<span class="string">&quot;model&quot;</span>, model); <span class="comment">// 保存成功信息，转发到msg.jsp显示,jsp页面里直接用标签引用获得值，$&#123;model.name&#125;</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;f:/jsps/msg.jsp&quot;</span>; <span class="comment">// 转发到页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码见goods项目"><a href="#代码见goods项目" class="headerlink" title="代码见goods项目"></a>代码见<code>goods</code>项目</h3>]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>JavaEE</tag>
        <tag>环境搭建</tag>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis 使用</title>
    <url>/2017/12/14/javaee-mybatis-generator-examlpe-use/</url>
    <content><![CDATA[<h2 id="自动生成代码"><a href="#自动生成代码" class="headerlink" title="自动生成代码"></a>自动生成代码</h2><h3 id="maven形式"><a href="#maven形式" class="headerlink" title="maven形式"></a>maven形式</h3><ol>
<li><p>在<code>pom.xml</code>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line">    <span class="comment">&lt;!--Mybatis Mapper代码生成用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>pom.xml</code>添加插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis生成代码插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定配置文件路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>path/generactorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置<code>generactorConfig.xml</code>文件,改配置来源<a href="https://juejin.im/entry/5aabc4036fb9a028e11fb726">Mybatis系列—Mybatis插件使用（自动生成Mapper，分页）</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定oracle/mysql的驱动包的路径 千万别放中文路径下 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;C://Users//Administrator//.DataGrip2018.1//config//jdbc-drivers//MySQL Connector//J//5.1.46//mysql-connector-java-5.1.46.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源和生成的代码所存放的位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- targetRuntime=&quot;MyBatis3&quot; 生成条件查询等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;testTable&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置生成的Java文件的编码格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javaFileEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--格式化java代码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javaFormatter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.mybatis.generator.api.dom.DefaultJavaFormatter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--格式化xml代码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;xmlFormatter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.mybatis.generator.api.dom.DefaultXmlFormatter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--javaBean 实现序列化接口--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.SerializablePlugin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--javaBean生成toString() 方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--生成代码时，是否生成注释  true：不  false：是--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://192.168.204.182:3306/manage?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>zeroDateTimeBehavior=convertToNull<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span> <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;lfadmin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            java类型处理器</span></span><br><span class="line"><span class="comment">              用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；</span></span><br><span class="line"><span class="comment">               注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；</span></span><br><span class="line"><span class="comment">           --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--生成实体--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.willson.facade.pojo.plot&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;../facade/src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--生成mapper.xml文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;plot&quot;</span>  <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources/mapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--生成dao接口--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.willson.service.mapper.plot&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--为哪些表生成代码 tableName=表名字  domainObjectName 生成实体类名字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;tb_plot_herbaceous_plant&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;herbaceousPlant&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>最后在右侧<code>maven projects-&gt;plugins-&gt;mybatis-generator:generate</code>运行就会生成了</p>
<p><img src="https://s3.ax1x.com/2021/03/18/627iv9.png" alt="1530182957362"></p>
</li>
</ol>
<p>##注解式</p>
<p>基本格式,接口加<code>@Mapper</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xhzg.xhzg.mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where username=#&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">loadUserByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where username=#&#123;username&#125;&quot;)</span> <span class="comment">//查询语</span></span><br></pre></td></tr></table></figure>

<h4 id="实现插入数据后返回自增id："><a href="#实现插入数据后返回自增id：" class="headerlink" title="实现插入数据后返回自增id："></a>实现插入数据后返回自增id：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;INSERT INTO picturedetail(userid,detail) VALUES(#&#123;userid&#125;, #&#123;detail&#125;)&quot;)</span></span><br><span class="line"><span class="meta">@Options(useGeneratedKeys = true, keyProperty = &quot;picturedetailid&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertPictureDetail</span><span class="params">(PictureDetail pictureDetail)</span></span>;</span><br></pre></td></tr></table></figure>

<p><code>Options(useGeneratedKeys = true, keyProperty = &quot;自增id&quot;)</code>用于返回自增id，返回后id读取直接从传入的</p>
<p><code>PictureDetail</code>类里获取即可，不是通过返回值接收</p>
<h4 id="实现where-if-查询语句"><a href="#实现where-if-查询语句" class="headerlink" title="实现where if 查询语句"></a>实现where if 查询语句</h4><p>通过<code> @SelectProvider(type</code>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SelectProvider(type = Provider.class,method = &quot;queryPaperByParam&quot;)</span></span><br><span class="line"><span class="function">List&lt;Paper&gt; <span class="title">selectPaper</span><span class="params">(Paper paper)</span></span>;</span><br></pre></td></tr></table></figure>

<p>查询provider类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TBL_PAPER = <span class="string">&quot;paper&quot;</span>; <span class="comment">//表名</span></span><br><span class="line">	<span class="comment">//查询方法，和注解里的名字要一致</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryPaperByParam</span><span class="params">(Paper paper)</span> </span>&#123;</span><br><span class="line">        SQL sql = <span class="keyword">new</span> SQL().SELECT(<span class="string">&quot;*&quot;</span>).FROM(TBL_PAPER);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(paper.getPapername())) &#123;</span><br><span class="line">            sql.WHERE(<span class="string">&quot;papername LIKE &#x27;%&quot;</span>+paper.getPapername()+<span class="string">&quot;%&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (paper.getPaperid()!=<span class="number">0</span>) &#123;</span><br><span class="line">            sql.WHERE(<span class="string">&quot;paperid = #&#123;paperid&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sql.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="xml式"><a href="#xml式" class="headerlink" title="xml式"></a>xml式</h2><h3 id="Mybatis-Generator-Example"><a href="#Mybatis-Generator-Example" class="headerlink" title="Mybatis Generator Example"></a><a href="http://www.mybatis.org/generator/generatedobjects/exampleClassUsage.html">Mybatis Generator Example</a></h3><h3 id="1-OR条件的使用"><a href="#1-OR条件的使用" class="headerlink" title="1.OR条件的使用"></a>1.OR条件的使用</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--?=keyword</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> TBL_TEST <span class="keyword">WHERE</span> ( NAME <span class="keyword">like</span> ? ) <span class="keyword">or</span>( SEX <span class="keyword">like</span> ? ) <span class="keyword">and</span> Class<span class="operator">=</span><span class="string">&#x27;1班&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>等效于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TblTestExample example = <span class="keyword">new</span> TblTestExample();</span><br><span class="line">       <span class="keyword">if</span> (!StringUtil.isEmpty(keyword)) &#123;</span><br><span class="line">           keyword=<span class="string">&quot;%&quot;</span>+keyword+<span class="string">&quot;%&quot;</span>; <span class="comment">//必须加，不然查不到</span></span><br><span class="line">           example.or().andNameLike(keyword); <span class="comment">//根据关键字查找</span></span><br><span class="line">           example.or().andSexLike(keyword);<span class="comment">//必须分开写，不然不是or</span></span><br><span class="line">       &#125;    </span><br><span class="line">	example.createCriteria().andClassEqualTo(<span class="string">&quot;1班&quot;</span>); <span class="comment">//限定会员单位</span></span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;TblTest&gt; testList = testMapper.selectByExample(example);</span><br></pre></td></tr></table></figure>



<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol>
<li><p><code>Mapper method &#39;com.xxx&#39; has an unsupported return type: class com.xxx.User</code>问题原因是mapper 中insert只能返回int，因此修改返回类型即可</p>
</li>
<li><p><code>nested exception is org.apache.ibatis.builder.BuilderException: Error invoking SqlProvider method (com.xhzg.xhzg.mapper.Provider.queryflowerByParam). Cannot invoke a method that holds named argument(@Param) using a specifying parameterObject. In this case, please specify a &#39;java.util.Map&#39; object.</code>错误解决：指定@param</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//provider知道@param  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryflowerByParam</span><span class="params">(<span class="meta">@Param(&quot;classid&quot;)</span> <span class="keyword">int</span> classid)</span> </span>&#123;&#125;</span><br><span class="line"><span class="meta">@SelectProvider(type = Provider.class,method = &quot;queryflowerByParam&quot;)</span></span><br><span class="line"><span class="function">List&lt;FlowerInfoEntiy&gt; <span class="title">selectFlowerinfo</span><span class="params">(<span class="meta">@Param(&quot;classid&quot;)</span> <span class="keyword">int</span> classid)</span></span>;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h4><p><code>generactorConfig.xml</code>文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置生成器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用$&#123;propertyKey&#125;的方式来引用配置项</span></span><br><span class="line"><span class="comment">    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties        </span></span><br><span class="line"><span class="comment">    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.</span></span><br><span class="line"><span class="comment">    注意，两个属性只能选址一个;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用</span></span><br><span class="line"><span class="comment">&lt;properties resource=&quot;&quot; url=&quot;&quot; /&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 在MBG工作的时候，需要额外加载的依赖包</span></span><br><span class="line"><span class="comment">     location属性指明加载jar/zip包的全路径</span></span><br><span class="line"><span class="comment">&lt;classPathEntry location=&quot;/Program Files/IBM/SQLLIB/java/db2java.zip&quot; /&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    context:生成一组对象的环境 </span></span><br><span class="line"><span class="comment">    id:必选，上下文id，用于在生成错误时提示</span></span><br><span class="line"><span class="comment">    defaultModelType:指定生成对象的样式</span></span><br><span class="line"><span class="comment">        1，conditional：类似hierarchical；</span></span><br><span class="line"><span class="comment">        2，flat：所有内容（主键，blob）等全部生成在一个对象中；</span></span><br><span class="line"><span class="comment">        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)</span></span><br><span class="line"><span class="comment">    targetRuntime:</span></span><br><span class="line"><span class="comment">        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；</span></span><br><span class="line"><span class="comment">        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；</span></span><br><span class="line"><span class="comment">    introspectedColumnImpl：类全限定名，用于扩展MBG</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">defaultModelType</span>=<span class="string">&quot;hierarchical&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；</span></span><br><span class="line"><span class="comment">        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoDelimitKeywords&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生成的Java文件的编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javaFileEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 格式化java代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javaFormatter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.mybatis.generator.api.dom.DefaultJavaFormatter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 格式化XML代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;xmlFormatter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.mybatis.generator.api.dom.DefaultXmlFormatter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beginningDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;endingDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 必须要有的，使用这个配置链接数据库</span></span><br><span class="line"><span class="comment">        @<span class="doctag">TODO:</span>是否可以扩展</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql:///pss&quot;</span> <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;admin&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- java类型处理器 </span></span><br><span class="line"><span class="comment">        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；</span></span><br><span class="line"><span class="comment">        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaTypeResolver</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型</span></span><br><span class="line"><span class="comment">            false：默认,</span></span><br><span class="line"><span class="comment">                scale&gt;0;length&gt;18：使用BigDecimal;</span></span><br><span class="line"><span class="comment">                scale=0;length[10,18]：使用Long；</span></span><br><span class="line"><span class="comment">                scale=0;length[5,9]：使用Integer；</span></span><br><span class="line"><span class="comment">                scale=0;length&lt;5：使用Short；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- java模型创建器，是必须要的元素</span></span><br><span class="line"><span class="comment">        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类</span></span><br><span class="line"><span class="comment">        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；</span></span><br><span class="line"><span class="comment">        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com._520it.mybatis.domain&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  for MyBatis3/MyBatis3Simple</span></span><br><span class="line"><span class="comment">            自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;constructorBased&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- for MyBatis3 / MyBatis3Simple</span></span><br><span class="line"><span class="comment">            是否创建一个不可变的类，如果为true，</span></span><br><span class="line"><span class="comment">            那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;immutable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 设置一个根对象，</span></span><br><span class="line"><span class="comment">            如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项</span></span><br><span class="line"><span class="comment">            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：</span></span><br><span class="line"><span class="comment">                1，属性名相同，类型相同，有相同的getter/setter方法；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;rootClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com._520it.mybatis.domain.BaseDomain&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生成SQL map的XML文件生成器，</span></span><br><span class="line"><span class="comment">        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），</span></span><br><span class="line"><span class="comment">            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置</span></span><br><span class="line"><span class="comment">        targetPackage/targetProject:同javaModelGenerator</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com._520it.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 </span></span><br><span class="line"><span class="comment">        targetPackage/targetProject:同javaModelGenerator</span></span><br><span class="line"><span class="comment">        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：</span></span><br><span class="line"><span class="comment">            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；</span></span><br><span class="line"><span class="comment">            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；</span></span><br><span class="line"><span class="comment">            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；</span></span><br><span class="line"><span class="comment">        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com._520it.mybatis.mapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;ANNOTATEDMAPPER&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;rootInterface&quot; value=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素</span></span><br><span class="line"><span class="comment">        选择的table会生成一下文件：</span></span><br><span class="line"><span class="comment">        1，SQL map文件</span></span><br><span class="line"><span class="comment">        2，生成一个主键类；</span></span><br><span class="line"><span class="comment">        3，除了BLOB和主键的其他字段的类；</span></span><br><span class="line"><span class="comment">        4，包含BLOB的类；</span></span><br><span class="line"><span class="comment">        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；</span></span><br><span class="line"><span class="comment">        6，Mapper接口（可选）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        tableName（必要）：要生成对象的表名；</span></span><br><span class="line"><span class="comment">        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会</span></span><br><span class="line"><span class="comment">            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：</span></span><br><span class="line"><span class="comment">            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；</span></span><br><span class="line"><span class="comment">            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；</span></span><br><span class="line"><span class="comment">            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；</span></span><br><span class="line"><span class="comment">            4，否则，使用指定的大小写格式查询；</span></span><br><span class="line"><span class="comment">        另外的，如果在创建表的时候，使用的&quot;&quot;把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；</span></span><br><span class="line"><span class="comment">        这个时候，请设置delimitIdentifiers=&quot;true&quot;即可保留大小写格式；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        可选：</span></span><br><span class="line"><span class="comment">        1，schema：数据库的schema；</span></span><br><span class="line"><span class="comment">        2，catalog：数据库的catalog；</span></span><br><span class="line"><span class="comment">        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName</span></span><br><span class="line"><span class="comment">        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；</span></span><br><span class="line"><span class="comment">        5，enableInsert（默认true）：指定是否生成insert语句；</span></span><br><span class="line"><span class="comment">        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；</span></span><br><span class="line"><span class="comment">        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；</span></span><br><span class="line"><span class="comment">        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；</span></span><br><span class="line"><span class="comment">        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；</span></span><br><span class="line"><span class="comment">        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；</span></span><br><span class="line"><span class="comment">        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；</span></span><br><span class="line"><span class="comment">        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；</span></span><br><span class="line"><span class="comment">        13，modelType：参考context元素的defaultModelType，相当于覆盖；</span></span><br><span class="line"><span class="comment">        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）</span></span><br><span class="line"><span class="comment">        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;userinfo&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 constructorBased属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;constructorBased&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ignoreQualifiersAtRuntime&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 immutable 属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;immutable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;modelOnly&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 rootClass 属性 </span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;rootClass&quot; value=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 参考javaClientGenerator 的  rootInterface 属性</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;rootInterface&quot; value=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog </span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;runtimeCatalog&quot; value=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema </span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;runtimeSchema&quot; value=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename </span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;runtimeTableName&quot; value=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 注意，该属性只针对MyBatis3Simple有用；</span></span><br><span class="line"><span class="comment">            如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;selectAllOrderByClause&quot;</span> <span class="attr">value</span>=<span class="string">&quot;age desc,username asc&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useActualColumnNames&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- generatedKey用于生成生成主键的方法，</span></span><br><span class="line"><span class="comment">            如果设置了该元素，MBG会在生成的&lt;insert&gt;元素中生成一条正确的&lt;selectKey&gt;元素，该元素可选</span></span><br><span class="line"><span class="comment">            column:主键的列名；</span></span><br><span class="line"><span class="comment">            sqlStatement：要生成的selectKey语句，有以下可选项：</span></span><br><span class="line"><span class="comment">                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1</span></span><br><span class="line"><span class="comment">                Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">                HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()</span></span><br><span class="line"><span class="comment">                Informix  :相当于selectKey的SQL为：select dbinfo(&#x27;sqlca.sqlerrd1&#x27;) from systables where tabid=1</span></span><br><span class="line"><span class="comment">                MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()</span></span><br><span class="line"><span class="comment">                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()</span></span><br><span class="line"><span class="comment">                SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY</span></span><br><span class="line"><span class="comment">                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys=&quot;true&quot;和keyProperty属性</span></span><br><span class="line"><span class="comment">        &lt;generatedKey column=&quot;&quot; sqlStatement=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，</span></span><br><span class="line"><span class="comment">            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；</span></span><br><span class="line"><span class="comment">            那么就可以设置searchString为&quot;^CUST_&quot;，并使用空白替换，那么生成的Customer对象中的属性名称就不是</span></span><br><span class="line"><span class="comment">            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，</span></span><br><span class="line"><span class="comment">            如果使用了columnOverride元素，该属性无效；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &lt;columnRenamingRule searchString=&quot;&quot; replaceString=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；</span></span><br><span class="line"><span class="comment">             column:要重新设置的列名；</span></span><br><span class="line"><span class="comment">             注意，一个table元素中可以有多个columnOverride元素哈~</span></span><br><span class="line"><span class="comment">          --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 使用property属性来指定列要生成的属性名称 --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;property&quot;</span> <span class="attr">value</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">&lt;!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名</span></span><br><span class="line"><span class="comment">             &lt;property name=&quot;javaType&quot; value=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">              --&gt;</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">&lt;!-- jdbcType用于指定该列的JDBC类型 </span></span><br><span class="line"><span class="comment">             &lt;property name=&quot;jdbcType&quot; value=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">              --&gt;</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">&lt;!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名</span></span><br><span class="line"><span class="comment">                 注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler</span></span><br><span class="line"><span class="comment">                 只会生成类似：where id = #&#123;id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler&#125;的参数描述</span></span><br><span class="line"><span class="comment">             &lt;property name=&quot;jdbcType&quot; value=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">&lt;!-- 参考table元素的delimitAllColumns配置，默认为false</span></span><br><span class="line"><span class="comment">             &lt;property name=&quot;delimitedColumnName&quot; value=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">              --&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">columnOverride</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 </span></span><br><span class="line"><span class="comment">             column:指定要忽略的列的名字；</span></span><br><span class="line"><span class="comment">             delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             注意，一个table元素中可以有多个ignoreColumn元素</span></span><br><span class="line"><span class="comment">         &lt;ignoreColumn column=&quot;deptId&quot; delimitedColumnName=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE-MyBatis</title>
    <url>/2018/10/16/javaee-mybatis/</url>
    <content><![CDATA[<h2 id="mybatis使用基础"><a href="#mybatis使用基础" class="headerlink" title="mybatis使用基础"></a>mybatis使用基础</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.willson.service.mapper.infrared.InfraredPictureMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.willson.facade.pojo.infrared.InfraredPicture&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;r_id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;resource&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.willson.facade.pojo.sys.Resource&quot;</span> <span class="attr">columnPrefix</span>=<span class="string">&quot;r_&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;soil&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.willson.facade.pojo.plot.Soil&quot;</span> <span class="attr">columnPrefix</span>=<span class="string">&quot;s_&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;plot_num&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;plotNum&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">    t.id,</span><br><span class="line">    r.id r_id</span><br><span class="line">  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span>    </span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p><code>&lt;id column=&quot;r_id&quot; /&gt;</code> 一般主键id，如果id存在相同（例如一对多时）,id相同的就只会显示一个,因此在多一对多是，关联字段也要加别名</p>
<p><code> &lt;association  &gt;</code> 对应实体类object ,一对一</p>
<p><code>&lt;collection &gt;</code>对应list&lt; Object &gt; ,一对多</p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>JavaEE</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot Security cors跨域解决</title>
    <url>/2018/03/30/javaee-sb-security-cors/</url>
    <content><![CDATA[<h3 id="springboot-security解决cors"><a href="#springboot-security解决cors" class="headerlink" title="springboot security解决cors"></a>springboot security解决cors</h3><p>添加配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>WebSecurityConfig extends WebSecurityConfigurerAdapter</code>类里面添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">CorsConfigurationSource <span class="title">corsConfigurationSource</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CorsConfiguration configuration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">    configuration.setAllowedOrigins(Arrays.asList(<span class="string">&quot;https://example.com&quot;</span>));</span><br><span class="line">    configuration.setAllowedMethods(Arrays.asList(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;POST&quot;</span>));</span><br><span class="line">    UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">    source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, configuration);</span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.cors().and()....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="tomcat配置cors（废弃）"><a href="#tomcat配置cors（废弃）" class="headerlink" title="tomcat配置cors（废弃）"></a>tomcat配置cors（废弃）</h3><p><a href="https://tomcat.apache.org/tomcat-8.5-doc/config/filter.html#CORS_Filter">官网</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/data/tomcat/bin/catalina.sh version</span><br><span class="line">&gt;Using CATALINA_HOME:   /data/tomcat/</span><br><span class="line">vim /data/tomcat/conf/web.xml</span><br></pre></td></tr></table></figure>

<p>添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.catalina.filters.CorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.origins<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果设置*，cors.support.credentials不能设置true不然会启动报错 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置成前端的访问地址例如 访问http://192.168.101.210:8006,这里就可以设置成该地址 --&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.methods<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>GET,POST,HEAD,OPTIONS,PUT<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.allowed.headers<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.exposed.headers<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Access-Control-Allow-Origin,Access-Control-Allow-Credentials<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.support.credentials<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cors.preflight.maxage<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>err:</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#x27;http:<span class="comment">//192.168.101.210:8005/fun/login.do?loginName=admin&amp;pwd=a123456&amp;yzm=2giu&amp;userType=1&#x27; from origin &#x27;http://127.0.0.1:32768&#x27; has been blocked by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span></span><br></pre></td></tr></table></figure>

<p>其中<code>from origin</code>后面的地址设置到<code>cors.allowed.origins</code>,多个地址<code>,</code>分割</p>
<p>问题：这个经测试，发现option一直提示跨域</p>
<h3 id="filter解决跨域"><a href="#filter解决跨域" class="headerlink" title="filter解决跨域"></a>filter解决跨域</h3><p>新建一个<code>CorsFilter</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.controller.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">        String currentOrigin = request.getHeader(<span class="string">&quot;Origin&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, currentOrigin);   <span class="comment">//  允许所有域名的请求</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;GET, POST, PUT, DELETE, OPTIONS, HEAD&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class="line">                <span class="string">&quot;User-Agent,Origin,Cache-Control,Content-type,Date,Server,withCredentials,AccessToken&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Expose-Headers&quot;</span>, <span class="string">&quot;CUSTOMSESSIONID&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Request-Headers&quot;</span>, <span class="string">&quot;CUSTOMSESSIONID&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;x-auth-token,Origin,Access-Token,X-Requested-With,Content-Type,Accept&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (request.getMethod().equals(<span class="string">&quot;OPTIONS&quot;</span>)) &#123;</span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在<code>src\main\webapp\WEB-INF\web.xml</code>里配置,配成第一个过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>corsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.xxx.controller.innercs.filter.CorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>corsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个和tomcat不能同时配置，会导致同时设置两个跨域地址</p>
<h3 id="跨域测试"><a href="#跨域测试" class="headerlink" title="跨域测试"></a>跨域测试</h3><p>chrome console输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://192.168.1.230:14083/app/geography/painting/&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure>

<p>在network查看结果</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://mp.weixin.qq.com/s/fAIl6IYugLb2p6E-4oBJTQ">九种跨域方式实现原理</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>cors</tag>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE-shiro</title>
    <url>/2018/05/20/javaee-shiro/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Apache Shiro是java的一个安全框架，和<code>Spring Security</code>比相对简单，功能简单，使用简单，适合小型简单的项目。</p>
<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul>
<li>Authentication：身份认证/登陆，验证用户身份</li>
<li>Authorization：授权，权限验证，验证已认证的用户是否拥有某个权限</li>
<li>session manager：会话管理</li>
<li>cryptography：加密</li>
<li>web support：web支持</li>
<li>caching：缓存</li>
<li>concurrency：多线程并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li>
<li>testing：测试支持</li>
<li>run as：运行一个用户假装另一个用户的身份进行登陆</li>
<li>remember me：记住我密码功能</li>
</ul>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">a[object&#x2F;用户]--&gt;b[SecurityManager&#x2F;shiro]</span><br><span class="line">b--&gt;c[Realm&#x2F;数据源]</span><br></pre></td></tr></table></figure>

<h4 id="简单体验登陆"><a href="#简单体验登陆" class="headerlink" title="简单体验登陆"></a>简单体验登陆</h4><ol>
<li><p>在gradle引入依赖<code>compile group: &#39;org.apache.shiro&#39;, name: &#39;shiro-core&#39;, version: &#39;1.4.0&#39;</code></p>
</li>
<li><p>在目录<code>resources</code>下新建一个<code>shiro.ini</code>文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># users 标签下面格式为</span></span><br><span class="line"><span class="comment"># 用户名 = 密码,角色1，角色2，....,角色N</span></span><br><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">root</span> = secret, admin</span><br><span class="line"><span class="attr">guest</span> = guest, guest</span><br><span class="line"><span class="attr">test</span> = <span class="number">123456</span>,test</span><br><span class="line"></span><br><span class="line"><span class="comment"># roldes 角色标签下面格式为</span></span><br><span class="line"><span class="comment"># 角色 = 权限1，权限2, ....权限N</span></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="attr">admin</span> = *</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建登陆方法，<code>IniSecurityManagerFactory</code>该方法在1.4已经过期了，用下面的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Factory&lt;SecurityManager&gt; factory=new IniSecurityManagerFactory(&quot;classpath:shiro.ini&quot;); //此方法过期</span></span><br><span class="line">IniRealm iniRealm=<span class="keyword">new</span> IniRealm(<span class="string">&quot;classpath:shiro.ini&quot;</span>); <span class="comment">//读取shiro配置文件</span></span><br><span class="line">DefaultSecurityManager securityManager=<span class="keyword">new</span> DefaultSecurityManager(iniRealm);</span><br><span class="line">SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">Subject currentUser=SecurityUtils.getSubject();</span><br><span class="line"><span class="keyword">if</span> (!currentUser.isAuthenticated())&#123;</span><br><span class="line">    UsernamePasswordToken token=<span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    token.setRememberMe(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        currentUser.login(token);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (UnknownAccountException una)&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;用户名不存在&quot;</span>+una.getMessage());</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IncorrectCredentialsException ice)&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;无效的认证&quot;</span>+ice.getMessage());</span><br><span class="line">    &#125;<span class="keyword">catch</span> (LockedAccountException lae)&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;你的账户被锁定&quot;</span>+lae.getMessage());</span><br><span class="line">    &#125;<span class="keyword">catch</span> (AuthenticationException ae)&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;未知错误&quot;</span>+ae.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="shiro名词概念解释"><a href="#shiro名词概念解释" class="headerlink" title="shiro名词概念解释"></a>shiro名词概念解释</h4><ul>
<li>subject ：当前操作的用户</li>
<li>SecurityManager ：shiro框架核心，内部组件管理</li>
<li>realm : 连接桥梁，用于和用户数据，权限数据连接（来源文件、数据库）</li>
</ul>
<p>xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;realms&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;customRealm&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cacheManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cacheManager&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sessionManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>数据库表设计：</p>
<p><img src="https://s3.ax1x.com/2021/03/18/627PgJ.png" alt="1529049788944"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.zifangsky.cn/770.html">Shiro权限控制框架入门</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>JavaEE</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE-SpringBoot-thymeleaf-layui</title>
    <url>/2018/03/29/javaee-springboot-thymeleaf-layui/</url>
    <content><![CDATA[<h3 id="SpringBoot-thymelef的使用以及模版"><a href="#SpringBoot-thymelef的使用以及模版" class="headerlink" title="SpringBoot thymelef的使用以及模版"></a>SpringBoot thymelef的使用以及模版</h3><p>thymelef模版配置,可以不用配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">check-template-location:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">    <span class="attr">encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">HTML5</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>thymelef添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>resource/templates</code>添加网页</p>
<p><code>$&#123;error&#125;</code>接收参数，<code>th:action=&quot;@&#123;/userLogin&#125;&quot;</code>表单提交地址</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;error&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg-danger&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;error&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-form&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/userLogin&#125;&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">lay-verify</span>=<span class="string">&quot;required&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加<code>controller</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginControl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(Model model)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;跳转而已&quot;</span>);  <span class="comment">//设置往网页传参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>; <span class="comment">//跳转login.html,并接受上面的参数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/userLogin&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userLogin</span><span class="params">(User user, Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;出现异常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>; <span class="comment">//更新网页返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="layui前端样式模版"><a href="#layui前端样式模版" class="headerlink" title="layui前端样式模版"></a>layui前端样式模版</h4><p>直接复制到<code>resource/static</code>资源目录即可</p>
<ol>
<li><p>layui简单的post请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span>  <span class="attr">lay-submit</span>=<span class="string">&quot;&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;addsort&quot;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        layui.use([<span class="string">&#x27;layer&#x27;</span>, <span class="string">&#x27;form&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> layer = layui.layer <span class="comment">//引用layer模块</span></span></span><br><span class="line"><span class="javascript">                , form = layui.form;<span class="comment">//引用form模块</span></span></span><br><span class="line"><span class="javascript">            form.on(<span class="string">&#x27;submit(addsort)&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="comment">//addsort监听提交按钮</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data.elem) <span class="comment">//被执行事件的元素DOM对象，一般为button对象</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data.form) <span class="comment">//被执行提交的form对象，一般在存在form标签时才会返回</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data.field) <span class="comment">//当前容器的全部表单字段，名值对形式：&#123;name: value&#125;</span></span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    type: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    url: <span class="string">&#x27;/img/addSort&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    dataType: <span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    contentType: <span class="string">&#x27;application/json&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    data: <span class="built_in">JSON</span>.stringify(data.field),</span></span><br><span class="line"><span class="javascript">                    success:<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                       <span class="built_in">console</span>.log(result);</span></span><br><span class="line">                        if (result.code==200)&#123;</span><br><span class="line"><span class="javascript">                            layer.msg(<span class="string">&#x27;添加成功&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                        &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line">                            layer.msg(result.msg);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//阻止表单跳转。如果需要表单跳转，去掉这段即可。</span></span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>表单数据加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/feedback&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">feedback</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;feedBacks&quot;</span>,feedBacks);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;feedback&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;layui-table&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;feedBack:$&#123;feedBacks&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;feedBack.feedbackid&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;feedBack.user.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>含文件图片的表单混合一起提交,原理首先使用layui绑定按钮提交</p>
<p>上传图片按钮设置不自动<code>  auto: false</code>提交，然后存到文件里，然后表单提交的时候触发图片上传，以及绑定表单参数,设计时最好避免一起提交，设计可以先传好图片，然后填图片地址，分两次请求</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> uploadInst;</span><br><span class="line">    <span class="keyword">var</span> pathObj; <span class="comment">//存文件</span></span><br><span class="line">    layui.use([<span class="string">&#x27;layer&#x27;</span>, <span class="string">&#x27;form&#x27;</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> layer = layui.layer</span><br><span class="line">            , form = layui.form;</span><br><span class="line">        form.on(<span class="string">&#x27;submit(addpaper)&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (pathObj == <span class="literal">undefined</span>) &#123;</span><br><span class="line">                layer.msg(<span class="string">&quot;没有选择壁纸&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> sortid= $(<span class="string">&quot;select option:checked&quot;</span>).attr(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="comment">//选了文件直接改参数上传</span></span><br><span class="line">            uploadInst.config.data = &#123;</span><br><span class="line">                paperdetail:data.field.paperdetail,</span><br><span class="line">                sortid:sortid,</span><br><span class="line">                papername:data.field.papername</span><br><span class="line">            &#125;;</span><br><span class="line">            uploadInst.config.auto = <span class="literal">true</span>;</span><br><span class="line">            uploadInst.upload();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//阻止表单跳转。如果需要表单跳转，去掉这段即可。</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    layui.use([<span class="string">&#x27;layer&#x27;</span>, <span class="string">&#x27;upload&#x27;</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> layer = layui.layer</span><br><span class="line">            , upload = layui.upload;</span><br><span class="line">        <span class="comment">//普通图片上传</span></span><br><span class="line">        uploadInst = upload.render(&#123;</span><br><span class="line">            elem: <span class="string">&#x27;#post-photo&#x27;</span></span><br><span class="line">            , <span class="attr">url</span>: <span class="string">&#x27;/img/uploadpaper&#x27;</span></span><br><span class="line">            , <span class="attr">auto</span>: <span class="literal">false</span></span><br><span class="line">            , <span class="attr">before</span>: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//预读本地文件示例，不支持ie8</span></span><br><span class="line">                obj.preview(<span class="function"><span class="keyword">function</span> (<span class="params">index, file, result</span>) </span>&#123;</span><br><span class="line">                    $(<span class="string">&#x27;#demo1&#x27;</span>).attr(<span class="string">&#x27;src&#x27;</span>, result); <span class="comment">//图片链接（base64）</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            choose: <span class="function"><span class="keyword">function</span> (<span class="params">object</span>) </span>&#123;</span><br><span class="line">                pathObj = object;</span><br><span class="line">            &#125;</span><br><span class="line">            , <span class="attr">done</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (res.code == <span class="number">200</span>) &#123;</span><br><span class="line">                    layer.msg(<span class="string">&quot;添加壁纸成功&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    layer.msg(<span class="string">&quot;添加壁纸失败：&quot;</span> + res.msg);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//上传成功</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadpaper&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Msg <span class="title">singleFileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, <span class="meta">@RequestParam(&quot;sortid&quot;)</span> <span class="keyword">int</span> sortid, <span class="meta">@RequestParam(&quot;paperdetail&quot;)</span> String paperdetail, <span class="meta">@RequestParam(&quot;papername&quot;)</span> String papername)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; urls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.error(-<span class="number">300</span>, <span class="string">&quot;上传文件为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Paper paper = <span class="keyword">new</span> Paper();</span><br><span class="line">    paper.setSortid(sortid);</span><br><span class="line">    paper.setPapername(papername);</span><br><span class="line">    paper.setPaperdetail(paperdetail);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Files.write(Paths.get(uploadPath + file.getOriginalFilename()), file.getBytes());</span><br><span class="line">        paper.setPaperurl(imgUrl + file.getOriginalFilename());</span><br><span class="line">        paperMapper.insertPaper(paper);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.error(-<span class="number">301</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态读取下拉框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;sortid&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sortid&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">&quot;arrayS:$&#123;sorts&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;arrayS.sortname&#125;&quot;</span> <span class="attr">th:id</span>=<span class="string">&quot;$&#123;arrayS.sortid&#125;&quot;</span>&gt;</span>默认选项<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/addwallpaper&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addwallpaper</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    List&lt;Sort&gt; sorts;</span><br><span class="line">    sorts = paperMapper.selectSort();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;sorts&quot;</span>,sorts);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;addwallpaper&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Java</tag>
        <tag>thymeleaf</tag>
        <tag>layui</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE之ssh框架基础</title>
    <url>/2017/06/19/javaee-ssh/</url>
    <content><![CDATA[<h2 id="SSH基础知识"><a href="#SSH基础知识" class="headerlink" title="SSH基础知识"></a>SSH基础知识</h2><h3 id="1-Hibernate"><a href="#1-Hibernate" class="headerlink" title="1 Hibernate"></a>1 Hibernate</h3><p>hibernate框架是一个ORM的持久层框架，ORM的含义是对象关系映射，简单理解就是通过对象和关系型数据库之间建立映射信息，以后再操作对象就相当于操作数据库了。hibernate框架是对JDBC进行了轻量级的封装，可以更方便简单的对数据库完成增删改查的操作。同时也提供了查询的方式和查询的策略。例如HQL和QBC的查询方式等。还提供了缓存的策略，效率会更高。</p>
<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol>
<li><p>对象/关系数据库映射(ORM)</p>
<p>它使用时只需要操纵对象，使开发更对象化，抛弃了数据库中心的思想，完全的面向对象思想</p>
</li>
<li><p>透明持久化(persistent)</p>
<p>带有持久化状态的、具有业务功能的单线程对象，此对象生存期很短。这些对象可能是普通的JavaBeans/POJO，这个对象没有实现第三方框架或者接口，唯一特殊的是他们正与（仅仅一个）Session相关联。一旦这个Session被关闭，这些对象就会脱离持久化状态，这样就可被应用程序的任何层自由使用。（例如，用作跟表示层打交道的数据传输对象。）      </p>
</li>
<li><p>事务Transaction(org.hibernate.Transaction)</p>
<p>应用程序用来指定原子操作单元范围的对象，它是单线程的，生命周期很短。它通过抽象将应用从底层具体的JDBC、JTA以及CORBA事务隔离开。某些情况下，一个Session之内可<br>能包含多个Transaction对象。尽管是否使用该对象是可选的，但无论是使用底层的API还是使用Transaction对象，事务边界的开启与关闭是必不可少的。</p>
</li>
<li><p>它没有侵入性，即所谓的轻量级框架</p>
</li>
<li><p> 移植性会很好</p>
</li>
<li><p>缓存机制，提供一级缓存和二级缓存</p>
</li>
<li><p>简洁的HQL编程</p>
</li>
</ol>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol>
<li>Hibernate在批量数据处理时有弱势</li>
<li>针对单一对象简单的增删查改，适合于Hibernate,而对于批量的修改，删除，不适合用Hibernate,这也是OR框架的弱点；要使用数据库的特定优化机制的时候，不适合用</li>
<li>优化策略应用不当会导致大量的资源消耗.</li>
</ol>
<h5 id="mybatis与hibernate区别"><a href="#mybatis与hibernate区别" class="headerlink" title="mybatis与hibernate区别"></a>mybatis与hibernate区别</h5><ol>
<li>mybatis是把sql语句与java代码分离了，sql语句在xml文件配置的</li>
<li>hibernate是ORM框架,它对jdbc进行了封装,在分层结构中处于持久化层，它能建立面向对象的域模型和关系数据模型之间的映射.它大大简化了dao层的编码工作</li>
<li>mybatis是半自动的，hibernate是全自动的，就是说mybatis可以配置sql语句，对于sql调优来说是比较好的，hibernate会自动生成所有的sql语句，调优不方便，hibernate用起来难度要大于mybatis</li>
</ol>
<h3 id="2-Spring"><a href="#2-Spring" class="headerlink" title="2 Spring"></a>2 Spring</h3><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ol>
<li>Spring能有效地组织你的中间层对象，不管你是否选择使用了EJB。如果你仅仅使用了Struts或其他为J2EE的 API特制的framework，Spring致力于解决剩下的问题。</li>
<li>Spring能消除在许多工程中常见的对Singleton的过多使用。根据我的经验，这是一个很大的问题，它降低了系统的可测试性和面向对象的程度。</li>
<li>通过一种在不同应用程序和项目间一致的方法来处理配置文件，Spring能消除各种各样自定义格式的属性文件的需要。曾经对某个类要寻找的是哪个魔法般的属性项或系统属性感到不解，为此不得不去读Javadoc甚至源编码？有了Spring，你仅仅需要看看类的JavaBean属性。Inversion of Control的使用（在下面讨论）帮助完成了这种简化。</li>
</ol>
<ol start="4">
<li>通过把对接口编程而不是对类编程的代价几乎减少到没有，Spring能够促进养成好的编程习惯。</li>
<li>Spring被设计为让使用它创建的应用尽可能少的依赖于他的APIs。在Spring应用中的大多数业务对象没有依赖于Spring。</li>
<li>使用Spring构建的应用程序易于单元测试。</li>
<li>Spring能使EJB的使用成为一个实现选择,而不是应用架构的必然选择。你能选择用POJOs或local EJBs来实现业务接口，却不会影响调用代码。</li>
<li>Spring帮助你解决许多问题而无需使用EJB。Spring能提供一种EJB的替换物，它们适用于许多web应用。例如，Spring能使用AOP提供声明性事务管理而不通过EJB容器，如果你仅仅需要与单个数据库打交道，甚至不需要一个JTA实现。 </li>
<li>Spring为数据存取提供了一个一致的框架,不论是使用的是JDBC还是O/R mapping产品（如Hibernate）。</li>
</ol>
<h5 id="Ioc"><a href="#Ioc" class="headerlink" title="Ioc"></a>Ioc</h5><p> Inversion of Control 控制反转。</p>
<p>实现IoC的思想就只有两种：依赖注入（Dependency Injection，简称DI）和依赖查找（Dependency Lookup）。</p>
<h5 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h5><p> Aspect Oriented Programming 面向切面编程。</p>
<p>  Spring实现面向切面编程使用的是动态代理技术，并且会根据实际情况来选择使用基于子类的还是基于接口的动态代理。</p>
<h5 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h5><ol>
<li>它的核心之一IoC，降低了我们程序的耦合度，使我们可以把项目设计成为一个可插拔的组件式工程。</li>
<li>它的另一大核心AOP，使我们在开发过程中，精力得到释放，可以更专注的去理解客户的需求。并且在后期维护时，可以只维护很少的一部分。</li>
<li>它提供的事务管理机制，采用声明的方式来配置事务，从而在维护时无需改动源码，解决了程序硬编码的弊端。</li>
<li>它提供的DAO模板使我们的持久层开发又多了一种途径。</li>
<li>它可以整合其他时下流行的框架，使我们在管理项目时，更加清晰，明确。</li>
</ol>
<h3 id="3-Struts2"><a href="#3-Struts2" class="headerlink" title="3 Struts2"></a>3 Struts2</h3><h5 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h5><ol>
<li>对框架API和ServletAPI的依赖减少</li>
<li>可扩展性提高</li>
<li>框架对插件的可插拔</li>
<li>拦截器</li>
<li>可测程度大大提高</li>
</ol>
<h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ol>
<li>在并发量比较大的场景中,.每次请求都要创建一个Action,并维护很长的调用链(至少18个拦截器+OGNL解析+Action+Result),资源消耗比较大.</li>
</ol>
<h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ol>
<li>SSH对于中小型项目提供了一套完整的解决方案.在表关系相对简单,数据量不大,并发量不高的项目中,能够极大的提高开发效率.</li>
<li>表关系复杂或数据量比较大时,可以使用Mybatis替换Hibernate.</li>
<li>并发量很高时可以使用SpringMVC替换struts</li>
</ol>
<h5 id="框架处理步骤"><a href="#框架处理步骤" class="headerlink" title="框架处理步骤"></a>框架处理步骤</h5><ol>
<li>客户端初始化一个指向Servlet容器（例如tomcat）的请求</li>
<li>这个请求经过一系列的过滤器（Filter）（这些过滤器中有一个叫做ActionContextCleanUp的可选过滤器，这个过滤器对于Struts2和其他框架的集成很有帮助，例如：SiteMesh Plugin） </li>
<li>接着StrutsPrepareAndExecuteFilter被调用，StrutsPrepareAndExecuteFilter询问ActionMapper来解析和判断该次请求是否需要由struts2框架来处理.</li>
<li>如果ActionMapper判断需要struts2来处理请求，StrutsPrepareAndExecuteFilter会把请求的处理交给ActionProxy </li>
<li>ActionProxy通过Configuration Manager加载框架的配置文件，找到需要调用的Action以及拦截器配置信息</li>
<li>ActionProxy创建一个ActionInvocation的实例。 </li>
<li>ActionInvocation实例使用命名模式来调用，在调用Action的过程前后，涉及到相关拦截器（Intercepter）的调用。 </li>
<li>一旦Action执行完毕，ActionInvocation负责根据struts.xml中的配置找到对应的返回结果配置。根据配置找到对应的Result处理类来处理结果集.大多数情况输出会交由模版语言(JSP,FreeMarker)完成输出内容拼装</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://bbs.itheima.com/thread-329951-1-1.html">Java就业企业面试问题-ssh框架（强烈推荐）</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>面试</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE之ssm框架基础</title>
    <url>/2017/06/19/javaee-ssm%20/</url>
    <content><![CDATA[<h2 id="SSm基础知识"><a href="#SSm基础知识" class="headerlink" title="SSm基础知识"></a>SSm基础知识</h2><h3 id="1-springMVC"><a href="#1-springMVC" class="headerlink" title="1 springMVC"></a>1 springMVC</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><a href="https://imgtu.com/i/62o0Jg"><img src="https://s3.ax1x.com/2021/03/18/62o0Jg.png" alt="62o0Jg.png"></a></p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>它是基于组件技术的.全部的应用对象,无论控制器和视图,还是业务对象之类的都是java组件.并且和Spring提供的其他基础结构紧密集成.</li>
<li>不依赖于Servlet API(目标虽是如此,但是在实现的时候确实是依赖于Servlet的)</li>
<li>可以任意使用各种视图技术,而不仅仅局限于JSP</li>
<li>支持各种请求资源的映射策略</li>
<li>它应是易于扩展的</li>
</ul>
<h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><ol>
<li>用户发送请求至前端控制器DispatcherServlet</li>
<li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li>
<li>处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</li>
<li>DispatcherServlet通过HandlerAdapter处理器适配器调用处理器</li>
<li>执行处理器(Controller，也叫后端控制器)。</li>
<li>Controller执行完成返回ModelAndView</li>
<li>HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet</li>
<li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器</li>
<li>ViewReslover解析后返回具体View</li>
<li>DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。</li>
<li>DispatcherServlet响应用户</li>
</ol>
<h4 id="springMVC与struts的区别"><a href="#springMVC与struts的区别" class="headerlink" title="springMVC与struts的区别"></a>springMVC与struts的区别</h4><ol>
<li>springmvc的入口是一个servlet即前端控制器，而struts2入口是一个filter过虑器。</li>
<li>springmvc是基于方法开发(一个url对应一个方法)，请求参数传递到方法的形参，可以设计为单例或多例(建议单例)，struts2是基于类开发，传递参数是通过类的属性，只能设计为多例。</li>
<li>Struts采用值栈存储请求和响应的数据，通过OGNL存取数据， springmvc通过参数解析器是将request请求内容解析，并给方法形参赋值，将数据和视图封装成ModelAndView对象，最后又将ModelAndView中的模型数据通过reques域传输到页面。Jsp视图解析器默认使用jstl。</li>
</ol>
<h3 id="2-SSM-优缺点，使用场景"><a href="#2-SSM-优缺点，使用场景" class="headerlink" title="2 SSM,优缺点，使用场景"></a>2 SSM,优缺点，使用场景</h3><ol>
<li><p>Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句，不过mybatis可以通过XML或注解方式灵活配置要运行的sql语句，并将java对象和sql语句映射生成最终执行的sql，最后将sql执行的结果再映射生成java对象。</p>
</li>
<li><p>Mybatis学习门槛低，简单易学，程序员直接编写原生态sql，可严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，例如互联网软件、企业运营类软件等，因为这类软件需求变化频繁，一但需求变化要求成果输出迅速。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件则需要自定义多套sql映射文件，工作量大。</p>
</li>
<li><p>Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件（例如需求固定的定制化软件）如果用hibernate开发可以节省很多代码，提高效率。但是Hibernate的学习门槛高，要精通门槛更高，而且怎么设计O/R映射，在性能和对象模型之间如何权衡，以及怎样用好Hibernate需要具有很强的经验和能力才行。</p>
</li>
<li><p>总之，按照用户的需求在有限的资源环境下只要能做出维护性、扩展性良好的软件架构都是好架构，所以框架只有适合才是最好。</p>
</li>
</ol>
<h3 id="3-Mybatis"><a href="#3-Mybatis" class="headerlink" title="3 Mybatis"></a>3 Mybatis</h3><ol>
<li>mybatis配置</li>
<li>SqlMapConfig.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。</li>
<li>mapper.xml文件即sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在SqlMapConfig.xml中加载。</li>
<li>通过mybatis环境等配置信息构造SqlSessionFactory即会话工厂</li>
<li>由会话工厂创建sqlSession即会话，操作数据库需要通过sqlSession进行。</li>
<li>mybatis底层自定义了Executor执行器接口操作数据库，Executor接口有两个实现，一个是基本执行器、一个是缓存执行器。</li>
<li>Mapped Statement也是mybatis一个底层封装对象，它包装了mybatis配置信息及sql映射信息等。mapper.xml文件中一个sql对应一个Mapped Statement对象，sql的id即是Mapped statement的id。</li>
<li>Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对preparedStatement设置参数。</li>
<li>Mapped Statement对sql执行输出结果进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql后将输出结果映射至java对象中，输出结果映射过程相当于jdbc编程中对结果的解析处理过程。</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://bbs.itheima.com/thread-329952-1-1.html">Java就业企业面试问题-ssm框架（强烈推荐）</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>面试</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>idea+gradle+ssm框架之测试配置</title>
    <url>/2017/05/08/javaee-ssm-helloworld/</url>
    <content><![CDATA[<h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><h4 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">group <span class="string">&#x27;com.xuan&#x27;</span></span><br><span class="line">version <span class="string">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class="line"></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;groovy&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;war&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;idea&#x27;</span></span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.codehaus.groovy&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;groovy-all&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;2.4.7&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;javax.servlet&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;jstl&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;1.2&#x27;</span></span><br><span class="line">    <span class="comment">// Spring</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-core&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-web&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-webmvc&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-jdbc&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-aop&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-context&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-beans&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-test&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    <span class="comment">// MyBatis</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.mybatis&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;mybatis&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;3.4.1&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.mybatis&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;mybatis-spring&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;1.3.0&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;mysql&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;mysql-connector-java&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;5.1.40&#x27;</span></span><br><span class="line">    <span class="comment">// junit</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.12&#x27;</span></span><br><span class="line"></span><br><span class="line">    testCompile <span class="attr">group:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.12&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Servlet类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:config/spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被dispatcher拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描控制器，实现支持注解的IOC ,设置要扫描的包，一般含controller类的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xuan&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 支持mvc注解驱动，控制器映射器和控制器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--静态文件访问权限配置（静态资源映射器）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;statics/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/WEB-INF/&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀，设置页面的目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀，页面的后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mybatis.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="spring-mybatis-xml"><a href="#spring-mybatis-xml" class="headerlink" title="spring-mybatis.xml"></a>spring-mybatis.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载jdbc文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:config/mybatis/jdbc-mysql.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Session工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载mybatis-config.xml文件，mybatis配置文件路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自动扫描需要定义类别名的包，将包内的JAVA类的类名作为类别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.xuan.model&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定实体类映射文件，可以指定同时指定某一包以及子包下面的所有配置文件，可以直接指定文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:sqlMapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--动态代理实现 不用写dao的实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScannerConfigurer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里的basePackage 指定了dao层接口路劲，这里的dao接口不用自己实现 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.xuan.dao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果只有一个数据源的话可以不用指定，但是如果有多个数据源的话必须要指定 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot; /&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--直接指定了sqlsessionTemplate名称，这个和上面的其实是一样的 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name=&quot;sqlSessionTemplateBeanName&quot; value=&quot;sqlSession&quot; /&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用全注释事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="jdbc-mysql-properties"><a href="#jdbc-mysql-properties" class="headerlink" title="jdbc-mysql.properties"></a>jdbc-mysql.properties</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将jdbc.jarDirection后的内容更改为gradle下载的</span></span><br><span class="line"><span class="comment"># mysql-connector-java-5.1.x.jar所在的路径，gradle自动下载的路径如下所示(未使用)</span></span><br><span class="line"><span class="meta">jdbc.jarDirection</span>=<span class="string">/Users/xuan/.gradle/caches/modules-2/files-2.1/mysql\</span></span><br><span class="line">/mysql-connector-java/5.1.40/ef2a2ceab1735eaaae0b5d1cccf574fb7c6e1c52/\</span><br><span class="line"><span class="attr">mysql-connector-java-5.1.40.jar</span></span><br><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/goods?\</span></span><br><span class="line"><span class="attr">useUnicode</span>=<span class="string">true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<h4 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h4><table>
<thead>
<tr>
<th>路径（根目录/）</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>src/main/webapp/WEB-INF/web.xml</td>
<td>基本配置文件(第一步，包含spring-mvc.xml)</td>
</tr>
<tr>
<td>src/main/resources/config/spring/spring-mvc.xml</td>
<td>配置spring（包含spring-mybatis.xml）</td>
</tr>
<tr>
<td>src/main/resources/config/spring/spring-mybatis.xml</td>
<td>配置mybatis(包含sqltest.xml和jdbc-mysql.properties)</td>
</tr>
<tr>
<td>src/main/resources/config/mybatis/jdbc-mysql.properties</td>
<td>数据库连接信息配置</td>
</tr>
</tbody></table>
<h3 id="项目示例："><a href="#项目示例：" class="headerlink" title="项目示例："></a>项目示例：</h3><h4 id="测试文件路径"><a href="#测试文件路径" class="headerlink" title="测试文件路径"></a>测试文件路径</h4><table>
<thead>
<tr>
<th>路径（根目录/）</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>src/main/resources/sqlMapper/sqltest.xml</td>
<td>数据库语句</td>
</tr>
<tr>
<td>src/main/java/…/dao/TestDao.java</td>
<td>持久层，连接数据库（sqltest）</td>
</tr>
<tr>
<td>src/main/java/…/controller/xuantest.java</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="TestDao-java"><a href="#TestDao-java" class="headerlink" title="TestDao.java"></a>TestDao.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>    <span class="comment">//注册为持久层的bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestDao</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">findname</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="sqltest-xml"><a href="#sqltest-xml" class="headerlink" title="sqltest.xml"></a>sqltest.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>    <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- namespace的值就是dao接口的完整路劲，就这个demo而言namespace 就是TestDao.java的完整路劲 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xuan.dao.TestDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里的id就是接口中方法的名称,resulType,返回的bean，这里为String --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findname&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">      SELECT email FROM t_user WHERE loginname=&#x27;123&#x27;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="xuantest-java"><a href="#xuantest-java" class="headerlink" title="xuantest.java"></a>xuantest.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xuan.dao.TestDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xuantest</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Resource</span></span><br><span class="line">        <span class="keyword">private</span> TestDao testDao;</span><br><span class="line">        <span class="meta">@RequestMapping(&quot;test.html&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">totestPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">           String a= testDao.findname();</span><br><span class="line">           System.out.printf(a);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;a href=&quot;test.html&quot;&gt;进入web测试页面&lt;/a&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="test-jsp"><a href="#test-jsp" class="headerlink" title="test.jsp"></a>test.jsp</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;spring&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">ssm配置成功</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h5 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h5><p><a href="http://blog.csdn.net/qh_java/article/details/51601139">常用的两种spring、mybatis 配置方式</a></p>
<p><a href="http://wenzhiquan.github.io/2017/01/01/idea_gradle_tssm_supermarket_manage_system_1/">使用IDEA和gradle创建超市管理系统（一）</a></p>
<p><a href="http://wenzhiquan.github.io/2016/04/12/idea_gradle_ssm/">使用IDEA和gradle搭建Spring MVC和MyBatis开发环境</a></p>
<p><a href="http://www.jianshu.com/p/a25e0e81a3b5">【ssm个人博客项目实战01】SSM环境搭建</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>gradle</tag>
        <tag>JavaEE</tag>
        <tag>idea</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>MyBatis</tag>
        <tag>ssm框架</tag>
      </tags>
  </entry>
  <entry>
    <title>idea+maven+ssm框架之springMVC配置</title>
    <url>/2017/05/04/javaee-ssm-on-maven/</url>
    <content><![CDATA[<h4 id="新建maven项目"><a href="#新建maven项目" class="headerlink" title="新建maven项目"></a>新建maven项目</h4><p><code>new Project</code>-&gt;<code>Maven</code>[^1]-&gt;<code>...</code>-&gt;<code>finsh</code></p>
<p>[^1]: 如果加载不出来，修改内存<code>Bulid-&gt;Build Tools-&gt;Maven-&gt;Importing-&gt;VM options for importer:&#123;-Xmx2048m&#125;</code></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>JavaEE</tag>
        <tag>idea</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>MyBatis</tag>
        <tag>ssm框架</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM实战之返回json</title>
    <url>/2017/06/07/javaee-ssm-return-json/</url>
    <content><![CDATA[<h3 id="1-返回普通的json"><a href="#1-返回普通的json" class="headerlink" title="1.返回普通的json"></a>1.返回普通的json</h3><p>返回字符串，实体类</p>
<h5 id="三个步骤"><a href="#三个步骤" class="headerlink" title="三个步骤"></a>三个步骤</h5><ul>
<li><p>Jackson jar包是否存在于工程</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind</span></span><br><span class="line">compile <span class="attr">group:</span> <span class="string">&#x27;com.fasterxml.jackson.core&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;jackson-core&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;2.8.8&#x27;</span></span><br><span class="line">compile <span class="attr">group:</span> <span class="string">&#x27;com.fasterxml.jackson.core&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;jackson-databind&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;2.8.8&#x27;</span></span><br><span class="line">compile <span class="attr">group:</span> <span class="string">&#x27;com.fasterxml.jackson.core&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;jackson-annotations&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;2.8.8&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;mvc:annotation-driven/&gt;</code> 是否配置（默认配置方案，不支持返回map）</p>
</li>
<li><p>返回方法上面是否添加了<code>@ResponseBody</code>注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/test&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">( User user,HttpServletRequest req, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;json数据&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-map自动转换json-lt-mvc-annotation-driven-gt-的自定义配置"><a href="#2-map自动转换json-lt-mvc-annotation-driven-gt-的自定义配置" class="headerlink" title="2.map自动转换json ,&lt;mvc:annotation-driven/&gt; 的自定义配置"></a>2.map自动转换json ,<code>&lt;mvc:annotation-driven/&gt;</code> 的自定义配置</h3><p><a href="http://blog.csdn.net/tang19880721/article/details/50786294">解决springmvc ResponseBody请求返回406的问题</a></p>
<h3 id="注意不能用-html后缀"><a href="#注意不能用-html后缀" class="headerlink" title="注意不能用.html后缀"></a>注意不能用.html后缀</h3>]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>gradle</tag>
        <tag>idea</tag>
        <tag>SpringMVC</tag>
        <tag>json</tag>
        <tag>jackson</tag>
        <tag>annotation-driven</tag>
      </tags>
  </entry>
  <entry>
    <title>idea+gradle+ssm框架之springMVC配置</title>
    <url>/2017/04/29/javaee-ssm-springmvc/</url>
    <content><![CDATA[<h4 id="1-新建grade项目步骤"><a href="#1-新建grade项目步骤" class="headerlink" title="1. 新建grade项目步骤"></a>1. 新建grade项目步骤</h4><p>相当于一个grade的工作空间</p>
<p><code>New Project -&gt; Gradle -&gt; [java] -&gt; Next -&gt; &#123;Groupld:&quot;com.xuan&quot;,Artifactld:&quot;worksapcename&quot;&#125; -&gt; Next -&gt; Next -&gt; Finish</code></p>
<h4 id="2-在grade项目新建model"><a href="#2-在grade项目新建model" class="headerlink" title="2. 在grade项目新建model"></a>2. 在grade项目新建model</h4><p>新建一个springmvc项目（这里是一个model）</p>
<p><code>New Module-&gt;spring-[Spring MVC,Web Application,Application Server]-&gt;module name</code></p>
<h4 id="3-运行程model"><a href="#3-运行程model" class="headerlink" title="3.运行程model"></a>3.运行程model</h4><h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><p>运行不起，请处理<code>project structure</code>配置里面的问题，具体操作参考上一篇<code>eclipse项目导入idea</code></p>
<h4 id="4-建立mvc目录结构"><a href="#4-建立mvc目录结构" class="headerlink" title="4.建立mvc目录结构"></a>4.建立mvc目录结构</h4><p>详见<code>JavaEE之MVC目录结构</code>和<code>idea之maven目录结构</code>笔记</p>
<h4 id="5-配置web-xml文件"><a href="#5-配置web-xml文件" class="headerlink" title="5.配置web.xml文件"></a>5.配置<code>web.xml</code>文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringMVC配置参数文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Servlet类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:dispatcher-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被dispatcher拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-Spring-MVC配置文件spring-mvc-xml-spring-application-context设置"><a href="#6-Spring-MVC配置文件spring-mvc-xml-spring-application-context设置" class="headerlink" title="6.Spring MVC配置文件spring-mvc.xml[^spring application context设置]"></a>6.Spring MVC配置文件<code>spring-mvc.xml</code>[^spring application context设置]</h4><p>配置文件的目录设置在<code>web.xml</code>中的<code>contextConfigLocation</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，实现支持注解的IOC ,设置要扫描的包，一般含controller类的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xuan.web.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 支持mvc注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    &lt;bean</span><br><span class="line">            class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><br><span class="line">            id=&quot;internalResourceViewResolver&quot;&gt;</span><br><span class="line">        <span class="comment">&lt;!-- 前缀，设置页面的目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀，页面的后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="7-DispatcherServlet配置文件dispatcher-servlet-xml-spring-servlet-Application-context设置"><a href="#7-DispatcherServlet配置文件dispatcher-servlet-xml-spring-servlet-Application-context设置" class="headerlink" title="7. DispatcherServlet配置文件dispatcher-servlet.xml[^spring servlet Application context设置]"></a>7. DispatcherServlet配置文件<code>dispatcher-servlet.xml</code>[^spring servlet Application context设置]</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><code>index.jsp</code>文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;a href=&quot;test.html&quot;&gt;进入web测试页面&lt;/a&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><code>test.jsp</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  springmvc配置成功</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><code>TestController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;test.html&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">totestPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;test.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="spring简单测试流程"><a href="#spring简单测试流程" class="headerlink" title="spring简单测试流程"></a>spring简单测试流程</h6><div id="flowchart-0" class="flow-chart"></div>





<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p> <a href="http://www.cnblogs.com/wenjingu/p/3822989.html">Spring学习（二）——使用Gradle构建一个简单的Spring MVC Web应用程序</a></p>
<p>[^spring application context设置]: <code>Project Structure-&gt;Modules-&gt;项目名-&gt;Spring-&gt;+-&gt;&#123;name:&quot;取个名字&quot;;选择设置的文件 &#125;</code><br>[^spring servlet Application context设置]: <code>Project Structure-&gt;Modules-&gt;项目名-&gt;Spring-&gt;+-&gt;&#123;name:&quot;取个名字&quot;;选择设置的文件;父设置spring application context&#125;</code></p>
<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">index=>start: index.jsp请求test.html
DispatcherServlet=>operation: DispatcherServlet.java过滤找到分配到指定前端控制器(需要配置xml)
TestController=>operation: 前端控制器TestController.java
mvc=>operation: 后台业务逻辑（跳转逻辑）
modelAndView=>operation: 返回modelAndView
page=>operation: 前台页面test.jsp展示数据
e=>end
index->DispatcherServlet->TestController->mvc->modelAndView->page->cond</textarea><textarea id="flowchart-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>gradle</tag>
        <tag>JavaEE</tag>
        <tag>idea</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>MyBatis</tag>
        <tag>ssm框架</tag>
      </tags>
  </entry>
  <entry>
    <title>idea+gradle+ssm框架之整合模板</title>
    <url>/2017/05/09/javaee-ssm-template-on-idea/</url>
    <content><![CDATA[<h3 id="1-新建项目ssm-template"><a href="#1-新建项目ssm-template" class="headerlink" title="1. 新建项目ssm_template"></a>1. 新建项目ssm_template</h3><p><code>creat project-&gt;gradle&#123;java+web&#125;-&gt;&#123;GroupId:com.xuan;artifactId:ssm_template&#125;-&gt;next-&gt;finsh</code></p>
<h3 id="2-创建项目目录和文件"><a href="#2-创建项目目录和文件" class="headerlink" title="2. 创建项目目录和文件"></a>2. 创建项目目录和文件</h3><table>
<thead>
<tr>
<th>根目录/</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>src/main/webapp/WEB-INF/web.xml</td>
<td><code>Project Structure-&gt;Modules-&gt;+ssm_template-&gt;ssm_template_main-&gt;Web Gradle...-&gt;&#123;点击+web.xml:src\main\webapp\WEB-INF\web.xml&#125;</code>[^1]</td>
</tr>
<tr>
<td>src/main/java</td>
<td>Mark as： Sources(默认是，不用配置)，java代码目录</td>
</tr>
<tr>
<td>src/main/resources</td>
<td>Mark as： Resources(默认是，不用配置)，配置资源文件目录</td>
</tr>
<tr>
<td>src/main/resources/config</td>
<td>配置文件目录（例如：spring-mvc.xml）</td>
</tr>
<tr>
<td>src/main/resources/sqlMapper</td>
<td>数据库语句配置目录</td>
</tr>
<tr>
<td>src/main/java/com.xuan/dao</td>
<td>数据库接口层</td>
</tr>
<tr>
<td>src/main/java/com.xuan/controller</td>
<td></td>
</tr>
</tbody></table>
<p>[^1]: 勾上source root{…/resources,…/java}配置Artifacts,删除<code>Web Application:Exploded</code>下红色的目录</p>
<h3 id="3-配置web-xml"><a href="#3-配置web-xml" class="headerlink" title="3.配置web.xml"></a>3.配置web.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--名称 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- Servlet类 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:config/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--所有请求都会被dispatcher拦截 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-配置build-gradle"><a href="#4-配置build-gradle" class="headerlink" title="4. 配置build.gradle"></a>4. 配置build.gradle</h3><p>导入相关的ssm包</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;groovy&#x27;</span>  <span class="comment">//+</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;idea&#x27;</span>  <span class="comment">//+</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.codehaus.groovy&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;groovy-all&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;2.4.7&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;javax.servlet&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;jstl&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;1.2&#x27;</span></span><br><span class="line">    <span class="comment">// Spring</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-core&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-web&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-webmvc&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-jdbc&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-aop&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-context&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-beans&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-test&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.3.4.RELEASE&#x27;</span></span><br><span class="line">    <span class="comment">// MyBatis</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.mybatis&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;mybatis&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;3.4.1&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.mybatis&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;mybatis-spring&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;1.3.0&#x27;</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;mysql&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;mysql-connector-java&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;5.1.40&#x27;</span></span><br><span class="line">    <span class="comment">// junit</span></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.12&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-配置spring-mvc-xml"><a href="#5-配置spring-mvc-xml" class="headerlink" title="5. 配置spring-mvc.xml"></a>5. 配置spring-mvc.xml</h3><p>右键<code>new spring config</code>需要先导包才能直接new</p>
<p>路径：<code>/src/main/resources/config/spring-mvc.xml</code></p>
<p>project structure配置：Create Spring facet <code>spring mvc</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描控制器，实现支持注解的IOC ,设置要扫描的包，一般含controller类的包（解释有问题，不扫描dao，会提示错误，但不影响运行）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xuan&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 支持mvc注解驱动，控制器映射器和控制器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--静态文件访问权限配置（静态资源映射器）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;statics/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/WEB-INF/&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀，设置页面的目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀，页面的后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mybatis.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-配置spring-mybatis-xml"><a href="#6-配置spring-mybatis-xml" class="headerlink" title="6. 配置spring-mybatis.xml"></a>6. 配置spring-mybatis.xml</h3><p>右键<code>new spring config</code></p>
<p>路径：<code>/src/main/resources/config/spring-mybatis.xml</code></p>
<p>project structure配置：Create Spring facet <code>spring mybatis</code> parent contest<code>spring mvc</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载jdbc文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:config/jdbc-mysql.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Session工厂 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载mybatis-config.xml文件，mybatis配置文件路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自动扫描需要定义类别名的包，将包内的JAVA类的类名作为类别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.xuan.model&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定实体类映射文件，可以指定同时指定某一包以及子包下面的所有配置文件，可以直接指定文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:sqlMapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--动态代理实现 不用写dao的实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScannerConfigurer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里的basePackage 指定了dao层接口路劲，这里的dao接口不用自己实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.xuan.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果只有一个数据源的话可以不用指定，但是如果有多个数据源的话必须要指定 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot; /&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--直接指定了sqlsessionTemplate名称，这个和上面的其实是一样的 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;property name=&quot;sqlSessionTemplateBeanName&quot; value=&quot;sqlSession&quot; /&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用全注释事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-配置jdbc-mysql-properties"><a href="#7-配置jdbc-mysql-properties" class="headerlink" title="7. 配置jdbc-mysql.properties"></a>7. 配置jdbc-mysql.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将jdbc.jarDirection后的内容更改为gradle下载的</span></span><br><span class="line"><span class="comment"># mysql-connector-java-5.1.x.jar所在的路径，gradle自动下载的路径如下所示(未使用)</span></span><br><span class="line"><span class="meta">jdbc.jarDirection</span>=<span class="string">/Users/xuan/.gradle/caches/modules-2/files-2.1/mysql\</span></span><br><span class="line">/mysql-connector-java/5.1.40/ef2a2ceab1735eaaae0b5d1cccf574fb7c6e1c52/\</span><br><span class="line"><span class="attr">mysql-connector-java-5.1.40.jar</span></span><br><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm_template?\</span></span><br><span class="line"><span class="attr">useUnicode</span>=<span class="string">true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<h3 id="8-创建数据库ssm-template"><a href="#8-创建数据库ssm-template" class="headerlink" title="8. 创建数据库ssm_template"></a>8. 创建数据库<code>ssm_template</code></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE <span class="comment">/*!32312 IF NOT EXISTS*/</span>`ssm_template` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span>;</span><br><span class="line"></span><br><span class="line">USE `ssm_template`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for ssm_test</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `ssm_test`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `ssm_test` (</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `<span class="keyword">value</span>` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of ssm_test</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ssm_test` <span class="keyword">VALUES</span> (<span class="string">&#x27;ssm&#x27;</span>, <span class="string">&#x27;ssm框架搭建完成&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="9-测试相关文件"><a href="#9-测试相关文件" class="headerlink" title="9. 测试相关文件"></a>9. 测试相关文件</h3><h5 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a><code>index.jsp</code></h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;a href=&quot;test&quot;&gt;点击测试ssm框架&lt;/a&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  name:$&#123;ssmTest.name&#125;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  value:$&#123;ssmTest.value&#125;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="SsmTest-java"><a href="#SsmTest-java" class="headerlink" title="SsmTest.java"></a><code>SsmTest.java</code></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SsmTest</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="SsmTestDao-java"><a href="#SsmTestDao-java" class="headerlink" title="SsmTestDao.java"></a><code>SsmTestDao.java</code></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SsmTestDao</span> </span>&#123;</span><br><span class="line">    <span class="function">SsmTest <span class="title">getSsm</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="TestController-java"><a href="#TestController-java" class="headerlink" title="TestController.java"></a><code>TestController.java</code></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SsmTestDao ssmTestDao;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">totestPage</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">       SsmTest ssmTest= ssmTestDao.getSsm(<span class="string">&quot;ssm&quot;</span>);</span><br><span class="line">       System.out.printf(<span class="string">&quot;&quot;</span>+ssmTest.getValue()+<span class="string">&quot;,&quot;</span>+ssmTest.getName());</span><br><span class="line">      model.addAttribute(<span class="string">&quot;ssmTest&quot;</span>,ssmTest);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ssm-test-xml"><a href="#ssm-test-xml" class="headerlink" title="ssm_test.xml"></a><code>ssm_test.xml</code></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--doctype必须加--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace的值就是dao接口的完整路劲，就这个demo而言namespace 就是TestDao.java的完整路劲 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xuan.dao.SsmTestDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里的id就是接口中方法的名称,resulType,返回的bean，这里为String --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getSsm&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xuan.model.SsmTest&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM ssm_test WHERE name= #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="相关配置截图"><a href="#相关配置截图" class="headerlink" title="相关配置截图"></a>相关配置截图</h3><p><a href="https://imgtu.com/i/62IMgs"><img src="https://s3.ax1x.com/2021/03/18/62IMgs.png" alt="62IMgs.png"></a><br><a href="https://imgtu.com/i/62IK3j"><img src="https://s3.ax1x.com/2021/03/18/62IK3j.png" alt="62IK3j.png"></a><br><a href="https://imgtu.com/i/62IeUS"><img src="https://s3.ax1x.com/2021/03/18/62IeUS.png" alt="62IeUS.png"></a><br><a href="https://imgtu.com/i/62IuCQ"><img src="https://s3.ax1x.com/2021/03/18/62IuCQ.png" alt="62IuCQ.png"></a><br><a href="https://imgtu.com/i/62Im4g"><img src="https://s3.ax1x.com/2021/03/18/62Im4g.png" alt="62Im4g.png"></a><br><a href="https://imgtu.com/i/62IQvn"><img src="https://s3.ax1x.com/2021/03/18/62IQvn.png" alt="62IQvn.png"></a><br><a href="https://imgtu.com/i/62I1uq"><img src="https://s3.ax1x.com/2021/03/18/62I1uq.png" alt="62I1uq.png"></a></p>
<h3 id="项目地址："><a href="#项目地址：" class="headerlink" title="项目地址："></a>项目地址：</h3><p><a href="https://github.com/xuanfong1/ssm_template">https://github.com/xuanfong1/ssm_template</a></p>
<h4 id="如果运行不起，注意out目录，删除重试"><a href="#如果运行不起，注意out目录，删除重试" class="headerlink" title="如果运行不起，注意out目录，删除重试"></a>如果运行不起，注意out目录，删除重试</h4>]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>gradle</tag>
        <tag>JavaEE</tag>
        <tag>idea</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>MyBatis</tag>
        <tag>ssm框架</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE-Tomcat</title>
    <url>/2018/05/02/javaee-tomcat/</url>
    <content><![CDATA[<h4 id="安装运行"><a href="#安装运行" class="headerlink" title="安装运行"></a>安装运行</h4><ol>
<li><p>tomcat 下载<a href="http://tomcat.apache.org/download-80.cgi">apache-tomcat-8.5.12-windows-x64</a>然后解压安装</p>
</li>
<li><p>编辑<code>tomcat/conf/server.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 9301为自定义端口号,默认为8080 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;9301&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--复制或者修改host--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 新加context  /app为url上下文,app为webapps下的app.war包--&gt;</span>	</span><br><span class="line">  <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/app&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;app&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;false&quot;</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">source</span>=<span class="string">&quot;org.eclipse.jst.jee.server:tsj-spring&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span> <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行tomcat,window下双击打开bin目录下的<code>startup.bat</code>启动app.war</p>
</li>
<li><p>访问为<code>ip:9301/app/</code></p>
</li>
</ol>
<h2 id="tomcat远程自动部署"><a href="#tomcat远程自动部署" class="headerlink" title="tomcat远程自动部署"></a>tomcat远程自动部署</h2><ol>
<li><p>安装<a href="https://tomcat.apache.org/download-80.cgi">tomcat8.5.x</a></p>
</li>
<li><p>修改tomcat配置文件<code>conf/server.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8019&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.startup.VersionLoggerListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> <span class="attr">SSLEngine</span>=<span class="string">&quot;on&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">&quot;UserDatabase&quot;</span> <span class="attr">auth</span>=<span class="string">&quot;Container&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">description</span>=<span class="string">&quot;User database that can be updated and saved&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">factory</span>=<span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">pathname</span>=<span class="string">&quot;conf/tomcat-users.xml&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20010&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8454&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8021&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8454&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;H8005&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;H8005&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>conf/tomcat-users.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://tomcat.apache.org/xml&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">              </span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-script&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-script&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-jmx&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-status&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;admin&quot;</span> <span class="attr">password</span>=<span class="string">&quot;ideaadmin&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;manager-gui,manager-script,manager-jmx,manager-status,admin-script,admin-gui&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动tomcat执行<code>./bin/catalina.sh start | tail -f ./logs/catalina.out</code>,如果要修改启动内存，启动前提前修改<code>catalina.sh</code></p>
</li>
<li><p>在<code>conf/Catalina/h8005</code>添加<code>manager.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">privileged</span>=<span class="string">&quot;true&quot;</span> <span class="attr">antiResourceLocking</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">docBase</span>=<span class="string">&quot;$&#123;catalina.home&#125;/webapps/manager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.RemoteAddrValve&quot;</span> <span class="attr">allow</span>=<span class="string">&quot;^.*$&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后打开<a href="http://ip:8005/manager,%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%60admin%60%E5%AF%86%E7%A0%81%60idaeadmin%60,%E8%BF%9B%E5%85%A5%E4%B9%8B%E5%90%8E%E4%BF%9D%E7%95%99**manager**%E5%88%A0%E9%99%A4%E5%85%B6%E4%BB%96%E6%89%80%E6%9C%89applications">http://ip:8005/manager,输入用户名`admin`密码`idaeadmin`,进入之后保留**manager**删除其他所有applications</a></p>
</li>
<li><p>修改maven的<code>.m2/setting.xml</code>文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>innerCs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>ideaadmin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span>    </span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目里面的<code>pom.xml</code>添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>InnerCS<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://ip:8005/manager/text<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">server</span>&gt;</span>innerCs<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编译<code>Lifecyle-&gt;clean-&gt;install</code>部署<code>lifecyle-&gt;deploy</code>发布到maven私库</p>
</li>
<li><p>远程第一次部署<code>plugins-&gt;tomcat7-&gt;deploy</code>，会上传<code>ROOT.war</code>到<code>/webapps/</code>并解压运行生成<code>ROOT</code>因为我配置的path为<code>/</code>所以是ROOT</p>
</li>
</ol>
<h6 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h6><ol>
<li><p>第九步时，如果时maven多模块项目，需要在父项目，添加上传依赖jar的地址</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置maven地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.101.200:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>还需要在maven的<code>setting.xml</code>配置maven的用户名，才有权限上传</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多模块项目需要在父级里面进行<code>clean-install-deploy</code>,注意勾选idea maven右侧菜单里面的<code>Profiles</code>，不然父级不知道编译那个子项目</p>
</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li><p>tomcat启动时出现<code>java.lang.IllegalArgumentException: Illegal character(s) in message header field: Pragma:</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Illegal character(s) in message header field: Pragma:</span><br><span class="line">2019-02-20 17:40:47 331 - 	at sun.net.www.protocol.http.HttpURLConnection.checkMessageHeader(HttpURLConnection.java:511)</span><br><span class="line">2019-02-20 17:40:47 331 - 	at sun.net.www.protocol.http.HttpURLConnection.isExternalMessageHeaderAllowed(HttpURLConnection.java:481)</span><br><span class="line">2019-02-20 17:40:47 331 - 	at sun.net.www.protocol.http.HttpURLConnection.setRequestProperty(HttpURLConnection.java:2895)</span><br><span class="line">2019-02-20 17:40:47 331 - 	at sun.net.www.protocol.https.HttpsURLConnectionImpl.setRequestProperty(HttpsURLConnectionImpl.java:325)</span><br><span class="line">2019-02-20 17:40:47 331 - 	at mmo.common.utils.HttpUtils.sendPost(HttpUtils.java:28)</span><br><span class="line">2019-02-20 17:40:47 331 - 	at com.surelive.app.server.service.QQGroupApiService$1.run(QQGroupApiService.java:169)</span><br><span class="line">2019-02-20 17:40:47 331 - 	at com.surelive.app.server.entities.ext.QueueThreadHandle.run(QueueThreadHandle.java:52)</span><br><span class="line">2019-02-20 17:40:47 331 - 	at com.surelive.app.server.service.QueueThreadPoolServer$1.run(QueueThreadPoolServer.java:26)</span><br><span class="line">2019-02-20 17:40:47 331 - 	at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>

<p>解决：执行<code>env</code>检查环境变量中是否有<code>JAVA_HOME</code>,没有设置好这些环境变量</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>JavaEE</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux资源管理之cgroups</title>
    <url>/2019/08/20/linux-cgroups/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>cgroups 的全称是control groups，cgroups为每种可以控制的资源定义了一个子系统。docker也是通过该原理进行限制资源。</p>
<ul>
<li>cpu 子系统，主要限制进程的 cpu 使用率。</li>
<li>cpuacct 子系统，可以统计 cgroups 中的进程的 cpu 使用报告。</li>
<li>cpuset 子系统，可以为 cgroups 中的进程分配单独的 cpu 节点或者内存节点。</li>
<li>memory 子系统，可以限制进程的 memory 使用量。</li>
<li>blkio 子系统，可以限制进程的块设备 io。</li>
<li>devices 子系统，可以控制进程能够访问某些设备。</li>
<li>net_cls 子系统，可以标记 cgroups 中进程的网络数据包，然后可以使用 tc 模块（traffic control）对数据包进行控制。</li>
<li>freezer 子系统，可以挂起或者恢复 cgroups 中的进程。</li>
<li>ns 子系统，可以使不同 cgroups 下面的进程使用不同的 namespace。</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://tech.meituan.com/2015/03/31/cgroups.html">Linux资源管理之cgroups简介</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>cgroups</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令</title>
    <url>/2016/09/05/linux-common-commands/</url>
    <content><![CDATA[<h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><p>管理数据库,文件服务等端口，关闭了外部无法访问</p>
<blockquote>
<ul>
<li>开启端口</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>关闭端口</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --remove-port=3306/tcp</span><br></pre></td></tr></table></figure>

<h4 id="系统开机启动项"><a href="#系统开机启动项" class="headerlink" title="系统开机启动项"></a>系统开机启动项</h4><p><code>/etc/rc.local</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>命令</tag>
        <tag>后台</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-firewall</title>
    <url>/2018/11/28/linux-firewall/</url>
    <content><![CDATA[<h2 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h2><h3 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看防火墙状态</span></span><br><span class="line">systemctl status iptables.service</span><br><span class="line"><span class="comment">#查看现有防火墙规则，以及是否生效</span></span><br><span class="line">iptables -L -n</span><br><span class="line"><span class="comment">#开放9000端口</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 9000 -m state --state NEW -j ACCEPT</span><br><span class="line"><span class="comment">#生效后保存iptables</span></span><br><span class="line">iptables-save &gt; /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure>

<p>防火墙端口配置需要放到哪两句之前</p>
<p><a href="https://my.oschina.net/vright/blog/842685">解决Linux:No route to host</a></p>
<h3 id="firewall"><a href="#firewall" class="headerlink" title="firewall"></a>firewall</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加端口7000-7005/17000-17005</span></span><br><span class="line">firewall-cmd --zone=public --add-port=7000/tcp --permanent</span><br><span class="line"><span class="comment"># 重载配置</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment"># 检查防火墙规则</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="comment"># ports: 7000/tcp 7001/tcp 7002/tcp 7003/tcp 7004/tcp 7005/tcp 17005/tcp 17004/tcp 17003/tcp 17002/tcp 17001/tcp 17000/tcp</span></span><br><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"><span class="comment"># 临时关闭防火墙,重启后会重新自动打开</span></span><br><span class="line">systemctl restart firewalld</span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">开机禁用</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-FPM</title>
    <url>/2019/05/27/linux-fpm/</url>
    <content><![CDATA[<h3 id="FPM安装"><a href="#FPM安装" class="headerlink" title="FPM安装"></a><a href="https://fpm.readthedocs.io/en/latest/installing.html">FPM安装</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install ruby-devel gcc make rpm-build rubygems</span><br><span class="line">gem install --no-ri --no-rdoc fpm</span><br><span class="line">fpm --version</span><br></pre></td></tr></table></figure>

<h3 id="FPM使用之python转RPM"><a href="#FPM使用之python转RPM" class="headerlink" title="FPM使用之python转RPM"></a><a href="https://github.com/jordansissel/fpm/wiki/ConvertingPython">FPM使用之python转RPM</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>RPM</tag>
        <tag>FPM</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云服务器增加交换空间</title>
    <url>/2017/09/17/linux-increase-swap-space-on-aliyun/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看系统空间使用情况</span></span><br><span class="line">free -h</span><br><span class="line"><span class="meta">#</span><span class="bash">查看分区使用</span></span><br><span class="line">df -h</span><br><span class="line"><span class="meta">#</span><span class="bash">生成4G大小文件在/home目录下,取名swapflie</span></span><br><span class="line">sudo dd if=/dev/zero of=/home/swapflie bs=1M count=4096</span><br><span class="line"><span class="meta">#</span><span class="bash">把这个文件转换为swap分区</span></span><br><span class="line">sudo /sbin/mkswap /home/swapflie</span><br><span class="line"><span class="meta">#</span><span class="bash">使分区生效</span></span><br><span class="line">sudo /sbin/swapon /home/swapflie</span><br></pre></td></tr></table></figure>

<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://www.bijishequ.com/detail/252453?p=">Docker Swarm搭建Gitlab</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>阿里云</tag>
        <tag>交换空间</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7 安装 GlusterFS</title>
    <url>/2018/03/07/linux-install-glusterfs/</url>
    <content><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>**<a href="https://www.gluster.org/">Gluster</a>**是一个大尺度文件系统。</p>
<h5 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h5><h6 id="简单卷"><a href="#简单卷" class="headerlink" title="简单卷"></a>简单卷</h6><ol>
<li>distribute volume 分布式卷，两台主机的磁盘融合一个磁盘</li>
<li>stripe volume 条带卷，一个文件分成数据块存储到不同的地方</li>
<li>replica volume 复制卷，一个文件分别保存到两台主机</li>
</ol>
<h6 id="复合卷"><a href="#复合卷" class="headerlink" title="复合卷"></a>复合卷</h6><p>1+2，1+3，2+3，1+2+3</p>
<h4 id="总结常用命令"><a href="#总结常用命令" class="headerlink" title="总结常用命令"></a>总结常用命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gluster peer status     <span class="comment">#查看集群各主机连接状态</span></span><br><span class="line">gluster volume list    <span class="comment">#查看挂载卷信息</span></span><br><span class="line">gluster volume list <span class="comment">#查看卷列表</span></span><br><span class="line"><span class="comment">#创建挂在卷，force忽略在root目录创建挂在卷的警告</span></span><br><span class="line">gluster volume create swarm-volume replica 3 worker:/xuan/docker/gluster-volume home:/xuan/docker/gluster-volume xuanps:/xuan/docker/gluster-volume force</span><br><span class="line">gluster volume start swarm-volume <span class="comment">#启动</span></span><br><span class="line">gluster volume stop swarm-volume <span class="comment">#停止</span></span><br><span class="line">gluster volume delete swarm-volume <span class="comment">#删除 ，了文件还会保留</span></span><br><span class="line"><span class="comment">#挂载本地目录到glusterfs卷（swarm-volume），在本地目录添加的会自动同步到其他挂载卷</span></span><br><span class="line"><span class="comment">#eg在本机mnt添加文件，其他volume-name目录也会添加mount [-参数] [设备名称] [挂载点]</span></span><br><span class="line">mount -t glusterfs worker:/swarm-volume /mnt/</span><br><span class="line">umount worker:/swarm-volume  <span class="comment">#卸载了就不会同步了</span></span><br><span class="line"><span class="comment">#重置，删除所有数据</span></span><br><span class="line">systemctl stop glusterd</span><br><span class="line">rm -rf /var/lib/glusterd/</span><br><span class="line">systemctl start glusterd</span><br><span class="line"><span class="comment">#删除节点</span></span><br><span class="line">gluster peer detach home</span><br></pre></td></tr></table></figure>

<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>准备工作：</p>
<p>三台局域网主机（<a href="http://jingyan.baidu.com/article/29697b915a5376ab20de3cc2.html">centos7 修改主机名 </a>）</p>
<table>
<thead>
<tr>
<th>hostname</th>
<th>ip</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>xuanps</td>
<td>10.14.0.1</td>
<td></td>
</tr>
<tr>
<td>worker</td>
<td>10.14.0.4</td>
<td></td>
</tr>
<tr>
<td>home</td>
<td>10.14.0.5</td>
<td></td>
</tr>
</tbody></table>
<p>三台都需要安装GlusterFS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#搜索glusterfs可安装的版本</span></span><br><span class="line">yum search centos-release-gluster</span><br><span class="line"><span class="comment">#安装最新长期稳定版本(Long Term Stable)的gluster软件</span></span><br><span class="line">yum -y install centos-release-gluster</span><br><span class="line"><span class="comment">#安装glusterfs-server</span></span><br><span class="line">yum --enablerepo=centos-gluster*-<span class="built_in">test</span> install glusterfs-server</span><br><span class="line">glusterfs -V <span class="comment">#测试</span></span><br><span class="line">systemctl <span class="built_in">enable</span> glusterd <span class="comment">#开机启动</span></span><br><span class="line">systemctl start glusterd <span class="comment">#启动</span></span><br><span class="line">systemctl status glusterd <span class="comment">#查看是否正常运行</span></span><br><span class="line"><span class="comment">#修改hosts不然不能通过主机名连接到对方</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line"><span class="comment">#----------三台都要添加如下设置--------------------------</span></span><br><span class="line">10.14.0.1 xuanps</span><br><span class="line">10.14.0.4 worker</span><br><span class="line">10.14.0.5 home</span><br><span class="line"><span class="comment">#------------------------------------------------------</span></span><br><span class="line"><span class="comment">#从xuanps上执行下面两条，其他主机不用执行</span></span><br><span class="line">gluster peer probe worker</span><br><span class="line">gluster peer probe home</span><br><span class="line"><span class="comment">#三台都执行该命令是否都是connected</span></span><br><span class="line">gluster peer status</span><br><span class="line"><span class="comment">#查看挂载卷信息</span></span><br><span class="line">gluster volume info</span><br><span class="line"><span class="comment">#创建挂在卷，force忽略在root目录创建挂在卷的警告</span></span><br><span class="line">gluster volume create volume-name replica 3 worker:/xuan/docker/gluster-volume/<span class="built_in">test</span> home:/xuan/docker/gluster-volume/<span class="built_in">test</span> xuanps:/xuan/docker/gluster-volume/<span class="built_in">test</span> force</span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">gluster volume start volume-name</span><br><span class="line"><span class="comment">#启动nfs同步，测试需验证，这里要不要开启</span></span><br><span class="line">gluster volume <span class="built_in">set</span> volume-name nfs.disable off</span><br><span class="line"><span class="comment">#挂载本地目录到glusterfs卷（volume-name），在本地目录添加的会自动同步到其他挂载卷</span></span><br><span class="line"><span class="comment">#eg在本机mnt添加文件，其他volume-name目录也会添加</span></span><br><span class="line">mount -t glusterfs worker:/volume-name /mnt/</span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>官网：<a href="https://www.gluster.org/">https://www.gluster.org/</a></p>
<p><a href="http://docs.gluster.org/en/latest/Quick-Start-Guide/Quickstart/">文档</a></p>
<p><a href="https://wiki.centos.org/SpecialInterestGroup/Storage/gluster-Quickstart">centos官方安装手册</a></p>
<p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-glusterfs-docker-volume/index.html">基于 GlusterFS 实现 Docker 集群的分布式存储</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GlusterFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Install-ossfs</title>
    <url>/2018/02/26/linux-install-ossfs/</url>
    <content><![CDATA[<h2 id="阿里云ESC服务器挂载-OSS-文件系统"><a href="#阿里云ESC服务器挂载-OSS-文件系统" class="headerlink" title="阿里云ESC服务器挂载 OSS 文件系统"></a><a href="https://github.com/aliyun/ossfs/blob/master/README-CN.md">阿里云ESC服务器挂载 OSS 文件系统</a></h2><p>ossfs 能让您在Linux/Mac OS X 系统中把Aliyun OSS bucket 挂载到本地文件 系统中，您能够便捷的通过本地文件系统操作OSS 上的对象，实现数据的共享。</p>
<p>阿里云oss官方：ossfs挂载，您可以理解为把挂载的bucket当做一个ecs目录来操作的，存储文件到挂载的bucket中是占用的这个bucket的内存，不会占用您ecs的内存。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol>
<li><p>下载文件<a href="https://github.com/aliyun/ossfs/releases">ossfs_1.80.3_centos7.0_x86_64.rpm</a>到阿里云</p>
</li>
<li><p>安装<code>sudo yum localinstall ossfs_1.80.3_centos7.0_x86_64.rpm</code></p>
</li>
<li><p>写入oss配置<code>echo my-bucket:my-access-key-id:my-access-key-secret &gt; /etc/passwd-ossfs</code>,例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo ossfs-xuan:LTAIw5M5SHnIoNcm:ci1Oj7*******ZqDziBj &gt; /etc/passwd-ossfs</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改配置文件权限<code>chmod 640 /etc/passwd-ossfs</code></p>
</li>
<li><p>创建挂载目录<code>mkdir /ossfs</code></p>
</li>
<li><p>挂载<code>ossfs ossfs-xuan /ossfs -ourl=oss-cn-shenzhen-internal.aliyuncs.com</code></p>
</li>
</ol>
<h4 id="额外的命令"><a href="#额外的命令" class="headerlink" title="额外的命令"></a>额外的命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#允许linux其他用户对改oss文件系统进行操作</span></span><br><span class="line">ossfs ossfs-xuan /ossfs -ourl=oss-cn-shenzhen-internal.aliyuncs.com -o allow_other</span><br><span class="line"><span class="comment">#卸载挂载oss目录</span></span><br><span class="line">umount /ossfs</span><br></pre></td></tr></table></figure>

<h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4><p><code>InvalidBucketName</code>错误可以看出BucketName重复了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ossfs: bad request</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;Error&gt;</span><br><span class="line">  &lt;Code&gt;InvalidBucketName&lt;&#x2F;Code&gt;</span><br><span class="line">  &lt;Message&gt;The specified bucket is not valid.&lt;&#x2F;Message&gt;</span><br><span class="line">  &lt;RequestId&gt;5A93BFD701A3E286AC09FDDD&lt;&#x2F;RequestId&gt;</span><br><span class="line">  &lt;HostId&gt;ossfs-xuan.ossfs-xuan.oss-cn-shenzhen-internal.aliyuncs.com&lt;&#x2F;HostId&gt;</span><br><span class="line">  &lt;BucketName&gt;ossfs-xuan.ossfs-xuan&lt;&#x2F;BucketName&gt;</span><br><span class="line">&lt;&#x2F;Error&gt;</span><br></pre></td></tr></table></figure>

<p>解决：<code>-ourl=oss-cn-shenzhen-internal.aliyuncs.com</code>不需要带BucketName</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ossfs</tag>
        <tag>centos</tag>
        <tag>oss</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-mount</title>
    <url>/2018/10/17/linux-mount/</url>
    <content><![CDATA[<h2 id="linux挂载相关命令"><a href="#linux挂载相关命令" class="headerlink" title="linux挂载相关命令"></a>linux挂载相关命令</h2><p><strong><u>注意挂载操作不要在挂载目录里面操作</u></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看磁盘分区情况</span></span><br><span class="line">lsblk</span><br><span class="line"><span class="meta">#</span><span class="bash">查看磁盘详情</span></span><br><span class="line">fdisk -l</span><br><span class="line"><span class="meta">#</span><span class="bash">挂载 ，提前建好挂在目录，这句诗挂载sdc设备的第五个分区</span></span><br><span class="line">mount /dev/sdc5  /mnt/udisk</span><br><span class="line"><span class="meta">#</span><span class="bash"> 挂载ntfs的系统需要先安装ntfs-3g</span></span><br><span class="line">yum install ntfs-3g</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载</span></span><br><span class="line">umount</span><br></pre></td></tr></table></figure>

<h3 id="hyper-v-centos挂载其他vhd-硬盘"><a href="#hyper-v-centos挂载其他vhd-硬盘" class="headerlink" title="hyper-v  centos挂载其他vhd 硬盘"></a>hyper-v  centos挂载其他vhd 硬盘</h3><p><code>mount: unknown filesystem type &#39;LVM2_member&#39;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line">mount /dev/mapper/centos-root /mnt/disk</span><br><span class="line">umount /mnt/disk</span><br></pre></td></tr></table></figure>

<h3 id="腾讯云初始化和挂载硬盘"><a href="#腾讯云初始化和挂载硬盘" class="headerlink" title="腾讯云初始化和挂载硬盘"></a><a href="https://cloud.tencent.com/document/product/362/6735">腾讯云初始化和挂载硬盘</a></h3><ol>
<li><p><code>fdisk -l</code>查看磁盘, 如果没有输出硬盘检查云盘状态是否已挂载</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">Disk /dev/vdb: <span class="number">107</span><span class="variable">.4</span> GB, <span class="number">107374182400</span> bytes, <span class="number">209715200</span> sectors</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>fdisk /dev/vdb</code>创建新分区依次输入“n”(新建分区)、“p”(新建主分区)、“1”(使用第1个主分区)，两次回车(使用默认配置)，输入“wq”(保存分区表)</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">Welcome to fdisk (util-linux <span class="number">2</span><span class="variable">.23</span><span class="variable">.2</span>).</span><br><span class="line"></span><br><span class="line">Changes will remain in memory only, <span class="keyword">until</span> you decide to write them.</span><br><span class="line">Be careful <span class="keyword">before</span> using the write command.</span><br><span class="line"></span><br><span class="line">Device does <span class="keyword">not</span> contain a recognized partition <span class="keyword">table</span></span><br><span class="line">Building a <span class="keyword">new</span> DOS disklabel <span class="keyword">with</span> disk identifier <span class="number">0</span>x45f0094c.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> help): n</span><br><span class="line">Partition <span class="keyword">type</span>:</span><br><span class="line">   p   primary (<span class="number">0</span> primary, <span class="number">0</span> extended, <span class="number">4</span> free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (<span class="keyword">default</span> p): p</span><br><span class="line">Partition number (<span class="number">1</span>-<span class="number">4</span>, <span class="keyword">default</span> <span class="number">1</span>): <span class="number">1</span></span><br><span class="line">First sector (<span class="number">2048</span>-<span class="number">209715199</span>, <span class="keyword">default</span> <span class="number">2048</span>): </span><br><span class="line">Using <span class="keyword">default</span> value <span class="number">2048</span></span><br><span class="line">Last sector, +sectors <span class="keyword">or</span> +size&#123;K,M,G&#125; (<span class="number">2048</span>-<span class="number">209715199</span>, <span class="keyword">default</span> <span class="number">209715199</span>): </span><br><span class="line">Using <span class="keyword">default</span> value <span class="number">209715199</span></span><br><span class="line">Partition <span class="number">1</span> of <span class="keyword">type</span> Linux <span class="keyword">and</span> of size <span class="number">100</span> GiB is set</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> help): wq</span><br><span class="line">The partition <span class="keyword">table</span> has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition <span class="keyword">table</span>.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>fdisk -l</code> 检查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Disk &#x2F;dev&#x2F;vda: 53.7 GB, 53687091200 bytes, 104857600 sectors</span><br><span class="line">Units &#x3D; sectors of 1 * 512 &#x3D; 512 bytes</span><br><span class="line">Sector size (logical&#x2F;physical): 512 bytes &#x2F; 512 bytes</span><br><span class="line">I&#x2F;O size (minimum&#x2F;optimal): 512 bytes &#x2F; 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x000c5e30</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">&#x2F;dev&#x2F;vda1   *        2048   104857599    52427776   83  Linux</span><br><span class="line"></span><br><span class="line">Disk &#x2F;dev&#x2F;vdb: 107.4 GB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units &#x3D; sectors of 1 * 512 &#x3D; 512 bytes</span><br><span class="line">Sector size (logical&#x2F;physical): 512 bytes &#x2F; 512 bytes</span><br><span class="line">I&#x2F;O size (minimum&#x2F;optimal): 512 bytes &#x2F; 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x45f0094c</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">&#x2F;dev&#x2F;vdb1            2048   209715199   104856576   83  Linux</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>mkdir /data</code>如果没有创建挂载目录</p>
</li>
<li><p><code>mkfs.ext3 /dev/vdb1</code> 格式化硬盘</p>
</li>
<li><p><code>mount /dev/vdb1 /data</code>设置挂载</p>
</li>
<li><p><code>vim /etc/fstab</code>设置开机启动自动挂载，fstab追加行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;dev&#x2F;vdb1            &#x2F;data                ext3       defaults              0 0</span><br></pre></td></tr></table></figure>





</li>
</ol>
<p><a href="https://www.howtoforge.com/tutorial/mount-ntfs-centos/">https://www.howtoforge.com/tutorial/mount-ntfs-centos/</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>mount</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-RPM-springBoot</title>
    <url>/2019/05/24/linux-rpm-springboot/</url>
    <content><![CDATA[<h2 id="rpm打包SpringBoot实战"><a href="#rpm打包SpringBoot实战" class="headerlink" title="rpm打包SpringBoot实战"></a>rpm打包SpringBoot实战</h2><ol>
<li><p>环境需求安装rpm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#centos</span></span><br><span class="line">yum -y install rpmdevtools</span><br><span class="line"><span class="comment">#mac</span></span><br><span class="line">brew install rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">			.......</span><br><span class="line">	  <span class="tag">&lt;<span class="name">rpm.release</span>&gt;</span>0.3.0<span class="tag">&lt;/<span class="name">rpm.release</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">rpm.install.path</span>&gt;</span>/home/face/java<span class="tag">&lt;/<span class="name">rpm.install.path</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">rpm.prefix</span>&gt;</span>/data/micro-services/9090-web-api-jar<span class="tag">&lt;/<span class="name">rpm.prefix</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>	</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;autoPackage.name&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span>	</span><br><span class="line">				<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rpm-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">goal</span>&gt;</span>rpm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">prefix</span>&gt;</span>$&#123;rpm.prefix&#125;<span class="tag">&lt;/<span class="name">prefix</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">distribution</span>&gt;</span>myron<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">group</span>&gt;</span>myron.com<span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">packager</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">packager</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">autoRequires</span>&gt;</span>true<span class="tag">&lt;/<span class="name">autoRequires</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">release</span>&gt;</span>3<span class="tag">&lt;/<span class="name">release</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">requires</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">require</span>&gt;</span>java-1.7.0 &gt;= 1.7<span class="tag">&lt;/<span class="name">require</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">requires</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">mappings</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">mapping</span>&gt;</span></span><br><span class="line">							<span class="comment">&lt;!-- 安装rpm后指向的服务器安装目录  --&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;rpm.install.path&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">filemode</span>&gt;</span>755<span class="tag">&lt;/<span class="name">filemode</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">groupname</span>&gt;</span>root<span class="tag">&lt;/<span class="name">groupname</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">sources</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">source</span>&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">location</span>&gt;</span>target/$&#123;project.artifactId&#125;.jar<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">sources</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">						<span class="comment">&lt;!-- 复制安装相关脚本命令 根据具体项目需要决定是否使用--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--						&lt;mapping&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--							&lt;directory&gt;$&#123;rpm.install.path&#125;/$&#123;project.artifactId&#125;/bin&lt;/directory&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--							&lt;filemode&gt;750&lt;/filemode&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--							&lt;username&gt;root&lt;/username&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--							&lt;groupname&gt;root&lt;/groupname&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--							&lt;sources&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--								&lt;source&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--									&lt;location&gt;src/bin&lt;/location&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--								&lt;/source&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--							&lt;/sources&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--						&lt;/mapping&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">						<span class="comment">&lt;!--配置软连接注册服务起停项目,相当于:ln -sf myapp.jar /etc/init.d/myapp)</span></span><br><span class="line"><span class="comment">                            启动: systemctl start myapp</span></span><br><span class="line"><span class="comment">                            停止: systemctl stop myapp</span></span><br><span class="line"><span class="comment">                            重启: systemctl restart myapp</span></span><br><span class="line"><span class="comment">                            查看日志: journalctl -u myapp--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--						&lt;mapping&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--							&lt;directory&gt;/etc/init.d&lt;/directory&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--							&lt;filemode&gt;750&lt;/filemode&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--							&lt;username&gt;root&lt;/username&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--							&lt;groupname&gt;root&lt;/groupname&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--							&lt;sources&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--								&lt;softlinkSource&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--									&lt;location&gt;$&#123;rpm.install.path&#125;/$&#123;project.artifactId&#125;/$&#123;project.artifactId&#125;-$&#123;project.version&#125;.jar&lt;/location&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--									&lt;destination&gt;$&#123;project.artifactId&#125;&lt;/destination&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--								&lt;/softlinkSource&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--							&lt;/sources&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--						&lt;/mapping&gt;--&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">mappings</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">preinstallScriptlet</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">echo <span class="string">&quot;installing $&#123;project.name&#125; now&quot;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">preinstallScriptlet</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">postinstallScriptlet</span>&gt;</span></span><br><span class="line">						<span class="comment">&lt;!-- 通过软链接 配置&quot;service demo-swagger2 &quot; 相关操作命令启动--&gt;</span></span><br><span class="line">						<span class="comment">&lt;!-- 使用上面softlinkSource配置替代</span></span><br><span class="line"><span class="comment">                        &lt;script&gt;</span></span><br><span class="line"><span class="comment">                            rm -f /etc/init.d/$&#123;project.artifactId&#125;;</span></span><br><span class="line"><span class="comment">                            ln -sf $&#123;rpm.install.path&#125;/$&#123;project.artifactId&#125;/bin/startup.sh /etc/init.d/demo-swagger2;</span></span><br><span class="line"><span class="comment">                        &lt;/script&gt;</span></span><br><span class="line"><span class="comment">                        --&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">postinstallScriptlet</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">preremoveScriptlet</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">							<span class="comment">&lt;!--rm -f /etc/init.d/$&#123;project.artifactId&#125;;--&gt;</span></span></span></span><br><span class="line"><span class="javascript">							echo <span class="string">&quot;uninstalling $&#123;project.name&#125; success&quot;</span>;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">						<span class="comment">&lt;!-- 引用脚本方式</span></span><br><span class="line"><span class="comment">                        &lt;scriptFile&gt;src/main/scripts/preremove&lt;/scriptFile&gt;</span></span><br><span class="line"><span class="comment">                        &lt;fileEncoding&gt;utf-8&lt;/fileEncoding&gt;</span></span><br><span class="line"><span class="comment">                        --&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">preremoveScriptlet</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      ........</span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>空配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rpm-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                       <span class="comment">&lt;!-- unbinds rpm creation from maven lifecycle --&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">phase</span>&gt;</span>none<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>attached-rpm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">release</span>&gt;</span>1<span class="tag">&lt;/<span class="name">release</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>loganshen<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">group</span>&gt;</span>ifengkou.github.io<span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">packager</span>&gt;</span>loganshen<span class="tag">&lt;/<span class="name">packager</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">prefix</span>&gt;</span>/opt/soft<span class="tag">&lt;/<span class="name">prefix</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">mappings</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">mapping</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>/tmp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">mappings</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>package rpm:rpm -U</code></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/Myron_007/article/details/80899368">maven使用rpm-maven-plugin构建RPM包</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>RPM</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之RPM打包</title>
    <url>/2019/05/14/linux-rpm/</url>
    <content><![CDATA[<h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><h5 id="目录结构解释"><a href="#目录结构解释" class="headerlink" title="目录结构解释"></a>目录结构解释</h5><ol>
<li>BUILD是编译rpm包的临时目录</li>
<li>BUILDROOT是最后生成rpm包的临时安装目录</li>
<li>RPMS存放最终生成的rpm二进制包</li>
<li>SOURCES是源代码(.tar.gz)存放目录</li>
<li>SPECS用来存放spec文件</li>
<li>SRPMS存放最终生成的rpm源码包</li>
</ol>
<h5 id="spec文件标签解释"><a href="#spec文件标签解释" class="headerlink" title="spec文件标签解释"></a>spec文件标签解释</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装包名</span></span><br><span class="line">Name: </span><br><span class="line"><span class="comment">#版本号</span></span><br><span class="line">Version: 1.0.0</span><br><span class="line">Release:        1%&#123;?dist&#125;</span><br><span class="line"><span class="comment">#简介</span></span><br><span class="line">Summary: This is pragram <span class="built_in">printf</span> hell world hahah</span><br><span class="line"><span class="comment">#分组，可去掉</span></span><br><span class="line">Group: Development/Tools</span><br><span class="line"><span class="comment">#协议</span></span><br><span class="line">License: GPL</span><br><span class="line"><span class="comment">#资源路径(源代码路径)</span></span><br><span class="line">Source0: %&#123;name&#125;-%&#123;version&#125;.tar.gz</span><br><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line">Requires: vim</span><br><span class="line"><span class="comment">#详细描述</span></span><br><span class="line">%description</span><br><span class="line"><span class="comment">#编译前准备</span></span><br><span class="line">%prep</span><br><span class="line">%setup -q <span class="comment">#自动解压？</span></span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line">%build</span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">%install</span><br><span class="line">mkdir -p <span class="variable">$RPM_BUILD_ROOT</span>/usr/bin</span><br><span class="line">cp <span class="variable">$RPM_BUILD_DIR</span>/%&#123;name&#125;-%&#123;version&#125;/hello-world <span class="variable">$RPM_BUILD_ROOT</span>/usr/bin</span><br><span class="line"><span class="comment">#执行安装完成后需要启动服务或修改配置文件等脚本，例如启动服务等，这里执行的脚本不需要收集文件</span></span><br><span class="line">%post</span><br><span class="line"><span class="comment">#删除临时构建目录</span></span><br><span class="line">%clean</span><br><span class="line">rm -rf <span class="variable">$RPM_BUILD_ROOT</span></span><br><span class="line"><span class="comment">#收集文件</span></span><br><span class="line">%files</span><br><span class="line">%doc</span><br><span class="line">/usr/bin/hello-world</span><br><span class="line"></span><br><span class="line">%changelog</span><br></pre></td></tr></table></figure>

<h2 id="实战hello-world"><a href="#实战hello-world" class="headerlink" title="实战hello-world"></a>实战hello-world</h2><ol>
<li><p>安装制作工具<code>yum -y install rpmdevtools</code>会自动依赖安装<code>rpm-build</code></p>
</li>
<li><p>生成开发目录<code>rpmdev-setuptree</code>会在<code>~</code>目录生成<code>rpmbuild</code>文件目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`-- rpmbuild</span><br><span class="line">    |-- BUILD</span><br><span class="line">    |-- RPMS</span><br><span class="line">    |-- SOURCES</span><br><span class="line">    |-- SPECS</span><br><span class="line">    `-- SRPMS</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建源代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~&gt; mkdir -p rpmbuild/SOURCES/hello-world-1.0.0</span><br><span class="line">~&gt; <span class="built_in">cd</span> rpmbuild/SOURCES/hello-world-1.0.0/</span><br><span class="line">hello-world-1.0.0&gt; vim hello-world</span><br><span class="line"><span class="comment">#hello-world文件内容如下，就是一个简单的输出hello world的脚本</span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> Hello World hahah</span><br><span class="line"><span class="comment">#-----------------------------------------------------</span></span><br><span class="line">hello-world-1.0.0&gt; chmod 755 hello-world</span><br><span class="line">hello-world-1.0.0&gt; ./hello-world <span class="comment">#测试脚本打印Hello World hahah</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打包源码<code>tar zcvf hello-world-1.0.0.tar.gz hello-world-1.0.0</code></p>
</li>
<li><p>编写spec文件<code>cd ~/rpmbuild/SPECS</code>然后<code>vim hello-world.spec</code>创建<code>hello-world.spec</code>文件，vim会自动根据后缀spec加载默认模版，修改模版如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Name: hello-world</span><br><span class="line">Version: 1.0.0</span><br><span class="line">Release:        1%&#123;?dist&#125;</span><br><span class="line">Summary: This is pragram <span class="built_in">printf</span> hell world hahah</span><br><span class="line"></span><br><span class="line">Group: Development/Tools</span><br><span class="line">License: GPL</span><br><span class="line">Source0: %&#123;name&#125;-%&#123;version&#125;.tar.gz</span><br><span class="line"></span><br><span class="line">%description</span><br><span class="line"></span><br><span class="line">%prep</span><br><span class="line">%setup -q</span><br><span class="line"></span><br><span class="line">%build</span><br><span class="line"></span><br><span class="line">%install</span><br><span class="line">mkdir -p <span class="variable">$RPM_BUILD_ROOT</span>/usr/bin</span><br><span class="line">cp <span class="variable">$RPM_BUILD_DIR</span>/%&#123;name&#125;-%&#123;version&#125;/hello-world <span class="variable">$RPM_BUILD_ROOT</span>/usr/bin</span><br><span class="line"></span><br><span class="line">%clean</span><br><span class="line">rm -rf <span class="variable">$RPM_BUILD_ROOT</span></span><br><span class="line">%files</span><br><span class="line">%doc</span><br><span class="line">/usr/bin/hello-world</span><br><span class="line"></span><br><span class="line">%changelog</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行<code>rpmbuild -ba hello-world.spec</code>进行打包最后目录结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">|-- BUILD</span><br><span class="line">|   `-- hello-world-1.0.0</span><br><span class="line">|       |-- debugfiles.list</span><br><span class="line">|       |-- debuglinks.list</span><br><span class="line">|       |-- debugsources.list</span><br><span class="line">|       |-- elfbins.list</span><br><span class="line">|       `-- hello-world</span><br><span class="line">|-- BUILDROOT</span><br><span class="line">|-- RPMS</span><br><span class="line">|   `-- x86_64</span><br><span class="line">|       |-- hello-world-1.0.0-1.el7.x86_64.rpm</span><br><span class="line">|       `-- hello-world-debuginfo-1.0.0-1.el7.x86_64.rpm</span><br><span class="line">|-- SOURCES</span><br><span class="line">|   |-- hello-world-1.0.0</span><br><span class="line">|   |   `-- hello-world</span><br><span class="line">|   `-- hello-world-1.0.0.tar.gz</span><br><span class="line">|-- SPECS</span><br><span class="line">|   `-- hello-world.spec</span><br><span class="line">`-- SRPMS</span><br><span class="line">    `-- hello-world-1.0.0-1.el7.src.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装打包好的安装包<code>yum install ~/rpmbuild/RPMS/x86_64/hello-world-1.0.0-1.el7.x86_64.rpm</code></p>
</li>
<li><p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; hello-world</span><br><span class="line">Hello World hahah</span><br><span class="line">&gt; yum remove hello-world <span class="comment">#卸载刚刚安装的</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="创建本地yum源"><a href="#创建本地yum源" class="headerlink" title="创建本地yum源"></a>创建本地yum源</h2><ol>
<li><p>新建添加本地源<code>vim /etc/yum.repos.d/CentOS-Media.repo</code>，内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">c7-media</span>]</span><br><span class="line"><span class="string">name=CentOS-$releasever</span> <span class="bullet">-</span> <span class="string">Media</span></span><br><span class="line"><span class="string">baseurl=file:///root/nantianrepo/</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装<code>yum install createrepo</code></p>
</li>
<li><p>新建仓库目录结构，然后放入需要的安装包，及依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`-- ntrepo</span><br><span class="line">    |-- CentOS-Local.rpeo</span><br><span class="line">    `-- packages</span><br><span class="line">        |-- CodeMeter-lite-6.50.2631-502.x86_64.rpm</span><br><span class="line">        `-- hello-world-1.0.0-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>在ntrepo目录执行<code>createrepo .</code>会生成多一个目录,以及包的索引</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`-- nantianrepo</span><br><span class="line">    |-- CentOS-Local.rpeo</span><br><span class="line">    |-- packages</span><br><span class="line">    |   |-- CodeMeter-lite-6.50.2631-502.x86_64.rpm</span><br><span class="line">    |   `-- hello-world-1.0.0-1.el7.x86_64.rpm</span><br><span class="line">    `-- repodata</span><br><span class="line">        |-- 14a98942df6d04-other.xml.gz</span><br><span class="line">        |-- 16b2285eb13334fe6-filelists.xml.gz</span><br><span class="line">        |-- 839450f23accab4617-primary.sqlite.bz2</span><br><span class="line">        |-- 8e84312460f2957b7c3-other.sqlite.bz2</span><br><span class="line">        |-- a2596c92ad4f0c5750156f-filelists.sqlite.bz2</span><br><span class="line">        |-- d4e9d532b7bf9a0c2af-primary.xml.gz</span><br><span class="line">        `-- repomd.xml</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后执行<code>yum clean all</code>清理缓存</p>
</li>
<li><p>最后测试安装<code>yum install hello-world</code>会自动依赖</p>
</li>
</ol>
<h2 id="下载rpm依赖包"><a href="#下载rpm依赖包" class="headerlink" title="下载rpm依赖包"></a>下载rpm依赖包</h2><ol>
<li><p>安装<code>yum ``install</code> <code>yum-plugin-downloadonly</code></p>
</li>
<li><p>下载依赖包<code>yum install –downloadonly –downloaddir= &lt;依赖包存储路径&gt; &lt;需要下载依赖包的安装包名&gt;</code>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install --downloadonly --downloaddir=/data/rpm  mongodb</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li><p>错误信息分析，关键信息<code>cd jdk-8u77-linux-x64-1.0.0</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">执行(%prep): /bin/sh -e /var/tmp/rpm-tmp.QO57WH</span><br><span class="line">+ <span class="built_in">umask</span> 022</span><br><span class="line">+ <span class="built_in">cd</span> /root/rpmbuild/BUILD</span><br><span class="line">+ <span class="built_in">cd</span> /root/rpmbuild/BUILD</span><br><span class="line">+ rm -rf jdk-8u77-linux-x64-1.0.0</span><br><span class="line">+ /usr/bin/gzip -dc /root/rpmbuild/SOURCES/jdk-8u77-linux-x64-1.0.0.tar.gz</span><br><span class="line">+ /usr/bin/tar -xf -</span><br><span class="line">+ STATUS=0</span><br><span class="line">+ <span class="string">&#x27;[&#x27;</span> 0 -ne 0 <span class="string">&#x27;]&#x27;</span></span><br><span class="line">+ <span class="built_in">cd</span> jdk-8u77-linux-x64-1.0.0</span><br><span class="line">/var/tmp/rpm-tmp.QO57WH: line 35: <span class="built_in">cd</span>: jdk-8u77-linux-x64-1.0.0: No such file or directory</span><br><span class="line">错误：/var/tmp/rpm-tmp.QO57WH (%prep) 退出状态不好</span><br></pre></td></tr></table></figure>

<p>原因，是因为解压之后路径找不到对应目录</p>
<p>解决：</p>
<ol>
<li><p>方式一手动解压，重新手动压缩</p>
</li>
<li><p>方式二修改spec文件中的prep，然后查看BUILD里面的实际解压目录<code>/root/rpmbuild/BUILD/jdk1.8.0_77</code>然后设置为实际目录即可</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">%prep</span></span><br><span class="line"><span class="meta">%setup</span> <span class="string">-n jdk1.8.0_77</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>编译后无法运行提示无架构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@xuan SRPMS]<span class="comment"># yum install jdk-1.8-77.src.rpm</span></span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">正在检查 jdk-1.8-77.src.rpm: jdk-1.8-77.src</span><br><span class="line">无法添加软件包 jdk-1.8-77.src.rpm 至操作中。不属于任何可兼容的架构：src</span><br><span class="line">错误：无须任何处理</span><br></pre></td></tr></table></figure>

<p>解决：进错目录，这个是源代码</p>
</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://wangbin.io/blog/it/yum-rpm-make.html">制作一个简单的rpm包:helloworld</a></p>
<p><a href="https://jin-yang.github.io/post/linux-create-rpm-package.html">RPM 包制作</a></p>
<p><a href="%5Bhttp://abcdxyzk.github.io/blog/2014/02/10/rpm-rpmbuild-base/%5D(http://abcdxyzk.github.io/blog/2014/02/10/rpm-rpmbuild-base/)">rpmbuild SPEC文件说明</a></p>
<p><a href="https://blog.csdn.net/wl_fln/article/details/7263668">https://blog.csdn.net/wl_fln/article/details/7263668</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>RPM</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Script-Shell</title>
    <url>/2020/03/25/linux-script-shell/</url>
    <content><![CDATA[<h3 id="配置修改脚本"><a href="#配置修改脚本" class="headerlink" title="配置修改脚本"></a>配置修改脚本</h3><p>测试文件a.conf</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">sex</span>=<span class="string">boy</span></span><br><span class="line"><span class="attr">age</span>=<span class="string">8</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">http://www.baidu.com</span></span><br><span class="line">    <span class="meta">&quot;systemUrl&quot;</span>: <span class="string">&quot;http://10.254.197.9:9304&quot;,</span></span><br></pre></td></tr></table></figure>

<p>常用脚本命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看包含sex的行</span></span><br><span class="line">cat a.conf | grep sex</span><br><span class="line"><span class="meta">#</span><span class="bash">替换sex=boy为sex=girl,-i为写入文件</span></span><br><span class="line">sed -i &quot;s/sex=boy/sex=girl/&quot; a.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 替换sex的值,\S用于匹配除单个空格符之外的所有字符,输出age=8</span></span><br><span class="line">sed -i &quot;s/age=\S*/age=9/&quot; a.conf </span><br><span class="line"><span class="meta">#</span><span class="bash"> 注释sex开头的配置，&amp;代表任意字符</span></span><br><span class="line">sed -i  &#x27;s/^sex/;&amp;/&#x27; a.conf </span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消注释</span></span><br><span class="line">sed -i &#x27;s/^;\(sex\)/\1/&#x27; a.conf </span><br><span class="line"><span class="meta">#</span><span class="bash"> 在age配置后加一行;this is age</span></span><br><span class="line">sed -i &#x27;/age/a\;this is age&#x27; a.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在age配置前加一行;this is age</span></span><br><span class="line">sed -i &#x27;/age/i\;this is age&#x27; a.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有匹配;this is age的行</span></span><br><span class="line">sed -i &#x27;/;this is age/d&#x27;  a.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改url,如果url里面有空格会失败，因为S匹配非空格</span></span><br><span class="line">sed -i &quot;s/url=\S*/url=http:\/\/www.baidu.com/&quot; a.conf </span><br><span class="line"><span class="meta">#</span><span class="bash"> 替换ip</span></span><br><span class="line">sed -i &quot;s/10.254.197.9/127.0.0.1/&quot; a.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 匹配行头，然后替换整行,适用于包含空格的格式  <span class="string">&#x27;/^行头/c\整行替换的值&#x27;</span> 加反斜杠\是为了区分内容可省略</span></span><br><span class="line">sed -i &#x27;/^url/c\url = 2&#x27; a.conf</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>shell</tag>
        <tag>script</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-script</title>
    <url>/2019/06/04/linux-script/</url>
    <content><![CDATA[<h5 id="单行语法"><a href="#单行语法" class="headerlink" title="单行语法"></a>单行语法</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmd1 &amp;&amp; cmd2 <span class="comment">#cmd1正确执行cmd2，相反不执行</span></span><br><span class="line">cmd1 || cmd2 <span class="comment">#cmd1错误执行cmd2，相反不执行</span></span><br></pre></td></tr></table></figure>

<h5 id="错误重定向不输出"><a href="#错误重定向不输出" class="headerlink" title="错误重定向不输出"></a>错误重定向不输出</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmd 1&gt;/dev/null 2&gt;&amp;1 <span class="comment">#错误不会打印</span></span><br></pre></td></tr></table></figure>

<h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户bpf不存在则创建用户，且不输出错误日志,但异常还是存在所以可能会导致整个脚本终止</span></span><br><span class="line">id bpf 1&gt;/dev/null 2&gt;&amp;1 || useradd bpf -d /opt/bpf/</span><br><span class="line"><span class="comment">#方式2</span></span><br><span class="line"><span class="keyword">if</span> id bpf1 &gt;/dev/null 2&gt;&amp;1; <span class="keyword">then</span> <span class="built_in">echo</span> 11; <span class="keyword">fi</span></span><br><span class="line"><span class="comment">#方式3（推荐），不会被推出，因为没有异常，经测试还是被退出</span></span><br><span class="line">cat /etc/passwd | cut -f1 -d<span class="string">&#x27;:&#x27;</span> | grep -w <span class="string">&quot;bpf&quot;</span> -c || useradd bpf -d /opt/bpf/</span><br></pre></td></tr></table></figure>

<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;! maven pom.xml &amp; 符号报错，解决用&lt;![CDATA[ cmd ]]&gt; --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml">&lt;![CDATA[id bpf 1&gt;/dev/null 2&gt;&amp;1 || useradd bpf -d /opt/bpf/]]&gt;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>script</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7设置交换分区</title>
    <url>/2019/03/15/linux-swap/</url>
    <content><![CDATA[<h2 id="centos设置交换分区之阿里云"><a href="#centos设置交换分区之阿里云" class="headerlink" title="centos设置交换分区之阿里云"></a>centos设置交换分区之阿里云</h2><p>交换分区是在内存不足的情况下，存储长期不活跃的内存，但是性能受硬盘影响，下降10倍不等，固态稍微好一点，机械硬盘简直卡死建议不设置</p>
<h5 id="添加交换分区"><a href="#添加交换分区" class="headerlink" title="添加交换分区"></a>添加交换分区</h5><ol>
<li>创建交换分区文件<code>dd if=/dev/zero of=/home/swap bs=1024 count=3764224</code>其中**3764244=1024x2x实际内存大小(M)**其中2代表虚拟内存是实际内存的2倍</li>
<li>设置交换分区文件<code>mkswap /home/swap</code></li>
<li>启用交换分区<code>swapon /home/swap</code></li>
<li>设置开机有效<code>echo &quot;/home/swap swap swap defaults 0 0&quot; &gt;&gt; /etc/fstab</code></li>
<li>重启<code>reboot</code>非必须，然后执行<code>df -h</code>就可以看到swap有值了</li>
</ol>
<h5 id="删除交换分区"><a href="#删除交换分区" class="headerlink" title="删除交换分区"></a>删除交换分区</h5><ol>
<li>停止swap分区<code>swapoff /home/swap</code></li>
<li>删除swap分区<code>rm -fr /home/swap</code></li>
<li>删除开机启动，在<code>/etc/fstab</code>删除行<code>/home/swap swap swap defaults 0 0</code>即可</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>swap</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-System-Clone</title>
    <url>/2020/02/20/linux-system-clone/</url>
    <content><![CDATA[<h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><h3 id="Mondo-Rescue"><a href="#Mondo-Rescue" class="headerlink" title="Mondo Rescue"></a>Mondo Rescue</h3><p><a href="http://www.mondorescue.org/">官网</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://www.mondorescue.org/ftp/centos/7/x86_64/mondorescue.repo</span><br><span class="line">mv mondorescue.repo /etc/yum.repos.d/</span><br><span class="line">yum install mondo</span><br><span class="line">mondoarchive</span><br></pre></td></tr></table></figure>



<h3 id="Relax-and-Recover"><a href="#Relax-and-Recover" class="headerlink" title="Relax and Recover"></a>Relax and Recover</h3><p><a href="https://relax-and-recover.org/">官网</a>，<a href="https://github.com/rear/rear">github</a></p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install syslinux syslinux-extlinux</span><br><span class="line">yum install rear</span><br><span class="line">rear --v</span><br></pre></td></tr></table></figure>

<p>资料较少，暂时放弃</p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://linoxide.com/tools/install-relax-recover-centos-7/">How to Install ReaR (Relax and Recover) on CentOS 7</a></p>
<h3 id="Clonezilla-再生龍"><a href="#Clonezilla-再生龍" class="headerlink" title="Clonezilla 再生龍"></a>Clonezilla 再生龍</h3><p><a href="http://clonezilla.nchc.org.tw/clonezilla-live/download/">官网</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>System</tag>
        <tag>Clone</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7 systemctl服务详解</title>
    <url>/2017/12/05/linux-systemctl-detailed-on-centos/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>系统服务<code>/lib/systemd/system</code></p>
<p>用户服务(需要登陆后才能执行)<code>/usr/lib/systemd/system</code></p>
<p>Systemd服务文件以.service结尾</p>
<p>######注：ubuntu是在<code>/etc/systemd/system/</code></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看所有启动的服务</span></span><br><span class="line">systemctl list-units --<span class="built_in">type</span>=service</span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">systemctl restart nginx.service</span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">systemctl status nginx.service</span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">systemctl start nginx.service</span><br><span class="line"><span class="comment">#开机启动	</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx.service</span><br><span class="line"><span class="comment">#关闭开机启动	</span></span><br><span class="line">systemctl <span class="built_in">disable</span> nginx.service</span><br><span class="line"><span class="comment">#重新扫描变动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment">#查看所有的服务</span></span><br><span class="line">systemctl list-unit-files</span><br></pre></td></tr></table></figure>

<h4 id="配置文件解释"><a href="#配置文件解释" class="headerlink" title="配置文件解释"></a>配置文件解释</h4><p>普通服务文件命名规则<code>serverName.service</code></p>
<p>带参数服务文件命名规则<code>serverName@.service</code>,使用时<code>systemctl start serverName@%i</code>其中<code>%i</code>为动态参数，一般为配置文件名</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[Unit]</span> <span class="string">#服务说明</span></span><br><span class="line"><span class="comment">#描述</span></span><br><span class="line"><span class="attr">Description</span>=<span class="string">Shadowsocks-Libev Custom Client Service for %I  </span></span><br><span class="line"><span class="attr">Documentation</span>=<span class="string">man:ss-local(1)</span></span><br><span class="line"><span class="comment">#描述服务类别</span></span><br><span class="line"><span class="attr">After</span>=<span class="string">network.target</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[Service]</span> <span class="string">#服务运行参数设置</span></span><br><span class="line"><span class="comment">#运行形式forking 后台形式、simple 普通模式？</span></span><br><span class="line"><span class="attr">Type</span>=<span class="string">simple</span></span><br><span class="line"><span class="comment">#全局变量配置文件</span></span><br><span class="line"><span class="comment">#EnvironmentFile=/etc/sysconfig/shadowsocks-libev</span></span><br><span class="line"><span class="comment"># &quot;$CONFFILE&quot;配置在全局变量配置文件shadowsocks-libev，见附件</span></span><br><span class="line"><span class="comment">#ExecStart=/usr/bin/ss-local -c &quot;$CONFFILE&quot; $DAEMON_ARGS</span></span><br><span class="line"></span><br><span class="line"><span class="attr">CapabilityBoundingSet</span>=<span class="string">CAP_NET_BIND_SERVICE</span></span><br><span class="line"><span class="comment">#服务的具体运行命令</span></span><br><span class="line"><span class="attr">ExecStart</span>=<span class="string">/usr/bin/ss-local -c /etc/shadowsocks-libev/%i.json</span></span><br><span class="line"><span class="comment">#ExecReload=为重启命令</span></span><br><span class="line"><span class="comment">#ExecStop=为停止命令</span></span><br><span class="line"><span class="attr">User</span>=<span class="string">nobody</span></span><br><span class="line"><span class="attr">Group</span>=<span class="string">nobody</span></span><br><span class="line"><span class="attr">LimitNOFILE</span>=<span class="string">32768</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=<span class="string">multi-user.target</span></span><br></pre></td></tr></table></figure>

<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h3 id="残酷，革命尚未成功"><a href="#残酷，革命尚未成功" class="headerlink" title="残酷，革命尚未成功"></a>残酷，革命尚未成功</h3><p><code>vim /usr/lib/systemd/system/dropbox.service</code>添加一个用户登陆后启动的服务</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=<span class="string">Dropbox as a system service user</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=<span class="string">forking</span></span><br><span class="line"><span class="attr">ExecStart</span>=<span class="string">/usr/bin/dropbox start</span></span><br><span class="line"><span class="attr">ExecStop</span>=<span class="string">/usr/bin/dropbox stop</span></span><br><span class="line"><span class="attr">User</span>=<span class="string">nobody</span></span><br><span class="line"><span class="attr">Group</span>=<span class="string">nobody</span></span><br><span class="line"><span class="comment"># &#x27;LANG&#x27; might be unnecessary, since systemd already sets the</span></span><br><span class="line"><span class="comment"># locale for all services according to &quot;/etc/locale.conf&quot;.</span></span><br><span class="line"><span class="comment"># Run `systemctl show-environment` to make sure.</span></span><br><span class="line"><span class="comment">#Environment=LANG=en_US.utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=<span class="string">multi-user.target</span></span><br></pre></td></tr></table></figure>







<h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p><code>shadowsocks-libev</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">START</span>=<span class="string">yes</span></span><br><span class="line"><span class="attr">CONFFILE</span>=<span class="string">&quot;/etc/shadowsocks-libev/config.json&quot;</span></span><br><span class="line"><span class="attr">DAEMON_ARGS</span>=<span class="string">&quot;-u&quot;</span></span><br><span class="line"><span class="attr">USER</span>=<span class="string">nobody</span></span><br><span class="line"><span class="attr">GROUP</span>=<span class="string">nobody</span></span><br><span class="line"><span class="attr">MAXFD</span>=<span class="string">32768    </span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>systemd</tag>
        <tag>service</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Tools-on-my-zsh</title>
    <url>/2018/04/30/linux-tools-on-my-zsh/</url>
    <content><![CDATA[<h2 id="ZSH"><a href="#ZSH" class="headerlink" title="ZSH"></a>ZSH</h2><p>zsh (Mac 系统自带，无需安装)。</p>
<p>安装<a href="http://ohmyz.sh/"><strong>Oh-My-Zsh</strong></a>管理zsh的配置工具 <code>sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></p>
<h3 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h3><p>配置文件<code>cat ~/.zshrc</code></p>
<h4 id="命令历史记录功能ctrl-r"><a href="#命令历史记录功能ctrl-r" class="headerlink" title="命令历史记录功能ctrl+r"></a>命令历史记录功能<code>ctrl+r</code></h4><p>历史记录存放在<code>cat ~/.zsh_history</code></p>
<p><code>ctrl+r</code>搜索命令历史记录,<code>!!</code>执行上一条命了</p>
<p>补全<code>TAB</code></p>
<h4 id="命令别名alias"><a href="#命令别名alias" class="headerlink" title="命令别名alias"></a>命令别名<code>alias</code></h4><p>在<code>~/.zshrc</code>中添加<code>alias name=command</code>即可</p>
<p>查看所有命令别名<code>alias</code></p>
<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>git</p>
<h3 id="iterm2-修改配色"><a href="#iterm2-修改配色" class="headerlink" title="iterm2 修改配色"></a>iterm2 修改<a href="https://github.com/mbadolato/iTerm2-Color-Schemes">配色</a></h3><h3 id="Solarized-Dark-Higher-Contrast"><a href="#Solarized-Dark-Higher-Contrast" class="headerlink" title="Solarized Dark Higher Contrast"></a>Solarized Dark Higher Contrast</h3><p>在这里找到自己<a href="https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/schemes%E5%96%9C%E6%AC%A2%E7%9A%84">https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/schemes喜欢的</a></p>
<p>然后保存文件，双击安装，然后color-&gt;color下来框选择自己安装的</p>
<h4 id="item2-安装powerlevel9k主题"><a href="#item2-安装powerlevel9k主题" class="headerlink" title="item2 安装powerlevel9k主题"></a>item2 安装<a href="https://github.com/bhilburn/powerlevel9k">powerlevel9k</a>主题</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh<span class="literal">-my</span><span class="literal">-zsh</span>/custom/themes/powerlevel9k <span class="comment">#下载主题</span></span><br><span class="line">vim ~/.zshrc <span class="comment">#编辑配置文件设置主题ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;，去用户名添加 DEFAULT_USER=&quot;your user name&quot;</span></span><br><span class="line">git clone https://github.com/supermarin/powerline<span class="literal">-fonts</span>.git <span class="comment">#下载字体</span></span><br></pre></td></tr></table></figure>

<p>安装字体，双击<code>/Monaco/Monaco for Powerline.otf</code>文件安装字体</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://gist.github.com/qhh0205/5570934d25a627dd9e9629a8ceeb415c">https://gist.github.com/qhh0205/5570934d25a627dd9e9629a8ceeb415c</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7.3升级内核</title>
    <url>/2017/09/19/linux-update-kernel-on-centos/</url>
    <content><![CDATA[<h3 id="centos7-3升级内核"><a href="#centos7-3升级内核" class="headerlink" title="centos7.3升级内核"></a>centos7.3升级内核</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看内核版本</span></span><br><span class="line">uname -a</span><br><span class="line">uname -r</span><br><span class="line"><span class="meta">#</span><span class="bash">导入elrepo的key</span></span><br><span class="line">rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line"><span class="meta">#</span><span class="bash">安装elrepo的yum</span></span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line"><span class="meta">#</span><span class="bash">查看内核相关包</span></span><br><span class="line">yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list available</span><br><span class="line"><span class="meta">#</span><span class="bash">安装kernel-ml.x86_64主线稳定版</span></span><br><span class="line">yum -y --enablerepo=elrepo-kernel install kernel-ml.x86_64 kernel-ml-devel.x86_64</span><br><span class="line"><span class="meta">#</span><span class="bash">重建grub2的配置文件（可选操作，如果下一步查看内核找不到该文件，执行该命令）</span></span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class="line"><span class="meta">#</span><span class="bash">查看可用内核</span></span><br><span class="line">cat /boot/grub2/grub.cfg |grep menuentry </span><br><span class="line"><span class="meta">#</span><span class="bash">替换刚刚查看出来的内核名字</span></span><br><span class="line">grub2-set-default &#x27;CentOS Linux (4.13.2-1.el7.elrepo.x86_64) 7 (Core)&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash">查看内核启动项</span></span><br><span class="line">grub2-editenv list </span><br><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">reboot</span><br><span class="line"><span class="meta">#</span><span class="bash">查看版本</span></span><br><span class="line">uname -r</span><br><span class="line"><span class="meta">#</span><span class="bash">查看内核</span></span><br><span class="line">rpm -qa | grep kernel</span><br><span class="line"><span class="meta">#</span><span class="bash">删除内核</span></span><br><span class="line">yum remove kernel-3.10.0-514.26.2.el7.x86_64</span><br></pre></td></tr></table></figure>

<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p> <a href="http://www.jiagoumi.com/work/1167.html">Centos 7/6 内核版本由3.10.0 升级至 4.12.4方法</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>内核</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习之监督学习</title>
    <url>/2017/07/11/machine-learn-supervised/</url>
    <content><![CDATA[<h3 id="监督学习（supervised-learning）"><a href="#监督学习（supervised-learning）" class="headerlink" title="监督学习（supervised-learning）"></a>监督学习（supervised-learning）</h3><h5 id="regression（回归）"><a href="#regression（回归）" class="headerlink" title="regression（回归）"></a>regression（回归）</h5><p>Given a picture of a person, we have to predict their age on the basis of the given picture</p>
<p>通过历史的数据，预测新的数据（线性）</p>
<p>eg:预测问题、房价问题</p>
<h5 id="classification（分类）"><a href="#classification（分类）" class="headerlink" title="classification（分类）"></a>classification（分类）</h5><p>Given a patient with a tumor, we have to predict whether the tumor is malignant or benign.</p>
<p>根据特征识别，无数个好特征（向量），然后判断属于哪个</p>
<p>eg:识别问题、肿瘤问题</p>
<h3 id="无监督学习（unsupervised-learning）"><a href="#无监督学习（unsupervised-learning）" class="headerlink" title="无监督学习（unsupervised-learning）"></a>无监督学习（unsupervised-learning）</h3><p>通过聚类（分组）算法，无需指定特征</p>
<h5 id="聚类（Clustering）"><a href="#聚类（Clustering）" class="headerlink" title="聚类（Clustering）"></a>聚类（Clustering）</h5><p>eg: 新闻分组</p>
<h5 id="集群（Non-clustering）"><a href="#集群（Non-clustering）" class="headerlink" title="集群（Non-clustering）"></a>集群（Non-clustering）</h5><p>eg:音频分离</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>监督学习，回归，分类</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务之分布式锁</title>
    <url>/2018/07/20/microservices-distributed-lock/</url>
    <content><![CDATA[<h3 id="缓存分布式锁"><a href="#缓存分布式锁" class="headerlink" title="缓存分布式锁"></a>缓存分布式锁</h3><h3 id="官方分布式锁redisson—–文档"><a href="#官方分布式锁redisson—–文档" class="headerlink" title="官方分布式锁redisson—–文档"></a>官方分布式锁<a href="https://github.com/redisson/redisson">redisson</a>—–<a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95">文档</a></h3><h4 id="基于redis缓存分布式锁"><a href="#基于redis缓存分布式锁" class="headerlink" title="基于redis缓存分布式锁"></a>基于redis缓存分布式锁</h4><ul>
<li><input disabled="" type="checkbox"> redis宕机(已锁/未锁)</li>
<li><input disabled="" type="checkbox"> 其中一个线程服务宕机(已锁)</li>
<li><input disabled="" type="checkbox"> </li>
</ul>
<h5 id="redis-SETNX-命令详解"><a href="#redis-SETNX-命令详解" class="headerlink" title="redis SETNX 命令详解"></a>redis SETNX 命令详解</h5><p><strong>SETNX key value</strong> </p>
<p>将 <code>key</code> 的值设为 <code>value</code> ，当且仅当 <code>key</code> 不存在。</p>
<p>若给定的 <code>key</code> 已经存在，则 <a href="http://redisdoc.com/string/setnx.html#setnx">SETNX</a> 不做任何动作。</p>
<p><a href="http://redisdoc.com/string/setnx.html#setnx">SETNX</a> 是『SET if Not eXists』(如果不存在，则 SET)的简写。</p>
<p><code>jedis.setnx(key,value);</code>   <code>key</code> 锁id ，<code>value</code> 过期时间</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/c2b4aa7a12f1">分布式锁的三种实现的对比</a></p>
]]></content>
      <categories>
        <category>Microservices</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>Microservices</tag>
        <tag>lock</tag>
        <tag>Distributed</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务之Gitlab搭建</title>
    <url>/2018/05/20/microservices-gitlab/</url>
    <content><![CDATA[<p>博客见<a href="https://blog.iexxk.com/2017/12/11/Dcoker-Swarm-install-gitlab/">dcoker swarm安装gitlab</a></p>
<p>操作步骤见<a href="">微服务之gitlab搭建</a></p>
]]></content>
      <categories>
        <category>Microservices</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
        <tag>Microservices</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-Graph-geoserver</title>
    <url>/2018/10/11/mysql-graph-geoserver/</url>
    <content><![CDATA[<h2 id="geoserver绘制形状"><a href="#geoserver绘制形状" class="headerlink" title="geoserver绘制形状"></a>geoserver绘制形状</h2><h4 id="绘制矩形图形-POLYGON"><a href="#绘制矩形图形-POLYGON" class="headerlink" title="绘制矩形图形(POLYGON)"></a>绘制矩形图形(<code>POLYGON</code>)</h4><p>注意事项：第一个点和最后一个点必须相同，因此矩形至少是5个点</p>
<p><img src="https://s3.ax1x.com/2021/03/18/6256pj.png" alt="geoserver"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--添加面</span><br><span class="line">SET @g &#x3D; &#39;POLYGON((114.34845 25.48141, 114.34845 25.28141, 114.51599 25.28141, 114.51599 25.48141, 114.34845 25.48141))&#39;;</span><br><span class="line">INSERT INTO test(shape) VALUES (ST_PolygonFromText(@g));</span><br><span class="line">--添加点</span><br><span class="line">SET @g &#x3D; ST_GeomFromText(&#39;POINT(114.44845 25.38141)&#39;); INSERT INTO test(shape) VALUES (@g);</span><br></pre></td></tr></table></figure>

<p>表结构：</p>
<table>
<thead>
<tr>
<th>名</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>int</td>
</tr>
<tr>
<td>shape</td>
<td>geometry</td>
</tr>
<tr>
<td>name</td>
<td>varchar</td>
</tr>
</tbody></table>
<h3 id="常见语句"><a href="#常见语句" class="headerlink" title="常见语句"></a>常见语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-- 插入</span><br><span class="line">SET @g &#x3D; ST_GeomFromText(&#39;POINT(109.49097 19.06798)&#39;,1);</span><br><span class="line"> INSERT INTO infcamer(shape) VALUES (@g);</span><br><span class="line">-- 更新 </span><br><span class="line">UPDATE &#96;功能分区面&#96; set SHAPE&#x3D;ST_PolygonFromText(@g,1) WHERE OGR_FID&#x3D;1; </span><br><span class="line">-- 查询坐标是否正确设置</span><br><span class="line">SELECT * FROM infcamer WHERE ST_Contains(SHAPE, ST_GeomFromText( &#39;POINT(109.49097 19.06798)&#39;,0))</span><br><span class="line">-- 查询空间坐标相关设置</span><br><span class="line">SELECT * FROM spatial_ref_sys LIMIT 0, 50;</span><br><span class="line">-- geoserver数据库</span><br><span class="line">GEOGCS[&quot;WGS 84&quot;,DATUM[&quot;WGS_1984&quot;,SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563,AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]],AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]],PRIMEM[&quot;Greenwich&quot;,0,AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]],UNIT[&quot;degree&quot;,0.0174532925199433,AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]],AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]]</span><br><span class="line">-- test数据库</span><br><span class="line">GEOGCS[&quot;GCS_WGS_1984&quot;,DATUM[&quot;WGS_1984&quot;,SPHEROID[&quot;WGS_1984&quot;,6378137.0,298.257223563]],PRIMEM[&quot;Greenwich&quot;,0.0],UNIT[&quot;Degree&quot;,0.0174532925199433]]</span><br><span class="line"></span><br><span class="line">GEOGCS[&quot;GCS_WGS_1984&quot;,DATUM[&quot;WGS_1984&quot;,SPHEROID[&quot;WGS_1984&quot;,6378137.0,298.257223563]],PRIMEM[&quot;Greenwich&quot;,0.0],UNIT[&quot;Degree&quot;,0.0174532925199433],METADATA[&quot;World&quot;,-180.0,-90.0,180.0,90.0,0.0,0.0174532925199433,0.0,1262]]</span><br></pre></td></tr></table></figure>

<h3 id="镂空面"><a href="#镂空面" class="headerlink" title="镂空面"></a>镂空面</h3><p>数据格式为</p>
<p><code>POLYGON((a a, b b,a a),(c c,d d, c c)) </code></p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li><p>点坐标查询提示<code>[Err] 3033 - Binary geometry function st_contains given two geometries of different srids: 0 and 1, which should have been identical.</code></p>
<p><strong>分析</strong>：由于插入时的<strong>srid</strong>不一致，用<code>SELECT * FROM infcamer WHERE ST_Contains(SHAPE, ST_GeomFromText( &#39;POINT(109.49097 19.06798)&#39;))</code>查询时没有指定<strong>srid</strong>，所以报错提示有不同的srid</p>
<p><strong>解决1</strong>：查询时指定<strong>srid</strong>例如：<code>SELECT * FROM infcamer WHERE ST_Contains(SHAPE, ST_GeomFromText( &#39;POINT(109.49097 19.06798)&#39;,0))</code></p>
<p><strong>解决2</strong>：插入时指定<strong>srid</strong>,指定的<strong>srid</strong>最好和原有记录的<strong>srid</strong>一致，这样就不会存在<code>different srids: 0 and 1</code>，例如：<code>SET @g = ST_GeomFromText(&#39;POINT(109.49097 19.06798)&#39;,0);  INSERT INTO infcamer(shape) VALUES (@g);</code></p>
</li>
<li><p>在<code>Navicat</code>客户端看不到完整数据，最好导出看</p>
</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://dev.mysql.com/doc/refman/5.7/en/populating-spatial-columns.html">Mysql官方文档</a></p>
<p><a href="http://www.mysqlab.net/docs/view/refman-5.1-zh/chapter/spatial-extensions-in-mysql.html">Mysql的空间扩展</a>  较全，值得一看</p>
<p><a href="https://bugs.mysql.com/bug.php?id=79282">mysql ogr2ogr error</a></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>geometry</tag>
        <tag>geoserver</tag>
      </tags>
  </entry>
  <entry>
    <title>Network-common-problem</title>
    <url>/2018/09/20/network-common-problem/</url>
    <content><![CDATA[<h1 id="mac-篇"><a href="#mac-篇" class="headerlink" title="mac 篇"></a>mac 篇</h1><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前路由表</span></span><br><span class="line">netstat -rn</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">Routing tables</span><br><span class="line">Internet:</span><br><span class="line">Destination        Gateway            Flags        Netif Expire</span><br><span class="line">default            192.168.43.88      UGSc           en0</span><br><span class="line">default            11.13.2.254        UGScI          en7</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"><span class="comment">#获取默认路由</span></span><br><span class="line">route get 0.0.0.0</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">   route to: default</span><br><span class="line">destination: default</span><br><span class="line">       mask: default</span><br><span class="line">    gateway: 192.168.43.88</span><br><span class="line">  interface: en0</span><br><span class="line">      flags: &lt;UP,GATEWAY,DONE,STATIC,PRCLONING&gt;</span><br><span class="line"> recvpipe  sendpipe  ssthresh  rtt,msec    rttvar  hopcount      mtu     expire</span><br><span class="line">       0         0         0         0         0         0      1500         0</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#删除默认路由</span></span><br><span class="line">sudo route -n delete default 192.168.43.88</span><br><span class="line"><span class="comment">#添加外网网关</span></span><br><span class="line">sudo route add -net 0.0.0.0 192.168.43.88</span><br><span class="line"><span class="comment">#添加内网网关</span></span><br><span class="line">sudo route add -net 11.8.129.0 11.13.2.254</span><br></pre></td></tr></table></figure>

<h1 id="Linux-篇"><a href="#Linux-篇" class="headerlink" title="Linux 篇"></a>Linux 篇</h1><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#和网络有关的配置文件 </span></span><br><span class="line">/etc/resolv.conf </span><br><span class="line"><span class="comment">#查看网关设置 </span></span><br><span class="line">grep GATEWAY /etc/sysconfig/network-scripts/ifcfg* </span><br><span class="line"><span class="comment">#增加网关: </span></span><br><span class="line">route add default gw 192.168.40.1 </span><br><span class="line"><span class="comment">#重启网络 </span></span><br><span class="line">service network restart </span><br><span class="line"><span class="comment">#查看DNS解析 </span></span><br><span class="line">grep hosts /etc/nsswitch.conf</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="traceroute-lt-ip-gt"><a href="#traceroute-lt-ip-gt" class="headerlink" title="traceroute &lt;ip&gt;"></a><code>traceroute &lt;ip&gt;</code></h3><p>网络测试、测量、管理、分析，<a href="https://www.cisco.com/c/en/us/support/docs/ios-nx-os-software/ios-software-releases-121-mainline/12778-ping-traceroute.html#traceroute">官网</a></p>
<h4 id="ICMP错误信息分析："><a href="#ICMP错误信息分析：" class="headerlink" title="ICMP错误信息分析："></a>ICMP错误信息分析：</h4><p><code>!H</code>    不能到达主机</p>
<p><code>!N</code>    不能到达网络</p>
<p><code>!P</code>     不能到达的协议</p>
<p><code>!S</code>     源路由失效</p>
<p><code>!F</code>     需要分段</p>
<p>正常情况：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@environment-test1 ~]<span class="comment"># traceroute 4.2.2.2</span></span><br><span class="line">traceroute to 4.2.2.2 (4.2.2.2), 30 hops max, 60 byte packets</span><br><span class="line"> 1  gateway (192.168.1.1)  0.440 ms  0.594 ms  0.743 ms</span><br><span class="line"> 2  * * *</span><br><span class="line"> 3  121.33.196.105 (121.33.196.105)  4.352 ms  4.443 ms  4.521 ms</span><br><span class="line"> 4  183.56.31.37 (183.56.31.37)  7.290 ms 183.56.31.21 (183.56.31.21)  9.217 ms 183.56.31.13 (183.56.31.13)  6.755 ms</span><br><span class="line"> 5  153.176.37.59.broad.dg.gd.dynamic.163data.com.cn (59.37.176.153)  6.884 ms  6.993 ms  7.084 ms</span><br><span class="line"> 6  121.8.223.13 (121.8.223.13)  9.307 ms  5.848 ms 183.56.31.173 (183.56.31.173)  4.443 ms</span><br><span class="line"> 7  202.97.94.130 (202.97.94.130)  4.029 ms  4.165 ms 202.97.94.142 (202.97.94.142)  5.546 ms</span><br><span class="line"> 8  202.97.94.98 (202.97.94.98)  11.225 ms 202.97.94.118 (202.97.94.118)  6.177 ms  6.600 ms</span><br><span class="line"> 9  202.97.52.18 (202.97.52.18)  209.571 ms 202.97.52.142 (202.97.52.142)  206.772 ms 202.97.58.2 (202.97.58.2)  197.316 ms</span><br><span class="line">10  195.50.126.217 (195.50.126.217)  213.784 ms  213.917 ms  211.676 ms</span><br><span class="line">11  4.69.163.22 (4.69.163.22)  312.436 ms 4.69.141.230 (4.69.141.230)  214.040 ms  213.168 ms</span><br><span class="line">12  b.resolvers.Level3.net (4.2.2.2)  209.348 ms  210.701 ms  210.588 ms</span><br></pre></td></tr></table></figure>

<p>有问题的情况：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@lfadmin ~]<span class="comment"># traceroute 4.2.2.2</span></span><br><span class="line">traceroute to 4.2.2.2 (4.2.2.2), 30 hops max, 60 byte packets</span><br><span class="line"> 1  gateway (192.168.1.1)  0.751 ms !N  0.817 ms !N  1.326 ms !N</span><br></pre></td></tr></table></figure>

<h3 id="ifconfig-lt-网卡名字-gt"><a href="#ifconfig-lt-网卡名字-gt" class="headerlink" title="ifconfig &lt;网卡名字&gt;"></a><code>ifconfig &lt;网卡名字&gt;</code></h3><h3 id="netstat-r相似route"><a href="#netstat-r相似route" class="headerlink" title="netstat -r相似route"></a><code>netstat -r</code>相似<code>route</code></h3><p>显示路由连接信息等</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@environment-test1 ~]<span class="comment"># netstat -r</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface</span><br><span class="line">default         gateway         0.0.0.0         UG        0 0          0 enp3s0</span><br><span class="line">link-local      0.0.0.0         255.255.0.0     U         0 0          0 enp3s0</span><br><span class="line">172.17.0.0      0.0.0.0         255.255.0.0     U         0 0          0 docker0</span><br><span class="line">172.18.0.0      0.0.0.0         255.255.0.0     U         0 0          0 doc...ridge</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   U         0 0          0 enp3s0</span><br></pre></td></tr></table></figure>



<h3 id="host-lt-域名-gt-相似nslookup-lt-域名-gt"><a href="#host-lt-域名-gt-相似nslookup-lt-域名-gt" class="headerlink" title="host &lt;域名&gt; 相似nslookup &lt;域名&gt;"></a><code>host &lt;域名&gt;</code> 相似<code>nslookup &lt;域名&gt;</code></h3><p>dns分析</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@environment-test1 ~]<span class="comment">#  host www.baidu.com</span></span><br><span class="line">www.baidu.com is an <span class="built_in">alias</span> <span class="keyword">for</span> www.a.shifen.com.</span><br><span class="line">www.a.shifen.com has address 14.215.177.38</span><br><span class="line">www.a.shifen.com has address 14.215.177.39</span><br></pre></td></tr></table></figure>

<h3 id="nmcli查看设备状态"><a href="#nmcli查看设备状态" class="headerlink" title="nmcli查看设备状态"></a><code>nmcli</code>查看设备状态</h3><p><code>ip route show | column -t</code> 查看路由</p>
<h3 id="问题1-：无法连外网，可以ping-路由器"><a href="#问题1-：无法连外网，可以ping-路由器" class="headerlink" title="问题1 ：无法连外网，可以ping 路由器"></a>问题1 ：无法连外网，可以ping 路由器</h3><p>提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@lfadmin ~]<span class="comment"># traceroute 4.2.2.2</span></span><br><span class="line">traceroute to 4.2.2.2 (4.2.2.2), 30 hops max, 60 byte packets</span><br><span class="line"> 1  gateway (192.168.1.1)  0.751 ms !N  0.817 ms !N  1.326 ms !N</span><br></pre></td></tr></table></figure>

<p>解决原因，是网络配置文件uuid冲突，导致不能上网，修改即可</p>
<p>执行<code>uuidgen ens33</code>生产新的<code>830a6ae2-85fb-41e7-9e5d-60d084f56f5f</code>替换配置文件里面的</p>
<p>执行<code>nmcli con | sed -n &#39;1,2p&#39;</code>进行验证</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://segmentfault.com/a/1190000011954814">CentOS7配置网卡为静态IP，如果你还学不会那真的没有办法了！</a></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>frp内网穿透</title>
    <url>/2017/09/07/network-frp/</url>
    <content><![CDATA[<h1 id="fatedier-frp"><a href="#fatedier-frp" class="headerlink" title="fatedier/frp"></a>fatedier<a href="https://github.com/fatedier/frp">/frp</a></h1><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。</p>
<h3 id="搭建一个远程访问内网的web应用"><a href="#搭建一个远程访问内网的web应用" class="headerlink" title="搭建一个远程访问内网的web应用"></a>搭建一个远程访问内网的web应用</h3><p>frps 服务端程序(配置文件frps.ini)，放到公网ip的机器上（阿里云）</p>
<p>frpc 客户端程序(配置文件frpc.ini)，放到内网环境机器上（win10）</p>
<h5 id="法一-通过域名访问内网web服务"><a href="#法一-通过域名访问内网web服务" class="headerlink" title="法一     通过域名访问内网web服务"></a>法一     通过域名访问内网web服务</h5><h6 id="frps-服务端设置"><a href="#frps-服务端设置" class="headerlink" title="frps 服务端设置"></a>frps 服务端设置</h6><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="attr">[common]</span></span><br><span class="line"><span class="comment">#frps服务端口</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="string">7000</span></span><br><span class="line"><span class="comment">#web远程访问端口</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="string">10080</span></span><br><span class="line"><span class="comment">#https使用这个</span></span><br><span class="line"><span class="comment">#vhost_https_port = 8080</span></span><br></pre></td></tr></table></figure>

<p>启动服务端<code>./frps -c ./frps.ini</code></p>
<h6 id="frpc-客户端设置"><a href="#frpc-客户端设置" class="headerlink" title="frpc 客户端设置"></a>frpc 客户端设置</h6><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="attr">[common]</span></span><br><span class="line"><span class="comment">#服务器公网ip</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="string">112.74.51.136</span></span><br><span class="line"><span class="comment">#frps 服务端口和服务端对应</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="string">7000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[web]</span></span><br><span class="line"><span class="comment">#web服务网络类型，可选http、https</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">http</span></span><br><span class="line"><span class="comment">#内网机器的web服务端口</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="string">8080</span></span><br><span class="line"><span class="comment">#配置域名(必须绑定域名)</span></span><br><span class="line"><span class="attr">custom_domains</span> = <span class="string">exxk.me</span></span><br></pre></td></tr></table></figure>

<p>启动客户端<code>.\frpc.exe -c .\frpc.ini</code></p>
<h5 id="法二-通过ssh-IP-访问内网web服务"><a href="#法二-通过ssh-IP-访问内网web服务" class="headerlink" title="法二     通过ssh(IP)访问内网web服务"></a>法二     通过ssh(IP)访问内网web服务</h5><h6 id="frps-服务端设置-1"><a href="#frps-服务端设置-1" class="headerlink" title="frps 服务端设置"></a>frps 服务端设置</h6><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="attr">[common]</span></span><br><span class="line"><span class="comment">#frps服务端口</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="string">7000</span></span><br></pre></td></tr></table></figure>

<p>启动服务端<code>./frps -c ./frps.ini</code></p>
<h6 id="frpc-客户端设置-1"><a href="#frpc-客户端设置-1" class="headerlink" title="frpc 客户端设置"></a>frpc 客户端设置</h6><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="attr">[common]</span></span><br><span class="line"><span class="comment">#服务器公网ip</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="string">112.74.51.136</span></span><br><span class="line"><span class="comment">#frps 服务端口和服务端对应</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="string">7000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">tcp</span></span><br><span class="line"><span class="comment">#web服务本地访问地址</span></span><br><span class="line"><span class="attr">local_ip</span> = <span class="string">127.0.0.1</span></span><br><span class="line"><span class="comment">#web服务本地访问端口</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="string">8080</span></span><br><span class="line"><span class="comment">#远程调用web服务时的端口</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="string">10080</span></span><br></pre></td></tr></table></figure>

<p>启动客户端<code>.\frpc.exe -c .\frpc.ini</code></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>集群</tag>
        <tag>frp</tag>
        <tag>网络代理</tag>
        <tag>局域网远程访问</tag>
      </tags>
  </entry>
  <entry>
    <title>Network-hyper-v-NAt</title>
    <url>/2018/04/19/network-hyper-v-nat/</url>
    <content><![CDATA[<h2 id="hyper-v设置静态ip"><a href="#hyper-v设置静态ip" class="headerlink" title="hyper-v设置静态ip"></a>hyper-v设置静态ip</h2><h4 id="创建NAT网络"><a href="#创建NAT网络" class="headerlink" title="创建NAT网络"></a>创建NAT网络</h4><p>用管理员权限运行<code>powershell</code>,下面命令会创建一个NAT内部网络，网段为<code>192.168.204.0/24</code>，可以在网络适配器可以找到新建的<code>NAT-Docker</code>网络适配器</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建新的虚拟交换机NAT-Docker</span></span><br><span class="line"><span class="built_in">New-VMSwitch</span> –SwitchName <span class="string">&quot;NAT-Docker&quot;</span> –SwitchType Internal –Verbose</span><br><span class="line"><span class="comment">#查看所有网路适配器，找到对应ifIndex 值</span></span><br><span class="line"><span class="built_in">Get-NetAdapter</span></span><br><span class="line"><span class="comment">#新建一个NAT网关192.168.204.181，注意替换InterfaceIndex为ifIndex值</span></span><br><span class="line"><span class="built_in">New-NetIPAddress</span> –IPAddress <span class="number">192.168</span>.<span class="number">204.1</span> <span class="literal">-PrefixLength</span> <span class="number">24</span> <span class="literal">-InterfaceIndex</span> <span class="number">37</span> –Verbose</span><br><span class="line"><span class="comment">#创建一个nat网络</span></span><br><span class="line"><span class="built_in">New-NetNat</span> –Name NATNetwork –InternalIPInterfaceAddressPrefix <span class="number">192.168</span>.<span class="number">204.0</span>/<span class="number">24</span> –Verbose</span><br></pre></td></tr></table></figure>

<h4 id="配置NAT网络"><a href="#配置NAT网络" class="headerlink" title="配置NAT网络"></a>配置NAT网络</h4><p>在新建的网络适配器<code>NAT-Docker</code>设置固定ip为<code>192.168.204.1</code>,dns记得也要设置<code>202.96.128.86</code>根据自己实际情况设置dns</p>
<p>在hyper-v虚拟机里切换centos使用该网络</p>
<h4 id="centos配置静态ip"><a href="#centos配置静态ip" class="headerlink" title="centos配置静态ip"></a>centos配置静态ip</h4><p>在centos修改网络配置文件<code>vim /etc/sysconfig/network-scripts/ifcfg-eth0 </code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">TYPE</span>=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line"><span class="attr">PROXY_METHOD</span>=<span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="attr">BROWSER_ONLY</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="comment">#BOOTPROTO=&quot;dhcp&quot;</span></span><br><span class="line"><span class="attr">BOOTPROTO</span>=<span class="string">&quot;static&quot;</span></span><br><span class="line"><span class="attr">DEFROUTE</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV4_FAILURE_FATAL</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">IPV6INIT</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_AUTOCONF</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_DEFROUTE</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_FAILURE_FATAL</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">IPV6_ADDR_GEN_MODE</span>=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line"><span class="attr">NAME</span>=<span class="string">&quot;eth0&quot;</span></span><br><span class="line"><span class="attr">UUID</span>=<span class="string">&quot;d49f62d7-9c2a-4f6f-8077-605d0dd65eea&quot;</span></span><br><span class="line"><span class="attr">DEVICE</span>=<span class="string">&quot;eth0&quot;</span></span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="comment">#---以下新加</span></span><br><span class="line"><span class="attr">NM_CONTROLLED</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">IPADDR</span>=<span class="string">&quot;192.168.204.181&quot;</span></span><br><span class="line"><span class="attr">NETMASK</span>=<span class="string">&quot;255.255.255.0&quot;</span></span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="string">&quot;192.168.204.1&quot;</span></span><br><span class="line"><span class="attr">BROADCAST</span>=<span class="string">&quot;192.168.204.255&quot;</span></span><br><span class="line"><span class="attr">DNS1</span>=<span class="string">&quot;8.8.8.8&quot;</span></span><br></pre></td></tr></table></figure>

<p>执行<code>service network restart</code>重启网络</p>
<h4 id="端口映射（需管理员权限）"><a href="#端口映射（需管理员权限）" class="headerlink" title="端口映射（需管理员权限）"></a>端口映射（需管理员权限）</h4><p><img src="https://s3.ax1x.com/2021/03/18/625VfJ.png" alt="1531476067353"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询端口映射情况</span></span><br><span class="line">netsh interface portproxy show v4tov4</span><br><span class="line"><span class="comment">#添加端口映射</span></span><br><span class="line">netsh interface portproxy add v4tov4 listenport=外网端口 listenaddress=主IP connectaddress=私网IP connectport=私网IP端口</span><br><span class="line"><span class="comment">#eg</span></span><br><span class="line">netsh interface portproxy add v4tov4 listenport=<span class="number">14014</span> listenaddress=<span class="number">192.168</span>.<span class="number">1.158</span> connectaddress=<span class="number">192.168</span>.<span class="number">204.182</span> connectport=<span class="number">14014</span></span><br><span class="line"><span class="comment">#删除一个端口映射</span></span><br><span class="line">netsh interface portproxy delete v4tov4 listenaddress=主IP listenport=外网端口</span><br><span class="line"><span class="comment">#eg</span></span><br><span class="line">netsh interface portproxy delete v4tov4 listenaddress=<span class="number">192.168</span>.<span class="number">1.158</span> listenport=<span class="number">14014</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2021/03/18/625ep9.png" alt="1531475386029"></p>
<p>参考<a href="https://my.oschina.net/alongite/blog/1537054">Hyper-V 共享式网络链接 端口映射</a></p>
<h3 id="双网卡"><a href="#双网卡" class="headerlink" title="双网卡"></a>双网卡</h3><p>设置<code>/etc/sysconfig/network</code>，决定走那个网关和网卡</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">GATEWAY</span>=<span class="string">10.2.2.1</span></span><br><span class="line"><span class="attr">GATEWAYDEV</span>=<span class="string">em3</span></span><br></pre></td></tr></table></figure>

<p>在网卡配置文件里面只有一个网卡设置网关，内网的不要设置</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li><p>端口偶发性映射失效，重启失效</p>
<p>解决：目前删除重新添加，也可以添加个脚本，待寻找更好的方法</p>
<p>参考：</p>
<p><a href="https://bbs.csdn.net/topics/391076935">netsh interface portproxy 偶发性失效</a></p>
<p><a href="https://social.technet.microsoft.com/Forums/en-US/24494291-21a0-492e-b596-97bd5ac042d1/netsh-portproxy-not-working-after-reboot?forum=w7itpronetworking">netsh portproxy not working after reboot</a></p>
</li>
<li><p>网络配置实现，使用<code>ip a s</code>查看可以一个网卡下有两个ip</p>
<p>原因：存在相同名字的网卡配置文件，但后缀不一样，主要是由于备份原来文件导致的，例如<code>.back</code>等，</p>
<p>解决：千万不要在当前目录进行备份，且不要用后缀模式</p>
</li>
<li><p>设置静态网络时，出现双ip问题</p>
<p>原因：未知</p>
<p>解决：在网络配置文件添加<code>NM_CONTROLLED=no</code>然后重启</p>
</li>
</ol>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>Network</tag>
        <tag>static</tag>
        <tag>NAT</tag>
        <tag>hyper-v</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7.4安装openVpn</title>
    <url>/2017/10/12/network-intstall-openvpn-on-centos/</url>
    <content><![CDATA[<h4 id="openvpn-service安装与配置"><a href="#openvpn-service安装与配置" class="headerlink" title="openvpn service安装与配置"></a>openvpn service安装与配置</h4><h5 id="1-下载脚本wget-https-git-io-vpn-O-openvpn-install-sh"><a href="#1-下载脚本wget-https-git-io-vpn-O-openvpn-install-sh" class="headerlink" title="1.下载脚本wget https://git.io/vpn -O openvpn-install.sh"></a>1.下载脚本<code>wget https://git.io/vpn -O openvpn-install.sh</code></h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加执行权限</span></span><br><span class="line">chmod +x openvpn-install.sh</span><br><span class="line"><span class="comment">#总结</span></span><br><span class="line">wget https://git.io/vpn -O openvpn-install.sh &amp;&amp; bash openvpn-install.sh</span><br></pre></td></tr></table></figure>

<h5 id="2-运行脚本-openvpn-install-sh-设置如下"><a href="#2-运行脚本-openvpn-install-sh-设置如下" class="headerlink" title="2.运行脚本./openvpn-install.sh,设置如下"></a>2.运行脚本<code>./openvpn-install.sh</code>,设置如下</h5><ol>
<li>监听地址设置为空 IP address: </li>
<li>Protocol:[2]TCP</li>
<li>Port:1194</li>
<li>不选DNS:</li>
<li>client name: client_k2</li>
<li>External IP : 112.74.51.136</li>
</ol>
<h5 id="3-配置服务端vim-etc-openvpn-server-conf"><a href="#3-配置服务端vim-etc-openvpn-server-conf" class="headerlink" title="3. 配置服务端vim /etc/openvpn/server.conf"></a>3. 配置服务端<code>vim /etc/openvpn/server.conf</code></h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定ip,所以记录ip没效果屏蔽</span></span><br><span class="line"><span class="meta">;ifconfig-pool-persist</span> <span class="string">ipp.txt</span></span><br><span class="line"><span class="meta">;push</span> <span class="string">&quot;redirect-gateway def1 bypass-dhcp&quot;</span></span><br><span class="line"><span class="comment">#推送服务器路由</span></span><br><span class="line"><span class="attr">push</span> <span class="string">&quot;route 10.14.0.0 255.255.255.0&quot;</span></span><br><span class="line"><span class="comment">#推送k2客户端子网路由到所有客户端除了ccd里面申明了该路由的客户端</span></span><br><span class="line"><span class="attr">push</span> <span class="string">&quot;route 192.168.123.0 255.255.255.0&quot;</span></span><br><span class="line"><span class="comment">#添加服务器路由，访问客户端K2的192.168.123.0子网通过网关10.14.0.2(k2客户端ip)</span></span><br><span class="line"><span class="attr">route</span> <span class="string">192.168.123.0 255.255.255.0 10.14.0.2</span></span><br><span class="line"><span class="comment">#添加客户端配置目录，启用之后，每个客户端必须指定ip，否正有可能访问不了其他客户端的子网</span></span><br><span class="line"><span class="meta">client-config-dir</span> <span class="string">ccd</span></span><br><span class="line"><span class="comment">#客户端访问客户端</span></span><br><span class="line"><span class="attr">client-to-client</span></span><br></pre></td></tr></table></figure>

<h5 id="4-配置客户端路由mkdir-etc-openvpn-ccd和vim-etc-openvpn-ccd-client-k2"><a href="#4-配置客户端路由mkdir-etc-openvpn-ccd和vim-etc-openvpn-ccd-client-k2" class="headerlink" title="4. 配置客户端路由mkdir /etc/openvpn/ccd和vim /etc/openvpn/ccd/client_k2"></a>4. 配置客户端路由<code>mkdir /etc/openvpn/ccd</code>和<code>vim /etc/openvpn/ccd/client_k2</code></h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置该客户端的vpn的ip是10.14.0.2,子网掩码必须是255.255.255.0，如果启用ccd，必须配置</span></span><br><span class="line"><span class="meta">ifconfig-push</span> <span class="string">10.14.0.2 255.255.255.0</span></span><br><span class="line"><span class="comment">#申明192.168.123.0是自己的子网，并且让子网也可以访问vpn服务器，申明之后不会推送该路由到该客户端</span></span><br><span class="line"><span class="attr">iroute</span> <span class="string">192.168.123.0 255.255.255.0</span></span><br><span class="line"><span class="attr">route</span> <span class="string">192.168.123.0 255.255.255.0</span></span><br></pre></td></tr></table></figure>

<h5 id="5-添加客户端-openvpn-install-sh"><a href="#5-添加客户端-openvpn-install-sh" class="headerlink" title="5.添加客户端./openvpn-install.sh"></a>5.添加客户端<code>./openvpn-install.sh</code></h5><ol>
<li>Select an option[1-4]:1 (add a new user)</li>
<li>client name: client_worker</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑配置文件</span></span><br><span class="line">vim /etc/openvpn/server.conf</span><br><span class="line"><span class="comment">#重启生效</span></span><br><span class="line">systemctl restart openvpn@server.service</span><br><span class="line">systemctl <span class="built_in">enable</span> openvpn@server.service</span><br><span class="line"><span class="comment">#注释掉客户端的</span></span><br><span class="line"><span class="comment">#setenv opt block-outside-dns</span></span><br></pre></td></tr></table></figure>

<h5 id="6-下载ovpn文件，并修改配置，注释调-setenv-opt-block-outside-dns"><a href="#6-下载ovpn文件，并修改配置，注释调-setenv-opt-block-outside-dns" class="headerlink" title="6.下载ovpn文件，并修改配置，注释调#setenv opt block-outside-dns"></a>6.下载ovpn文件，并修改配置，注释调<code>#setenv opt block-outside-dns</code></h5><h5 id="7-常用命令"><a href="#7-常用命令" class="headerlink" title="7.常用命令"></a>7.常用命令</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#重启生效</span></span><br><span class="line">systemctl restart openvpn@server.service</span><br><span class="line"><span class="comment">#使能服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> openvpn@server.service</span><br><span class="line"><span class="comment">#ssh下载文件</span></span><br><span class="line">scp root@112.74.51.136:/root/client_xuan_ubuntu.ovpn ./</span><br></pre></td></tr></table></figure>

<h4 id="openvpn-client-安装与配置"><a href="#openvpn-client-安装与配置" class="headerlink" title="openvpn client 安装与配置"></a>openvpn client 安装与配置</h4><h5 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum update <span class="comment">#更新</span></span><br><span class="line">yum install vim  <span class="comment">#安装vim</span></span><br><span class="line">yum install epel-release  <span class="comment">#添加epel源</span></span><br><span class="line">yum clean all <span class="comment"># 可选</span></span><br><span class="line">yum update <span class="comment"># 可选</span></span><br><span class="line">yum makecache <span class="comment"># 可选</span></span><br><span class="line">yum install openvpn iptables-services <span class="comment">#安装openvpn</span></span><br><span class="line">scp root@112.74.51.136:~/client_vm.ovpn /etc/openvpn/client/ <span class="comment">#下载客户端配置</span></span><br><span class="line"><span class="comment">#注释掉客户端的vim /etc/openvpn/client/client_vm.ovpn</span></span><br><span class="line"><span class="comment">#setenv opt block-outside-dns</span></span><br><span class="line"><span class="comment">#-----------------------废弃------------------------------------------------</span></span><br><span class="line">openvpn --daemon --<span class="built_in">cd</span> /etc/openvpn/client --config client_vm.ovpn --log-append /etc/openvpn/openvpn.log <span class="comment">#启动</span></span><br><span class="line">tail -100f /etc/openvpn/openvpn.log  <span class="comment">#查看日志</span></span><br><span class="line">ps -ef | grep openvpn <span class="comment">#查看openvpn进程</span></span><br><span class="line"><span class="built_in">kill</span> &lt;pid&gt; <span class="comment">#杀死进程</span></span><br><span class="line"><span class="comment">#---------------------废弃结束------------------------------------------------------</span></span><br><span class="line"><span class="comment">#openvpn-client启动服务，反斜杠转义字符，实际名称是openvpn-client@.service</span></span><br><span class="line">vim /lib/systemd/system/openvpn-client\@.service</span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line">ExecStart=/usr/sbin/openvpn --suppress-timestamps --nobind --config %i.conf</span><br><span class="line"><span class="comment">#为</span></span><br><span class="line">ExecStart=/usr/sbin/openvpn --daemon --config %i.ovpn --log-append /etc/openvpn/openvpn.log</span><br><span class="line"><span class="comment">#防止已经启动，@符号后面等效与%i,所以这里为客户端配置的名字</span></span><br><span class="line">systemctl restart openvpn-client@client_vm</span><br><span class="line"><span class="comment">#开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> openvpn-client@client_vm</span><br></pre></td></tr></table></figure>

<h4 id="openvpn-服务端的局域网远程访问"><a href="#openvpn-服务端的局域网远程访问" class="headerlink" title="openvpn 服务端的局域网远程访问"></a>openvpn 服务端的局域网远程访问</h4><h4 id="准备工作，安装iptables"><a href="#准备工作，安装iptables" class="headerlink" title="准备工作，安装iptables"></a>准备工作，安装iptables</h4><p>It is possible to go back to a more classic iptables setup. First, stop and mask the firewalld service:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl mask firewalld</span><br></pre></td></tr></table></figure>

<p>Then, install the iptables-services package:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install iptables-services</span><br></pre></td></tr></table></figure>

<p>Enable the service at boot-time:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable iptables</span><br></pre></td></tr></table></figure>

<p>Managing the service</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl [stop|start|restart] iptables</span><br></pre></td></tr></table></figure>

<p>Saving your firewall rules can be done as follows:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service iptables save</span><br></pre></td></tr></table></figure>

<p>添加路由</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 10.14.208.0/24 -j SNAT --to-source  192.168.1.230</span><br><span class="line">service iptables save</span><br></pre></td></tr></table></figure>

<p><code>vim /etc/openvpn/server.conf </code> 添加</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">push</span> <span class="string">&quot;route 192.168.1.0 255.255.255.0&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="腾讯云openvpn服务器所在内网供openvpn客户端访问"><a href="#腾讯云openvpn服务器所在内网供openvpn客户端访问" class="headerlink" title="腾讯云openvpn服务器所在内网供openvpn客户端访问"></a>腾讯云openvpn服务器所在内网供openvpn客户端访问</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 10.34.0.0为openvpn网段</span></span><br><span class="line">sudo iptables -t nat -A POSTROUTING -s 10.34.0.0/24 -o eth0 -j MASQUERADE</span><br><span class="line"><span class="comment">#查看规则</span></span><br><span class="line">sudo iptables -nL -t nat</span><br><span class="line">Chain POSTROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line">MASQUERADE  all  --  0.0.0.0/0            0.0.0.0/0            ADDRTYPE match src-type LOCAL</span><br><span class="line">MASQUERADE  all  --  172.17.0.0/16        0.0.0.0/0           </span><br><span class="line">MASQUERADE  all  --  172.18.0.0/16        0.0.0.0/0           </span><br><span class="line">MASQUERADE  tcp  --  172.18.0.11          172.18.0.11          tcp dpt:3306</span><br><span class="line">MASQUERADE  all  --  10.34.0.0            0.0.0.0/0  </span><br><span class="line"><span class="comment">#这句是新加的</span></span><br><span class="line">MASQUERADE  all  --  10.34.0.0/24         0.0.0.0/0    </span><br><span class="line"><span class="comment">#还需要检查是否开启ipv4转发</span></span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line">&gt;net.ipv4.ip_forward = 1</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>



<h3 id="子网访问总结"><a href="#子网访问总结" class="headerlink" title="子网访问总结"></a>子网访问总结</h3><h4 id="服务端子网-服务端是网关"><a href="#服务端子网-服务端是网关" class="headerlink" title="服务端子网(服务端是网关)"></a>服务端子网(服务端是网关)</h4><h4 id="服务端子网-服务端不是网关"><a href="#服务端子网-服务端不是网关" class="headerlink" title="服务端子网(服务端不是网关)"></a>服务端子网(服务端不是网关)</h4><h4 id="客户端子网-客户端是网关"><a href="#客户端子网-客户端是网关" class="headerlink" title="客户端子网(客户端是网关)"></a>客户端子网(客户端是网关)</h4><h4 id="客户端子网-客户端不是网关"><a href="#客户端子网-客户端不是网关" class="headerlink" title="客户端子网(客户端不是网关)"></a>客户端子网(客户端不是网关)</h4><p>不是网关统一需要在客户端或服务端设置转发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 10.34.0.0为openvpn网段</span><br><span class="line">sudo iptables -t nat -A POSTROUTING -s 10.34.0.0&#x2F;24 -o eth0 -j MASQUERADE</span><br><span class="line">#还需要检查是否开启ipv4转发</span><br><span class="line">vim &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">&gt;net.ipv4.ip_forward &#x3D; 1</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>





<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>iptables不需要启动，也可以做路由转发</p>
<p><a href="https://shiguanghui.iteye.com/blog/2323327">openvpn tun模式下客户端与内网机器通信</a></p>
<p><a href="http://cakin24.iteye.com/blog/2339362">iptables规则的查看和清除</a></p>
<p><a href="http://blog.51yip.com/linux/1404.html">iptables 添加，删除，查看，修改</a></p>
<p><a href="https://stackoverflow.com/questions/24756240/how-can-i-use-iptables-on-centos-7">How can i use iptables on centos 7?</a></p>
<p><a href="https://www.cnblogs.com/huangweimin/articles/7638943.html">使用openvpn实现访问远程网络</a></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://openvpn.net/index.php/open-source/documentation/howto.html#examples">官网</a></p>
<p><a href="https://github.com/Nyr/openvpn-install">脚本github官网Nyr/openvpn-install</a></p>
<p><a href="https://groups.google.com/forum/#!topic/fqlt/GUn-QNO1ZpU">openvpn的一个一键安装脚本“openvpn-install”让openvpn重放光彩，又可用openvpn翻墙了</a></p>
<p><a href="http://gamblisfx.com/configure-openvpn-server-centos-7-3/"><a href="http://gamblisfx.com/configure-openvpn-server-centos-7-3/">How to Configure OpenVPN Server on CentOS 7.3</a></a></p>
<p><a href="https://www.lsproc.com/post/routing-multiple-networks-and-dockers-through-openvpn">使用 OpenVPN 互联多地机房及Dokcer跨主机/机房通讯</a></p>
<p><a href="http://www.softown.cn/post/151.html">扩大OpenVPN使用范围，包含服务器或客户端子网中的其他计算机</a></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>openVpn</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVpn配置详解</title>
    <url>/2017/11/22/network-openvpn-detailed/</url>
    <content><![CDATA[<h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p><code>route</code>或<code>route PRINT</code></p>
<table>
<thead>
<tr>
<th>Destination（ip/网段）</th>
<th>Gateway（网关）</th>
<th>Genmask（子网掩码）</th>
<th>Iface(网卡)</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.123.110</td>
<td>10.8.0.2</td>
<td>255.255.255.255（ip）</td>
<td>tun0</td>
</tr>
<tr>
<td>192.168.123.0</td>
<td>10.8.0.1</td>
<td>255.255.255.0(网段)</td>
<td>tun0</td>
</tr>
</tbody></table>
<h6 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h6><p>第一条：访问192.168.123.110将从tun0网卡的10.8.0.2的网关转发出去</p>
<p>第二条：访问192.168.(1~255)内所有的ip将从网卡tun0网卡的10.8.0.1的网关转发出去</p>
<h4 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#推送路由192.168.123.110（ip）到所有客户端</span></span><br><span class="line"><span class="attr">push</span> <span class="string">&quot;route 192.168.123.110 255.255.255.255&quot;</span></span><br><span class="line"><span class="comment">#推送路由192.168.123.0(网段)到所有客户端(除了在ccd客户端配置了这是他的路由的客户端)</span></span><br><span class="line"><span class="attr">push</span> <span class="string">&quot;route 192.168.123.0 255.255.255.0&quot;</span></span><br><span class="line"><span class="comment">#设置服务器的路由：访问192.110.10.1时从10.8.0.1（网关）访问，10.8.0.1不设置可以从route命令查看网关是</span></span><br><span class="line"><span class="attr">route</span> <span class="string">192.110.10.1 255.255.255.255 10.8.0.1</span></span><br></pre></td></tr></table></figure>







<p>####客户端配置</p>
<p>服务端需要添加配置<code>client-config-dir ccd</code>指定客户端配置目录为ccd</p>
<p>配置文件名为直接客户端的名字没有.conf和任何后缀</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定客户端ip为10.8.0.7</span></span><br><span class="line"><span class="meta">ifconfig-push</span> <span class="string">10.8.0.7 255.255.255.0</span></span><br><span class="line"><span class="comment">#标记这是我的子网，让我的子网也可以访问openvpn,另一个作用就是push路由时，不会推送该路由到该客户端</span></span><br><span class="line"><span class="attr">iroute</span> <span class="string">192.168.123.0 255.255.255.0</span></span><br><span class="line"><span class="attr">route</span> <span class="string">192.168.123.0 255.255.255.0</span></span><br></pre></td></tr></table></figure>





<p>我的设置如下</p>
<p>10.8.0.1 服务器</p>
<p>10.8.0.8 家</p>
<p>10.8.0.5 工作</p>
<p>server.conf</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">port</span> <span class="string">1194</span></span><br><span class="line"><span class="attr">proto</span> <span class="string">tcp</span></span><br><span class="line"><span class="attr">dev</span> <span class="string">tun</span></span><br><span class="line"><span class="attr">sndbuf</span> <span class="string">0</span></span><br><span class="line"><span class="attr">rcvbuf</span> <span class="string">0</span></span><br><span class="line"><span class="attr">ca</span> <span class="string">ca.crt</span></span><br><span class="line"><span class="attr">cert</span> <span class="string">server.crt</span></span><br><span class="line"><span class="attr">key</span> <span class="string">server.key</span></span><br><span class="line"><span class="attr">dh</span> <span class="string">dh.pem</span></span><br><span class="line"><span class="attr">auth</span> <span class="string">SHA512</span></span><br><span class="line"><span class="meta">tls-auth</span> <span class="string">ta.key 0</span></span><br><span class="line"><span class="attr">topology</span> <span class="string">subnet</span></span><br><span class="line"><span class="attr">server</span> <span class="string">10.8.0.0 255.255.255.0</span></span><br><span class="line"><span class="comment">#ifconfig-pool-persist ipp.txt</span></span><br><span class="line"><span class="comment">#push &quot;redirect-gateway def1 bypass-dhcp&quot;</span></span><br><span class="line"><span class="comment">#push &quot;dhcp-option DNS 100.100.2.138&quot;</span></span><br><span class="line"><span class="comment">#push &quot;dhcp-option DNS 100.100.2.136&quot;</span></span><br><span class="line"><span class="attr">push</span> <span class="string">&quot;route 10.8.0.0 255.255.255.0&quot;</span></span><br><span class="line"><span class="attr">push</span> <span class="string">&quot;route 192.168.123.0 255.255.255.0&quot;</span></span><br><span class="line"><span class="attr">route</span> <span class="string">192.168.123.0 255.255.255.0 10.8.0.8</span></span><br><span class="line"><span class="meta">client-config-dir</span> <span class="string">ccd</span></span><br><span class="line"><span class="attr">client-to-client</span></span><br><span class="line"><span class="attr">keepalive</span> <span class="string">10 120</span></span><br><span class="line"><span class="attr">cipher</span> <span class="string">AES-256-CBC</span></span><br><span class="line"><span class="attr">comp-lzo</span></span><br><span class="line"><span class="attr">user</span> <span class="string">nobody</span></span><br><span class="line"><span class="attr">group</span> <span class="string">nobody</span></span><br><span class="line"><span class="attr">persist-key</span></span><br><span class="line"><span class="attr">persist-tun</span></span><br><span class="line"><span class="attr">status</span> <span class="string">openvpn-status.log</span></span><br><span class="line"><span class="attr">verb</span> <span class="string">3</span></span><br><span class="line"><span class="meta">crl-verify</span> <span class="string">crl.pem</span></span><br></pre></td></tr></table></figure>

<p>client</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">ifconfig-push</span> <span class="string">10.8.0.8 255.255.255.0</span></span><br><span class="line"><span class="attr">iroute</span> <span class="string">192.168.123.0 255.255.255.0</span></span><br><span class="line"><span class="attr">route</span> <span class="string">192.168.123.0 255.255.255.0</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>OpenVpn</tag>
        <tag>路由</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV-java-install</title>
    <url>/2018/04/21/opencv-java-install/</url>
    <content><![CDATA[<h4 id="mac开发环境"><a href="#mac开发环境" class="headerlink" title="mac开发环境"></a><a href="https://opencv-java-tutorials.readthedocs.io/en/latest/01-installing-opencv-for-java.html#install-opencv-3-x-under-macos">mac开发环境</a></h4><ol>
<li><p>环境准备</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装开发基本组件（一般都安装了）可以跳过</span></span><br><span class="line">xcode-select --install</span><br><span class="line"><span class="comment"># 安装ant，这里是使用Homebrew进行安装，为了方便管理</span></span><br><span class="line">brew install ant</span><br><span class="line"><span class="comment"># 编辑配置文件(其实就vim编辑配置文件)</span></span><br><span class="line">brew edit opencv</span><br><span class="line">&gt;修改为 -DBUILD_opencv_java=ON</span><br><span class="line"><span class="comment"># 最后安装opencv，依赖于python2，可以提前建好，也可以通过依赖的方式自动安装</span></span><br><span class="line">brew install --build-from-source opencv</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装成功后jar包位于<code>/usr/local/Cellar/opencv/3.x.x/share/OpenCV/java/</code></p>
</li>
<li><p>idea设置vm启动参数<code>-Djava.library.path=/usr/local/Cellar/opencv/3.4.3/share/OpenCV/java/</code></p>
</li>
</ol>
<h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><ol>
<li><p><code>Permission denied @ dir_s_mkdir</code></p>
<p>解决：重建目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir /usr/<span class="built_in">local</span>/Frameworks</span><br><span class="line">sudo chown $(whoami):admin /usr/<span class="built_in">local</span>/Frameworks</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">brew link python</span><br></pre></td></tr></table></figure>








</li>
</ol>
<p>idea+springboot+opencv3.4.1+alpine</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>由于alpine apk add opencv 运行报错，等待opencv出正式版</p>
<p>等待升级中。。。。。。。</p>
<p>opencv_java341.dll</p>
<p><a href="http://www.voidcn.com/article/p-ksqbxwed-bnz.html"></a></p>
]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>OpenCV</tag>
        <tag>install</tag>
      </tags>
  </entry>
  <entry>
    <title>百度经验索引</title>
    <url>/2014/09/24/other-baidujingyan/</url>
    <content><![CDATA[<p><a href="https://jingyan.baidu.com/article/ed2a5d1f9fb57309f6be17c5.html">python cookie登陆百度</a><br><a href="https://jingyan.baidu.com/article/b7001fe1d36b3a0e7282ddc5.html">win10电源设置详解</a><br><a href="https://jingyan.baidu.com/article/cbcede0768484002f40b4dcc.html">win10 专注助手设置与使用</a><br><a href="https://jingyan.baidu.com/article/c275f6ba60af82e33d7567df.html">利用docker java镜像编译运行java代码</a><br><a href="https://jingyan.baidu.com/article/3052f5a13cd2bf97f21f8667.html">docker alpine构建镜像设置时区</a><br><a href="https://jingyan.baidu.com/article/c45ad29c74c0f7051653e24e.html">Nat模式端口映射实现局域网访问hyper-v虚拟机</a><br><a href="https://jingyan.baidu.com/article/da1091fb791e47027949d660.html">win10使用python进行网页请求快速入门</a><br><a href="https://jingyan.baidu.com/article/f71d6037dc44c01ab741d17d.html">win10开启自动清理磁盘空间</a><br><a href="https://jingyan.baidu.com/article/fc07f989b9bec112ffe51994.html">mac 批量自动操作工具的简单使用</a><br><a href="https://jingyan.baidu.com/article/19020a0a461ca3529d28423e.html">win10多种方式关闭开机自启动项</a><br><a href="https://jingyan.baidu.com/article/19192ad8d650c1e53e5707b7.html">docker集群搭建运行dubbo服务</a><br><a href="https://jingyan.baidu.com/article/20b68a88f29bbf796cec6287.html">pp助手获取苹果应用程序内文件</a><br><a href="https://jingyan.baidu.com/article/b87fe19e51295e521835680f.html">java 读取sqllit数据库db文件</a><br><a href="https://jingyan.baidu.com/article/75ab0bcb8938e2d6864db20b.html">mac stm32 debug模式</a><br><a href="https://jingyan.baidu.com/article/c910274ba01ca5cd361d2d07.html">mac下stm32CubeMX+CLion+openocd开发环境</a><br><a href="https://jingyan.baidu.com/article/6181c3e0ca83af152ff1537d.html">微信广州出入境业务办理预约</a><br><a href="https://jingyan.baidu.com/article/8cdccae93dfbe4315413cd02.html">mac 批量压缩图片</a><br><a href="https://jingyan.baidu.com/article/46650658ed0b88f548e5f845.html">免费的剪贴板工具Ditto安装与使用</a><br><a href="https://jingyan.baidu.com/article/5d6edee2cbcc2999ebdeec44.html">maven使用mybatis generator自动生成代码</a><br><a href="https://jingyan.baidu.com/article/495ba841b207e638b20ede78.html">win10 禁用卸载Oracle服务</a><br><a href="https://jingyan.baidu.com/article/86112f13b2a9ee273797871a.html">datagrip安装与简单使用</a><br><a href="https://jingyan.baidu.com/article/f0e83a2571391922e491016a.html">如何打开sqlit数据库文件</a><br><a href="https://jingyan.baidu.com/article/414eccf6b4976b6b421f0a65.html">hyper-v centos设置DNS</a><br><a href="https://jingyan.baidu.com/article/454316ab37fdd2f7a7c03a34.html">chrome 浏览器书签设置技巧</a><br><a href="https://jingyan.baidu.com/article/95c9d20d7722ebec4e7561cc.html">CLion安装配置OpenOCD插件</a><br><a href="https://jingyan.baidu.com/article/84b4f565ad635060f6da32cb.html">mac系统下编译stm32并通过t-link下载</a><br><a href="https://jingyan.baidu.com/article/f0e83a2571981922e59101cb.html">STM32CubeMX使用之初始化项目</a><br><a href="https://jingyan.baidu.com/article/3ea5148981ba1752e61bbad8.html">mac 查看usb设备</a><br><a href="https://jingyan.baidu.com/article/09ea3ede4ded20c0aede390b.html">postman 生成在线rest api 文档</a><br><a href="https://jingyan.baidu.com/article/a3f121e49c9a91fc9052bb05.html">docker service启动顺序控制</a><br><a href="https://jingyan.baidu.com/article/20095761f9d492cb0721b4d0.html">免费下载安装xshell6或xftp6官方正版</a><br><a href="https://jingyan.baidu.com/article/4e5b3e19f7873d91901e24e2.html">mac 安装SEGGE JLink</a><br><a href="https://jingyan.baidu.com/article/6c67b1d64cd97e2787bb1eb1.html">mac系统安装STM32CubeMX</a><br><a href="https://jingyan.baidu.com/article/48b37f8dcbe24e1a6464881b.html">mac系统下np++替代工具sublime Text安装</a><br><a href="https://jingyan.baidu.com/article/e8cdb32b01c32437052bad8f.html">mac下stm32编译环境之安装CLion IDE开发工具</a><br><a href="https://jingyan.baidu.com/article/7f41ecec560aed593d095c16.html">七牛qshell命令行图床管理工具授权认证下篇</a><br><a href="https://jingyan.baidu.com/article/20095761fa2993cb0621b455.html">七牛qshell命令行图床管理工具安装上篇</a><br><a href="https://jingyan.baidu.com/article/1709ad804a775f4635c4f051.html">vscode拉取vue git项目并运行</a><br><a href="https://jingyan.baidu.com/article/4dc4084862111ec8d946f183.html">idea connot run program svn系统找不到文件</a><br><a href="https://jingyan.baidu.com/article/63f236287028c20208ab3daa.html">尼康相机nef照片格式批量转换jpeg格式</a><br><a href="https://jingyan.baidu.com/article/1612d50098a646e20e1eee9b.html">使用wps免费打开office文档</a><br><a href="https://jingyan.baidu.com/article/59703552bec14f8fc107407a.html">解决teamviewer免费个人版误检测为商业版</a><br><a href="https://jingyan.baidu.com/article/3065b3b6491a79becef8a479.html">b站网页或手机版设置倍速播放</a><br><a href="https://jingyan.baidu.com/article/6181c3e0cbefae152ef15391.html">jenkins pipeline 添加环境变量选择设置</a><br><a href="https://jingyan.baidu.com/article/455a99506b6f6da1662778ed.html">Jenkins pipeline配置使用gradle工具</a><br><a href="https://jingyan.baidu.com/article/e4511cf36af92b2b845eafe7.html">jenkinsci/blueocean 解决docker sock无法连接</a><br><a href="https://jingyan.baidu.com/article/72ee561a029f84e16038df70.html">jenkins安装使用蓝色主题</a><br><a href="https://jingyan.baidu.com/article/11c17a2cd1d1ccf447e39d5b.html">jenkins pipeline入门之helloworld</a><br><a href="https://jingyan.baidu.com/article/b24f6c8269d97a86bee5da63.html">mobile atlas creator制作安卓osmdroid离线地图</a><br><a href="https://jingyan.baidu.com/article/3d69c551230a56f0ce02d763.html">java Realm数据库入门使用之android</a><br><a href="https://jingyan.baidu.com/article/5d6edee2c9332b99eadeec3f.html">支付宝解除苹果自动扣款</a><br><a href="https://jingyan.baidu.com/article/48b37f8dc9d64c1a6464882f.html">jenkins 配置使用docker插件</a><br><a href="https://jingyan.baidu.com/article/c85b7a64a48c7e003bac952f.html">jenkins使用docker插件构建springboot镜像</a><br><a href="https://jingyan.baidu.com/article/59703552be3d4f8fc0074006.html">jenkins 添加安装docker 插件</a><br><a href="https://jingyan.baidu.com/article/59703552be394f8fc0074002.html">jenkins通过gradle构建项目</a><br><a href="https://jingyan.baidu.com/article/bad08e1ed8052d09c8512102.html">docker jenkins 使用ssh证书连接git仓库</a><br><a href="https://jingyan.baidu.com/article/636f38bb9e362ad6b8461002.html">docker jenkins 生成配置ssh证书</a><br><a href="https://jingyan.baidu.com/article/60ccbceba517e164cab1971f.html">jenkins 安装使用gradle插件</a><br><a href="https://jingyan.baidu.com/article/0a52e3f4e377a7bf62ed7291.html">微服务之docker搭建jenkins持续集成工具</a><br><a href="https://jingyan.baidu.com/article/a501d80c486d76ec630f5efe.html">微服务之docker搭建gitlab代码仓库</a><br><a href="https://jingyan.baidu.com/article/a3a3f811238fe58da2eb8aef.html">spring shiro 1.4 快速入门使用</a><br><a href="https://jingyan.baidu.com/article/b24f6c826a547b86bfe5daee.html">idea通过git导入java项目</a><br><a href="https://jingyan.baidu.com/article/8ebacdf06069fc49f65cd5fd.html">SpringCould之Gradle多项目管理</a><br><a href="https://jingyan.baidu.com/article/7f766daffc66324101e1d0ee.html">SpringCould之Gradle多项目管理优化配置</a><br><a href="https://jingyan.baidu.com/article/148a1921f906024d70c3b142.html">springboot运行dubbo优化启动器</a><br><a href="https://jingyan.baidu.com/article/4e5b3e1909a23f91901e24c6.html">dubbo 多种配置方式</a><br><a href="https://jingyan.baidu.com/article/5552ef4797a15f518ffbc99b.html">gradle实战之启动dubbo application</a><br><a href="https://jingyan.baidu.com/article/e52e36151da02040c60c51c2.html">springboot dubbo 引入zookeeper注册中心</a><br><a href="https://jingyan.baidu.com/article/29697b915c538cab20de3cc2.html">brew安装gradle并设置路径到idea</a><br><a href="https://jingyan.baidu.com/article/90895e0f3bc8d764ec6b0bd0.html">mac idea Java_home is different问题解决</a><br><a href="https://jingyan.baidu.com/article/fc07f989b570cd12ffe519de.html">gradle实战之搭建springboot dubbo项目框架下篇</a><br><a href="https://jingyan.baidu.com/article/359911f597a9ba57fe0306de.html">gradle实战之搭建springboot dubbo项目框架上篇</a><br><a href="https://jingyan.baidu.com/article/fec7a1e5be0be21190b4e7da.html">Gradle入门之构建初始化java应用工程</a><br><a href="https://jingyan.baidu.com/article/b24f6c826a127b86bfe5da2c.html">Gradle入门之构建java工程下篇</a><br><a href="https://jingyan.baidu.com/article/00a07f380b34f682d028dc2c.html">Gradle入门之构建java工程上篇</a><br><a href="https://jingyan.baidu.com/article/90895e0f3bd0d764ec6b0b38.html">Gradle入门之多项目构建总结优化文档续篇完结</a><br><a href="https://jingyan.baidu.com/article/ca00d56c2b5357e99febcf40.html">Gradle入门之多项目构建总结优化文档续篇2</a><br><a href="https://jingyan.baidu.com/article/066074d61383f2c3c31cb040.html">Gradle入门之多项目构建下篇总结优化文档</a><br><a href="https://jingyan.baidu.com/article/bea41d43d83514b4c51be636.html">Gradle入门之多项目构建中篇java消费项目</a><br><a href="https://jingyan.baidu.com/article/48b558e3fae8657f39c09a5e.html">Gradle入门之多项目构建上篇library子项目</a><br><a href="https://jingyan.baidu.com/article/a3761b2bef1a9b1576f9aa36.html">Gradle入门之构建gradle项目及基本使用下篇</a><br><a href="https://jingyan.baidu.com/article/ab69b27065a4e02ca7189f36.html">Gradle入门之构建gradle项目及基本使用上篇</a><br><a href="https://jingyan.baidu.com/article/63acb44a1f898161fcc17eaa.html">Gradle入门之win10安装Gradle</a><br><a href="https://jingyan.baidu.com/article/9c69d48fe637ce13c9024e21.html">Gradle入门之build scans介绍与使用</a><br><a href="https://jingyan.baidu.com/article/cdddd41cbc1e9353cb00e10d.html">RecyclerView入门使用</a><br><a href="https://jingyan.baidu.com/article/6dad507529dfc8a123e36ea2.html">springboot集成dubbo框架之helloworld</a><br><a href="https://jingyan.baidu.com/article/1612d5009bfb43e20f1eee46.html">idea gradle分析springboot-dubbo包的依赖关系</a><br><a href="https://jingyan.baidu.com/article/bad08e1edea82b09c85121ad.html">win10 台式机解决声卡无声音问题</a><br><a href="https://jingyan.baidu.com/article/fec7a1e5bd32e51190b4e7e3.html">dubbo搭建之新建工作空间</a><br><a href="https://jingyan.baidu.com/article/cd4c2979299dcd756e6e60e2.html">SpringCould之zipkin+sleuth+rabbitMQ服务追踪</a><br><a href="https://jingyan.baidu.com/article/0964eca25bb5678285f536b8.html">SpringCould之zipkin+sleuth服务追踪</a><br><a href="https://jingyan.baidu.com/article/d5a880ebc55ed713f147cce1.html">docker swarm 安装openzipkin</a><br><a href="https://jingyan.baidu.com/article/456c463b39c8970a5831449c.html">Android studio解决乱码</a><br><a href="https://jingyan.baidu.com/article/642c9d342cee10644a46f7fa.html">解决ftp工具类retrieveFileStream返回为null</a><br><a href="https://jingyan.baidu.com/article/86112f13b522e52737978795.html">tomcat 部署运行war包</a><br><a href="https://jingyan.baidu.com/article/6d704a135a25bf28db51caf4.html">mac iTerm2通过brew安装优化以及配置主题</a><br><a href="https://jingyan.baidu.com/article/14bd256e9152a5bb6d2612ee.html">idea连接自定义jreble服务进行注册</a><br><a href="https://jingyan.baidu.com/article/e4d08ffd79b4c30fd2f60dee.html">docker swarm部署搭建jreble注册服务</a><br><a href="https://jingyan.baidu.com/article/e52e36151af02740c60c5112.html">docker swarm 一键部署dubbo依赖环境</a><br><a href="https://jingyan.baidu.com/article/fcb5aff777b3e1edaa4a711d.html">docker swarm部署安装tomcat</a><br><a href="https://jingyan.baidu.com/article/3aed632ede482f70108091f2.html">docker swarm 安装部署portainer</a><br><a href="https://jingyan.baidu.com/article/4b52d702de077ffc5c774b1d.html">mac 安装删除字体</a><br><a href="https://jingyan.baidu.com/article/eae0782757f7701fec5485f2.html">docker swarm 集群部署nginx</a><br><a href="https://jingyan.baidu.com/article/219f4bf7bacc2dde442d381d.html">mac iterm2安装powerlevel9k主题并解决乱码</a><br><a href="https://jingyan.baidu.com/article/fea4511a20798af7bb9125f1.html">mac iterm2 添加修改配色主题</a><br><a href="https://jingyan.baidu.com/article/2a138328ec8f43074a134f11.html">mac iterm2 安装使用on my zsh</a><br><a href="https://jingyan.baidu.com/article/bea41d43d91813b4c51be61b.html">docker swarm集群安装redis</a><br><a href="https://jingyan.baidu.com/article/7f766daffd13354101e1d01b.html">mac iterm2 使用ssh</a><br><a href="https://jingyan.baidu.com/article/7082dc1c3ab9bce40a89bd1b.html">docker swarm部署mysql</a><br><a href="https://jingyan.baidu.com/article/359911f596edbd57fe03061a.html">钉钉查看日报周报等记录</a><br><a href="https://jingyan.baidu.com/article/e3c78d649bbc223c4d85f56c.html">portainer 使用git仓库读取配置进行部署服务</a><br><a href="https://jingyan.baidu.com/article/456c463b3aba960a5931446a.html">win10桌面添加便签</a><br><a href="https://jingyan.baidu.com/article/15622f242c1eb4fdfcbea5ba.html">Cordova之安卓签名打包以及常用配置</a><br><a href="https://jingyan.baidu.com/article/c1a3101e656b68de646deb64.html">hexo博客 coding 关闭Pages跳转页</a><br><a href="https://jingyan.baidu.com/article/4f34706e0248a1e386b56d7a.html">Cordova之HTML远程调用相机demo</a><br><a href="https://jingyan.baidu.com/article/5bbb5a1bdaefb313eaa17950.html">hexo博客总结优化</a><br><a href="https://jingyan.baidu.com/article/25648fc17898679191fd00ac.html">Cordova 之Android调用相机demo</a><br><a href="https://jingyan.baidu.com/article/f0e83a25740b1c22e491015c.html">android通过webview封装H5</a><br><a href="https://jingyan.baidu.com/article/72ee561a018b83e16038df5c.html">Cordova 搭建android环境</a><br><a href="https://jingyan.baidu.com/article/8ebacdf07eb4fa49f65cd5a8.html">hexo 基于leanCloud添加评论系统valine</a><br><a href="https://jingyan.baidu.com/article/bea41d43a6cd12b4c41be64e.html">基于TravisCI实现github和coding同步部署Hexo六</a><br><a href="https://jingyan.baidu.com/article/b87fe19e57eb54521935684d.html">基于TravisCI实现github和coding同步部署Hexo五</a><br><a href="https://jingyan.baidu.com/article/f79b7cb3309be79144023ea4.html">github pages 自定义域名开启 https</a><br><a href="https://jingyan.baidu.com/article/fa4125ac09f62828ad70924a.html">github pages 域名警告 site dns</a><br><a href="https://jingyan.baidu.com/article/0f5fb0992687e76d8334eacb.html">SpringCould之could bus动态更新配置文件</a><br><a href="https://jingyan.baidu.com/article/46650658ea808df549e5f8ca.html">win10开启局域网防火墙过滤规则</a><br><a href="https://jingyan.baidu.com/article/0202781151ec471bcc9ce5ca.html">win10 idea搭建opencv Java 环境</a><br><a href="https://jingyan.baidu.com/article/cbcede0763a34b02f40b4da1.html">docker 中alpine linux使用</a><br><a href="https://jingyan.baidu.com/article/455a99506fd269a167277852.html">docker安装oracle并导入数据库</a><br><a href="https://jingyan.baidu.com/article/925f8cb8ae1ee2c0dde05632.html">hyper-v设置NAT模式网络并设置静态ip</a><br><a href="https://jingyan.baidu.com/article/19020a0a7c10a9529d284232.html">SpringCould之config client连接配置中心</a><br><a href="https://jingyan.baidu.com/article/154b46310e6a1f28ca8f4129.html">SpringCould搭建config server配置中心</a><br><a href="https://jingyan.baidu.com/article/6525d4b18933b9ac7d2e9425.html">SpringCould 路由网关(Zuul)</a><br><a href="https://jingyan.baidu.com/article/ce4366494560fc3773afd32e.html">SpringCould之feign使用熔断器</a><br><a href="https://jingyan.baidu.com/article/3d69c55120ed51f0cf02d708.html">mac 录制音频</a><br><a href="https://jingyan.baidu.com/article/36d6ed1f88ab541bce488311.html">mac 安装使用folx</a><br><a href="https://jingyan.baidu.com/article/cbcede0763014b02f40b4d03.html">intellij IDEA不显示git版本控制以及vcs的配置</a><br><a href="https://jingyan.baidu.com/article/455a99506efa6aa16727787a.html">SpringCould之feign服务消费者</a><br><a href="https://jingyan.baidu.com/article/e52e3615186c2540c60c518e.html">SpringCould之ribbon+rest使用熔断器hystrix</a><br><a href="https://jingyan.baidu.com/article/adc81513a91130f722bf7376.html">SpringCould之ribbon+rest服务提供者与消费者</a><br><a href="https://jingyan.baidu.com/article/a378c960e13fe3b329283076.html">jetbrains idea 创建工作空间(空项目) 项目组</a><br><a href="https://jingyan.baidu.com/article/a378c960e1b6e3b3282830fd.html">SpringCould之创建Eureka服务注册中心</a><br><a href="https://jingyan.baidu.com/article/e75057f20fdb23ebc91a89c8.html">springboot 集成RabbitMQ</a><br><a href="https://jingyan.baidu.com/article/9f7e7ec0eebc656f281554cd.html">spring boot连接配置使用redis</a><br><a href="https://jingyan.baidu.com/article/636f38bb9a1e2ed6b846102a.html">idea redis Iedis plugin 插件的安装与使用</a><br><a href="https://jingyan.baidu.com/article/20095761e7ac94cb0721b4d8.html">docker swarm安装redis并设置密码</a><br><a href="https://jingyan.baidu.com/article/09ea3ede4a4127c0aede39a7.html">chrome 删除cookie缓存清除登陆信息</a><br><a href="https://jingyan.baidu.com/article/363872ec07c0ee6e4ba16fa6.html">mac 快速关闭显示器</a><br><a href="https://jingyan.baidu.com/article/7f41ecec5fbaea593d095ca6.html">mac 仪表盘关闭与开启以及使用</a><br><a href="https://jingyan.baidu.com/article/9faa7231f9b371473c28cbb2.html">mac 标记的使用</a><br><a href="https://jingyan.baidu.com/article/3052f5a1070cb697f31f863d.html">docker swarm 构建运行 springboot</a><br><a href="https://jingyan.baidu.com/article/0f5fb099246ae56d8334eaa6.html">Navicat Premium之mysql添加自动更新时间戳</a><br><a href="https://jingyan.baidu.com/article/b24f6c826efb7f86bee5da45.html">springboot修改图片访问url路径</a><br><a href="https://jingyan.baidu.com/article/f25ef254b3a94f482c1b82a4.html">postman 快速分享接口</a><br><a href="https://jingyan.baidu.com/article/4ae03de3ca29393eff9e6b8d.html">idea springboot 远程调试模式之本地</a><br><a href="https://jingyan.baidu.com/article/6181c3e0d1f3a8152ef1538d.html">idea基于springboot远程调试之docker环境</a><br><a href="https://jingyan.baidu.com/article/215817f7be5b101edb14235b.html">springboot持续构建之idea构建docker镜像并运行</a><br><a href="https://jingyan.baidu.com/article/e4511cf360fe2d2b845eafe4.html">springboot持续构建之intellij IDEA连接docker</a><br><a href="https://jingyan.baidu.com/article/642c9d3433fd13644a46f7ed.html">springboot使用thymeleaf模版之hello world</a><br><a href="https://jingyan.baidu.com/article/c35dbcb0a3ce8a8916fcbc3c.html">springboot 批量上传图片并访问</a><br><a href="https://jingyan.baidu.com/article/4dc4084864a918c8d946f13b.html">android studio apk 签名打包</a><br><a href="https://jingyan.baidu.com/article/7082dc1c3999bfe40a89bd3b.html">springboot实现简单的登陆注册接口</a><br><a href="https://jingyan.baidu.com/article/e6c8503c490e7fe54f1a180d.html">mac idea美化以及基本设置和恢复默认设置</a><br><a href="https://jingyan.baidu.com/article/49ad8bce9900985834d8fa36.html">spring boot整合mysql和mybatis</a><br><a href="https://jingyan.baidu.com/article/19020a0a7e14ab529d284236.html">idea springboot安装使用lombok日志插件</a><br><a href="https://jingyan.baidu.com/article/fea4511a233889f7bb912532.html">idea 安装android开发环境sdk</a><br><a href="https://jingyan.baidu.com/article/870c6fc3581422b03fe4be1a.html">Mac VMware fusion 安装centos</a><br><a href="https://jingyan.baidu.com/article/a3f121e4979c96fc9052bb07.html">win10设置每日定时关机等计划任务</a><br><a href="https://jingyan.baidu.com/article/2f9b480dea0d4b41cb6cc206.html">mac 下载安装vmware fusion 10</a><br><a href="https://jingyan.baidu.com/article/cbcede0761144902f40b4d18.html">Gmail邮箱标记所有未读邮件为已读</a><br><a href="https://jingyan.baidu.com/article/7c6fb428d4749080642c9016.html">如何识别花的名字</a><br><a href="https://jingyan.baidu.com/article/358570f694ec15ce4724fc12.html">mac安装steam</a><br><a href="https://jingyan.baidu.com/article/a3a3f81127f8e18da2eb8a1c.html">mac安装postman</a><br><a href="https://jingyan.baidu.com/article/afd8f4deb52afc34e286e9d9.html">微信在线查询社保</a><br><a href="https://jingyan.baidu.com/article/6b97984debf6bd1ca2b0bf27.html">mac 访达侧边栏隐藏icould等，以及多桌面的使用</a><br><a href="https://jingyan.baidu.com/article/fec4bce2882136f2618d8b22.html">docker portainer添加私有仓库regstry</a><br><a href="https://jingyan.baidu.com/article/2d5afd693e068085a2e28e3f.html">mac 安装配置git</a><br><a href="https://jingyan.baidu.com/article/86f4a73eafb76637d652693a.html">mac 远程ssh连接</a><br><a href="https://jingyan.baidu.com/article/915fc414a2a8b651394b20b2.html">mac Touch Bar自定触控栏 以及添加多指纹</a><br><a href="https://jingyan.baidu.com/article/14bd256e9a6d58bb6d2612d5.html">centos7虚拟机Hyper-v添加硬盘</a><br><a href="https://jingyan.baidu.com/article/a378c960ec981cb3282830d3.html">win10 隐藏磁盘驱动器</a><br><a href="https://jingyan.baidu.com/article/da1091fb67b1b1027849d6d3.html">基于Gluster分布式实现docker存储卷volume共享</a><br><a href="https://jingyan.baidu.com/article/7908e85cc6080daf481ad2d1.html">centos7 安装 搭建 GlusterFS分布式文件系统</a><br><a href="https://jingyan.baidu.com/article/d8072ac4b37136ec95cefd99.html">sony xp 设置电信4G上网</a><br><a href="https://jingyan.baidu.com/article/29697b915a5376ab20de3cc2.html">centos7 修改主机名</a><br><a href="https://jingyan.baidu.com/article/f25ef254bd55b1482c1b82c0.html">winrar 批量 单独 压缩</a><br><a href="https://jingyan.baidu.com/article/b2c186c802394ac46ef6ff91.html">mac delete键在哪，如何自定义</a><br><a href="https://jingyan.baidu.com/article/9989c746e8bb10f648ecfe91.html">mac 在当前目录打开终端</a><br><a href="https://jingyan.baidu.com/article/9faa7231fb628f473c28cbe3.html">mac 安装使用Tunnelblick - OpenVPN client</a><br><a href="https://jingyan.baidu.com/article/48a42057187d8fa924250490.html">mac 安装与简单使用typora</a><br><a href="https://jingyan.baidu.com/article/acf728fd7bc7b1f8e510a3eb.html">mac 隐藏运行的程序在程序坞dock上</a><br><a href="https://jingyan.baidu.com/article/e75aca850f404c142edac6fd.html">npm安装图文教程</a><br><a href="https://jingyan.baidu.com/article/ea24bc39ce0b88da62b331fc.html">手动安装chrome的SwitchyOmega</a><br><a href="https://jingyan.baidu.com/article/20b68a88847549796cec62e9.html">mac 触摸板常用手势与操作</a><br><a href="https://jingyan.baidu.com/article/a501d80c42758cec630f5ee6.html">mac快速打开终端，多个终端和多个标签页</a><br><a href="https://jingyan.baidu.com/article/c843ea0bcc892277931e4ae6.html">mac 常用快捷键以及delete键</a><br><a href="https://jingyan.baidu.com/article/597a0643336e26312b5243f5.html">MAC安装idea和jdk</a><br><a href="https://jingyan.baidu.com/article/a501d80c43ec8fec620f5e7d.html">mac 快速入门与基本使用</a><br><a href="https://jingyan.baidu.com/article/e4d08ffd7f263d0fd3f60d60.html">利用docker和oss 搭集安装owncloud网盘</a><br><a href="https://jingyan.baidu.com/article/c275f6ba1cd876e33d75672a.html">Linux安装ossfs挂载oss文件系统</a><br><a href="https://jingyan.baidu.com/article/c275f6ba1c3a76e33c75674c.html">自动初始化gitment评论</a><br><a href="https://jingyan.baidu.com/article/363872ec0248136e4ba16f2e.html">手机支付宝拍证件照</a><br><a href="https://jingyan.baidu.com/article/48b558e3035d9a7f38c09aeb.html">typora画流程图、时序图(顺序图)、甘特图</a><br><a href="https://jingyan.baidu.com/article/d621e8da7f4c542864913f10.html">hexo seo优化Google添加站点地图</a><br><a href="https://jingyan.baidu.com/article/03b2f78c23d1f85ea337ae6c.html">QQ多账号管理快速切换</a><br><a href="https://jingyan.baidu.com/article/3a2f7c2eddc81126afd611e5.html">don&#39;t starve饥荒开启船难DLC模式</a><br><a href="https://jingyan.baidu.com/article/3065b3b6bea280becff8a4f1.html">打造个人开发办公环境</a><br><a href="https://jingyan.baidu.com/article/6f2f55a173bdfbb5b93e6ccf.html">win10 设置透明任务栏之TranslucentTB</a><br><a href="https://jingyan.baidu.com/article/e2284b2b9052dee2e7118d49.html">安卓手机wifi更改设置，设置静态ip等</a><br><a href="https://jingyan.baidu.com/article/7908e85cc4e50faf491ad244.html">win10应急开启虚拟桌面键盘</a><br><a href="https://jingyan.baidu.com/article/3c343ff7dd44b00d3679635d.html">win10隐藏右下角的状态图标</a><br><a href="https://jingyan.baidu.com/article/48b558e303719a7f38c09ac7.html">win10自定义桌面图标显示、隐藏、美化</a><br><a href="https://jingyan.baidu.com/article/363872ec03b9126e4aa16f5d.html">IDM下载jdk失败后继续下载，其他同理</a><br><a href="https://jingyan.baidu.com/article/cd4c2979202032756f6e605d.html">win10自定义时间段设置夜间护眼模式</a><br><a href="https://jingyan.baidu.com/article/0aa22375693be888cd0d645d.html">win10清理磁盘空间和清理旧的系统文件</a><br><a href="https://jingyan.baidu.com/article/5bbb5a1be49b4d13eaa1795c.html">win10文件管理器关闭快速访问默认打开此电脑</a><br><a href="https://jingyan.baidu.com/article/db55b609c59a454ba20a2f5c.html">chrome谷歌浏览器设置网页flash播放</a><br><a href="https://jingyan.baidu.com/article/95c9d20d7cb110ec4f756159.html">win10设置默认浏览器并固定到任务栏</a><br><a href="https://jingyan.baidu.com/article/9f7e7ec0e5b0986f281554c1.html">hexo博客一键发布自动修改更新时间</a><br><a href="https://jingyan.baidu.com/article/fa4125ac07e8d628ad709258.html">hexo博客自动更新文章的更新修改时间</a><br><a href="https://jingyan.baidu.com/article/d8072ac4b1bd34ec95cefddd.html">hexo博客添加自定义文档模板</a><br><a href="https://jingyan.baidu.com/article/ae97a646076dfbbbfd461ddc.html">github hexo博客批量添加更新时间</a><br><a href="https://jingyan.baidu.com/article/49711c619c8926fa441b7cd9.html">双系统之在windows上运行llinux非虚拟机</a><br><a href="https://jingyan.baidu.com/article/dca1fa6f125652f1a44052d4.html">编写脚本获取文件的创建和修改时间写入指定字段</a><br><a href="https://jingyan.baidu.com/article/3ea51489b4ceec52e61bba24.html">网站收录之百度站点管理CNAME域名验证</a><br><a href="https://jingyan.baidu.com/article/a3761b2bf716631576f9aa3a.html">github博客hexo-next主题配置百度站点收录管理</a><br><a href="https://jingyan.baidu.com/article/a3761b2bf70e631576f9aa22.html">docker 搭建oss registry 远程仓库</a><br><a href="https://jingyan.baidu.com/article/f96699bbfc649b894e3c1b33.html">docker快速搭建本地仓库registry</a><br><a href="https://jingyan.baidu.com/article/0964eca2420e988285f5360d.html">阿里云oss的快速应用</a><br><a href="https://jingyan.baidu.com/article/ce09321b8e60292bff858f1b.html">docker gitlab-ci gradle流程化编译测试</a><br><a href="https://jingyan.baidu.com/article/f79b7cb3363d199144023e06.html">Dockerfile之gitlab-runner安装java和gradle</a><br><a href="https://jingyan.baidu.com/article/02027811583fbe1bcc9ce59d.html">Dockerfile之gitlab-runner编译</a><br><a href="https://jingyan.baidu.com/article/bea41d43a1d0ebb4c41be653.html">dockerfile入门之hello world</a><br><a href="https://jingyan.baidu.com/article/af9f5a2d704e6343140a45e6.html">docker通过commit制作带Gradle和java环境的镜像</a><br><a href="https://jingyan.baidu.com/article/636f38bb9049d4d6b84610e1.html">dialog无法编辑与显示KindEditor解决方法</a><br><a href="https://jingyan.baidu.com/article/215817f7b1faeb1eda1423fc.html">gitlab shared runner 环境搭建与简单应用</a><br><a href="https://jingyan.baidu.com/article/c843ea0bcf8a2777931e4ae7.html">docker daemon -H远程连接详解</a><br><a href="https://jingyan.baidu.com/article/c74d6000b2bf180f6a595dc4.html">Docker管理工具之portainer配置多节点endpoints</a><br><a href="https://jingyan.baidu.com/article/20b68a88875f4c796cec62c3.html">docker jenkins自动构建之github webhooks使用</a><br><a href="https://jingyan.baidu.com/article/48a4205717028aa924250413.html">docker jenkins自动部署之tomcat安装</a><br><a href="https://jingyan.baidu.com/article/e73e26c0926e4a24adb6a7df.html">docker jenkins自动部署之publish over ssh安装</a><br><a href="https://jingyan.baidu.com/article/597a06433ff422312a52436f.html">jenkins安装使用maven实现自动打包</a><br><a href="https://jingyan.baidu.com/article/49711c619e3b20fa451b7c6b.html">docker portainer安装jenkins</a><br><a href="https://jingyan.baidu.com/article/49711c619e3420fa451b7c66.html">excel表格转换markdown指github</a><br><a href="https://jingyan.baidu.com/article/0aa223756b4bee88cc0d64ad.html">win10 卸载自带软件media player</a><br><a href="https://jingyan.baidu.com/article/915fc414a6aeb251394b20b8.html">docker 注册gitLabRunner</a><br><a href="https://jingyan.baidu.com/article/c1a3101e7d3a90de656debb5.html">docker 安装gitLabRunner</a><br><a href="https://jingyan.baidu.com/article/455a995057a191a1662778a3.html">win10使用自带的openssh</a><br><a href="https://jingyan.baidu.com/article/c275f6ba1f4071e33d7567b2.html">docker portainer自定义挂载卷与使用</a><br><a href="https://jingyan.baidu.com/article/e5c39bf5f0f9d839d760338d.html">docker portainer 安装nginx</a><br><a href="https://jingyan.baidu.com/article/380abd0a3f574c1d90192c8b.html">docker swarm集群安装搭建portainer UI管理</a><br><a href="https://jingyan.baidu.com/article/17bd8e52408fae85ab2bb886.html">idea 热部署之JRebel 免费永久激活</a><br><a href="https://jingyan.baidu.com/article/597a06433f2522312b524320.html">ScreenToGif高级玩法gif动图上动态绘制图案</a><br><a href="https://jingyan.baidu.com/article/bad08e1ed72ad209c851212f.html">centos7 添加开机启动任务脚本</a><br><a href="https://jingyan.baidu.com/article/656db918ca023fe380249c68.html">IDEA git新建分支tag标签</a><br><a href="https://jingyan.baidu.com/article/f96699bbfe6e9d894e3c1b39.html">ScreenToGif快速制作动图以及QQ直接复制发送</a><br><a href="https://jingyan.baidu.com/article/3c343ff7d854b50d3679634d.html">ComboBox自定义多选下拉加模糊搜索的功能</a><br><a href="https://jingyan.baidu.com/article/922554467bdb35851748f479.html">easyui dialog中使用select2控件</a><br><a href="https://jingyan.baidu.com/article/3c343ff7d860b50d36796379.html">postman设置全局变量</a><br><a href="https://jingyan.baidu.com/article/20b68a8881d94e796dec6245.html">LastPass 找回历史生成的密码</a><br><a href="https://jingyan.baidu.com/article/4853e1e5468b591909f72682.html">Adobe Flashplayer 纯净安装与更新</a><br><a href="https://jingyan.baidu.com/article/86112f1383241f2737978797.html">starbound 新手任务领取</a><br><a href="https://jingyan.baidu.com/article/c35dbcb09c95738916fcbce3.html">LastPass 安装与简单使用</a><br><a href="https://jingyan.baidu.com/article/2fb0ba4086610700f2ec5ffe.html">idea 热部署之JRebel使用与调试模式</a><br><a href="https://jingyan.baidu.com/article/ac6a9a5e31417c2b653eace8.html">idea 热部署之JRebel安装与激活</a><br><a href="https://jingyan.baidu.com/article/a681b0de6d4e213b184346f4.html">win10录制gif动图之ScreenToGif安装与使用</a><br><a href="https://jingyan.baidu.com/article/2fb0ba40862a0700f2ec5f37.html">DataGrip连接Oracle数据库</a><br><a href="https://jingyan.baidu.com/article/cb5d6105d808b2005c2fe0cd.html">ubuntu安装管理自动升级IDEA之jetbrainsToolbox</a><br><a href="https://jingyan.baidu.com/article/7c6fb4282ca46880652c9046.html">win10多桌面的设置与使用</a><br><a href="https://jingyan.baidu.com/article/3065b3b6bddd85becff8a432.html">LOL冰雪节活动2017</a><br><a href="https://jingyan.baidu.com/article/363872ec1fc0166e4ba16fa6.html">win10使用自带工具录制游戏和屏幕视频</a><br><a href="https://jingyan.baidu.com/article/cd4c29793c5936756e6e60a6.html">社区大使任务之在Steam发布一段视频</a><br><a href="https://jingyan.baidu.com/article/95c9d20d78cc14ec4e7561a6.html">steam设置成就展柜</a><br><a href="https://jingyan.baidu.com/article/ac6a9a5e36877d2b653eaca2.html">阿里云域名实名注册</a><br><a href="https://jingyan.baidu.com/article/fa4125ac0382d228ac7092be.html">搭建github免费个人博客之Hexo+next迁移升级</a><br><a href="https://jingyan.baidu.com/article/9faa7231e1b289473c28cbb3.html">chrome浏览器设置主题</a><br><a href="https://jingyan.baidu.com/article/2f9b480de2b5b341cb6cc2be.html">NexT主题使用gitment评论系统</a><br><a href="https://jingyan.baidu.com/article/84b4f565bca3af60f6da328b.html">ubuntu16.04安装hexo</a><br><a href="https://jingyan.baidu.com/article/e8cdb32b17f9da37052badb9.html">社区大使任务之在“Steam 界面”中查看一篇指南</a><br><a href="https://jingyan.baidu.com/article/f25ef254bbbcb7482c1b82b9.html">ubuntu16.04快速安装最新nodejs8.x和npm</a><br><a href="https://jingyan.baidu.com/article/215817f7b606e81eda142388.html">搭建github免费个人博客之Travis自动部署Hexo四</a><br><a href="https://jingyan.baidu.com/article/db55b609d94c414ba30a2f0e.html">搭建github免费个人博客之Travis自动部署Hexo三</a><br><a href="https://jingyan.baidu.com/article/27fa7326ae44c046f8271f83.html">搭建github免费个人博客之Travis自动部署Hexo二</a><br><a href="https://jingyan.baidu.com/article/359911f5a3744657fe030683.html">搭建github免费个人博客之Travis自动部署Hexo一</a><br><a href="https://jingyan.baidu.com/article/f71d6037cc20301ab641d181.html">git创建空白分支</a><br><a href="https://jingyan.baidu.com/article/154b4631044be528ca8f410a.html">centos7多宝盒切换账号和安装管理脚本</a><br><a href="https://jingyan.baidu.com/article/90895e0f27e12b64ec6b0b09.html">centos7命令行安装多宝箱</a><br><a href="https://jingyan.baidu.com/article/148a1921f5c5fe4d71c3b105.html">centos7 安装使用proxychains4</a><br><a href="https://jingyan.baidu.com/article/0f5fb0993cd01d6d8334ea00.html">docker swarm集群开启防火墙端口之win10虚拟机</a><br><a href="https://jingyan.baidu.com/article/3f16e0031f5b532590c10364.html">U盘启动盘安装与制作之微PE</a><br><a href="https://jingyan.baidu.com/article/f96699bbfb9d90894f3c1b4c.html">hyper-v虚拟机centos7设置双网卡</a><br><a href="https://jingyan.baidu.com/article/8cdccae92a051b315513cd60.html">win10电脑设置不休眠下载模式</a><br><a href="https://jingyan.baidu.com/article/2f9b480de3f4bc41ca6cc27f.html">datagrip设置字体</a><br><a href="https://jingyan.baidu.com/article/9989c746d72e19f649ecfe7c.html">idea手动升级</a><br><a href="https://jingyan.baidu.com/article/39810a23bacddab637fda67b.html">hyper-v虚拟机centos7设置静态ip</a><br><a href="https://jingyan.baidu.com/article/91f5db1b0279bd1c7e05e377.html">hyper-v虚拟机centos7网络配置</a><br><a href="https://jingyan.baidu.com/article/597a06433aee2f312a524375.html">hyper-v虚拟机下载安装centos7</a><br><a href="https://jingyan.baidu.com/article/f79b7cb30bfc129145023e45.html">starbound星际边界getting started任务攻略</a><br><a href="https://jingyan.baidu.com/article/84b4f565bdf6a060f7da3240.html">starbound新手入门教程</a><br><a href="https://jingyan.baidu.com/article/95c9d20d67b31bec4f75615b.html">spring boot vm启动参数设置</a><br><a href="https://jingyan.baidu.com/article/456c463b3512630a583144c2.html">lol玩转新符文</a><br><a href="https://jingyan.baidu.com/article/fdbd4277aa21e5b89e3f48d0.html">台式机前面板耳机孔无声音解决方案</a><br><a href="https://jingyan.baidu.com/article/a3761b2bf274681576f9aadc.html">steam通过提名免费获得徽章</a><br><a href="https://jingyan.baidu.com/article/6b97984dd3f5b51ca2b0bf28.html">win10 ssh 后台运行</a><br><a href="https://jingyan.baidu.com/article/066074d6270b06c3c21cb0d8.html">centos7.3 搭建虚拟局域网</a><br><a href="https://jingyan.baidu.com/article/a681b0de6f6f2f3b184346d3.html">win10 开启ssh服务</a><br><a href="https://jingyan.baidu.com/article/ed2a5d1f8dcb8d09f6be173f.html">IDEA和Android studio安装主题</a><br><a href="https://jingyan.baidu.com/article/7f766daf8933c14101e1d03b.html">微信网页版如何复制粘贴</a><br><a href="https://jingyan.baidu.com/article/6181c3e0da615f152ef1531f.html">基于阿里云Aliddns动态域名解析</a><br><a href="https://jingyan.baidu.com/article/6dad50753d743ca123e36e0b.html">ubuntu17.04开机开启小键盘以及和win10同步时间</a><br><a href="https://jingyan.baidu.com/article/ca00d56c3f94a3e99eebcf1b.html">ubuntu17.04安装intellij datagrip</a><br><a href="https://jingyan.baidu.com/article/39810a23ba2edab636fda61c.html">ubuntu下idea设置http proxy代理</a><br><a href="https://jingyan.baidu.com/article/f71d6037b3ab3f1ab641d116.html">QQ运动奖金赛攻略</a><br><a href="https://jingyan.baidu.com/article/647f0115eff9b57f2148a812.html">centos docker配置阿里云加速镜像仓库</a><br><a href="https://jingyan.baidu.com/article/f54ae2fc675de71e92b8493b.html">win10 通过dockerToolbox安装docker</a><br><a href="https://jingyan.baidu.com/article/f006222861adf9fbd2f0c86e.html">QQ打开或关闭厘米秀功能</a><br><a href="https://jingyan.baidu.com/article/e3c78d649735d63c4c85f5e5.html">ubuntu安装postman以及创建启动图标</a><br><a href="https://jingyan.baidu.com/article/5552ef478547ad518ffbc9e1.html">ubuntu 安装使用vim编辑器</a><br><a href="https://jingyan.baidu.com/article/11c17a2c22753ff446e39dff.html">Ubuntu17.04搭建chrome+uget+Aria2的下载环境</a><br><a href="https://jingyan.baidu.com/article/9f63fb916596e7c8400f0efd.html">ubuntu17.04安装intellij idea并搭建java环境</a><br><a href="https://jingyan.baidu.com/article/e8cdb32b1128d437052bade8.html">Ubuntu17.04安装Uget下载管理器</a><br><a href="https://jingyan.baidu.com/article/ff411625e9c12212e48237f4.html">台式机拆包及简单组装心得</a><br><a href="https://jingyan.baidu.com/article/2a138328f9d8b6074a134fc8.html">Ubuntu17.04安装docker17.09</a><br><a href="https://jingyan.baidu.com/article/359911f5a5b74857fe0306c4.html">Ubuntu17.04 开启远程连接ssh服务端</a><br><a href="https://jingyan.baidu.com/article/b907e62781f48b46e7891cc0.html">华硕B250pro主板biso启用wsl远程开机</a><br><a href="https://jingyan.baidu.com/article/f3e34a12f9c2f3f5eb6535d1.html">win10删除文件夹左侧的onedrive图标</a><br><a href="https://jingyan.baidu.com/article/75ab0bcba76d1cd6864db2de.html">Ubuntu美化之docky启动器安装</a><br><a href="https://jingyan.baidu.com/article/7f766daf8a20c04101e1d02c.html">Ubuntu美化之ultra-flat-icons扁平化图标安装</a><br><a href="https://jingyan.baidu.com/article/ce436649491b083773afd3d9.html">快速简单安装win10和Ubuntu双系统</a><br><a href="https://jingyan.baidu.com/article/6dad50753a583da123e36e27.html">快速简单uefi安装win10系统</a><br><a href="https://jingyan.baidu.com/article/4e5b3e1907b0cd91901e24d8.html">公交卡羊城通多种方式充值</a><br><a href="https://jingyan.baidu.com/article/9113f81b7fb7dd2b3214c724.html">win10系统UEFI+GPT分区格式划分</a><br><a href="https://jingyan.baidu.com/article/6dad50753a5c3da123e36e23.html">华硕B250pro主板biso关闭secure boot和fastboot</a><br><a href="https://jingyan.baidu.com/article/a3aad71a184abcb1fb009620.html">Ubuntu 安装和配置shutter截图软件</a><br><a href="https://jingyan.baidu.com/article/48a4205711b784a9242504a6.html">ubuntu安装chrome浏览器</a><br><a href="https://jingyan.baidu.com/article/8275fc864ec03f46a03cf6b6.html">Ubuntu美化之Flatabulous扁平化主题安装</a><br><a href="https://jingyan.baidu.com/article/da1091fb6e6fba027849d6b1.html">Ubuntu美化之unity图形化管理工具安装</a><br><a href="https://jingyan.baidu.com/article/414eccf6aafd996b431f0a8b.html">win10 官方dw cc adobe套件下载安装</a><br><a href="https://jingyan.baidu.com/article/6fb756ec7de632241858fb3a.html">官方下载win10制作U盘安装镜像</a><br><a href="https://jingyan.baidu.com/article/6c67b1d6bef98c2786bb1e50.html">sony手机F8132如何开启usb调试功能</a><br><a href="https://jingyan.baidu.com/article/63f23628422a300208ab3dac.html">postman 快速搭建模拟接口mock服务</a><br><a href="https://jingyan.baidu.com/article/54b6b9c08368302d583b47a7.html">centos7.3快速搭建虚拟局域网</a><br><a href="https://jingyan.baidu.com/article/86f4a73ea4ed6d37d65269e4.html">docker-machine创建集群</a><br><a href="https://jingyan.baidu.com/article/b907e6278fe68946e7891cce.html">docker for windos 之docker-machine创建docker</a><br><a href="https://jingyan.baidu.com/article/624e745971d1b134e9ba5a49.html">阿里云centos7.3升级内核</a><br><a href="https://jingyan.baidu.com/article/870c6fc36549d1b03fe4bec7.html">阿里云服务器快速创建docker swarm集群</a><br><a href="https://jingyan.baidu.com/article/17bd8e524b4ea785ab2bb8c7.html">docker swarm 网络连通性测试</a><br><a href="https://jingyan.baidu.com/article/c843ea0bc0242e77921e4a49.html">docker for windos 本地输出目录volumes设置</a><br><a href="https://jingyan.baidu.com/article/c910274bbad85fcd371d2d43.html">阿里云服务器配置交换空间</a><br><a href="https://jingyan.baidu.com/article/642c9d343d48e1644b46f740.html">docker swarm集群入门安装使用教程</a><br><a href="https://jingyan.baidu.com/article/e75aca851bb840142edac685.html">linux 设置hosts域名解析</a><br><a href="https://jingyan.baidu.com/article/6b1823098e039aba58e15928.html">idea安装注册mybatis插件</a><br><a href="https://jingyan.baidu.com/article/c1465413f384860bfcfc4c97.html">远程ip访问本地内网web服务(非域名)</a><br><a href="https://jingyan.baidu.com/article/9c69d48ff8813813c9024e97.html">外网通过frp访问局域网win10电脑本地web服务</a><br><a href="https://jingyan.baidu.com/article/95c9d20d624d1eec4e756125.html">阿里云服务器端口8080开放</a><br><a href="https://jingyan.baidu.com/article/0eb457e5cfd58c03f1a90594.html">centos wget下载frp软件</a><br><a href="https://jingyan.baidu.com/article/75ab0bcba30718d6864db238.html">IDEA2017.2快速创建springboot项目</a><br><a href="https://jingyan.baidu.com/article/a3761b2bf8ed6e1577f9aa45.html">oneDrive同步多个不同路径的文件</a><br><a href="https://jingyan.baidu.com/article/eae07827456a821fed54856f.html">win10 远程访问tomcat，开放8080端口</a><br><a href="https://jingyan.baidu.com/article/dca1fa6f6c075cf1a4405203.html">索尼xp安卓手机省电优化内存之黑域免root安装</a><br><a href="https://jingyan.baidu.com/article/9faa7231e8fa80473d28cb7b.html">win10 安装ubuntu子系统bash on ubuntu</a><br><a href="https://jingyan.baidu.com/article/0eb457e5ccb28f03f0a90577.html">win 10下docker gitlab配置注册 shared runner</a><br><a href="https://jingyan.baidu.com/article/95c9d20d61bc1dec4f756156.html">查看或设置win10 docker的真实的 ip</a><br><a href="https://jingyan.baidu.com/article/f3e34a12c607f4f5eb653596.html">docker for windos10 配置阿里云加速镜像仓库</a><br><a href="https://jingyan.baidu.com/article/642c9d340202e2644a46f796.html">win10 专业版安装docker</a><br><a href="https://jingyan.baidu.com/article/6b97984dd946b31ca2b0bf97.html">win10 docker通过docker-compose快速安装gitlab</a><br><a href="https://jingyan.baidu.com/article/7e440953126b2c2fc0e2effd.html">win10安装Oracle 12c数据库</a><br><a href="https://jingyan.baidu.com/article/6b18230990ea84ba59e1594f.html">GitHub Pages 绑定阿里云的域名</a><br><a href="https://jingyan.baidu.com/article/ca41422f2145641eae99edb9.html">eclipse java web项目导入到idea</a><br><a href="https://jingyan.baidu.com/article/fedf0737bc587f35ac89771b.html">Ubuntu 16.04 U盘镜像制作图文教程</a><br><a href="https://jingyan.baidu.com/article/4dc4084845d0f9c8d946f1c2.html">axure8通过动态面板或框架实现表格拖动条</a><br><a href="https://jingyan.baidu.com/article/7f41ecec38410b593d095cdf.html">axure8实现tab菜单选中效果</a><br><a href="https://jingyan.baidu.com/article/4b07be3cb8bf7748b380f32c.html">axure动态面板实现TAB菜单切换功能</a><br><a href="https://jingyan.baidu.com/article/17bd8e52597bb585ab2bb8f2.html">axure8英文版制作弹窗效果</a><br><a href="https://jingyan.baidu.com/article/f25ef2545386af482c1b828f.html">android studio apk第三方加固与签名，混淆打包</a><br><a href="https://jingyan.baidu.com/article/b907e627a1f8ab46e7891cd4.html">国内下载安装免费玩转美服英雄联盟（lol）</a><br><a href="https://jingyan.baidu.com/article/624e74595de49d34e9ba5a7e.html">网站建设教程</a><br><a href="https://jingyan.baidu.com/article/454316ab608a0bf7a7c03ac5.html">搭建github免费个人博客之Hexo上传到github</a><br><a href="https://jingyan.baidu.com/article/d8072ac493ce16ec95cefd2a.html">搭建github免费个人博客之Hexo安装</a><br><a href="https://jingyan.baidu.com/article/91f5db1b26cf911c7f05e3c5.html">android studio快速入门之JNI之静态库.a使用</a><br><a href="https://jingyan.baidu.com/article/77b8dc7f961a126174eab6c4.html">android studio快速入门之JNI之静态库.a生成</a><br><a href="https://jingyan.baidu.com/article/ed2a5d1f6024a009f7be1753.html">AS快速入门之opencv搭建七工程ndk的编译及使用</a><br><a href="https://jingyan.baidu.com/article/fcb5aff75e6b38edab4a7145.html">android studio快速入门之NDK之Android.mk编译</a><br><a href="https://jingyan.baidu.com/article/c33e3f48f0d32eea15cbb5a4.html">google私有cloud搭建git之二AS push 远程仓库</a><br><a href="https://jingyan.baidu.com/article/95c9d20d5ae536ec4e75618d.html">google私有cloud搭建git之一push本地git仓库</a><br><a href="https://jingyan.baidu.com/article/6b182309a6a1b2ba58e15986.html">GoogleCloudSDK的安装配置与设置代理</a><br><a href="https://jingyan.baidu.com/article/ce4366492dd1243773afd39f.html">eclipse 简单导入j2ee工程</a><br><a href="https://jingyan.baidu.com/article/2a13832885da9a074a134fc6.html">win10 按装mysql-5.5.20-winx64</a><br><a href="https://jingyan.baidu.com/article/1e5468f9752f7b484961b7c2.html">Eclipse之安装j2ee环境 Tomcat8.0</a><br><a href="https://jingyan.baidu.com/article/495ba841e1d83b38b30ede2b.html">android studio快速入门之NDK之JNI简单快速入门</a><br><a href="https://jingyan.baidu.com/article/ff42efa92984c8c19e2202b2.html">android studio2.1 安装genymotion插件</a><br><a href="https://jingyan.baidu.com/article/ca41422f32df571eae99ed2f.html">AS快速入门之opencv搭建六工程导入jar包及删除</a><br><a href="https://jingyan.baidu.com/article/e5c39bf5d75efb39d760332c.html">AS快速入门之opencv搭建五新建与删除module</a><br><a href="https://jingyan.baidu.com/article/fec4bce2722b10f2618d8b2c.html">AS快速入门之opencv搭建四为工程导lib文件</a><br><a href="https://jingyan.baidu.com/article/fedf0737ae684135ac89772b.html">AS快速入门之opencv搭建三导入opencv library</a><br><a href="https://jingyan.baidu.com/article/84b4f5659f1f8e60f6da3237.html">AS快速入门之opencv搭建二导入opencv sample</a><br><a href="https://jingyan.baidu.com/article/c910274b912c74cd361d2d37.html">android studio快速入门之opencv搭建一新建工程</a><br><a href="https://jingyan.baidu.com/article/ceb9fb10b2eab18cad2ba00b.html">eclipse 简单使用NDK编译c++</a><br><a href="https://jingyan.baidu.com/article/1974b28975a0abf4b1f774a4.html">vs2015 搭建opencv以及环境配置，sample的导入</a><br><a href="https://jingyan.baidu.com/article/4f34706e3e2b75e387b56d9b.html">导入android opencv 3.1，以及注意事项</a><br><a href="https://jingyan.baidu.com/article/066074d644c527c3c21cb09a.html">win10 eclipse 简单介绍配置NDK 环境</a><br><a href="https://jingyan.baidu.com/article/c33e3f48f4e222ea15cbb595.html">win10 winphone Outlook设置日历 课表 提醒</a><br><a href="https://jingyan.baidu.com/article/19192ad804cb1fe53e57072f.html">android studio安装与环境搭建</a><br><a href="https://jingyan.baidu.com/article/77b8dc7f9d6f1f6174eab639.html">android studio 百度或google下载</a><br><a href="https://jingyan.baidu.com/article/0a52e3f4305d76bf62ed72bb.html">j-link-ob stm32下载器驱动安装</a><br><a href="https://jingyan.baidu.com/article/c85b7a645429ae003bac958a.html">stm32最新固件库3.5和4.0官网下载</a><br><a href="https://jingyan.baidu.com/article/6c67b1d69dd7ad2787bb1e82.html">win10系统 keil 5.17 安装与激活</a><br><a href="https://jingyan.baidu.com/article/2a1383289ea295074a134f3e.html">win10 取消开机密码</a><br><a href="https://jingyan.baidu.com/article/39810a239fd8f9b637fda66e.html">vb.net 创建简单的自定义控件，继承父控件</a><br><a href="https://jingyan.baidu.com/article/495ba841e7003538b20ede73.html">visual studio2015新建c++工程以及安装c++环境</a><br><a href="https://jingyan.baidu.com/article/72ee561a53b255e16038df65.html">sqlserver数据库文件转移，分离与附加</a><br><a href="https://jingyan.baidu.com/article/e5c39bf5aafdf639d7603389.html">sqlserver设置自增id</a><br><a href="https://jingyan.baidu.com/article/948f592413c060d80ff5f989.html">ｄｗ设置远程服务器</a><br><a href="https://jingyan.baidu.com/article/925f8cb8c09334c0dde056bd.html">ｄｗ新建站点　添加本地测试服务器</a><br><a href="https://jingyan.baidu.com/article/375c8e19c5975c25f2a22988.html">sqlserver界面方式创建视图</a><br><a href="https://jingyan.baidu.com/article/e8cdb32b3322f637052badee.html">win10 WIFI无法连接，忘记保存的密码</a><br><a href="https://jingyan.baidu.com/article/f7ff0bfc1a15362e26bb13ec.html">dw2015 地图热点工具栏打开以及地图映射设置</a><br><a href="https://jingyan.baidu.com/article/2a1383289ff594074a134feb.html">vb.net 委托Delegate 的简单实现任务回调</a><br><a href="https://jingyan.baidu.com/article/90bc8fc8587a86f653640ce6.html">文件网页乱码解决以及编码转换</a><br><a href="https://jingyan.baidu.com/article/574c521918359f6c8d9dc1e6.html">winform 通过imagelist实现qq经典头像功能选择</a><br><a href="https://jingyan.baidu.com/article/8cdccae949b138315413cdcc.html">ftp文件传输 管理服务器文件</a><br><a href="https://jingyan.baidu.com/article/5d6edee2f649fa99eadeecc9.html">不同数据库表复制，数据库数据迁移</a><br><a href="https://jingyan.baidu.com/article/851fbc37bc7e313e1f15abc7.html">win10 设置图片开机手势密码 锁屏</a><br><a href="https://jingyan.baidu.com/article/5d368d1ecfe8ca3f60c057c1.html">sql server 界面设置唯一键/索引键/主键</a><br><a href="https://jingyan.baidu.com/article/a3761b2bdf0a4b1576f9aa26.html">sqlserver 界面 设置 主键 外键</a><br><a href="https://jingyan.baidu.com/article/8065f87f94f4402331249826.html">sqlserver2014 界面 新建数据库 建表后看不到表</a><br><a href="https://jingyan.baidu.com/article/22fe7ced2f661c3002617f3d.html">xampp 安装配置及系统80端口占用无法启用ssl</a><br><a href="https://jingyan.baidu.com/article/9f63fb9187dac5c8400f0e38.html">office 2016 下载安装 破解注意事项</a><br><a href="https://jingyan.baidu.com/article/22fe7ced2f6e1c3002617f35.html">完美卸载 total-uninstall软件安装和基本使用</a><br><a href="https://jingyan.baidu.com/article/20b68a88be0363796cec621f.html">steam 免费分享游戏库 免费下载正版游戏</a><br><a href="https://jingyan.baidu.com/article/e75057f2fd62f1ebc81a8961.html">魔卡幻想 跳过新手教程 小号切换 主号登陆</a><br><a href="https://jingyan.baidu.com/article/73c3ce281352ece50243d946.html">WIN RAR 去广告，安装以及注册</a><br><a href="https://jingyan.baidu.com/article/6b97984db712911ca3b0bf43.html">QQ7.9轻聊版 消息目录更改 消息记录导入</a><br><a href="https://jingyan.baidu.com/article/597a064346db0b312a524342.html">win10 下载安装sql_server_2014_express</a><br><a href="https://jingyan.baidu.com/article/73c3ce281339ece50243d951.html">MyEclipse2015 Stable1.0版本 Crack破解</a><br><a href="https://jingyan.baidu.com/article/22fe7ced2c8c1b3003617f57.html">Git 的基本简单使用</a><br><a href="https://jingyan.baidu.com/article/da1091fb0c369c027949d658.html">查看隐藏文件 ，设置隐藏文件，显示后缀名</a><br><a href="https://jingyan.baidu.com/article/f79b7cb36fee369145023e57.html">系统自带截图功能 和 左键弹窗截图</a><br><a href="https://jingyan.baidu.com/article/cd4c2979192f1d756f6e6054.html">winphone 手机+免打扰时间+密友圈</a><br><a href="https://jingyan.baidu.com/article/215817f78948c31edb14234a.html">wp 手机 设置 提醒我 功能</a><br><a href="https://jingyan.baidu.com/article/215817f78951c31edb142351.html">win7笔记本开启自带wifi网络共享功能</a><br><a href="https://jingyan.baidu.com/article/c33e3f4889c827ea15cbb5bb.html">笔记本电脑设置关闭显示器和盖盖子不休眠</a><br><a href="https://jingyan.baidu.com/article/f006222806f6dcfbd3f0c8b9.html">笔记本电脑有电池情况下突然断电 黑屏</a><br><a href="https://jingyan.baidu.com/article/72ee561a50ff52e16038df50.html">wp 手机 落网软件查看歌词 单曲收藏 单曲分享</a><br><a href="https://jingyan.baidu.com/article/e9fb46e164586e7521f766ac.html">vb.net datagridview 连接数据库,并显示数据</a><br><a href="https://jingyan.baidu.com/article/19020a0a2d551a529d2842f5.html">cocos2d安装教程</a></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>百度经验</tag>
      </tags>
  </entry>
  <entry>
    <title>Other-CDN</title>
    <url>/2019/02/18/other-cdn/</url>
    <content><![CDATA[<h3 id="腾讯云CDN配置"><a href="#腾讯云CDN配置" class="headerlink" title="腾讯云CDN配置"></a>腾讯云CDN配置</h3><p>cdn是资源加速缓存的服务</p>
<ol>
<li>开通CDN</li>
<li>在域名管理界面添加域名</li>
<li>域名是指最后访问的域名，后面通过该域名访问就会加速</li>
<li>源站类型就是要加速的资源cos(oss)或服务</li>
<li>设置好后还需要把刚刚添加的域名做域名解析，解析的地址填CNAME的地址</li>
<li>测试解析是否成功可以ping或linux执行<code>dig coscdn.xxxx.com</code></li>
<li>测试通过设置的域名访问cos里面的资源，就是把cos的资源链接，替换为新的域名</li>
<li>然后访问，查看统计分析是否有记录（感觉有很长的延时）</li>
</ol>
<h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ol>
<li><p>访问资源时读取老的资源不更新</p>
<p>解决：在CDN设置里面的<code>访问控制-&gt;过滤参数</code>按钮关闭即可</p>
<p>原因：打开之后回忽略url中？号后面的所有参数，所以带参数时，就不会访问新资源</p>
</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://cloud.tencent.com/document/product/228/6291">过滤参数配置</a></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>Gps认识之各大坐标系</title>
    <url>/2016/08/23/other-gps/</url>
    <content><![CDATA[<h1 id="三大定位坐标系"><a href="#三大定位坐标系" class="headerlink" title="三大定位坐标系"></a>三大定位坐标系</h1><h2 id="地球坐标-WGS84"><a href="#地球坐标-WGS84" class="headerlink" title="地球坐标 (WGS84)"></a>地球坐标 (WGS84)</h2><blockquote>
<ul>
<li>国际标准，从 GPS 设备中取出的数据的坐标系</li>
<li>国际地图提供商使用的坐标系</li>
</ul>
</blockquote>
<h2 id="火星坐标-GCJ-02-也叫国测局坐标系"><a href="#火星坐标-GCJ-02-也叫国测局坐标系" class="headerlink" title="火星坐标 (GCJ-02)也叫国测局坐标系"></a>火星坐标 (GCJ-02)也叫国测局坐标系</h2><blockquote>
<ul>
<li>中国标准，从国行移动设备中定位获取的坐标数据使用这个坐标系</li>
<li>国家规定： 国内出版的各种地图系统（包括电子形式），必须至少采用GCJ-02对地理位置进行首次加密。</li>
</ul>
</blockquote>
<h2 id="百度坐标-BD-09"><a href="#百度坐标-BD-09" class="headerlink" title="百度坐标 (BD-09)"></a>百度坐标 (BD-09)</h2><blockquote>
<ul>
<li>百度标准，百度 SDK，百度地图，Geocoding 使用</li>
<li>(本来就乱了，百度又在火星坐标上来个二次加密)</li>
</ul>
</blockquote>
<h1 id="现在说说各大地图图层及定位的坐标系"><a href="#现在说说各大地图图层及定位的坐标系" class="headerlink" title="现在说说各大地图图层及定位的坐标系"></a>现在说说各大地图图层及定位的坐标系</h1><p>图层坐标是指地图的坐标，不是实际的gps坐标，中国规定：中国区域必须对图层加密，所以实际坐标并不是真实的gps坐标（WGS84）<br>,是加密过后的火星坐标（GCJ-02）或者火星坐标（BD-09）.</p>
<h2 id="图层坐标系"><a href="#图层坐标系" class="headerlink" title="图层坐标系"></a>图层坐标系</h2><blockquote>
<ul>
<li>百度地图 （BD-09）</li>
<li>谷歌地图 （国内GCJ-02,国外WGS84）</li>
<li>谷歌地球 （国内国外WGS84）</li>
<li>高德地图 （GCJ-02)</li>
</ul>
</blockquote>
<h2 id="定位坐标系"><a href="#定位坐标系" class="headerlink" title="定位坐标系"></a>定位坐标系</h2><blockquote>
<ul>
<li>百度地图sdk (BD-09)</li>
<li>谷歌地图sdk (WGS84)</li>
<li>高德地图sdk (GCJ-02)</li>
<li>android原生定位sdk (WGS84)</li>
</ul>
</blockquote>
<h1 id="高德地图api"><a href="#高德地图api" class="headerlink" title="高德地图api"></a>高德地图api</h1><h2 id="坐标转换与位置判断"><a href="#坐标转换与位置判断" class="headerlink" title="坐标转换与位置判断"></a>坐标转换与位置判断</h2><blockquote>
<ul>
<li>坐标转换<br>支持GPS/Mapbar/Baidu等多种类型坐标在高德地图上使用。参见类CoordinateConverter。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CoordinateConverter converter  = <span class="keyword">new</span> CoordinateConverter(); </span><br><span class="line"><span class="comment">// CoordType.GPS 待转换坐标类型</span></span><br><span class="line">converter.from(CoordType.GPS); </span><br><span class="line"><span class="comment">// sourceLatLng待转换坐标点 DPoint类型</span></span><br><span class="line">converter.coord(sourceLatLng); </span><br><span class="line"><span class="comment">// 执行转换操作</span></span><br><span class="line">DPoint desLatLng = converter.convert();</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>判断位置所在区域</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CoordinateConverter类提供的isAMapDataAvailable(<span class="keyword">double</span> latitude,<span class="keyword">double</span> longitude)接口可以用来判断指定位置是否在大陆以及港、澳地区。</span><br><span class="line">CoordinateConverter converter  = <span class="keyword">new</span> CoordinateConverter(); </span><br><span class="line"><span class="comment">//返回true代表当前位置在大陆、港澳地区，反之不在。</span></span><br><span class="line"><span class="keyword">boolean</span> isAMapDataAvailable = converter.isAMapDataAvailable(latitude,longitude);</span><br><span class="line"><span class="comment">//第一个参数为纬度，第二个为经度，纬度和经度均为高德坐标系。</span></span><br></pre></td></tr></table></figure>

<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>如果用高德和google双地图，可以采用高德的坐标转换工具判断及转换给google，因为google和高德图层都是火星坐标</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>gps</tag>
        <tag>location</tag>
        <tag>火星</tag>
        <tag>地球</tag>
        <tag>坐标</tag>
      </tags>
  </entry>
  <entry>
    <title>minio搭建图床</title>
    <url>/2020/08/05/other-minio/</url>
    <content><![CDATA[<h3 id="minio搭建图床"><a href="#minio搭建图床" class="headerlink" title="minio搭建图床"></a>minio搭建图床</h3><p>minio部署见docker脚本</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.5&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;14033:9000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/dockerdata/v-minio:/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MINIO_ACCESS_KEY:</span> <span class="string">&quot;username&quot;</span></span><br><span class="line">      <span class="attr">MINIO_SECRET_KEY:</span> <span class="string">&quot;password&quot;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">server</span> <span class="string">/data</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">me</span>]      </span><br></pre></td></tr></table></figure>

<h3 id="minio设置永久分享"><a href="#minio设置永久分享" class="headerlink" title="minio设置永久分享"></a>minio设置永久分享</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;容器id&gt; bash</span><br><span class="line">curl https://dl.minio.io/client/mc/release/linux-amd64/mc --output mc</span><br><span class="line">./mc config host add minio http://ip:14033 username password</span><br><span class="line">./mc policy <span class="built_in">set</span> public minio/&lt;桶的名字&gt;</span><br></pre></td></tr></table></figure>

<p>设置成功后该桶就可以通过url了进行拼接访问了</p>
<h3 id="图床客户端工具"><a href="#图床客户端工具" class="headerlink" title="图床客户端工具"></a>图床客户端工具</h3><h4 id="方案一：typora-python-minio-采用"><a href="#方案一：typora-python-minio-采用" class="headerlink" title="方案一：typora+python+minio(采用)"></a>方案一：typora+python+minio(采用)</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/minio/minio-py</span><br><span class="line">cd minio-py</span><br><span class="line"><span class="meta">#</span><span class="bash">需要代理下载</span></span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>

<h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> minio <span class="keyword">import</span> Minio</span><br><span class="line"><span class="keyword">from</span> minio.error <span class="keyword">import</span> ResponseError</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">images = sys.argv[<span class="number">1</span>:]</span><br><span class="line">minioClient = Minio(<span class="string">&quot;ip:port&quot;</span>,</span><br><span class="line">                    access_key=<span class="string">&#x27;用户名&#x27;</span>, secret_key=<span class="string">&#x27;密码&#x27;</span>, secure=<span class="literal">False</span>)</span><br><span class="line">result = <span class="string">&quot;Upload Success:\n&quot;</span></span><br><span class="line">date = time.strftime(<span class="string">&quot;%Y%m%d%H%M%S&quot;</span>, time.localtime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">    file_type = os.path.splitext(image)[-<span class="number">1</span>]</span><br><span class="line">    new_file_name = date + file_type</span><br><span class="line">    <span class="keyword">if</span> image.endswith(<span class="string">&quot;.png&quot;</span>) <span class="keyword">or</span> image.endswith(<span class="string">&quot;.jpg&quot;</span>) <span class="keyword">or</span> image.endswith(<span class="string">&quot;.gif&quot;</span>):</span><br><span class="line">         content_type =<span class="string">&quot;image/&quot;</span>+file_type.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        content_type =<span class="string">&quot;image/jpg&quot;</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        minioClient.fput_object(bucket_name=<span class="string">&#x27;blog&#x27;</span>, object_name= new_file_name, file_path=image,content_type=content_type)</span><br><span class="line">        <span class="keyword">if</span> image.endswith(<span class="string">&quot;temp&quot;</span>):</span><br><span class="line">            os.remove(image)</span><br><span class="line">        result = result +<span class="string">&quot;http://ip:port&quot;</span> + <span class="string">&quot;/blog/&quot;</span>  + new_file_name + <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="keyword">except</span> ResponseError <span class="keyword">as</span> err:</span><br><span class="line">        result = result + <span class="string">&quot;error:&quot;</span> + err.message + <span class="string">&quot;\n&quot;</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p>参考</p>
<p><a href="https://zhuanlan.zhihu.com/p/139529477">Minio+Nginx搭建私有图床，写博客从未这么爽</a></p>
<p><a href="https://docs.min.io/docs/python-client-quickstart-guide.html">python-client-quickstart-guide</a></p>
<h4 id="方案二：upic-typora-minio"><a href="#方案二：upic-typora-minio" class="headerlink" title="方案二：upic+typora+minio"></a>方案二：upic+typora+minio</h4><p>参考：<a href="https://www.hfge.net/privatecloud/typora-minio.html">Typora搭配uPic使用minIO自建图床</a></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>minio图片不能预览</p>
<ol>
<li>需要设置</li>
</ol>
<p><img src="https://s3.ax1x.com/2021/03/18/627kuR.png" alt="image-20200805182053298"></p>
<ol start="2">
<li>以及上传图片需要设置content_type为<code>image/jpg</code></li>
</ol>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>oss</tag>
        <tag>图床</tag>
        <tag>minio</tag>
      </tags>
  </entry>
  <entry>
    <title>Other-video-h5</title>
    <url>/2019/11/20/other-video-h5/</url>
    <content><![CDATA[<h2 id="视频直播解决方案"><a href="#视频直播解决方案" class="headerlink" title="视频直播解决方案"></a>视频直播解决方案</h2><h3 id="方案一ffmpeg-nginx-rtmp-hls"><a href="#方案一ffmpeg-nginx-rtmp-hls" class="headerlink" title="方案一ffmpeg+nginx(rtmp/hls)"></a>方案一ffmpeg+nginx(rtmp/hls)</h3><p>rtmp解决方案大众，但是依赖adobe flash player</p>
<p>hls延时高</p>
<h3 id="方案二ffmpeg-webSocket"><a href="#方案二ffmpeg-webSocket" class="headerlink" title="方案二ffmpeg+webSocket"></a>方案二ffmpeg+webSocket</h3><p>原理ffmpeg解码转流(图片)，webSocket接收，然后前端画布按帧绘制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#拉去代码https://github.com/phoboslab/jsmpeg</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:phoboslab/jsmpeg.git</span><br><span class="line"><span class="comment">#进入项目目录执行</span></span><br><span class="line">npm install ws</span><br><span class="line"><span class="comment">#运行JSMpeg，8081为ffmpeg推流端口，8082为websocket端口</span></span><br><span class="line">node websocket-relay.js supersecret 8081 8082</span><br><span class="line"><span class="comment">#运行转码推流</span></span><br><span class="line">ffmpeg -i rtsp://admin:admin@10.30.11.119:554/h264/ch1/main/av_stream -q 0 -f mpegts -codec:v mpeg1video -s 352x240 http://10.30.11.40:8081/supersecret</span><br></pre></td></tr></table></figure>

<p>修改<code>view-stream.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>JSMpeg Stream Client<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">			<span class="attribute">background-color</span>: <span class="number">#111</span>;</span></span><br><span class="line"><span class="css">			<span class="attribute">text-align</span>: center;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;video-canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;jsmpeg.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;video-canvas&#x27;</span>);</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> url = <span class="string">&#x27;ws://10.30.11.150:8082/&#x27;</span>;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> player = <span class="keyword">new</span> JSMpeg.Player(url, &#123;<span class="attr">canvas</span>: canvas&#125;);</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>访问静态网页</p>
<p><a href="file:///Users/xuanleung/Downloads/jsmpeg-master/view-stream.html">file:///Users/xuanleung/Downloads/jsmpeg-master/view-stream.html</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://my.oschina.net/chengpengvb/blog/1832469?p=3">html5播放rtsp方案</a></p>
<p><a href="https://github.com/phoboslab/jsmpeg">phoboslab/jsmpeg</a></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>rtsp</tag>
      </tags>
  </entry>
  <entry>
    <title>python-base</title>
    <url>/2020/09/24/python-base/</url>
    <content><![CDATA[<h2 id="python-pip-国内仓库代理"><a href="#python-pip-国内仓库代理" class="headerlink" title="python pip 国内仓库代理"></a>python pip 国内仓库代理</h2><p>在改配置文件 <code>vim ~/.pip/pip.conf</code>添加如下内容，没有该文件创建该文件及目录</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[global]</span></span><br><span class="line"><span class="meta">index-url</span> = <span class="string">https://mirrors.aliyun.com/pypi/simple/</span></span><br><span class="line"><span class="attr">[install]</span></span><br><span class="line"><span class="meta">trusted-host</span> = <span class="string">mirrors.aliyun.com</span></span><br></pre></td></tr></table></figure>

<h2 id="python-版本切换工具-pyenv"><a href="#python-版本切换工具-pyenv" class="headerlink" title="python 版本切换工具-pyenv"></a>python 版本切换工具-<a href="https://github.com/pyenv/pyenv">pyenv</a></h2><p>常用命令<a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md">commands</a></p>
<p>常见问题<a href="https://github.com/pyenv/pyenv/issues/1643">issues</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更新安装</span></span><br><span class="line">brew update</span><br><span class="line">brew install pyenv</span><br><span class="line"><span class="comment">#添加补齐</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval &quot;$(pyenv init -)&quot;\nfi&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="comment">#重启shell</span></span><br><span class="line"><span class="built_in">exec</span> <span class="string">&quot;<span class="variable">$SHELL</span>&quot;</span></span><br><span class="line"><span class="comment"># 可选，但建议安装python依赖项</span></span><br><span class="line">brew install openssl readline sqlite3 xz zlib bzip2 libiconv libzip</span><br><span class="line"><span class="comment">#查看支持的版本</span></span><br><span class="line">pyenv install --list</span><br><span class="line"><span class="comment">#安装指定版本</span></span><br><span class="line">pyenv install 2.7.15</span><br><span class="line"><span class="comment">#如遇安装问题，升级Xcode command line tools和配置下面的环境变量，上面可选变必选</span></span><br><span class="line">vim ~/.zshenv</span><br><span class="line"></span><br><span class="line"><span class="comment">#zlib</span></span><br><span class="line"><span class="comment">#For compilers to find zlib you may need to set:</span></span><br><span class="line"><span class="built_in">export</span> LDFLAGS=<span class="string">&quot;-L/usr/local/opt/zlib/lib&quot;</span></span><br><span class="line"><span class="built_in">export</span> CPPFLAGS=<span class="string">&quot;-I/usr/local/opt/zlib/include&quot;</span></span><br><span class="line"><span class="comment">#For pkg-config to find zlib you may need to set:</span></span><br><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH=<span class="string">&quot;/usr/local/opt/zlib/lib/pkgconfig&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#bzip2</span></span><br><span class="line"><span class="comment">#If you need to have bzip2 first in your PATH, run:</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/opt/bzip2/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="comment">#For compilers to find bzip2 you may need to set:</span></span><br><span class="line"><span class="built_in">export</span> LDFLAGS=<span class="string">&quot;-L/usr/local/opt/bzip2/lib&quot;</span></span><br><span class="line"><span class="built_in">export</span> CPPFLAGS=<span class="string">&quot;-I/usr/local/opt/bzip2/include&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#libiconv</span></span><br><span class="line"><span class="comment">#If you need to have libiconv first in your PATH, run:</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/opt/libiconv/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="comment">#For compilers to find libiconv you may need to set:</span></span><br><span class="line"><span class="built_in">export</span> LDFLAGS=<span class="string">&quot;-L/usr/local/opt/libiconv/lib&quot;</span></span><br><span class="line"><span class="built_in">export</span> CPPFLAGS=<span class="string">&quot;-I/usr/local/opt/libiconv/include&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="python包管理工具"><a href="#python包管理工具" class="headerlink" title="python包管理工具"></a>python包管理工具</h2><p>包管理工具是指类似maven/gradle的管理工具，和maven包管理不同的是，python还要考虑虚拟环境，有了虚拟环境，才能在不同的虚拟环境安装不同版本的包，就相当于一个项目对应一个虚拟环境，一个虚拟环境安装不同的包</p>
<h2 id="名词介绍"><a href="#名词介绍" class="headerlink" title="名词介绍"></a>名词介绍</h2><p><code>pip</code>包管理</p>
<p><code>virtualenv</code>虚拟环境</p>
<h3 id="不同的管理工具及方案"><a href="#不同的管理工具及方案" class="headerlink" title="不同的管理工具及方案"></a>不同的管理工具及方案</h3><h4 id="方案一：传统模式pip-virtualenv"><a href="#方案一：传统模式pip-virtualenv" class="headerlink" title="方案一：传统模式pip+virtualenv"></a>方案一：传统模式<code>pip</code>+<code>virtualenv</code></h4><p>包依赖管理文件<code>requirements.txt</code></p>
<p>问题：在pycharm中莫名其妙的找不到已经安装的包(eg:pandas_bokeh)</p>
<h4 id="方案二：pipenv"><a href="#方案二：pipenv" class="headerlink" title="方案二：pipenv"></a>方案二：<code>pipenv</code></h4><p>包依赖管理文件<code>Pipfile</code></p>
<p>问题：网上说依赖慢，依赖乱</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install pipenv</span><br><span class="line"><span class="comment">#设置虚拟环境默认建立在项目目录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PIPENV_VENV_IN_PROJECT=true&#x27;</span> &gt;&gt; ~/.zshenv</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://my.oschina.net/u/4274818/blog/3236481">PyCharm+Pipenv虚拟环境作开发和依赖管理</a></p>
<h4 id="方案三：poetry"><a href="#方案三：poetry" class="headerlink" title="方案三：poetry"></a><del>方案三：<a href="https://github.com/python-poetry/poetry">poetry</a></del></h4><p>问题：放弃有各种bug，对PyCharm兼容差，安装依赖经常失败，pycharm不能自动识别poetry</p>
<p><a href="https://python-poetry.org/docs/">官方文档</a></p>
<p>包依赖管理文件<code>pyproject.toml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mac zsh安装步骤,注意后面用python3安装</span></span><br><span class="line">curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3</span><br><span class="line"><span class="comment"># 当前终端临时生效</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.poetry/env</span><br><span class="line"><span class="comment"># 终端永久生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PATH:$HOME/.poetry/bin&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="comment"># 设置虚拟环境安装到项目目录，如果设置改设置，所有项目的虚拟目录都默认到了~/Library/Caches/pypoetry/virtualenvs该路径下面</span></span><br><span class="line">poetry config virtualenvs.in-project <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">brew update</span><br><span class="line">brew install pyenv</span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载</span></span><br><span class="line">wget https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py</span><br><span class="line">python3 get-poetry.py --uninstall</span><br><span class="line">rm get-poetry.py</span><br></pre></td></tr></table></figure>

<p>PyCharm安装插件<code>Poetry</code></p>
<p>poetry虚拟环境目录<code>~/Library/Caches/pypoetry/virtualenvs</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看虚拟环境</span></span><br><span class="line">poetry env list </span><br><span class="line"><span class="comment">#移除虚拟环境</span></span><br><span class="line">poetry env remove python3</span><br></pre></td></tr></table></figure>



<h3 id="pyproject-toml-配置文件详解"><a href="#pyproject-toml-配置文件详解" class="headerlink" title="pyproject.toml 配置文件详解"></a>pyproject.toml 配置文件详解</h3><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[tool.poetry]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;pythonleaning&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">description</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">authors</span> = [<span class="string">&quot;xuanleung &lt;exxk.lx@gmail.com&gt;&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dependencies]</span></span><br><span class="line"><span class="attr">python</span> = <span class="string">&quot;^3.8&quot;</span></span><br><span class="line"><span class="attr">pandas</span> = <span class="string">&quot;^1.1.4&quot;</span></span><br><span class="line"><span class="attr">nupy</span> = <span class="string">&quot;^0.1.1&quot;</span></span><br><span class="line"><span class="attr">pymongo</span> = <span class="string">&quot;^3.11.1&quot;</span></span><br><span class="line"><span class="attr">matplotlib</span> = <span class="string">&quot;^3.3.3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dev-dependencies]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[build-system]</span></span><br><span class="line"><span class="attr">requires</span> = [<span class="string">&quot;poetry-core&gt;=1.0.0&quot;</span>]</span><br><span class="line"><span class="attr">build-backend</span> = <span class="string">&quot;poetry.core.masonry.api&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置代理仓库</span></span><br><span class="line"><span class="section">[[tool.poetry.source]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;aliyun&quot;</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">&quot;https://mirrors.aliyun.com/pypi/simple/&quot;</span></span><br></pre></td></tr></table></figure>





<h2 id="python使用数据库"><a href="#python使用数据库" class="headerlink" title="python使用数据库"></a>python使用数据库</h2><h3 id="python与mongodb"><a href="#python与mongodb" class="headerlink" title="python与mongodb"></a>python与mongodb</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="comment">#连接数据库</span></span><br><span class="line">fund = pymongo.MongoClient(<span class="string">&#x27;mongodb://ip.cn:14011/&#x27;</span>)[<span class="string">&quot;db_name&quot;</span>]</span><br><span class="line"><span class="comment">#条件查询数据，0代表不返回该字段，1代表返回该字段,sort第二个参数1升序，-1降序</span></span><br><span class="line">result = fund[<span class="string">&quot;tb_name&quot;</span>].find(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;, &#123;<span class="string">&quot;_id&quot;</span>: <span class="number">0</span>, <span class="string">&quot;name&quot;</span>: <span class="number">1</span>&#125;).sort(<span class="string">&quot;name&quot;</span>,-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="python之pandas"><a href="#python之pandas" class="headerlink" title="python之pandas"></a>python之pandas</h2><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><h4 id="loc"><a href="#loc" class="headerlink" title="loc"></a><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.loc.html">loc</a></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回为&#x27;列标&#x27;的那列数据</span></span><br><span class="line">Series=df[<span class="string">&#x27;col&#x27;</span>]</span><br><span class="line"><span class="comment">#给满足条件的行row和列col赋新值</span></span><br><span class="line">df.loc[<span class="string">&#x27;row&#x27;</span>,<span class="string">&#x27;col&#x27;</span>]=<span class="string">&#x27;赋新值&#x27;</span></span><br><span class="line"><span class="comment">#单列计算，该列全部乘以2</span></span><br><span class="line">df[<span class="string">&#x27;col2&#x27;</span>] = df[<span class="string">&#x27;col1&#x27;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x*<span class="number">2</span>)</span><br><span class="line"><span class="comment">#不用lambda表达式为下方写法</span></span><br><span class="line">define square(x):</span><br><span class="line">    <span class="keyword">return</span> (x * <span class="number">2</span>)</span><br><span class="line">df[<span class="string">&#x27;col2&#x27;</span>] = df[<span class="string">&#x27;col1&#x27;</span>].<span class="built_in">map</span>(square)</span><br><span class="line"><span class="comment">#多列计算用apply,例如col3 = col1 + 2 * col2:</span></span><br><span class="line">df[<span class="string">&#x27;col3&#x27;</span>] = df.apply(<span class="keyword">lambda</span> x: x[<span class="string">&#x27;col1&#x27;</span>] + <span class="number">2</span> * x[<span class="string">&#x27;col2&#x27;</span>], axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#图表分开展示</span></span><br><span class="line">df.plot.line(subplots=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有列</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_columns&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 显示所有行</span></span><br><span class="line"><span class="comment"># pd.set_option(&#x27;display.max_rows&#x27;, None)</span></span><br><span class="line"><span class="comment"># 设置value的显示长度为100，默认为50</span></span><br><span class="line"><span class="comment"># pd.set_option(&#x27;max_colwidth&#x27;,100)</span></span><br><span class="line"><span class="comment"># 设置显示的宽度</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.width&#x27;</span>, <span class="number">5000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.modb.pro/db/31508">一款让Python开发效率提升50%的工具包</a></p>
<p><a href="https://lenciel.com/2020/07/python-in-2020-part1-env-setup/">Python in 2020 (1) - 环境搭建</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-dataview</title>
    <url>/2020/09/24/python-dataview/</url>
    <content><![CDATA[<h1 id="python数据可视化"><a href="#python数据可视化" class="headerlink" title="python数据可视化"></a>python数据可视化</h1><p>Pandas支持的<a href="https://pandas.pydata.org/pandas-docs/dev/ecosystem.html#visualization">可视化后端</a>:matplotlib、bokeh、plotly等</p>
<h2 id="Pandas-matplotlib"><a href="#Pandas-matplotlib" class="headerlink" title="Pandas-matplotlib"></a>Pandas-matplotlib</h2><p>老版绘图工具，不支持交互，但是资料较多，支持图表多，pandas的默认绘图后端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">y = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.savefig(<span class="string">&quot;test.jpg&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#--pandas使用--</span></span><br><span class="line">df = pd.DataFrame(result)</span><br><span class="line">df.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="Pandas-Bokeh"><a href="#Pandas-Bokeh" class="headerlink" title="Pandas-Bokeh"></a><a href="https://github.com/PatrikHlobil/Pandas-Bokeh">Pandas-Bokeh</a></h2><p>首先安装<code>pip install pandas-bokeh</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> pandas_bokeh</span><br><span class="line">pd.set_option(<span class="string">&#x27;plotting.backend&#x27;</span>, <span class="string">&#x27;pandas_bokeh&#x27;</span>)</span><br><span class="line">df = pd.DataFrame(result)</span><br><span class="line">df.plot_bokeh()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="Pandas-plotly"><a href="#Pandas-plotly" class="headerlink" title="Pandas-plotly"></a>Pandas-plotly</h2><h2 id="Pandas-hvplot"><a href="#Pandas-hvplot" class="headerlink" title="Pandas-hvplot"></a>Pandas-<a href="https://hvplot.holoviz.org/">hvplot</a></h2><p>hvPlot提供了基于HoloViews和Bokeh的高级绘图API</p>
<h2 id="Pyecharts"><a href="#Pyecharts" class="headerlink" title="Pyecharts"></a>Pyecharts</h2><p><a href="https://github.com/pyecharts">pyecharts</a>/<strong><a href="https://github.com/pyecharts/pyecharts">pyecharts</a></strong></p>
<p>支持交互，基于Echarts，运行后会生成个html在项目目录，要在浏览器打开就可以看到图标了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyecharts.options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line</span><br><span class="line">    x = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    y = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    line = (</span><br><span class="line">        Line()</span><br><span class="line">        .add_xaxis(x)</span><br><span class="line">        .add_yaxis(<span class="string">&quot;y&quot;</span>, y)</span><br><span class="line">    )</span><br><span class="line">    line.render()</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.pythonf.cn/read/36686">09-选择适合你的Python可视化工具</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客添加自定义模板</title>
    <url>/2018/01/30/script-nodejs-articletemplate/</url>
    <content><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>每次新建文章时都要新建文件然后复制文章头，或者复制其他文件，很麻烦，因此弄一个命令直接生产一个文件带模板</p>
<h3 id="脚本详解"><a href="#脚本详解" class="headerlink" title="脚本详解"></a>脚本详解</h3><p>前面几篇介绍过关于nodejs文件系统了这里就不介绍了，主要解释下脚本如何传参数</p>
<p><code>process.argv[2]</code>第一个参数，为什么是2,因为1是脚本文件本身所以第一个参数就是2，第二个参数就是3，依次叠加</p>
<p>关于文章默认创建时间以及更新时间都是以当前时间为准</p>
<h4 id="命令使用"><a href="#命令使用" class="headerlink" title="命令使用"></a>命令使用</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">filename &lt;参数1&gt; &lt;参数2&gt; &lt;参数4&gt;</span><br><span class="line"><span class="comment">#参数1 文件名也是标题名</span></span><br><span class="line"><span class="comment">#参数2 分类，也就是类别</span></span><br><span class="line"><span class="comment">#参数3 标签，多个用英文逗号分离</span></span><br><span class="line"><span class="comment">#当一个参数都没默认会创建一个空标题文件名为newfile.md的文件标签和分类默认也为空</span></span><br></pre></td></tr></table></figure>

<p>eg: 假设脚本文件名字为new执行<code>new 标题 java java,nodejs</code>会生成一个<code>标题.md文件</code>内容如下</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题</span><br><span class="line">date: 2018-01-30 00:07:03</span><br><span class="line">updated: 2018-01-30 00:23:06</span><br><span class="line">categories: java</span><br><span class="line">tags: [java,nodejs]</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h5 id="额外注意"><a href="#额外注意" class="headerlink" title="额外注意"></a>额外注意</h5><p><strong>如果脚本放的目录就是文章生产的目录，因此放入hexo时记得设置<code>.gitignore</code>不要让这个文件也被上传编译了</strong></p>
<h6 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过改模板快速创建文章</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="comment">title: WSL使用ssh</span></span><br><span class="line"><span class="comment">date: 2017-11-22 22:12:28</span></span><br><span class="line"><span class="comment">updated: 2018-01-30 00:23:06</span></span><br><span class="line"><span class="comment">categories: WSL</span></span><br><span class="line"><span class="comment">tags: [ssh,ubuntu,sshd]</span></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;开始创建文章&quot;</span>);</span><br><span class="line"><span class="comment">//取第一个参数，因为1被脚本自己本身占用，所以这里是2</span></span><br><span class="line"><span class="keyword">var</span> title=process.argv[<span class="number">2</span>]?process.argv[<span class="number">2</span>]:<span class="string">&quot;&quot;</span>;  <span class="comment">//标题也是文件名</span></span><br><span class="line"><span class="keyword">var</span> categories=process.argv[<span class="number">3</span>]?process.argv[<span class="number">3</span>]:<span class="string">&quot;&quot;</span>;  <span class="comment">//分类</span></span><br><span class="line"><span class="keyword">var</span> tags=process.argv[<span class="number">4</span>]?process.argv[<span class="number">4</span>]:<span class="string">&quot;&quot;</span>;  <span class="comment">//标签 英文逗号分离</span></span><br><span class="line"><span class="keyword">var</span> filename=process.argv[<span class="number">2</span>]?process.argv[<span class="number">2</span>]:<span class="string">&quot;newfile&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>); <span class="comment">//请求文件系统</span></span><br><span class="line"><span class="keyword">var</span> template=[];</span><br><span class="line">template.push(<span class="string">&#x27;---&#x27;</span>+<span class="string">&#x27;\r&#x27;</span>);</span><br><span class="line">template.push(<span class="string">&#x27;title: &#x27;</span>+title+<span class="string">&#x27;\r&#x27;</span>);</span><br><span class="line">template.push(<span class="string">&#x27;date: &#x27;</span>+getFormatDate(<span class="built_in">Date</span>.now())+<span class="string">&#x27;\r&#x27;</span>);</span><br><span class="line">template.push(<span class="string">&#x27;updated: &#x27;</span>+getFormatDate(<span class="built_in">Date</span>.now())+<span class="string">&#x27;\r&#x27;</span>);</span><br><span class="line">template.push(<span class="string">&#x27;categories: &#x27;</span>+categories+<span class="string">&#x27;\r&#x27;</span>);</span><br><span class="line">template.push(<span class="string">&#x27;tags: [&#x27;</span>+tags+<span class="string">&#x27;]&#x27;</span>+<span class="string">&#x27;\r&#x27;</span>);</span><br><span class="line">template.push(<span class="string">&#x27;---&#x27;</span>+<span class="string">&#x27;\r&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> result=template.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">fs.writeFile(filename+<span class="string">&#x27;.md&#x27;</span>, result, <span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="comment">//写入新的文件内容</span></span><br><span class="line">				<span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;写文件错误：&quot;</span>,err);</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&quot;创建&quot;</span>+title+<span class="string">&quot;.md文件成功：&quot;</span>,result);</span><br><span class="line">			&#125;);</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> timeStr:时间，格式可为：&quot;September 16,2016 14:15:05、</span></span><br><span class="line"><span class="comment"> &quot;September 16,2016&quot;、&quot;2016/09/16 14:15:05&quot;、&quot;2016/09/16&quot;、</span></span><br><span class="line"><span class="comment"> &#x27;2014-04-23T18:55:49&#x27;和毫秒</span></span><br><span class="line"><span class="comment"> dateSeparator：年、月、日之间的分隔符，默认为&quot;-&quot;，</span></span><br><span class="line"><span class="comment"> timeSeparator：时、分、秒之间的分隔符，默认为&quot;:&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFormatDate</span>(<span class="params">timeStr, dateSeparator, timeSeparator</span>) </span>&#123;</span><br><span class="line">    dateSeparator = dateSeparator ? dateSeparator : <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    timeSeparator = timeSeparator ? timeSeparator : <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(timeStr),</span><br><span class="line">            year = date.getFullYear(),<span class="comment">// 获取完整的年份(4位,1970)</span></span><br><span class="line">            month = date.getMonth(),<span class="comment">// 获取月份(0-11,0代表1月,用的时候记得加上1)</span></span><br><span class="line">            day = date.getDate(),<span class="comment">// 获取日(1-31)</span></span><br><span class="line">            hour = date.getHours(),<span class="comment">// 获取小时数(0-23)</span></span><br><span class="line">            minute = date.getMinutes(),<span class="comment">// 获取分钟数(0-59)</span></span><br><span class="line">            seconds = date.getSeconds(),<span class="comment">// 获取秒数(0-59)</span></span><br><span class="line">            Y = year + dateSeparator,</span><br><span class="line">            M = ((month + <span class="number">1</span>) &gt; <span class="number">9</span> ? (month + <span class="number">1</span>) : (<span class="string">&#x27;0&#x27;</span> + (month + <span class="number">1</span>))) + dateSeparator,</span><br><span class="line">            D = (day &gt; <span class="number">9</span> ? day : (<span class="string">&#x27;0&#x27;</span> + day)) + <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">            h = (hour &gt; <span class="number">9</span> ? hour : (<span class="string">&#x27;0&#x27;</span> + hour)) + timeSeparator,</span><br><span class="line">            m = (minute &gt; <span class="number">9</span> ? minute : (<span class="string">&#x27;0&#x27;</span> + minute)) + timeSeparator,</span><br><span class="line">            s = (seconds &gt; <span class="number">9</span> ? seconds : (<span class="string">&#x27;0&#x27;</span> + seconds)),</span><br><span class="line">            formatDate = Y + M + D + h + m + s;</span><br><span class="line">    <span class="keyword">return</span> formatDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>script</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>script</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Script-nodejs-updateEncode</title>
    <url>/2018/05/03/script-nodejs-updateencode/</url>
    <content><![CDATA[<p>有bugbug。。。。。。。。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">批量修改文件编码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;开始修改文件编码&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> fs= <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">//---------同步----------------</span></span><br><span class="line"><span class="keyword">var</span> files =fs.readdirSync(<span class="string">&quot;./&quot;</span>);</span><br><span class="line">files.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">filename</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> stats=fs.statSync(filename);</span><br><span class="line">  <span class="built_in">console</span>.log(filename+<span class="string">&quot;文件状态&quot;</span>,stats);</span><br><span class="line">  <span class="comment">//if(stats.isDirectory()) filename +=&#x27;/&#x27;;</span></span><br><span class="line">  <span class="comment">//process.</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//----------异步------------------</span></span><br><span class="line">fs.readdir(<span class="string">&quot;./&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,files</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len=files.length;</span><br><span class="line">  <span class="keyword">var</span> file=<span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">    file=files[i];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;读取文件&quot;</span>,file);</span><br><span class="line">    <span class="keyword">var</span> stats=fs.stat(file);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;文件状态&quot;</span>,stats);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">批量修改文件编码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;开始修改文件编码&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> jschardet = <span class="built_in">require</span>(<span class="string">&quot;jschardet&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="string">&quot;node_modules/jschardet&quot;</span>;</span><br><span class="line">readDir(path);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">修改文件编码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readDir</span>(<span class="params">dirPath</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;目录:&quot;</span>,dirPath);</span><br><span class="line">    <span class="keyword">var</span> files = fs.readdirSync(dirPath);</span><br><span class="line">    files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> filepath = dirPath +<span class="string">&quot;/&quot;</span>+file;</span><br><span class="line">        <span class="keyword">var</span> stats = fs.statSync(filepath);</span><br><span class="line">        <span class="comment">//console.log(filename+&quot;文件状态&quot;,stats);</span></span><br><span class="line">        <span class="keyword">if</span> (stats.isFile()) &#123;</span><br><span class="line">            <span class="keyword">var</span> buff = fs.readFileSync(file);</span><br><span class="line">            <span class="keyword">var</span> info = jschardet.detect(buff);</span><br><span class="line">            <span class="built_in">console</span>.log(filename + <span class="string">&quot;文件编码&quot;</span>, info);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stats.isDirectory()) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;目录&quot;</span> + filepath);</span><br><span class="line">            readDir(filepath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>script</category>
      </categories>
      <tags>
        <tag>script</tag>
        <tag>nodejs</tag>
        <tag>file</tag>
      </tags>
  </entry>
  <entry>
    <title>自动更新文章的修改时间</title>
    <url>/2018/01/29/script-nodejs-updatefiletime/</url>
    <content><![CDATA[<h3 id="前提介绍"><a href="#前提介绍" class="headerlink" title="前提介绍"></a>前提介绍</h3><p>上篇介绍了<strong>批量写入文件的修改时间</strong>用于hexo博客的初始化，这篇是在上篇基础上添加的新需求</p>
<p>上篇有的方法这篇就不介绍了</p>
<h4 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h4><p>由于每次修改了文章，都要改文章的头部的更新时间，如此机械的事当然要交给程序来做啦，因此写了此脚本</p>
<h4 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h4><ol>
<li><p>更新文章更新时间脚本逻辑<code>updateFileTime.nodejs</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">a[遍历文章目录]--&gt;b[读取文件内容]</span><br><span class="line">b--&gt;c[读取文间修改时间]</span><br><span class="line">link--&gt;d[文件修改时间和文章时间比较]</span><br><span class="line">d--&gt;|满足条件|f[替换文章更新时间为文件修改时间]</span><br><span class="line">link2--&gt;g[最后修改回文件的修改时间和访问时间]</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行脚本<code>update.sh</code>，用于一键推送发布博客</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">  c[脚本updateFileTime.nodejs]--&gt;a[本地git]</span><br><span class="line">  a--&gt;|git推送|f[github仓库hexo分支]</span><br><span class="line">  link--&gt;|hexo编译|b[travis]</span><br><span class="line">  b--&gt;|部署|g[github.io]</span><br></pre></td></tr></table></figure>

<h3 id="脚本内容解读"><a href="#脚本内容解读" class="headerlink" title="脚本内容解读"></a>脚本内容解读</h3><h5 id="updateFileTime-nodejs脚本"><a href="#updateFileTime-nodejs脚本" class="headerlink" title="updateFileTime.nodejs脚本"></a><code>updateFileTime.nodejs</code>脚本</h5><p>匹配文章<code>updated: 2018-04-25 20:47:32</code>字段的正则表达式RegExp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(updated:\s*)((\d&#123;2&#125;(([02468][048])|([13579][26]))[\-\&#x2F;\s]?((((0?[13578])|(1[02]))[\-\&#x2F;\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\&#x2F;\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\&#x2F;\s]?((0?[1-9])|([1-2][0-9])))))|(\d&#123;2&#125;(([02468][1235679])|([13579][01345789]))[\-\&#x2F;\s]?((((0?[13578])|(1[02]))[\-\&#x2F;\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\&#x2F;\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\&#x2F;\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\s((([0-1][0-9])|(2?[0-3]))\:([0-5]?[0-9])((\s)|(\:([0-5]?[0-9])))))</span><br></pre></td></tr></table></figure>

<p>脚本用到的主要方法有</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data;<span class="comment">//文章内容</span></span><br><span class="line"><span class="built_in">RegExp</span>.test(data);<span class="comment">//文章内容包含正则匹配的内容返回true，没有false</span></span><br><span class="line"> <span class="comment">//取出正则匹配到的值，返回是数组[&#x27;updated: 2018-04-25 20:47:32&#x27;]</span></span><br><span class="line"><span class="keyword">var</span> updateds=data.match(<span class="built_in">RegExp</span>);</span><br><span class="line"><span class="comment">//时间格式化为2018/01/29 21:33:30，因为这样就可以通过Date.parse()得到时间了</span></span><br><span class="line"><span class="keyword">var</span> updated=updateds[<span class="number">0</span>].replace(<span class="string">&quot;updated: &quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="regexp">/-/g</span>,<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="comment">//修改文件的状态信息，防止该脚本更改修改时间，导致后来修改时间不准确</span></span><br><span class="line"><span class="comment">//其实文件内容变了，但并不会记录此脚本的改的记录，因此要重新打开文章才会发现时间改变</span></span><br><span class="line">fs.utimes(file,atime,mtime,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;&#125;);<span class="comment">//atime访问时间，mtime修改时间</span></span><br></pre></td></tr></table></figure>

<h5 id="updateFileTime-nodejs脚本内容"><a href="#updateFileTime-nodejs脚本内容" class="headerlink" title="updateFileTime.nodejs脚本内容"></a><code>updateFileTime.nodejs</code>脚本内容</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">批量更新修改时间</span></span><br><span class="line"><span class="comment">用于bolg自动更新修改时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;文件创建时间读取并写入文件指定字段demo&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>); <span class="comment">//请求文件系统</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="string">&quot;./txt&quot;</span>; <span class="comment">//设置读取和写入的文件，当前目录下的test文件</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">RegExp</span>=<span class="regexp">/(updated:\s*)((\d&#123;2&#125;(([02468][048])|([13579][26]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|([1-2][0-9])))))|(\d&#123;2&#125;(([02468][1235679])|([13579][01345789]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\s((([0-1][0-9])|(2?[0-3]))\:([0-5]?[0-9])((\s)|(\:([0-5]?[0-9])))))/g</span>;</span><br><span class="line"></span><br><span class="line">fs.readdir(<span class="string">&quot;./&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,files</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> len=files.length;</span><br><span class="line">	<span class="keyword">var</span> file=<span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">		file=files[i];</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&quot;读取文件：&quot;</span>,file);</span><br><span class="line">		<span class="keyword">if</span>(file.indexOf(<span class="string">&quot;.md&quot;</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&quot;处理文件：&quot;</span>,file);</span><br><span class="line">			writeFileTime(file,fs);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">file:读取时间的文件以及写入内容的文件</span></span><br><span class="line"><span class="comment">fs: 文件系统</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeFileTime</span>(<span class="params">file,fs</span>)</span>&#123;</span><br><span class="line">	fs.readFile(file, <span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123; <span class="comment">//读取文件内容</span></span><br><span class="line">		<span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;读取文件内容错误：&quot;</span>,err);</span><br><span class="line">		<span class="comment">//console.log(&quot;文件&quot;+file+&quot;的内容：&quot;,data);</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">RegExp</span>.test(data))&#123; <span class="comment">//如果有匹配的字符串则进去</span></span><br><span class="line">			fs.stat(file,<span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>) </span>&#123; <span class="comment">//读取文件信息，创建时间等</span></span><br><span class="line">				<span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;读取文件信息错误：&quot;</span>,err);</span><br><span class="line">				<span class="keyword">var</span> updateds=data.match(<span class="built_in">RegExp</span>);</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&quot;updated数组:&quot;</span>,updateds);</span><br><span class="line">				<span class="keyword">if</span>(updateds.length&gt;<span class="number">1</span>) <span class="built_in">console</span>.log(<span class="string">&quot;文件&quot;</span>+file+<span class="string">&quot;匹配到多处update字段&quot;</span>);</span><br><span class="line">				<span class="keyword">var</span> updated=updateds[<span class="number">0</span>].replace(<span class="string">&quot;updated: &quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="regexp">/-/g</span>,<span class="string">&quot;/&quot;</span>);  <span class="comment">//时间格式化为2018/01/29 21:33:30</span></span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&quot;updated:&quot;</span>,updated);</span><br><span class="line">				<span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">Date</span>(stats.mtime).getTime()-<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(updated))&gt;<span class="number">1000</span>*<span class="number">60</span>*<span class="number">5</span>)&#123;</span><br><span class="line">					<span class="keyword">var</span> result= data.replace(<span class="built_in">RegExp</span>,<span class="string">&quot;updated: &quot;</span>+getFormatDate(stats.mtime)); <span class="comment">//替换更新时间</span></span><br><span class="line">					fs.writeFile(file, result, <span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="comment">//写入新的文件内容</span></span><br><span class="line">						<span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;写文件错误：&quot;</span>,err);</span><br><span class="line">						fs.utimes(file,<span class="keyword">new</span> <span class="built_in">Date</span>(stats.atime),<span class="keyword">new</span> <span class="built_in">Date</span>(stats.mtime),<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;  <span class="comment">//还原访问时间和修改时间</span></span><br><span class="line">							<span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;修改时间失败：&quot;</span>,err);</span><br><span class="line">							<span class="built_in">console</span>.log(file,<span class="string">&quot;成功更新时间&quot;</span>);</span><br><span class="line">						&#125;);</span><br><span class="line">					&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> timeStr:时间，格式可为：&quot;September 16,2016 14:15:05、</span></span><br><span class="line"><span class="comment"> &quot;September 16,2016&quot;、&quot;2016/09/16 14:15:05&quot;、&quot;2016/09/16&quot;、</span></span><br><span class="line"><span class="comment"> &#x27;2014-04-23T18:55:49&#x27;和毫秒</span></span><br><span class="line"><span class="comment"> dateSeparator：年、月、日之间的分隔符，默认为&quot;-&quot;，</span></span><br><span class="line"><span class="comment"> timeSeparator：时、分、秒之间的分隔符，默认为&quot;:&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFormatDate</span>(<span class="params">timeStr, dateSeparator, timeSeparator</span>) </span>&#123;</span><br><span class="line">    dateSeparator = dateSeparator ? dateSeparator : <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    timeSeparator = timeSeparator ? timeSeparator : <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(timeStr),</span><br><span class="line">            year = date.getFullYear(),<span class="comment">// 获取完整的年份(4位,1970)</span></span><br><span class="line">            month = date.getMonth(),<span class="comment">// 获取月份(0-11,0代表1月,用的时候记得加上1)</span></span><br><span class="line">            day = date.getDate(),<span class="comment">// 获取日(1-31)</span></span><br><span class="line">            hour = date.getHours(),<span class="comment">// 获取小时数(0-23)</span></span><br><span class="line">            minute = date.getMinutes(),<span class="comment">// 获取分钟数(0-59)</span></span><br><span class="line">            seconds = date.getSeconds(),<span class="comment">// 获取秒数(0-59)</span></span><br><span class="line">            Y = year + dateSeparator,</span><br><span class="line">            M = ((month + <span class="number">1</span>) &gt; <span class="number">9</span> ? (month + <span class="number">1</span>) : (<span class="string">&#x27;0&#x27;</span> + (month + <span class="number">1</span>))) + dateSeparator,</span><br><span class="line">            D = (day &gt; <span class="number">9</span> ? day : (<span class="string">&#x27;0&#x27;</span> + day)) + <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">            h = (hour &gt; <span class="number">9</span> ? hour : (<span class="string">&#x27;0&#x27;</span> + hour)) + timeSeparator,</span><br><span class="line">            m = (minute &gt; <span class="number">9</span> ? minute : (<span class="string">&#x27;0&#x27;</span> + minute)) + timeSeparator,</span><br><span class="line">            s = (seconds &gt; <span class="number">9</span> ? seconds : (<span class="string">&#x27;0&#x27;</span> + seconds)),</span><br><span class="line">            formatDate = Y + M + D + h + m + s;</span><br><span class="line">    <span class="keyword">return</span> formatDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="update-sh脚本"><a href="#update-sh脚本" class="headerlink" title="update.sh脚本"></a><code>update.sh</code>脚本</h5><p>由于懒得去设置目录，就直接cd切换过去，再切换回来把</p>
<p>其中<code>&quot;$*&quot;</code> 表示介绍所有参数，例如<code>./update.sh 我是提交信息 哈哈哈哈</code>就会被传递到<code>git commit -m &quot;我是提交信息 哈哈哈哈&quot;</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">source</span>/_posts/ &amp;&amp; ./updateFileTime.nodejs &amp;&amp; <span class="built_in">cd</span> .. &amp;&amp; <span class="built_in">cd</span> .. &amp;&amp; git add --all &amp;&amp; git commit -m <span class="string">&quot;$*&quot;</span> &amp;&amp; git push origin hexo</span><br></pre></td></tr></table></figure>



<h3 id="更新优化版本，添加图片自动更新链接，以及优化为同步和异步两个版本"><a href="#更新优化版本，添加图片自动更新链接，以及优化为同步和异步两个版本" class="headerlink" title="更新优化版本，添加图片自动更新链接，以及优化为同步和异步两个版本"></a>更新优化版本，添加图片自动更新链接，以及优化为同步和异步两个版本</h3><p>同步版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">同步版本</span></span><br><span class="line"><span class="comment">批量更新修改时间</span></span><br><span class="line"><span class="comment">用于bolg自动更新修改时间</span></span><br><span class="line"><span class="comment">批量替换本地链接为网络链接，使用七牛图床</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;开始检测更新时间和图片&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>); <span class="comment">//请求文件系统</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="string">&quot;./txt&quot;</span>; <span class="comment">//设置读取和写入的文件，当前目录下的test文件</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">RegExp</span>=<span class="regexp">/(updated:\s*)((\d&#123;2&#125;(([02468][048])|([13579][26]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|([1-2][0-9])))))|(\d&#123;2&#125;(([02468][1235679])|([13579][01345789]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\s((([0-1][0-9])|(2?[0-3]))\:([0-5]?[0-9])((\s)|(\:([0-5]?[0-9])))))/g</span>;</span><br><span class="line"><span class="keyword">var</span> imgReg=<span class="regexp">/\!\[[\s\S]*?\]\([\s\S]*?\)/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> files= fs.readdirSync(<span class="string">&quot;./&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> len=files.length;</span><br><span class="line"><span class="keyword">var</span> file=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">	file=files[i];</span><br><span class="line">	<span class="comment">//console.log(&quot;读取文件：&quot;,file);</span></span><br><span class="line">	<span class="keyword">if</span>(file.indexOf(<span class="string">&quot;.md&quot;</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="comment">//console.log(&quot;处理文件：&quot;,file);</span></span><br><span class="line">		writeFileTime(file,fs);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">file:读取时间的文件以及写入内容的文件</span></span><br><span class="line"><span class="comment">fs: 文件系统</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeFileTime</span>(<span class="params">file,fs</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> data = fs.readFileSync(file, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">RegExp</span>.test(data))&#123; <span class="comment">//如果有匹配的字符串则进去</span></span><br><span class="line">		<span class="keyword">var</span> stats= fs.statSync(file);</span><br><span class="line">		<span class="keyword">var</span> updateds=data.match(<span class="built_in">RegExp</span>);</span><br><span class="line">	    <span class="keyword">var</span> updated=updateds[<span class="number">0</span>].replace(<span class="string">&quot;updated: &quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="regexp">/-/g</span>,<span class="string">&quot;/&quot;</span>);  <span class="comment">//时间格式化为2018/01/29 21:33:30</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">Date</span>(stats.mtime).getTime()-<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(updated))&gt;<span class="number">1000</span>*<span class="number">60</span>*<span class="number">5</span>)&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(file,<span class="string">&quot;时间处理：&quot;</span>+updateds[<span class="number">0</span>]);</span><br><span class="line">			<span class="keyword">var</span> result= data.replace(updateds[<span class="number">0</span>],<span class="string">&quot;updated: &quot;</span>+getFormatDate(stats.mtime)); <span class="comment">//替换更新时间</span></span><br><span class="line">			fs.writeFileSync(file, result, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">			fs.utimesSync(file,<span class="keyword">new</span> <span class="built_in">Date</span>(stats.atime),<span class="keyword">new</span> <span class="built_in">Date</span>(stats.mtime));</span><br><span class="line">			<span class="built_in">console</span>.log(file,<span class="string">&quot;成功更新时间:&quot;</span>+updateds[<span class="number">0</span>].replace(updateds[<span class="number">0</span>],<span class="string">&quot;updated: &quot;</span>+getFormatDate(stats.mtime)));</span><br><span class="line">		&#125;			</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(imgReg.test(data))&#123; <span class="comment">//匹配markdown图片</span></span><br><span class="line">		<span class="built_in">console</span>.log(file,<span class="string">&quot;开始处理图片&quot;</span>);</span><br><span class="line">		<span class="keyword">var</span> imgpaths=data.match(imgReg);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i = imgpaths.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">var</span> imgpath=imgpaths[i];</span><br><span class="line">			<span class="built_in">console</span>.log(imgpath);</span><br><span class="line">			<span class="keyword">if</span> (imgpath.indexOf(<span class="string">&quot;xuanfong1.github.io\\source\\_posts\\image&quot;</span>)!=-<span class="number">1</span>) &#123;</span><br><span class="line">				<span class="built_in">console</span>.log(file,<span class="string">&quot;处理:&quot;</span>+imgpath);</span><br><span class="line">				<span class="keyword">var</span> filenametemp= imgpath.split(<span class="string">&#x27;\\&#x27;</span>).pop();</span><br><span class="line">				<span class="keyword">var</span> filename=filenametemp.slice(<span class="number">0</span>,filenametemp.length-<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">var</span> result=data.replace(imgpath,<span class="string">&quot;![](https://raw.githubusercontent.com/xuanfong1/xuanfong1.github.io/master/image/src_dir/&quot;</span>+filename+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">				fs.writeFileSync(file, result, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&quot;成功替换：&quot;</span>+imgpath.replace(imgpath,<span class="string">&quot;![](http://ohdtoul5i.bkt.clouddn.com/&quot;</span>+filename+<span class="string">&quot;)&quot;</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (imgpath.indexOf(<span class="string">&quot;xuanfong1.github.io/source/_posts/image&quot;</span>)!=-<span class="number">1</span>) &#123;</span><br><span class="line">				<span class="built_in">console</span>.log(file,<span class="string">&quot;处理:&quot;</span>+imgpath);</span><br><span class="line">				<span class="keyword">var</span> filenametemp= imgpath.split(<span class="string">&#x27;/&#x27;</span>).pop();</span><br><span class="line">				<span class="keyword">var</span> filename=filenametemp.slice(<span class="number">0</span>,filenametemp.length-<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">var</span> result=data.replace(imgpath,<span class="string">&quot;![](http://ohdtoul5i.bkt.clouddn.com/&quot;</span>+filename+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">				fs.writeFileSync(file, result, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&quot;成功替换：&quot;</span>+imgpath.replace(imgpath,<span class="string">&quot;![](http://ohdtoul5i.bkt.clouddn.com/&quot;</span>+filename+<span class="string">&quot;)&quot;</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> timeStr:时间，格式可为：&quot;September 16,2016 14:15:05、</span></span><br><span class="line"><span class="comment"> &quot;September 16,2016&quot;、&quot;2016/09/16 14:15:05&quot;、&quot;2016/09/16&quot;、</span></span><br><span class="line"><span class="comment"> &#x27;2014-04-23T18:55:49&#x27;和毫秒</span></span><br><span class="line"><span class="comment"> dateSeparator：年、月、日之间的分隔符，默认为&quot;-&quot;，</span></span><br><span class="line"><span class="comment"> timeSeparator：时、分、秒之间的分隔符，默认为&quot;:&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFormatDate</span>(<span class="params">timeStr, dateSeparator, timeSeparator</span>) </span>&#123;</span><br><span class="line">    dateSeparator = dateSeparator ? dateSeparator : <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    timeSeparator = timeSeparator ? timeSeparator : <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(timeStr),</span><br><span class="line">            year = date.getFullYear(),<span class="comment">// 获取完整的年份(4位,1970)</span></span><br><span class="line">            month = date.getMonth(),<span class="comment">// 获取月份(0-11,0代表1月,用的时候记得加上1)</span></span><br><span class="line">            day = date.getDate(),<span class="comment">// 获取日(1-31)</span></span><br><span class="line">            hour = date.getHours(),<span class="comment">// 获取小时数(0-23)</span></span><br><span class="line">            minute = date.getMinutes(),<span class="comment">// 获取分钟数(0-59)</span></span><br><span class="line">            seconds = date.getSeconds(),<span class="comment">// 获取秒数(0-59)</span></span><br><span class="line">            Y = year + dateSeparator,</span><br><span class="line">            M = ((month + <span class="number">1</span>) &gt; <span class="number">9</span> ? (month + <span class="number">1</span>) : (<span class="string">&#x27;0&#x27;</span> + (month + <span class="number">1</span>))) + dateSeparator,</span><br><span class="line">            D = (day &gt; <span class="number">9</span> ? day : (<span class="string">&#x27;0&#x27;</span> + day)) + <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">            h = (hour &gt; <span class="number">9</span> ? hour : (<span class="string">&#x27;0&#x27;</span> + hour)) + timeSeparator,</span><br><span class="line">            m = (minute &gt; <span class="number">9</span> ? minute : (<span class="string">&#x27;0&#x27;</span> + minute)) + timeSeparator,</span><br><span class="line">            s = (seconds &gt; <span class="number">9</span> ? seconds : (<span class="string">&#x27;0&#x27;</span> + seconds)),</span><br><span class="line">            formatDate = Y + M + D + h + m + s;</span><br><span class="line">    <span class="keyword">return</span> formatDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>异步版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">异步版本</span></span><br><span class="line"><span class="comment">批量更新修改时间</span></span><br><span class="line"><span class="comment">用于bolg自动更新修改时间</span></span><br><span class="line"><span class="comment">批量替换本地链接为网络链接，使用七牛图床</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;开始检测更新时间和图片&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>); <span class="comment">//请求文件系统</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="string">&quot;./txt&quot;</span>; <span class="comment">//设置读取和写入的文件，当前目录下的test文件</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">RegExp</span>=<span class="regexp">/(updated:\s*)((\d&#123;2&#125;(([02468][048])|([13579][26]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|([1-2][0-9])))))|(\d&#123;2&#125;(([02468][1235679])|([13579][01345789]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\s((([0-1][0-9])|(2?[0-3]))\:([0-5]?[0-9])((\s)|(\:([0-5]?[0-9])))))/g</span>;</span><br><span class="line"><span class="keyword">var</span> imgReg=<span class="regexp">/\!\[[\s\S]*?\]\([\s\S]*?\)/g</span>;</span><br><span class="line"></span><br><span class="line">fs.readdir(<span class="string">&quot;./&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,files</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> len=files.length;</span><br><span class="line">	<span class="keyword">var</span> file=<span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">		file=files[i];</span><br><span class="line">		<span class="comment">//console.log(&quot;读取文件：&quot;,file);</span></span><br><span class="line">		<span class="keyword">if</span>(file.indexOf(<span class="string">&quot;.md&quot;</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="comment">//console.log(&quot;处理文件：&quot;,file);</span></span><br><span class="line">			writeFileTime(file,fs);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">file:读取时间的文件以及写入内容的文件</span></span><br><span class="line"><span class="comment">fs: 文件系统</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeFileTime</span>(<span class="params">file,fs</span>)</span>&#123;</span><br><span class="line">	fs.readFile(file, <span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123; <span class="comment">//读取文件内容</span></span><br><span class="line">		<span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;读取文件内容错误：&quot;</span>,err);</span><br><span class="line">		<span class="comment">//console.log(&quot;文件&quot;+file+&quot;的内容：&quot;,data);</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">RegExp</span>.test(data))&#123; <span class="comment">//如果有匹配的字符串则进去</span></span><br><span class="line">			fs.stat(file,<span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>) </span>&#123; <span class="comment">//读取文件信息，创建时间等</span></span><br><span class="line">				<span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;读取文件信息错误：&quot;</span>,err);</span><br><span class="line">				<span class="keyword">var</span> updateds=data.match(<span class="built_in">RegExp</span>);</span><br><span class="line">				<span class="comment">//console.log(&quot;updated数组:&quot;,updateds);</span></span><br><span class="line">				<span class="comment">//if(updateds.length&gt;1) console.log(&quot;文件&quot;+file+&quot;匹配到多处update字段&quot;);</span></span><br><span class="line">				<span class="keyword">var</span> updated=updateds[<span class="number">0</span>].replace(<span class="string">&quot;updated: &quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="regexp">/-/g</span>,<span class="string">&quot;/&quot;</span>);  <span class="comment">//时间格式化为2018/01/29 21:33:30</span></span><br><span class="line">				<span class="comment">//console.log(&quot;updated:&quot;,updated);</span></span><br><span class="line">				<span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">Date</span>(stats.mtime).getTime()-<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(updated))&gt;<span class="number">1000</span>*<span class="number">60</span>*<span class="number">5</span>)&#123;</span><br><span class="line">					<span class="built_in">console</span>.log(file,<span class="string">&quot;时间处理：&quot;</span>+updateds[<span class="number">0</span>]);</span><br><span class="line">					<span class="keyword">var</span> result= data.replace(updateds[<span class="number">0</span>],<span class="string">&quot;updated: &quot;</span>+getFormatDate(stats.mtime)); <span class="comment">//替换更新时间</span></span><br><span class="line">					fs.writeFile(file, result, <span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="comment">//写入新的文件内容</span></span><br><span class="line">						<span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;写文件错误：&quot;</span>,err);</span><br><span class="line">						fs.utimes(file,<span class="keyword">new</span> <span class="built_in">Date</span>(stats.atime),<span class="keyword">new</span> <span class="built_in">Date</span>(stats.mtime),<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;  <span class="comment">//还原访问时间和修改时间</span></span><br><span class="line">							<span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;修改时间失败：&quot;</span>,err);</span><br><span class="line">							<span class="built_in">console</span>.log(<span class="string">&quot;成功更新时间:&quot;</span>+updateds[<span class="number">0</span>].replace(updateds[<span class="number">0</span>],<span class="string">&quot;updated: &quot;</span>+getFormatDate(stats.mtime)));</span><br><span class="line">						&#125;);</span><br><span class="line">					&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(imgReg.test(data))&#123; <span class="comment">//匹配markdown图片</span></span><br><span class="line">			<span class="keyword">var</span> imgpaths=data.match(imgReg);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">var</span> i = imgpaths.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">				<span class="keyword">var</span> imgpath=imgpaths[i];</span><br><span class="line">				<span class="keyword">if</span> (imgpath.indexOf(<span class="string">&quot;xuanfong1.github.io\\source\\_posts\\image&quot;</span>)!=-<span class="number">1</span> || imgpath.indexOf(<span class="string">&quot;xuanfong1.github.io/source/_posts/image&quot;</span>)!=-<span class="number">1</span>) &#123;</span><br><span class="line">					<span class="built_in">console</span>.log(file,<span class="string">&quot;处理:&quot;</span>+imgpath);</span><br><span class="line">					<span class="keyword">var</span> filenametemp= imgpath.split(<span class="string">&#x27;\\&#x27;</span>).pop();</span><br><span class="line">					<span class="keyword">var</span> filename=filenametemp.slice(<span class="number">0</span>,filenametemp.length-<span class="number">1</span>);</span><br><span class="line">					<span class="keyword">var</span> result=data.replace(imgpath,<span class="string">&quot;![](http://ohdtoul5i.bkt.clouddn.com/&quot;</span>+filename+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">					fs.writeFile(file, result, <span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="comment">//写入新的文件内容</span></span><br><span class="line">						<span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;写文件错误：&quot;</span>,err);</span><br><span class="line">						<span class="built_in">console</span>.log(<span class="string">&quot;成功替换：&quot;</span>+imgpath.replace(imgpath,<span class="string">&quot;![](http://ohdtoul5i.bkt.clouddn.com/&quot;</span>+filename+<span class="string">&quot;)&quot;</span>));</span><br><span class="line">					&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (imgpath.indexOf(imgpath.indexOf(<span class="string">&quot;xuanfong1.github.io/source/_posts/image&quot;</span>)!=-<span class="number">1</span>) &#123;</span><br><span class="line">					<span class="built_in">console</span>.log(file,<span class="string">&quot;处理:&quot;</span>+imgpath);</span><br><span class="line">					<span class="keyword">var</span> filenametemp= imgpath.split(<span class="string">&#x27;/&#x27;</span>).pop();</span><br><span class="line">					<span class="keyword">var</span> filename=filenametemp.slice(<span class="number">0</span>,filenametemp.length-<span class="number">1</span>);</span><br><span class="line">					<span class="keyword">var</span> result=data.replace(imgpath,<span class="string">&quot;![](http://ohdtoul5i.bkt.clouddn.com/&quot;</span>+filename+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">					fs.writeFile(file, result, <span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="comment">//写入新的文件内容</span></span><br><span class="line">						<span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;写文件错误：&quot;</span>,err);</span><br><span class="line">						<span class="built_in">console</span>.log(<span class="string">&quot;成功替换：&quot;</span>+imgpath.replace(imgpath,<span class="string">&quot;![](http://ohdtoul5i.bkt.clouddn.com/&quot;</span>+filename+<span class="string">&quot;)&quot;</span>));</span><br><span class="line">					&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> timeStr:时间，格式可为：&quot;September 16,2016 14:15:05、</span></span><br><span class="line"><span class="comment"> &quot;September 16,2016&quot;、&quot;2016/09/16 14:15:05&quot;、&quot;2016/09/16&quot;、</span></span><br><span class="line"><span class="comment"> &#x27;2014-04-23T18:55:49&#x27;和毫秒</span></span><br><span class="line"><span class="comment"> dateSeparator：年、月、日之间的分隔符，默认为&quot;-&quot;，</span></span><br><span class="line"><span class="comment"> timeSeparator：时、分、秒之间的分隔符，默认为&quot;:&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFormatDate</span>(<span class="params">timeStr, dateSeparator, timeSeparator</span>) </span>&#123;</span><br><span class="line">    dateSeparator = dateSeparator ? dateSeparator : <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    timeSeparator = timeSeparator ? timeSeparator : <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(timeStr),</span><br><span class="line">            year = date.getFullYear(),<span class="comment">// 获取完整的年份(4位,1970)</span></span><br><span class="line">            month = date.getMonth(),<span class="comment">// 获取月份(0-11,0代表1月,用的时候记得加上1)</span></span><br><span class="line">            day = date.getDate(),<span class="comment">// 获取日(1-31)</span></span><br><span class="line">            hour = date.getHours(),<span class="comment">// 获取小时数(0-23)</span></span><br><span class="line">            minute = date.getMinutes(),<span class="comment">// 获取分钟数(0-59)</span></span><br><span class="line">            seconds = date.getSeconds(),<span class="comment">// 获取秒数(0-59)</span></span><br><span class="line">            Y = year + dateSeparator,</span><br><span class="line">            M = ((month + <span class="number">1</span>) &gt; <span class="number">9</span> ? (month + <span class="number">1</span>) : (<span class="string">&#x27;0&#x27;</span> + (month + <span class="number">1</span>))) + dateSeparator,</span><br><span class="line">            D = (day &gt; <span class="number">9</span> ? day : (<span class="string">&#x27;0&#x27;</span> + day)) + <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">            h = (hour &gt; <span class="number">9</span> ? hour : (<span class="string">&#x27;0&#x27;</span> + hour)) + timeSeparator,</span><br><span class="line">            m = (minute &gt; <span class="number">9</span> ? minute : (<span class="string">&#x27;0&#x27;</span> + minute)) + timeSeparator,</span><br><span class="line">            s = (seconds &gt; <span class="number">9</span> ? seconds : (<span class="string">&#x27;0&#x27;</span> + seconds)),</span><br><span class="line">            formatDate = Y + M + D + h + m + s;</span><br><span class="line">    <span class="keyword">return</span> formatDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>script</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>script</tag>
        <tag>nodejs</tag>
        <tag>file</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>批量写入文件的修改时间</title>
    <url>/2018/01/28/script-nodejs-writefiletime/</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>系统：wsl</p>
<p>环境：nodejs</p>
<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol>
<li>创建脚本</li>
<li>编写脚本内容</li>
<li>修改脚本为执行文件<code>chmod +x scriptfilename</code></li>
</ol>
<h4 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h4><p>批量把文档的修改时间写入该文档的指定字段位置</p>
<h6 id="eg：添加hexo-文章的修改时间"><a href="#eg：添加hexo-文章的修改时间" class="headerlink" title="eg：添加hexo 文章的修改时间"></a>eg：添加hexo 文章的修改时间</h6><h5 id="脚本内容解读"><a href="#脚本内容解读" class="headerlink" title="脚本内容解读"></a>脚本内容解读</h5><p>file文件系统的主要方法解释</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>); <span class="comment">//请求文件系统</span></span><br><span class="line">fs.readdir(<span class="string">&quot;./&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,files</span>)</span>&#123;&#125;); <span class="comment">//读取./也就是当前目录的所有文件</span></span><br><span class="line">fs.readFile(file, <span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;&#125;); <span class="comment">//读取&quot;file&quot;文件内容data</span></span><br><span class="line">fs.stat(file,<span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>) </span>&#123;&#125;); <span class="comment">//读取文件信息，创建时间等</span></span><br><span class="line">fs.writeFile(file, result, <span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;&#125;); <span class="comment">//写入file文件内容result,会覆盖原来的</span></span><br><span class="line">datastring.replace(<span class="regexp">/正则表达式:/g</span>,<span class="string">&quot;新的内容&quot;</span>)；<span class="comment">//正则替换/正则内容/g，datastring数据源</span></span><br></pre></td></tr></table></figure>

<p>文件信息stats返回的是json信息格式如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Stats &#123;</span><br><span class="line">  dev: 12,</span><br><span class="line">  mode: 33279,</span><br><span class="line">  nlink: 1,</span><br><span class="line">  uid: 0,</span><br><span class="line">  gid: 0,</span><br><span class="line">  rdev: 0,</span><br><span class="line">  blksize: 512,</span><br><span class="line">  ino: 4785074604307105,</span><br><span class="line">  size: 1297,</span><br><span class="line">  blocks: 8,</span><br><span class="line">  atimeMs: 1517144361661.3943,</span><br><span class="line">  mtimeMs: 1517146617920.6301,</span><br><span class="line">  ctimeMs: 1517146647324.5525,</span><br><span class="line">  birthtimeMs: 1517146647324.5525, </span><br><span class="line">  atime: 2018-01-28T12:59:21.661Z, //访问时间</span><br><span class="line">  mtime: 2018-01-28T13:36:57.921Z, //修改时间</span><br><span class="line">  ctime: 2018-01-28T13:37:27.325Z, //创建时间</span><br><span class="line">  birthtime: 2018-01-28T13:37:27.325Z &#125;</span><br></pre></td></tr></table></figure>

<p>批量读取脚本路径的当前目录的所有文件，通过判段文件名是否包含<code>.md</code>防止改了不必要的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(&#39;文件创建时间读取并写入文件指定字段demo&#39;);</span><br><span class="line">var fs &#x3D; require(&quot;fs&quot;); &#x2F;&#x2F;请求文件系统</span><br><span class="line">var file &#x3D; &quot;.&#x2F;txt&quot;; &#x2F;&#x2F;设置读取和写入的文件，当前目录下的test文件</span><br><span class="line"></span><br><span class="line">fs.readdir(&quot;.&#x2F;&quot;,function(err,files)&#123;</span><br><span class="line">	var len&#x3D;files.length;</span><br><span class="line">	var file&#x3D;null;</span><br><span class="line">	for(var i&#x3D;0;i&lt;len;i++)&#123;</span><br><span class="line">		file&#x3D;files[i];</span><br><span class="line">		console.log(&quot;读取文件：&quot;,file);</span><br><span class="line">		if(file.indexOf(&quot;.md&quot;)&gt;-1)&#123;</span><br><span class="line">			console.log(&quot;处理文件：&quot;,file);</span><br><span class="line">			writeFileTime(file,fs);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>单文件读取并写入修改时间</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">file:读取时间的文件以及写入内容的文件</span></span><br><span class="line"><span class="comment">fs: 文件系统</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeFileTime</span>(<span class="params">file,fs</span>)</span>&#123;</span><br><span class="line">	fs.readFile(file, <span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123; <span class="comment">//读取文件内容</span></span><br><span class="line">		<span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;读取文件内容错误：&quot;</span>,err);</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&quot;文件&quot;</span>+file+<span class="string">&quot;的内容：&quot;</span>,data);</span><br><span class="line">		fs.stat(file,<span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>) </span>&#123; <span class="comment">//读取文件信息，创建时间等</span></span><br><span class="line">		   <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;读取文件信息错误：&quot;</span>,err);</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&quot;文件&quot;</span>+file+<span class="string">&quot;的信息：&quot;</span>,stats);  <span class="comment">//打印文件的信息</span></span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&quot;创建时间是：&quot;</span>,stats.mtime);</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&quot;格式化&quot;</span>,getFormatDate(stats.mtime));</span><br><span class="line">			<span class="keyword">var</span> result = data.replace(<span class="regexp">/categories:/g</span>, <span class="string">&quot;updated: &quot;</span>+getFormatDate(stats.mtime)+<span class="string">&quot;\r&quot;</span>+<span class="string">&quot;categories:&quot;</span>);<span class="comment">//data:替换为date:2018.....</span></span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&quot;修改后文件内容为：&quot;</span>,result);</span><br><span class="line">			fs.writeFile(file, result, <span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="comment">//写入新的文件内容</span></span><br><span class="line">				<span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;写文件错误：&quot;</span>,err);</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间格式化方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> timeStr:时间，格式可为：&quot;September 16,2016 14:15:05、</span></span><br><span class="line"><span class="comment"> &quot;September 16,2016&quot;、&quot;2016/09/16 14:15:05&quot;、&quot;2016/09/16&quot;、</span></span><br><span class="line"><span class="comment"> &#x27;2014-04-23T18:55:49&#x27;和毫秒</span></span><br><span class="line"><span class="comment"> dateSeparator：年、月、日之间的分隔符，默认为&quot;-&quot;，</span></span><br><span class="line"><span class="comment"> timeSeparator：时、分、秒之间的分隔符，默认为&quot;:&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFormatDate</span>(<span class="params">timeStr, dateSeparator, timeSeparator</span>) </span>&#123;</span><br><span class="line">    dateSeparator = dateSeparator ? dateSeparator : <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    timeSeparator = timeSeparator ? timeSeparator : <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(timeStr),</span><br><span class="line">            year = date.getFullYear(),<span class="comment">// 获取完整的年份(4位,1970)</span></span><br><span class="line">            month = date.getMonth(),<span class="comment">// 获取月份(0-11,0代表1月,用的时候记得加上1)</span></span><br><span class="line">            day = date.getDate(),<span class="comment">// 获取日(1-31)</span></span><br><span class="line">            hour = date.getHours(),<span class="comment">// 获取小时数(0-23)</span></span><br><span class="line">            minute = date.getMinutes(),<span class="comment">// 获取分钟数(0-59)</span></span><br><span class="line">            seconds = date.getSeconds(),<span class="comment">// 获取秒数(0-59)</span></span><br><span class="line">            Y = year + dateSeparator,</span><br><span class="line">            M = ((month + <span class="number">1</span>) &gt; <span class="number">9</span> ? (month + <span class="number">1</span>) : (<span class="string">&#x27;0&#x27;</span> + (month + <span class="number">1</span>))) + dateSeparator,</span><br><span class="line">            D = (day &gt; <span class="number">9</span> ? day : (<span class="string">&#x27;0&#x27;</span> + day)) + <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">            h = (hour &gt; <span class="number">9</span> ? hour : (<span class="string">&#x27;0&#x27;</span> + hour)) + timeSeparator,</span><br><span class="line">            m = (minute &gt; <span class="number">9</span> ? minute : (<span class="string">&#x27;0&#x27;</span> + minute)) + timeSeparator,</span><br><span class="line">            s = (seconds &gt; <span class="number">9</span> ? seconds : (<span class="string">&#x27;0&#x27;</span> + seconds)),</span><br><span class="line">            formatDate = Y + M + D + h + m + s;</span><br><span class="line">    <span class="keyword">return</span> formatDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="最终脚本内容"><a href="#最终脚本内容" class="headerlink" title="最终脚本内容"></a>最终脚本内容</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">批量添加修改时间</span></span><br><span class="line"><span class="comment">用于bolg初始化修改时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;文件创建时间读取并写入文件指定字段demo&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>); <span class="comment">//请求文件系统</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="string">&quot;./txt&quot;</span>; <span class="comment">//设置读取和写入的文件，当前目录下的test文件</span></span><br><span class="line"></span><br><span class="line">fs.readdir(<span class="string">&quot;./&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,files</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> len=files.length;</span><br><span class="line">	<span class="keyword">var</span> file=<span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">		file=files[i];</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&quot;读取文件：&quot;</span>,file);</span><br><span class="line">		<span class="keyword">if</span>(file.indexOf(<span class="string">&quot;.md&quot;</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&quot;处理文件：&quot;</span>,file);</span><br><span class="line">			writeFileTime(file,fs);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">file:读取时间的文件以及写入内容的文件</span></span><br><span class="line"><span class="comment">fs: 文件系统</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeFileTime</span>(<span class="params">file,fs</span>)</span>&#123;</span><br><span class="line">	fs.readFile(file, <span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123; <span class="comment">//读取文件内容</span></span><br><span class="line">		<span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;读取文件内容错误：&quot;</span>,err);</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&quot;文件&quot;</span>+file+<span class="string">&quot;的内容：&quot;</span>,data);</span><br><span class="line">		fs.stat(file,<span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>) </span>&#123; <span class="comment">//读取文件信息，创建时间等</span></span><br><span class="line">		   <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;读取文件信息错误：&quot;</span>,err);</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&quot;文件&quot;</span>+file+<span class="string">&quot;的信息：&quot;</span>,stats);  <span class="comment">//打印文件的信息</span></span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&quot;创建时间是：&quot;</span>,stats.mtime);</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&quot;格式化&quot;</span>,getFormatDate(stats.mtime));</span><br><span class="line">			<span class="keyword">var</span> result = data.replace(<span class="regexp">/categories:/g</span>, <span class="string">&quot;updated: &quot;</span>+getFormatDate(stats.mtime)+<span class="string">&quot;\r&quot;</span>+<span class="string">&quot;categories:&quot;</span>);<span class="comment">//data:替换为date:2018.....</span></span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&quot;修改后文件内容为：&quot;</span>,result);</span><br><span class="line">			fs.writeFile(file, result, <span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="comment">//写入新的文件内容</span></span><br><span class="line">				<span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;写文件错误：&quot;</span>,err);</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> timeStr:时间，格式可为：&quot;September 16,2016 14:15:05、</span></span><br><span class="line"><span class="comment"> &quot;September 16,2016&quot;、&quot;2016/09/16 14:15:05&quot;、&quot;2016/09/16&quot;、</span></span><br><span class="line"><span class="comment"> &#x27;2014-04-23T18:55:49&#x27;和毫秒</span></span><br><span class="line"><span class="comment"> dateSeparator：年、月、日之间的分隔符，默认为&quot;-&quot;，</span></span><br><span class="line"><span class="comment"> timeSeparator：时、分、秒之间的分隔符，默认为&quot;:&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFormatDate</span>(<span class="params">timeStr, dateSeparator, timeSeparator</span>) </span>&#123;</span><br><span class="line">    dateSeparator = dateSeparator ? dateSeparator : <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    timeSeparator = timeSeparator ? timeSeparator : <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(timeStr),</span><br><span class="line">            year = date.getFullYear(),<span class="comment">// 获取完整的年份(4位,1970)</span></span><br><span class="line">            month = date.getMonth(),<span class="comment">// 获取月份(0-11,0代表1月,用的时候记得加上1)</span></span><br><span class="line">            day = date.getDate(),<span class="comment">// 获取日(1-31)</span></span><br><span class="line">            hour = date.getHours(),<span class="comment">// 获取小时数(0-23)</span></span><br><span class="line">            minute = date.getMinutes(),<span class="comment">// 获取分钟数(0-59)</span></span><br><span class="line">            seconds = date.getSeconds(),<span class="comment">// 获取秒数(0-59)</span></span><br><span class="line">            Y = year + dateSeparator,</span><br><span class="line">            M = ((month + <span class="number">1</span>) &gt; <span class="number">9</span> ? (month + <span class="number">1</span>) : (<span class="string">&#x27;0&#x27;</span> + (month + <span class="number">1</span>))) + dateSeparator,</span><br><span class="line">            D = (day &gt; <span class="number">9</span> ? day : (<span class="string">&#x27;0&#x27;</span> + day)) + <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">            h = (hour &gt; <span class="number">9</span> ? hour : (<span class="string">&#x27;0&#x27;</span> + hour)) + timeSeparator,</span><br><span class="line">            m = (minute &gt; <span class="number">9</span> ? minute : (<span class="string">&#x27;0&#x27;</span> + minute)) + timeSeparator,</span><br><span class="line">            s = (seconds &gt; <span class="number">9</span> ? seconds : (<span class="string">&#x27;0&#x27;</span> + seconds)),</span><br><span class="line">            formatDate = Y + M + D + h + m + s;</span><br><span class="line">    <span class="keyword">return</span> formatDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>script</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>script</tag>
        <tag>nodejs</tag>
        <tag>file</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-Cache</title>
    <url>/2021/04/08/spring-Cache/</url>
    <content><![CDATA[<p>发现项目里面的redis缓存与数据库的数据混乱不一致，因为很多自定义的数据库update方法更新了数据库，但是并没有更新redis，于是想在底层实现自动缓存</p>
<h2 id="Spring-cache简单使用"><a href="#Spring-cache简单使用" class="headerlink" title="Spring cache简单使用"></a>Spring cache简单使用</h2><p><a href="https://www.baeldung.com/spring-cache-tutorial">教程</a></p>
<ol>
<li><p>引入依赖</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework.boot&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-boot-starter-cache&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;2.1.1.RELEASE&#x27;</span></span><br><span class="line">compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework.boot&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-boot-starter-data-redis&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;2.1.1.RELEASE&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加redis缓存的中间件，缓存的中间件也可以不用redis用其他中间件一样的，可选generic,ehcache,hazelcast,infinispan,jcache,redis,guava,simple,none</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.redis.host&#x3D;gt163.cn</span><br><span class="line">spring.redis.port&#x3D;14043</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启cache功能,在<code>@SpringBootApplication</code>启动类或<code>@Configuration</code>配置类上面添加该注解<code>@EnableCaching</code></p>
</li>
<li><p>使用缓存功能,在要缓存的方法上面或者类上面添加注解<code>@Cacheable(&quot;&lt;redis里面的唯一key，也可以叫表名&gt;&quot;)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="meta">@Cacheable(&quot;user_info&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.findById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/cYVwvT"><img src="https://z3.ax1x.com/2021/04/08/cYVwvT.png" alt="cYVwvT.png"></a>](<a href="https://imgtu.com/i/cJAnB9">https://imgtu.com/i/cJAnB9</a>)</p>
</li>
</ol>
<h2 id="常见几个注解"><a href="#常见几个注解" class="headerlink" title="常见几个注解"></a>常见几个注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启缓存功能</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="comment">//缓存没有数据查执行方法里面的内容，然后将执行的结果缓存起来，缓存里面有直接读缓存，不会执行方法里面的内容，参数会作为key</span></span><br><span class="line"><span class="meta">@Cacheable(&quot;user_info&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(String id)</span></span></span><br><span class="line"><span class="function"><span class="comment">//参数unless对结果进行判断，condition对参数进行判断  </span></span></span><br><span class="line"><span class="function"><span class="comment">//缓存不管是否存在都会执行方法里面的内容并更新缓存   </span></span></span><br><span class="line"><span class="function">@<span class="title">CachePut</span><span class="params">(value=<span class="string">&quot;user_info&quot;</span>)</span>   </span></span><br><span class="line"><span class="function"><span class="comment">//删除缓存   </span></span></span><br><span class="line"><span class="function">@<span class="title">CacheEvict</span><span class="params">(value=<span class="string">&quot;user_info&quot;</span>)</span></span></span><br><span class="line"><span class="function"><span class="comment">//多个缓存分组   </span></span></span><br><span class="line"><span class="function">@Caching</span></span><br><span class="line"><span class="function"><span class="comment">//注解到类上面，类里面的方法只需要添加注解@Cacheable，不用在指定cacheName了</span></span></span><br><span class="line"><span class="function">@<span class="title">CacheConfig</span><span class="params">(cacheNames=&#123;<span class="string">&quot;user_info&quot;</span>&#125;)</span></span></span><br><span class="line"><span class="function">   </span></span><br></pre></td></tr></table></figure>

<h2 id="redis缓存mongo数据库表的架构设计"><a href="#redis缓存mongo数据库表的架构设计" class="headerlink" title="redis缓存mongo数据库表的架构设计"></a>redis缓存mongo数据库表的架构设计</h2><h3 id="设计方案一"><a href="#设计方案一" class="headerlink" title="设计方案一"></a>设计方案一</h3><p>详细代码见github:<a href="https://github.com/iexxk/springLeaning/tree/master/mongo">iexxk/springLeaning:mongo</a></p>
<p>在<code>BaseDao</code>接口层添加缓存注解，然后在各个子类继承实现，达到通用缓存框架的配置</p>
<p><code>BaseDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheConfig(cacheNames = &#123;&quot;mongo&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">  	<span class="comment">//#root.target.table为SpEL表达式，当前被调用的目标对象实例的table的值</span></span><br><span class="line">    <span class="meta">@Cacheable(key = &quot;#root.target.table+#p0&quot;,condition =&quot;#root.target.isCache&quot;)</span></span><br><span class="line">    <span class="function">T <span class="title">findById</span><span class="params">(ID id)</span></span>;</span><br><span class="line">    <span class="meta">@CachePut(key = &quot;#root.target.table+#p0.id&quot;,condition =&quot;#root.target.isCache&quot;)</span></span><br><span class="line">    &lt;S extends T&gt; <span class="function">S <span class="title">save</span><span class="params">(S entity)</span></span>;</span><br><span class="line">    <span class="meta">@CacheEvict(key = &quot;#root.target.table+#p0&quot;,condition =&quot;#root.target.isCache&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(ID id)</span></span>;</span><br><span class="line">  	<span class="comment">//删除所有是删除mongo所有的表，粒度不能到key</span></span><br><span class="line">    <span class="meta">@CacheEvict(key=&quot;#root.target.table&quot;,allEntries=true,condition=&quot;#root.target.isCache&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span></span>;</span><br><span class="line">  	<span class="comment">//用来设置是否开启缓存</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enableCache</span><span class="params">(<span class="keyword">boolean</span> isCache)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>BaseDaoImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDaoImpl</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">implements</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SimpleMongoRepository&lt;T, ID&gt; mongoRepository;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; entityType;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;ID&gt; identifierType;</span><br><span class="line">    <span class="keyword">protected</span> MongoTemplate mongoTemplate;</span><br><span class="line">		<span class="comment">//这里用来存储表的名字</span></span><br><span class="line">    <span class="keyword">public</span> String table;</span><br><span class="line">  	<span class="comment">//这里用来判断是否开启redis缓存</span></span><br><span class="line">    <span class="keyword">public</span> Boolean isCache = <span class="keyword">false</span>;</span><br><span class="line">		<span class="comment">//构造方法初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseDaoImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResolvableType resolvableType = ResolvableType.forClass(getClass());</span><br><span class="line">        entityType=(Class&lt;T&gt;)resolvableType.as(BaseDao.class).getGeneric(<span class="number">0</span>).resolve();</span><br><span class="line">        identifierType=(Class&lt;ID&gt;)resolvableType.as(BaseDao.class).getGeneric(<span class="number">1</span>).resolve();</span><br><span class="line">      	<span class="comment">//初始化表的名字，用“:”是因为可以在redis里面进行分类</span></span><br><span class="line">        table=entityType.getSimpleName()+<span class="string">&quot;:&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMongoTemplate</span><span class="params">(MongoTemplate mongoTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mongoTemplate = mongoTemplate;</span><br><span class="line">        MappingMongoEntityInformation&lt;T, ID&gt; entityInformation = <span class="keyword">new</span> MappingMongoEntityInformation&lt;T, ID&gt;(</span><br><span class="line">                <span class="keyword">new</span> BasicMongoPersistentEntity&lt;&gt;(ClassTypeInformation.from(entityType)), identifierType);</span><br><span class="line">        mongoRepository = <span class="keyword">new</span> SimpleMongoRepository&lt;T, ID&gt;(entityInformation, mongoTemplate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">findById</span><span class="params">(ID id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mongoTemplate.findOne(Query.query(Criteria.where(<span class="string">&quot;Id&quot;</span>).is(id.toString())), entityType);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enableCache</span><span class="params">(<span class="keyword">boolean</span> isCache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isCache = isCache;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面开始进行使用,新建一个<code>UserDao.jva</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">User</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAddNumById</span><span class="params">(String id)</span></span>; <span class="comment">//自定义的接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>UserDaoImpl.jva</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDaoImpl</span>&lt;<span class="title">User</span>, <span class="title">String</span>&gt; <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.enableCache(<span class="keyword">true</span>); <span class="comment">//这里进开启缓存设置，默认是不开启的</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAddNumById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最好调用<code>findById</code>就会进行缓存了</p>
<p><a href="https://imgtu.com/i/cYVQv8"><img src="https://z3.ax1x.com/2021/04/08/cYVQv8.png" alt="cYVQv8.png"></a></p>
<h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><p>因为<code>cacheNames</code>也就是表名不支持SpEL，因此获取不到表名，因此设计是，表就用通用<code>mongo</code>字段做完通用表，然后key里面才是表加id的设计，因此也导致了<code>deletAll</code>是删除所有的表，因为<code>deletAll</code>基本不会用到，也还可以接受，就算用到了，只是缓存没了，还是能从数据库重建缓存</p>
<p>参考<a href="https://my.oschina.net/u/220938/blog/3196609">SpringCache扩展@CacheEvict的key模糊匹配清除</a></p>
<h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>新建个该文件<code>CustomizedRedisCacheManager.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizedRedisCacheManager</span> <span class="keyword">extends</span> <span class="title">RedisCacheManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisCacheWriter cacheWriter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisCacheConfiguration defaultCacheConfig;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomizedRedisCacheManager</span><span class="params">(RedisCacheWriter cacheWriter, RedisCacheConfiguration defaultCacheConfiguration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cacheWriter, defaultCacheConfiguration);</span><br><span class="line">        <span class="keyword">this</span>.cacheWriter = cacheWriter;</span><br><span class="line">        <span class="keyword">this</span>.defaultCacheConfig = defaultCacheConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomizedRedisCacheManager</span><span class="params">(RedisCacheWriter cacheWriter, RedisCacheConfiguration defaultCacheConfiguration, String... initialCacheNames)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cacheWriter, defaultCacheConfiguration, initialCacheNames);</span><br><span class="line">        <span class="keyword">this</span>.cacheWriter = cacheWriter;</span><br><span class="line">        <span class="keyword">this</span>.defaultCacheConfig = defaultCacheConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomizedRedisCacheManager</span><span class="params">(RedisCacheWriter cacheWriter, RedisCacheConfiguration defaultCacheConfiguration, <span class="keyword">boolean</span> allowInFlightCacheCreation, String... initialCacheNames)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cacheWriter, defaultCacheConfiguration, allowInFlightCacheCreation, initialCacheNames);</span><br><span class="line">        <span class="keyword">this</span>.cacheWriter = cacheWriter;</span><br><span class="line">        <span class="keyword">this</span>.defaultCacheConfig = defaultCacheConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomizedRedisCacheManager</span><span class="params">(RedisCacheWriter cacheWriter, RedisCacheConfiguration defaultCacheConfiguration, Map&lt;String, RedisCacheConfiguration&gt; initialCacheConfigurations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cacheWriter, defaultCacheConfiguration, initialCacheConfigurations);</span><br><span class="line">        <span class="keyword">this</span>.cacheWriter = cacheWriter;</span><br><span class="line">        <span class="keyword">this</span>.defaultCacheConfig = defaultCacheConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomizedRedisCacheManager</span><span class="params">(RedisCacheWriter cacheWriter, RedisCacheConfiguration defaultCacheConfiguration, Map&lt;String, RedisCacheConfiguration&gt; initialCacheConfigurations, <span class="keyword">boolean</span> allowInFlightCacheCreation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cacheWriter, defaultCacheConfiguration, initialCacheConfigurations, allowInFlightCacheCreation);</span><br><span class="line">        <span class="keyword">this</span>.cacheWriter = cacheWriter;</span><br><span class="line">        <span class="keyword">this</span>.defaultCacheConfig = defaultCacheConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个构造方法最重要</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomizedRedisCacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory, RedisCacheConfiguration cacheConfiguration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory), cacheConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, RedisCacheConfiguration&gt; <span class="title">getCacheConfigurations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, RedisCacheConfiguration&gt; configurationMap = <span class="keyword">new</span> HashMap&lt;&gt;(getCacheNames().size());</span><br><span class="line">        getCacheNames().forEach(it -&gt; &#123;</span><br><span class="line">            RedisCache cache = CustomizedRedisCache.class.cast(lookupCache(it));</span><br><span class="line">            configurationMap.put(it, cache != <span class="keyword">null</span> ? cache.getCacheConfiguration() : <span class="keyword">null</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableMap(configurationMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> RedisCache <span class="title">createRedisCache</span><span class="params">(String name, RedisCacheConfiguration cacheConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomizedRedisCache(name, cacheWriter, cacheConfig != <span class="keyword">null</span> ? cacheConfig : defaultCacheConfig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建<code>CustomizedRedisCache.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizedRedisCache</span> <span class="keyword">extends</span> <span class="title">RedisCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisCacheWriter cacheWriter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConversionService conversionService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create new &#123;<span class="doctag">@link</span> RedisCache&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name        must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cacheWriter must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cacheConfig must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">CustomizedRedisCache</span><span class="params">(String name, RedisCacheWriter cacheWriter, RedisCacheConfiguration cacheConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, cacheWriter, cacheConfig);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.cacheWriter = cacheWriter;</span><br><span class="line">        <span class="keyword">this</span>.conversionService = cacheConfig.getConversionService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evict</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String keyString = key.toString();</span><br><span class="line">            <span class="comment">// 后缀删除</span></span><br><span class="line">            <span class="keyword">if</span> (keyString.endsWith(<span class="string">&quot;*&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] pattern = <span class="keyword">this</span>.conversionService.convert(<span class="keyword">this</span>.createCacheKey(key), <span class="keyword">byte</span>[].class);</span><br><span class="line">                <span class="keyword">this</span>.cacheWriter.clean(<span class="keyword">this</span>.name, pattern);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除指定的key</span></span><br><span class="line">        <span class="keyword">super</span>.evict(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加配置<code>CachingConfig.java</code>，指定自定义的缓存类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachingConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisCacheConfiguration cacheConfiguration = RedisCacheConfiguration.</span><br><span class="line">                defaultCacheConfig();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomizedRedisCacheManager(redisConnectionFactory, cacheConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后再修改使用<code>@CacheEvict</code>就支持<code>*</code>号模糊删除了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除table开头的所有key</span></span><br><span class="line"><span class="meta">@CacheEvict(key = &quot;#root.target.table+&#x27;*&#x27;&quot;,condition =&quot;#root.target.isCache&quot;)</span> </span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.javazhiyin.com/4618.html">史上超详细的SpringBoot整合Cache使用教程</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Cacheable</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-AOP</title>
    <url>/2018/12/17/spring-aop/</url>
    <content><![CDATA[<h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><p>基于动态代理实现（动态生成插入方法invoke）</p>
<h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><ul>
<li><p><strong>连接点</strong>(Join point)： 能够拦截（插入方法）的地方</p>
</li>
<li><p><strong>切点</strong>(Poincut)： 具体定位的连接点</p>
</li>
<li><p><strong>增强/通知</strong>(Advice)：表示添加到切点的一段<strong>逻辑代码</strong>，并定位连接点的<strong>方位信息</strong>。</p>
<p>Spring AOP提供了5种Advice类型给我们：前置<code>@Before</code>、后置<code>@After</code>、返回<code>@AfterReturning</code>、异常<code>@AfterThrowing</code>、环绕<code>@Around</code>给我们使用！</p>
</li>
<li><p><strong>织入</strong>(Weaving)：将<code>增强/通知</code>添加到目标类的具体连接点上的过程</p>
</li>
<li><p><strong>引入/引介</strong>(Introduction)：允许我们<strong>向现有的类添加新方法或属性</strong>。是一种<strong>特殊</strong>的增强！</p>
</li>
<li><p><strong>切面</strong>(Aspect)：切面由切点和<code>增强/通知</code>组成，它既包括了横切逻辑的定义、也包括了连接点的定义。</p>
</li>
</ul>
<h4 id="切入点定义"><a href="#切入点定义" class="headerlink" title="切入点定义"></a>切入点定义</h4><ol>
<li><p><code>execution </code>表达式</p>
<p>eg:  <code>@Pointcut(&quot;execution(public * com.exxk.aop..*Controller.*(..))&quot;)</code> </p>
<p><code>*</code>代表任意值</p>
<p><code>aop..</code>表示aop包下面的任何子包和自己</p>
<p><code>(..)</code>表示任何参数</p>
</li>
<li><p><code>@annotation</code>注解</p>
<p>eg: <code>@annotation(com.willson.common.annotation.Log)</code></p>
</li>
</ol>
<h4 id="注解类名字解释"><a href="#注解类名字解释" class="headerlink" title="注解类名字解释"></a>注解类名字解释</h4><h5 id="Target"><a href="#Target" class="headerlink" title="@Target :"></a><code>@Target</code> :</h5><p>说明了Annotation所修饰的对象范围，eg<code>@Target(&#123; ElementType.PARAMETER, ElementType.METHOD &#125;)</code>其中<code>ElementType</code>的取值有</p>
<ul>
<li><code>CONSTRUCTOR</code>:用于描述构造器</li>
<li><code>FIELD</code>:用于描述域</li>
<li><code>LOCAL_VARIABLE</code>:用于描述局部变量</li>
<li><code>METHOD</code>:用于描述方法</li>
<li><code>PACKAGE</code>:用于描述包</li>
<li><code>PARAMETER</code>:用于描述参数</li>
<li><code>TYPE</code>:用于描述类、接口(包括注解类型) 或enum声明</li>
</ul>
<h5 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a><code>@Retention</code></h5><p>定义了该Annotation被保留的时间长短，eg<code>@Retention(RetentionPolicy.RUNTIME)</code>,其中<code>Retention</code>取值有</p>
<ul>
<li><code>SOURCE</code>:在源文件中有效（即源文件保留）</li>
<li><code>CLASS</code>:在class文件中有效（即class保留）</li>
<li><code>RUNTIME</code>:在运行时有效（即运行时保留）</li>
</ul>
<h5 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a><code>@Documented</code></h5><p> 用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。</p>
<h4 id="springboot-aop-log实战"><a href="#springboot-aop-log实战" class="headerlink" title="springboot aop log实战"></a>springboot aop log实战</h4><ol>
<li><p>引入依赖<code>org.springframework.boot:spring-boot-starter-aop</code></p>
</li>
<li><p>定义一个接口作为测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.exxk.aop;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/aop/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger=Logger.getLogger(String.valueOf(getClass()));</span><br><span class="line">    <span class="meta">@GetMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="comment">//@Log(tag = &quot;我是注解&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">aop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;业务代码执行中...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;aop 测试&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义aop切面类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger=Logger.getLogger(String.valueOf(getClass()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义切入点，切入点定义注意，某些类不能动态代理</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * com.exxk.aop.AopController.aop())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切入点前插入的内容</span></span><br><span class="line">    <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;切入点前执行的内容:&quot;</span>);</span><br><span class="line">        ServletRequestAttributes attributes= (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="keyword">if</span> (attributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            HttpServletRequest request=attributes.getRequest();</span><br><span class="line">            logger.info(<span class="string">&quot;URL:&quot;</span>+request.getRequestURL().toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(returning = &quot;ret&quot;,pointcut = &quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(Object ret)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;切点运行完之后执行的内容:&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;response:&quot;</span>+ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用接口之后打印日志</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">com<span class="variable">.exxk</span><span class="variable">.aop</span><span class="variable">.LogAspect</span>             : 切入点前执行的内容:</span><br><span class="line">com<span class="variable">.exxk</span><span class="variable">.aop</span><span class="variable">.LogAspect</span>             : URL:http:<span class="comment">//127.0.0.1:8080/aop/test</span></span><br><span class="line">com<span class="variable">.exxk</span><span class="variable">.aop</span><span class="variable">.AopController</span>         : 业务代码执行中...</span><br><span class="line">com<span class="variable">.exxk</span><span class="variable">.aop</span><span class="variable">.LogAspect</span>             : 切点运行完之后执行的内容:</span><br><span class="line">com<span class="variable">.exxk</span><span class="variable">.aop</span><span class="variable">.LogAspect</span>             : response返回:aop 测试</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加自定义注解类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.PARAMETER, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">    <span class="function">String <span class="title">tag</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果要使用注解格式修改切入点为注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义切入点</span></span><br><span class="line"><span class="comment">//@Pointcut(&quot;execution(public * com.exxk.aop..*Controller.*(..))&quot;)</span></span><br><span class="line"><span class="comment">//@Pointcut(&quot;execution(public * com.exxk.aop.AopController.aop())&quot;)</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;@annotation(com.exxk.aop.Log)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在接口上添加注解<code>@Log(tag = &quot;我是注解&quot;)</code></p>
</li>
<li><p>在切入点，eg:<code>doBefore</code>添加获取注解的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取注解</span></span><br><span class="line">Signature signature = joinPoint.getSignature();</span><br><span class="line">MethodSignature methodSignature = (MethodSignature) signature;</span><br><span class="line">Method method = methodSignature.getMethod();</span><br><span class="line">Log log= method.getAnnotation(Log.class);</span><br><span class="line">logger.info(<span class="string">&quot;获取注解内容：&quot;</span>+log.tag());</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后访问测试，打印日志如下</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">com<span class="variable">.exxk</span><span class="variable">.aop</span><span class="variable">.LogAspect</span>             : 切入点前执行的内容:</span><br><span class="line">com<span class="variable">.exxk</span><span class="variable">.aop</span><span class="variable">.LogAspect</span>             : URL:http:<span class="comment">//127.0.0.1:8080/aop/test</span></span><br><span class="line">com<span class="variable">.exxk</span><span class="variable">.aop</span><span class="variable">.LogAspect</span>             : 获取注解内容：我是注解</span><br><span class="line">com<span class="variable">.exxk</span><span class="variable">.aop</span><span class="variable">.AopController</span>         : 业务代码执行中...</span><br><span class="line">com<span class="variable">.exxk</span><span class="variable">.aop</span><span class="variable">.LogAspect</span>             : 切点运行完之后执行的内容:</span><br><span class="line">com<span class="variable">.exxk</span><span class="variable">.aop</span><span class="variable">.LogAspect</span>             : response返回:aop 测试</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="优化注解"><a href="#优化注解" class="headerlink" title="优化注解"></a>优化注解</h3><ol>
<li><p><a href="https://blog.csdn.net/qq1723205668/article/details/56481476">CGLIB</a>实现AOP在<code>application.properties</code>配置文件添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.aop.auto&#x3D;true</span><br><span class="line">spring.aop.proxy-target-class&#x3D;false</span><br></pre></td></tr></table></figure>









</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.didispace.com/springbootaoplog/">Spring Boot中使用AOP统一处理Web请求日志</a></p>
<p><a href="https://crane-yuan.github.io/2018/01/11/spring-boot-aop-custom-annotation/">使用Spring Boot的AOP处理自定义注解</a></p>
<p><a href="https://blog.csdn.net/qwdafedv/article/details/79939704">java 自定义注解之ElementType.PARAMETER</a></p>
<p><a href="https://github.com/ameizi/DevArticles/issues/152">使用Spring AOP记录Controller层操作日志</a></p>
<p><a href="https://juejin.im/post/5b06bf2df265da0de2574ee1">Spring AOP就是这么简单啦</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>AOP</tag>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring AutoConfiguration</title>
    <url>/2020/08/18/spring-autoconfiguration/</url>
    <content><![CDATA[<p>springboot的配置使用很简单，也经常用，下面就是常用的AutoConfiguration入口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span> <span class="comment">//启用自动配置</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>但是这里主要讲下自动配置的禁用</p>
<h2 id="如何禁用某些自动配置"><a href="#如何禁用某些自动配置" class="headerlink" title="如何禁用某些自动配置"></a>如何禁用某些自动配置</h2><h3 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h3><ol>
<li>在公共依赖里面引入了数据库的依赖，你会发现，某些项目不需要数据库，但是由于公共依赖，也得配置数据库的连接地址</li>
<li>例如使用spring cloud config-bus热更新配置时，这个功能属于可选功能，因为有些环境可能不支持mq，但是不能每次打包都把依赖移除</li>
</ol>
<h3 id="禁用设置"><a href="#禁用设置" class="headerlink" title="禁用设置"></a>禁用设置</h3><h4 id="启动文件的修改"><a href="#启动文件的修改" class="headerlink" title="启动文件的修改"></a>启动文件的修改</h4><p>主要是在启动类上面的<code>@EnableAutoConfiguration</code>注解添加参数<code>exclude</code>后面填入需要禁用的启动类，这种适合场景1，因为已经确定这个服务是不需要这个配置的了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration(exclude = &#123;MongoAutoConfiguration.class, MongoDataAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置文件的修改"><a href="#配置文件的修改" class="headerlink" title="配置文件的修改"></a>配置文件的修改</h4><p>在<code>application.properties</code>里面添加<code>spring.autoconfigure.exclude</code>这个配置项，这个就很灵活了，只需要修改配置文件，就可以开启或禁用某些功能</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.autoconfigure.exclude</span>=<span class="string">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,org.springframework.boot.actuate.autoconfigure.metrics.amqp.RabbitMetricsAutoConfiguration,org.springframework.boot.actuate.autoconfigure.amqp.RabbitHealthIndicatorAutoConfiguration,org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration,org.springframework.cloud.bus.BusAutoConfiguration</span></span><br></pre></td></tr></table></figure>

<h3 id="常用的实战场景"><a href="#常用的实战场景" class="headerlink" title="常用的实战场景"></a>常用的实战场景</h3><p>禁用操作很简单，但是要找到合适的配置禁用，这就需要了解功能用到了那些自动配置项，下面介绍几个常用场景，需要禁用的自动配置类</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mongodb数据库 依赖 org.springframework.data:spring-data-mongodb</span></span><br><span class="line"><span class="meta">spring.autoconfigure.exclude</span>=<span class="string">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration</span></span><br><span class="line"><span class="comment">#redis数据库 依赖 org.springframework.boot:spring-boot-starter-data-redis</span></span><br><span class="line"><span class="meta">spring.autoconfigure.exclude</span>=<span class="string">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration</span></span><br><span class="line"><span class="comment">#rabbitMQ 依赖 org.springframework.boot:spring-boot-starter-amqp</span></span><br><span class="line"><span class="meta">spring.autoconfigure.exclude</span>=<span class="string">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration</span></span><br><span class="line"><span class="comment">#springCloud-Bus 依赖org.springframework.cloud:spring-cloud-starter-bus-amqp</span></span><br><span class="line"><span class="meta">spring.autoconfigure.exclude</span>=<span class="string">org.springframework.cloud.bus.BusAutoConfiguration,org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>AutoConfiguration</tag>
      </tags>
  </entry>
  <entry>
    <title>spring 国际化</title>
    <url>/2020/09/01/spring-internationalization/</url>
    <content><![CDATA[<h2 id="国际化配置"><a href="#国际化配置" class="headerlink" title="国际化配置"></a>国际化配置</h2><p>spring自带，所以不需要添加任何依赖</p>
<ol>
<li><p>在<code>resources</code>目录添加</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建message.properties文件并添加</span></span><br><span class="line"><span class="meta">user.name</span>=<span class="string">userName</span></span><br><span class="line"><span class="attr">----------------------------</span></span><br><span class="line"><span class="comment">#创建message_en.properties文件并添加</span></span><br><span class="line"><span class="meta">user.name</span>=<span class="string">user name</span></span><br><span class="line"><span class="attr">---------------------------</span></span><br><span class="line"><span class="comment">#创建message_zh.properties文件并添加</span></span><br><span class="line"><span class="meta">user.name</span>=<span class="string">用户名</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>spring配置文件添加配置<code>spring.messages.basename=message</code>其中message为国际化的文件，就是上面添加的文件名，如果有文件夹包裹，从<code>resources</code>带上文件相对路径</p>
</li>
<li><p>添加测试类,关键类<code>MessageSource</code>是读取国际化文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.i18n.LocaleContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestControl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/glob&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">glob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String userNmae = messageSource.getMessage(<span class="string">&quot;user.name&quot;</span>, <span class="keyword">null</span>, LocaleContextHolder.getLocale());</span><br><span class="line">        logger.info(<span class="string">&quot;glob :&quot;</span> + userNmae);</span><br><span class="line">        <span class="keyword">return</span> userNmae;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试，使用postman请求该接口，然后请求<code>headers</code>里面添加<code>Accept-Language:ch</code>或<code>Accept-Language:en</code>就能返回对应的翻译了</p>
</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li><p>出现<code>No message found under code &#39;user.name&#39; for locale &#39;ch&#39;.</code>错误</p>
<p>解决：在配置文件<code>application.properties</code>配置<code>#spring.messages.basename=&lt;你的国际化文件&gt;</code>，或者检查国际化文件是否存在和配置的文件是否匹配</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring logback</title>
    <url>/2020/09/03/spring-logback/</url>
    <content><![CDATA[<h1 id="spring-logback-简介"><a href="#spring-logback-简介" class="headerlink" title="spring logback 简介"></a>spring logback 简介</h1><h3 id="依赖图"><a href="#依赖图" class="headerlink" title="依赖图"></a>依赖图</h3><p>可以发现logback在<code>spring-boot-starter</code>依赖里面，所以引入了springboot都自带logback</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">logback--&gt;spring-boot-starter-logging--&gt;spring-boot-starter</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">+---</span> <span class="string">org.springframework.boot:spring-boot-starter</span> <span class="string">-&gt;</span> <span class="number">2.2</span><span class="number">.2</span><span class="string">.RELEASE</span></span><br><span class="line"><span class="string">|</span>    <span class="string">+---</span> <span class="string">org.springframework.boot:spring-boot:2.2.2.RELEASE</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>    <span class="string">+---</span> <span class="string">org.springframework:spring-core:5.2.2.RELEASE</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>    <span class="string">|</span>    <span class="string">\---</span> <span class="string">org.springframework:spring-jcl:5.2.2.RELEASE</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>    <span class="string">\---</span> <span class="string">org.springframework:spring-context:5.2.2.RELEASE</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>         <span class="string">+---</span> <span class="string">org.springframework:spring-aop:5.2.2.RELEASE</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>         <span class="string">|</span>    <span class="string">+---</span> <span class="string">org.springframework:spring-beans:5.2.2.RELEASE</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>         <span class="string">|</span>    <span class="string">|</span>    <span class="string">\---</span> <span class="string">org.springframework:spring-core:5.2.2.RELEASE</span> <span class="string">(*)</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>         <span class="string">|</span>    <span class="string">\---</span> <span class="string">org.springframework:spring-core:5.2.2.RELEASE</span> <span class="string">(*)</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>         <span class="string">+---</span> <span class="string">org.springframework:spring-beans:5.2.2.RELEASE</span> <span class="string">(*)</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>         <span class="string">+---</span> <span class="string">org.springframework:spring-core:5.2.2.RELEASE</span> <span class="string">(*)</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>         <span class="string">\---</span> <span class="string">org.springframework:spring-expression:5.2.2.RELEASE</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>              <span class="string">\---</span> <span class="string">org.springframework:spring-core:5.2.2.RELEASE</span> <span class="string">(*)</span></span><br><span class="line"><span class="string">|</span>    <span class="string">+---</span> <span class="string">org.springframework.boot:spring-boot-autoconfigure:2.2.2.RELEASE</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>    <span class="string">\---</span> <span class="string">org.springframework.boot:spring-boot:2.2.2.RELEASE</span> <span class="string">(*)</span></span><br><span class="line"><span class="string">|</span>    <span class="string">+---</span> <span class="string">org.springframework.boot:spring-boot-starter-logging:2.2.2.RELEASE</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>    <span class="string">+---</span> <span class="string">ch.qos.logback:logback-classic:1.2.3</span> <span class="comment">#可以看到在springboot里面自带</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>    <span class="string">|</span>    <span class="string">+---</span> <span class="string">ch.qos.logback:logback-core:1.2.3</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>    <span class="string">|</span>    <span class="string">\---</span> <span class="string">org.slf4j:slf4j-api:1.7.25</span> <span class="string">-&gt;</span> <span class="number">1.7</span><span class="number">.29</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>    <span class="string">+---</span> <span class="string">org.apache.logging.log4j:log4j-to-slf4j:2.12.1</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>    <span class="string">|</span>    <span class="string">+---</span> <span class="string">org.slf4j:slf4j-api:1.7.25</span> <span class="string">-&gt;</span> <span class="number">1.7</span><span class="number">.29</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>    <span class="string">|</span>    <span class="string">\---</span> <span class="string">org.apache.logging.log4j:log4j-api:2.12.1</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>    <span class="string">\---</span> <span class="string">org.slf4j:jul-to-slf4j:1.7.29</span></span><br><span class="line"><span class="string">|</span>    <span class="string">|</span>         <span class="string">\---</span> <span class="string">org.slf4j:slf4j-api:1.7.29</span></span><br><span class="line"><span class="string">|</span>    <span class="string">+---</span> <span class="string">jakarta.annotation:jakarta.annotation-api:1.3.5</span></span><br><span class="line"><span class="string">|</span>    <span class="string">+---</span> <span class="string">org.springframework:spring-core:5.2.2.RELEASE</span> <span class="string">(*)</span></span><br><span class="line"><span class="string">|</span>    <span class="string">\---</span> <span class="string">org.yaml:snakeyaml:1.25</span></span><br></pre></td></tr></table></figure>

<h2 id="logback-spring-xml介绍"><a href="#logback-spring-xml介绍" class="headerlink" title="logback-spring.xml介绍"></a><code>logback-spring.xml</code>介绍</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Logback configuration. See http://logback.qos.ch/manual/index.html --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</span></span><br><span class="line"><span class="comment">scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。</span></span><br><span class="line"><span class="comment">debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;10 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--服务名称，通过读取spring配置项spring.application.name--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;APP_NAME&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志输出类型,可在配置文件通过spring.cloud.config.logback-profile进行设置日志输出类型   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;LOG_TYPE&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.cloud.config.logback-profile&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义日志的目录，logs为项目根目录下logs目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATH&quot;</span> <span class="attr">value</span>=<span class="string">&quot;logs&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义日志的文件名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;LOG_PATH&#125;/$&#123;APP_NAME&#125;.log&quot;</span> <span class="attr">name</span>=<span class="string">&quot;LOG_FILE_NAME&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- %d&#123;yyyy-MM-dd&#125;：按天进行日志滚动 %i：当文件大小超过maxFileSize时，按照i进行文件滚动   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;LOG_PATH&#125;/$&#123;APP_NAME&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;</span> <span class="attr">name</span>=<span class="string">&quot;LOG_FILE_NAME_PATTERN&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义日志的格式化标准 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_FORMAT&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [ %thread ] - [ %-5level ] [ %logger&#123;50&#125; : %line ] - %msg%n&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 文件输出： 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定日志文件的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE_NAME&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件分割机制--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE_NAME_PATTERN&#125;<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--当天日志当大于100M进行分割--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出格式： --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_FORMAT&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--控制台输出:也就是前端显示输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;stdout&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_FORMAT&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义不同的包，不同的日志级别(TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR),additivity生效级别true都有效(所有日志输出类型，包含默认的)，false只是当前（当前配置的输出日志类型）有效 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.exxk&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--选择那个日志输出类型，对应上面的appender，支持多个同时选择 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--stdout设置为默认输出类型，不需要的输出类型可以直接注释--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;stdout&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过application配置文件的spring.cloud.config.logback-profile配置项进行指定加载那个日志输出类型，值为appender的name  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;$&#123;LOG_TYPE&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>application.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">testDemo</span></span><br><span class="line"><span class="comment">#指定那个输出类型</span></span><br><span class="line"><span class="meta">spring.cloud.config.logback-profile</span>=<span class="string">FILE</span></span><br></pre></td></tr></table></figure>

<h1 id="log-日志脱敏和超长日志处理"><a href="#log-日志脱敏和超长日志处理" class="headerlink" title="log 日志脱敏和超长日志处理"></a>log 日志脱敏和超长日志处理</h1><h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><p>因为日志里面含有大量的base64的图片数据，各处都有打印，导致日志过大，日志不美观排查问题不方便</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/6f093b0b0c8a">logback-spring.xml</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1650600">一般人不敢动系列之—基于logback的日志“规范”和“脱敏”</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Logback</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot打包套壳</title>
    <url>/2020/08/24/spring-maven-package/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>客户需要git自动化部署，但是又不能提供源码，所以打包成jar包，然后在套壳，依赖jar进行部署</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(springboot源项目)--&gt;G(打包发布成jar,含main class)--做为依赖--&gt;L[springboot套壳项目]--&gt;E[自动部署]</span><br></pre></td></tr></table></figure>

<h2 id="利用maven仓库打包步骤"><a href="#利用maven仓库打包步骤" class="headerlink" title="利用maven仓库打包步骤"></a>利用maven仓库打包步骤</h2><ol>
<li><p>删除源项目<code>pom.xml</code>里面的<code>&lt;build&gt;&lt;/build&gt;</code>标签及里面的内容</p>
</li>
<li><p>如果项目里面有公共项目本地依赖(common等)，都要上传，因为打包jar不会打包依赖到jar包里面，上传需要在<code>pom.xml</code>里面添加，然后执行mave lifecycle  里面的 deploy</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--这里的id要和maven里的的settings.xml的id一致--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://ipaddress/repository/maven-third/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意:</p>
<ol>
<li><p>上传报错的话，检查依赖包是否设置<code>&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</code>需要改成<code>&lt;version&gt;0.0.1&lt;/version&gt;</code>因为<code>SNAPSHOT</code>上传需要特殊权限</p>
</li>
<li><p>上传没有权限，需要添加nexus中仓库的角色权限<code>nx-repository-view-*-*-edit</code></p>
</li>
<li><p>检查maven的设置文件<code>setting.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>read<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>read***<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果是多项目结构，外面的父项目框架，不需要deploy，在<code>pom.xml</code>添加下面这个设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.deploy.skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">maven.deploy.skip</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>新建个maven空项目，其中pom.xml如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 这个千万不能添加，添加会提示找不到main class--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--	&lt;parent&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		&lt;version&gt;2.1.12.RELEASE&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--	&lt;/parent&gt;--&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- id不能和原项目一样，不然会提示自己依赖自己--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bpf_pf_router_zy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>bpf_pf_router_zy<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 源项目打包成的jar--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.nantian<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bpf_pf_router<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">		<span class="comment">&lt;!-- 添加主类，主类在原项目，也就是第一步里面删除的那部分里面有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.nantian.bpf.router.App<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="利用maven-dependency-plugin进行本地打包"><a href="#利用maven-dependency-plugin进行本地打包" class="headerlink" title="利用maven-dependency-plugin进行本地打包"></a>利用maven-dependency-plugin进行本地打包</h2><ol>
<li><p>在壳项目pom.xml添加如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">.......</span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>file:$&#123;project.basedir&#125;/lib<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        ........</span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>
</li>
<li><p>把maven本地库里面的原项目的依赖放到壳项目的lib目录里面</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">├──</span> <span class="string">README.md</span></span><br><span class="line"><span class="meta">├──</span> <span class="string">lib</span></span><br><span class="line"><span class="meta">│  </span> <span class="string">└── com</span></span><br><span class="line"><span class="meta">│  </span>     <span class="string">└── nantian</span></span><br><span class="line"><span class="meta">│  </span>         <span class="string">└── bpf_pf_router</span></span><br><span class="line"><span class="meta">│  </span>             <span class="string">├── 1.0.0</span></span><br><span class="line"><span class="meta">│  </span>             <span class="string">│   ├── _remote.repositories</span></span><br><span class="line"><span class="meta">│  </span>             <span class="string">│   ├── bpf_pf_router-1.0.0.jar</span></span><br><span class="line"><span class="meta">│  </span>             <span class="string">│   └── bpf_pf_router-1.0.0.pom</span></span><br><span class="line"><span class="meta">│  </span>             <span class="string">├── maven-metadata-local.xml</span></span><br><span class="line"><span class="meta">│  </span>             <span class="string">├── maven-metadata-nexus.xml</span></span><br><span class="line"><span class="meta">│  </span>             <span class="string">└── resolver-status.properties</span></span><br><span class="line"><span class="meta">├──</span> <span class="string">pom.xml</span></span><br><span class="line"><span class="meta">├──</span> <span class="string">src</span></span><br><span class="line"><span class="meta">│  </span> <span class="string">└── main</span></span><br><span class="line"><span class="meta">│  </span>     <span class="string">├── java</span></span><br><span class="line"><span class="meta">│  </span>     <span class="string">└── resources</span></span><br><span class="line"><span class="meta">│  </span>         <span class="string">└── bootstrap.properties</span></span><br><span class="line"><span class="meta">└──</span> <span class="string">target</span></span><br><span class="line">    <span class="meta">└──</span> <span class="string">cnpc_dj_business_facerouter-1.0.0.jar</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>更新时将jar更新到lib目录时，如果只更新了jar，需要注意清除maven本地库(lib 加载到 maven本地库，本地库在打包进jar)，否则就更新lib里面的其他文件，这样就能识别出来lib发生了更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">a[lib]--&gt;b[maven本地库]--&gt;c[jar]</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="利用lib打包步骤-废弃暂时不能解决"><a href="#利用lib打包步骤-废弃暂时不能解决" class="headerlink" title="利用lib打包步骤(废弃暂时不能解决)"></a>利用lib打包步骤(废弃暂时不能解决)</h2><ol>
<li><p>改造壳项目pom.xml,修改依赖为本地依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.nantian<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bpf_pf_router<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/src/libs/bpf_pf_router-1.0.0.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>把原项目jar包放到项目src目录</p>
</li>
<li><p>改造壳项目pom.xml,修改打包参数，不修改，不会把lib打包进jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--添加下面这句 --&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">includeSystemScope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeSystemScope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>     </span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol>
<li>jar包里面包含依赖，利用本地jar包打包时，依赖不自动打入(暂时未能解决)</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Native-library</title>
    <url>/2019/08/31/spring-native-library/</url>
    <content><![CDATA[<p>错误1:</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java<span class="variable">.lang</span><span class="variable">.UnsatisfiedLinkError</span>: Unable to load <span class="keyword">library</span> &#x27;NVSSDK&#x27;:</span><br><span class="line">libNVSSDK<span class="variable">.so</span>: 无法打开共享对象文件: 没有那个文件或目录</span><br><span class="line">libossdk<span class="variable">.so</span>: 无法打开共享对象文件: 没有那个文件或目录</span><br><span class="line">Native <span class="keyword">library</span> (linux-x86-<span class="number">64</span>/libNVSSDK<span class="variable">.so</span>) <span class="keyword">not</span> found in resource path ([file:/opt/bpf/<span class="keyword">package</span>/term_model/NetCameraCapture/NetCameraCapture-<span class="number">0</span><span class="variable">.0</span><span class="variable">.1</span>-SNAPSHOT<span class="variable">.jar</span>])</span><br></pre></td></tr></table></figure>

<p>解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/ld.so.conf</span><br><span class="line">-------------------</span><br><span class="line">/usr/lib <span class="comment">#so包路径</span></span><br><span class="line">-------------------</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure>

<p><code>supervisord</code>文件添加</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment</span>=<span class="string">PATH=/home/face/jdk1.8/bin:/opt/bpf/package/term_model/NetCameraCapture,LD_LIBRARY_PATH=/usr/lib</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Schedule</title>
    <url>/2019/06/16/spring-schedule/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSchedule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ScheduleAnnotaion(serviceId = &quot;DataSync&quot;, scheduleDesc = &quot;数据同步&quot;, checkIntervalTime = 30, isSignalExecuteFlag = true, addHisTaskTableFlag = false)</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 * * * * ?&quot;)</span> <span class="comment">// 每1分钟执行一次</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeSchedule</span><span class="params">()</span> <span class="keyword">throws</span> ResponseException </span>&#123;</span><br><span class="line">        executeScheduleNow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeScheduleNow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//todo 需要添加的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Schedule</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-WebSocket</title>
    <url>/2019/06/12/spring-websocket/</url>
    <content><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>服务器</p>
<p>下载<a href="http://websocketd.com/">http://websocketd.com/</a></p>
<p>添加脚本<code>count.sh</code>然后添加权限<code>chmod +x count.sh</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">for ((COUNT &#x3D; 1; COUNT &lt;&#x3D; 10; COUNT++)); do</span><br><span class="line">  echo $COUNT</span><br><span class="line">  sleep 1</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>启动<code> ./websocketd --port=8080 ./count.sh</code>服务端</p>
<p>客户端</p>
<p><a href="https://jsbin.com/zemigup/edit?js,console%E5%9C%A8%E8%AF%A5%E7%BD%91%E9%A1%B5%E8%BF%90%E8%A1%8C%E4%B8%8B%E9%9D%A2%E7%9A%84%E8%84%9A%E6%9C%AC">https://jsbin.com/zemigup/edit?js,console在该网页运行下面的脚本</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://127.0.0.1:8080&quot;</span>);</span><br><span class="line"></span><br><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Connection open ...&quot;</span>); </span><br><span class="line">  ws.send(<span class="string">&quot;Hello WebSockets!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">&quot;Received Message: &quot;</span> + evt.data);</span><br><span class="line">  ws.close();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Connection closed.&quot;</span>);</span><br><span class="line">&#125;;      </span><br></pre></td></tr></table></figure>

<p>上面不支持非127.0.0.1的，测试ws://10.30.6.10:8080需要在<a href="http://www.blue-zero.com/WebSocket/">http://www.blue-zero.com/WebSocket/</a>测试</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://spring.io/guides/gs/messaging-stomp-websocket/">官网</a></p>
<p><a href="%5Bhttp://www.ruanyifeng.com/blog/2017/05/websocket.html%5D(http://www.ruanyifeng.com/blog/2017/05/websocket.html)">WebSocket 教程-阮一峰</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-base</title>
    <url>/2018/03/28/springboot-base/</url>
    <content><![CDATA[<h2 id="springboot-基础"><a href="#springboot-基础" class="headerlink" title="springboot 基础"></a>springboot 基础</h2><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p><code>@CrossOrigin</code> 跨域处理</p>
<h3 id="json处理"><a href="#json处理" class="headerlink" title="json处理"></a>json处理</h3><p>springboot集成<code>jackson</code>工具</p>
<p>简单使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//忽略编译该参数为json    </span></span><br><span class="line"><span class="meta">@JsonIgnore</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//bean to json</span></span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">User user=<span class="keyword">new</span> User();</span><br><span class="line">String jsonstr=mapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span> <span class="comment">//返回实体类自动转json</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;register&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Msg <span class="title">userReg</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123; <span class="comment">//@RequestBody 请求参数为json自动转换实体类</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-BugFix</title>
    <url>/2020/01/09/springboot-bugfix/</url>
    <content><![CDATA[<h2 id="SpringBoot-遇到问题总结"><a href="#SpringBoot-遇到问题总结" class="headerlink" title="SpringBoot 遇到问题总结"></a>SpringBoot 遇到问题总结</h2><h3 id="request-getInputStream-为null问题解决"><a href="#request-getInputStream-为null问题解决" class="headerlink" title="request.getInputStream() 为null问题解决"></a>request.getInputStream() 为null问题解决</h3><h4 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a>知识总结</h4><p>request.getInputStream();  request.getReader();  和request.getParameter(“key”);</p>
<p>这三个函数中任何一个方法执行一次后（可正常读取body数据），之后再执行就无效了。读取之后游标就向后面移动了</p>
<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><ol>
<li>使用postman请求没有任何问题，都能读取到</li>
<li>升级springboot 2.2.0以上版本，也不会有任何问题，能读取到</li>
</ol>
<h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><ol>
<li>在control使用<code>request.getInputStream()</code>时获取不到数据流，标记数据被读，断点看<code>req-&gt;request-&gt;inputStream-&gt;ib-&gt;state</code> 如果state=2代表该输入流已读，再次读取就会为null，state=0代码未读</li>
<li>postman能读取，是因为设置了请求头<code>Content-Type</code>所以不存在读取不了，因此也和后面那个过滤器进入的条件有关，所以带请求头的并不会进入过滤器</li>
<li>springboot 2.2.0以上可以读取，估计是修复该问题</li>
<li>springboot 2.2.0以下版本到底是哪里读取了InputStream，最后找到了一个过滤器<code>HiddenHttpMethodFilter</code>,里面断点，的确进去了，并用了<code>request.getParameter</code>方法</li>
</ol>
<h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p>升级，或者添加配置禁用<code>HiddenHttpMethodFilter</code>过滤器，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationData</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> HttpPutFormContentFilter <span class="title">httpPutFormContentFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> HttpPutFormContentFilter();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">disableSpringBootHttpPutFormContentFilter</span><span class="params">(HttpPutFormContentFilter filter)</span> </span>&#123;</span><br><span class="line">		FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">		filterRegistrationBean.setFilter(filter);</span><br><span class="line">		filterRegistrationBean.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">		<span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> HiddenHttpMethodFilter <span class="title">hiddenHttpMethodFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> HiddenHttpMethodFilter();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">disableSpringBootHiddenHttpMethodFilter</span><span class="params">(HiddenHttpMethodFilter filter)</span> </span>&#123;</span><br><span class="line">		FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">		filterRegistrationBean.setFilter(filter);</span><br><span class="line">		filterRegistrationBean.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">		<span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试源码"><a href="#测试源码" class="headerlink" title="测试源码"></a>测试源码</h4><ol>
<li><p>测试接口接收类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/xmbankaccess&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmBankAccessControl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/facecompare&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">facecompare</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;begin&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] reqByte = readReqData(req);</span><br><span class="line">        String str = <span class="keyword">new</span> String(reqByte);</span><br><span class="line">        logger.info(str);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] readReqData(HttpServletRequest request) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] reqBuff = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(request.getInputStream());</span><br><span class="line">            <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(buff, <span class="number">0</span>, buff.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buff, <span class="number">0</span>, len);</span><br><span class="line">                count += len;</span><br><span class="line">            &#125;</span><br><span class="line">            baos.close();</span><br><span class="line">            reqBuff = <span class="keyword">new</span> <span class="keyword">byte</span>[count];</span><br><span class="line">            System.arraycopy(baos.toByteArray(), <span class="number">0</span>, reqBuff, <span class="number">0</span>, count);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;读请求信息异常：&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                bis.close();</span><br><span class="line">                bis = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reqBuff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试请求类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddFaceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        sendMsgHttp(<span class="string">&quot;aaaa&quot;</span>.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] sendMsgHttp(Object paramObj) &#123;</span><br><span class="line">        <span class="comment">// 日志-开始处理</span></span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;HTTP通讯处理开始。。。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 参数初始化</span></span><br><span class="line">        <span class="keyword">byte</span>[] inData = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] outData = <span class="keyword">null</span>;</span><br><span class="line">        URL url = <span class="keyword">null</span>;</span><br><span class="line">        URLConnection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 读取输入的数据</span></span><br><span class="line">        <span class="keyword">if</span> ((paramObj <span class="keyword">instanceof</span> <span class="keyword">byte</span>[])) &#123;</span><br><span class="line">            inData = (<span class="keyword">byte</span>[]) paramObj;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;数据错误：输入的参数必须是byte[]或CompositeData类型的数据&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        BufferedInputStream is = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 建立连接</span></span><br><span class="line"><span class="comment">//			url = new URL(&quot;http://127.0.0.1:8080/xmbankaccess/facecompare&quot;);</span></span><br><span class="line">            url = <span class="keyword">new</span> URL(<span class="string">&quot;http://127.0.0.1:9980/xmbankaccess/facecompare&quot;</span>);</span><br><span class="line">            conn = url.openConnection();</span><br><span class="line">            conn.setConnectTimeout(<span class="number">6000</span>);</span><br><span class="line">            conn.setReadTimeout(<span class="number">6000</span>);</span><br><span class="line">            conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;URL连接已打开。。。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 发送请求数据</span></span><br><span class="line">            os = conn.getOutputStream();</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;向Servlet发送的请求数据为：&quot;</span> + <span class="keyword">new</span> String(inData, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            os.write(inData);</span><br><span class="line">            os.flush();</span><br><span class="line">            <span class="comment">// 读取响应数据</span></span><br><span class="line">            is = <span class="keyword">new</span> BufferedInputStream(conn.getInputStream());</span><br><span class="line">            <span class="keyword">int</span> availableSize = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8192</span>];</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">while</span> ((availableSize = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, availableSize);</span><br><span class="line">            &#125;</span><br><span class="line">            outData = baos.toByteArray();</span><br><span class="line">            baos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;通讯发生异常：&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != os) &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != is) &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                log.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断响应的内容是否为空，空则直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (outData == <span class="keyword">null</span>) &#123;</span><br><span class="line">            outData = <span class="string">&quot;aa&quot;</span>.getBytes();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="%5Bhttps://emacsist.github.io/2017/12/04/springmvc-%E4%B8%AD-request.getinputstream-%E4%B8%BA%E7%A9%BA%E8%A7%A3%E6%83%91/%5D(https://emacsist.github.io/2017/12/04/springmvc-%E4%B8%AD-request.getinputstream-%E4%B8%BA%E7%A9%BA%E8%A7%A3%E6%83%91/)">SpringMVC 中 request.getInputStream() 为空解惑</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot使用jackson转xml</title>
    <url>/2019/12/12/springboot-jackson-xml/</url>
    <content><![CDATA[<h2 id="springboot-添加xml报文接口"><a href="#springboot-添加xml报文接口" class="headerlink" title="springboot 添加xml报文接口"></a>springboot 添加xml报文接口</h2><p>一般的接口都是用json，这篇介绍如何用jackson写xml报文接口</p>
<h3 id="1-给springboot添加依赖"><a href="#1-给springboot添加依赖" class="headerlink" title="1. 给springboot添加依赖"></a>1. 给springboot添加依赖</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="attr">group:</span> <span class="string">&#x27;com.fasterxml.jackson.dataformat&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;jackson-dataformat-xml&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;2.10.1&#x27;</span></span><br><span class="line">compile <span class="attr">group:</span> <span class="string">&#x27;com.fasterxml.jackson.module&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;jackson-module-jaxb-annotations&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;2.10.1&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-创建实体类类"><a href="#2-创建实体类类" class="headerlink" title="2. 创建实体类类"></a>2. 创建实体类类</h3><h4 id="封装属性类"><a href="#封装属性类" class="headerlink" title="封装属性类"></a>封装属性类</h4><p><code>&lt;Element attr=&quot;s,103&quot;&gt;value&lt;/Element&gt;</code>如果不封装，就没有attr这个属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class Element &#123;</span><br><span class="line">    @JacksonXmlProperty(isAttribute &#x3D; true)</span><br><span class="line">    private String attr&#x3D;&quot;q&quot;;</span><br><span class="line"></span><br><span class="line">    @JacksonXmlText</span><br><span class="line">    private String value;</span><br><span class="line"></span><br><span class="line">    public Element() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Element(String attr) &#123;</span><br><span class="line">        this.attr &#x3D; attr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Element(String attr, String value) &#123;</span><br><span class="line">        this.attr &#x3D; attr;</span><br><span class="line">        this.value &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="用户测试类"><a href="#用户测试类" class="headerlink" title="用户测试类"></a>用户测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JacksonXmlRootElement(localName = &quot;service&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlTestBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(isAttribute = true)</span></span><br><span class="line">    <span class="keyword">private</span> String version = <span class="string">&quot;2.0&quot;</span>;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(localName = &quot;BODY&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Body body;</span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123;</span><br><span class="line">        <span class="meta">@JacksonXmlProperty(localName = &quot;TX_CODE&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Element txCode;</span><br><span class="line">        <span class="meta">@JacksonXmlProperty(localName = &quot;Name&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Element name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JacksonXmlProperty(localName = &quot;SYS_HEAD&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> SysHead sysHead;</span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysHead</span> </span>&#123;</span><br><span class="line">        <span class="meta">@JacksonXmlProperty(localName = &quot;TRAN_TIMESTAMP&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Element tranTimestamp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-写测试接口"><a href="#3-写测试接口" class="headerlink" title="3. 写测试接口"></a>3. 写测试接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger=Logger.getLogger(String.valueOf(getClass()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * consumes为请求参数的格式 Content-Type设置为application/xml</span></span><br><span class="line"><span class="comment">     * produces为返回内容的格式 Content-Type设置为application/xml</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xmlTestBean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test&quot;,consumes = MediaType.APPLICATION_XML_VALUE,produces = MediaType.TEXT_XML_VALUE)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> XmlTestBean <span class="title">test</span><span class="params">(<span class="meta">@RequestBody</span> XmlTestBean xmlTestBean)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;receive data: &quot;</span>+xmlTestBean.toString());</span><br><span class="line">        xmlTestBean.setVersion(xmlTestBean.getVersion()+<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        XmlTestBean.Body body= xmlTestBean.getBody();</span><br><span class="line">        Element name =body.getName();</span><br><span class="line">        name.setAttr(name.getAttr()+<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        name.setValue(name.getValue()+<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        body.setName(name);</span><br><span class="line">        body.setTxCode(<span class="keyword">new</span> Element(body.getTxCode().getAttr()+<span class="string">&quot;3&quot;</span>,body.getTxCode().getValue()+<span class="string">&quot;4&quot;</span>));</span><br><span class="line">        xmlTestBean.setBody(body);</span><br><span class="line">        <span class="keyword">return</span> xmlTestBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-优化返回"><a href="#4-优化返回" class="headerlink" title="4. 优化返回"></a>4. 优化返回</h3><p>返回添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * jackson 转xml 全局配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> builder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MappingJackson2XmlHttpMessageConverter <span class="title">mappingJackson2XmlHttpMessageConverter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Jackson2ObjectMapperBuilder builder)</span> </span>&#123;</span><br><span class="line">        ObjectMapper mapper = builder.createXmlMapper(<span class="keyword">true</span>).build();</span><br><span class="line"><span class="comment">//        设置全局返回显示 &lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span></span><br><span class="line">        ((XmlMapper) mapper).enable(ToXmlGenerator.Feature.WRITE_XML_DECLARATION);</span><br><span class="line">        <span class="comment">//&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;UTF-8&#x27;?&gt; 改为双引号 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line">        String propName = com.ctc.wstx.api.WstxOutputProperties.P_USE_DOUBLE_QUOTES_IN_XML_DECL;</span><br><span class="line">        ((XmlMapper) mapper).getFactory()</span><br><span class="line">                .getXMLOutputFactory()</span><br><span class="line">                .setProperty(propName, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter(mapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-测试数据"><a href="#5-测试数据" class="headerlink" title="5. 测试数据"></a>5. 测试数据</h3><h5 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">version</span>=<span class="string">&quot;2.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BODY</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TX_CODE</span> <span class="attr">attr</span>=<span class="string">&quot;s,10&quot;</span>&gt;</span>facecompare<span class="tag">&lt;/<span class="name">TX_CODE</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Name</span> <span class="attr">attr</span>=<span class="string">&quot;s,10&quot;</span>&gt;</span>facecompare<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">IdentNo</span> <span class="attr">attr</span>=<span class="string">&quot;s,10&quot;</span>&gt;</span>99999<span class="tag">&lt;/<span class="name">IdentNo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">IdentPhtFilePath</span> <span class="attr">attr</span>=<span class="string">&quot;s,255&quot;</span>&gt;</span>1.jpg<span class="tag">&lt;/<span class="name">IdentPhtFilePath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SpotPhtFilePath</span> <span class="attr">attr</span>=<span class="string">&quot;s,255&quot;</span>&gt;</span>1.jpg<span class="tag">&lt;/<span class="name">SpotPhtFilePath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">OvlapPhtFlg</span> <span class="attr">attr</span>=<span class="string">&quot;s,255&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">OvlapPhtFlg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CnlNo</span> <span class="attr">attr</span>=<span class="string">&quot;s,255&quot;</span>&gt;</span>12<span class="tag">&lt;/<span class="name">CnlNo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">BODY</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SYS_HEAD</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TRAN_TIMESTAMP</span> <span class="attr">attr</span>=<span class="string">&quot;s,6&quot;</span>&gt;</span>153907<span class="tag">&lt;/<span class="name">TRAN_TIMESTAMP</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CONSUMER_SEQ_NO</span> <span class="attr">attr</span>=<span class="string">&quot;s,42&quot;</span>&gt;</span>137000140118100000042563<span class="tag">&lt;/<span class="name">CONSUMER_SEQ_NO</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">WS_ID</span> <span class="attr">attr</span>=<span class="string">&quot;s,30&quot;</span>&gt;</span>p5<span class="tag">&lt;/<span class="name">WS_ID</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SERVICE_SCENE</span> <span class="attr">attr</span>=<span class="string">&quot;s,2&quot;</span>&gt;</span>01<span class="tag">&lt;/<span class="name">SERVICE_SCENE</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CONSUMER_ID</span> <span class="attr">attr</span>=<span class="string">&quot;s,6&quot;</span>&gt;</span>137000<span class="tag">&lt;/<span class="name">CONSUMER_ID</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SERVICE_CODE</span> <span class="attr">attr</span>=<span class="string">&quot;s,11&quot;</span>&gt;</span>11002000018<span class="tag">&lt;/<span class="name">SERVICE_CODE</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TRAN_DATE</span> <span class="attr">attr</span>=<span class="string">&quot;s,8&quot;</span>&gt;</span>20140118<span class="tag">&lt;/<span class="name">TRAN_DATE</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SYS_HEAD</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">APP_HEAD</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">USER_ID</span> <span class="attr">attr</span>=<span class="string">&quot;s,30&quot;</span>&gt;</span>00120242<span class="tag">&lt;/<span class="name">USER_ID</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PER_PAGE_NUM</span> <span class="attr">attr</span>=<span class="string">&quot;s,3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">PER_PAGE_NUM</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">QUERY_KEY</span> <span class="attr">attr</span>=<span class="string">&quot;s,256&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">QUERY_KEY</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">BRANCH_ID</span> <span class="attr">attr</span>=<span class="string">&quot;s,9&quot;</span>&gt;</span>0135<span class="tag">&lt;/<span class="name">BRANCH_ID</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">APP_HEAD</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="返回数据"><a href="#返回数据" class="headerlink" title="返回数据"></a>返回数据</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">version</span>=<span class="string">&quot;2.00&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BODY</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TX_CODE</span> <span class="attr">attr</span>=<span class="string">&quot;s,103&quot;</span>&gt;</span>facecompare4<span class="tag">&lt;/<span class="name">TX_CODE</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Name</span> <span class="attr">attr</span>=<span class="string">&quot;s,101&quot;</span>&gt;</span>facecompare2<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">BODY</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SYS_HEAD</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TRAN_TIMESTAMP</span> <span class="attr">attr</span>=<span class="string">&quot;s,6&quot;</span>&gt;</span>153907<span class="tag">&lt;/<span class="name">TRAN_TIMESTAMP</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SYS_HEAD</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://github.com/xuanfong1/springLeaning/tree/master/xml">xuanfong1/springLeaning</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>jackson</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-Note</title>
    <url>/2018/05/07/springboot-note/</url>
    <content><![CDATA[<h2 id="Spring-Boot干货系列总纲-阅读笔记"><a href="#Spring-Boot干货系列总纲-阅读笔记" class="headerlink" title="Spring Boot干货系列总纲 阅读笔记"></a><a href="http://tengj.top/2017/04/24/springboot0/">Spring Boot干货系列总纲</a> 阅读笔记</h2><h3 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h3><p>默认<code>src/main/resources</code>目录下，两种格式<code>application.properties</code>或<code>application.yml</code></p>
<p>自定义属性,在配置文件<code>application.properties</code>定义<code>diy.name=&quot;hello&quot; </code>,在使用的地方加上注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;diy.name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span>  String name;</span><br></pre></td></tr></table></figure>

<p>自定义配置类,需要在springboot入口类添加<code>@EnableConfigurationProperties(&#123;ConfigBean.class&#125;)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;diy&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String want;</span><br><span class="line">    <span class="comment">// 省略getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>基础</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot配置文件</title>
    <url>/2018/03/22/springboot-properties-and-configuration/</url>
    <content><![CDATA[<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>配置文件路径<code>resuources\application.properties</code>或者<code>resuources\application.yml</code>二者存一</p>
<ol>
<li><p><code>application.properties</code>与<code>application.yml</code>区别</p>
<p>一个是树形目录，一个是单行配置。eg：<code>server.port=8080</code>等效于</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">diy:</span></span><br><span class="line">  <span class="attr">parmars:</span> <span class="string">hello</span></span><br><span class="line"><span class="comment">#配置文件引用say=hello</span></span><br><span class="line"><span class="attr">say:</span> <span class="string">$&#123;diy.parmars&#125;</span></span><br></pre></td></tr></table></figure>

<p>代码里面引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;diy.parmars&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String imgUrl;​</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h4 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h4><ol>
<li><p>数据库连接配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">     <span class="attr">url:</span> <span class="string">jdbc:mysql://10.14.0.1:3306/sqlname?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">     <span class="attr">username:</span> <span class="string">xxx</span></span><br><span class="line">     <span class="attr">password:</span> <span class="string">xxxx</span></span><br><span class="line">     <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>springboot访问端口配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>静态文件路径映射配置,如果配置了<code>spring.resources.static-location</code>会覆盖原来默认的静态文件设置<code>classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/</code>，<code>file</code>路径指本地磁盘路径，window/Mac/linux的真实目录路径，例如window为<code>C:\\windos\\</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">     <span class="attr">static-locations:</span> <span class="string">&lt;原来的静态文件配置&gt;,file:/Users/xuanleung/Pictures/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>文件上传大小限制(-1不限制)（128KB）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="number">-1</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<h4 id="application-yml与bootstrap-yml区别"><a href="#application-yml与bootstrap-yml区别" class="headerlink" title="application.yml与bootstrap.yml区别"></a><code>application.yml</code>与<code>bootstrap.yml</code>区别</h4><p>加载顺序<code>bootstrap.yml </code>-&gt;<code>bootstrap-xxx.yml</code>-&gt;<code>application.yml</code>-&gt;<code>application-xxx.yml</code></p>
<p>注意：多个配置文件，相同替换，不同并集</p>
<p><code>bootstrap.yml</code>常用于一些系统级别参数，不被更改</p>
<p><code>application.yml</code> 应用级别，可以被更改，通过config service服务</p>
<p><code>bootstrap.yml</code>常用于应用程序引导阶段例如</p>
<ul>
<li>spring config server配置</li>
<li>application.name配置</li>
</ul>
<p>使用config server时，<code>bootstrap.yml</code>常用配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-a</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://127.0.0.1:8888</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;CONFIG_SERVER_PASSWORD:password&#125;</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">initial-interval:</span> <span class="number">2000</span></span><br><span class="line">        <span class="attr">max-interval:</span> <span class="number">10000</span></span><br><span class="line">        <span class="attr">multiplier:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">max-attempts:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>在不考虑加载顺序，两个配置是可以通用的</p>
<h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h3><p>可以在配置文件(application/bootstrap)名后加上dev、test等后缀以<code>-</code>分开。使用环境时加上参数<code>--spring.profiles.active=peer1</code>即可</p>
<p>eg: 新建个<code>application-xxx.yml</code>，运行时执行<code>java -jar app.jar --spring.profiles.active=xxx</code></p>
<p><strong>注意</strong>：</p>
<p>这里如果存在多个环境配置文件，且有<code>application/bootstrap</code>没有后缀的原文件时会优先加载它，然后再用指定环境的配置覆盖没有后缀的，这样就会导致，如果没有后缀的文件指定了某个配置，但是有后缀的却没有设置改配置，覆盖的情况，就是取并集，导致某些设置不生效。</p>
<h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ol>
<li><p>springboot存储中文到mysql数据库乱码</p>
<p>解决：在配置文件连接数据库地方添加<code>url: jdbc:mysql://&lt;ip&gt;:&lt;端口&gt;/&lt;数据库名字&gt;?useUnicode=true&amp;characterEncoding=utf-8</code></p>
</li>
<li><p><code>application.yml</code>添加注释报错，提示找不到<code>Failed to load property source from location &#39;classpath:/application.yml&#39;</code></p>
<p>解决：检查文件编码格式，不是<code>utf-8</code>修改为<code>utf-8</code></p>
</li>
<li><p>eureka高可用时 提示不可用<code>unavailable-replicas </code>，原因是存在<code>application.yml</code>,且里面设置了</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>  <span class="comment">#Eureka默认也会作为客户端尝试注册，因此需禁用注册行为</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>然后<code>application-peer.yml</code>并没有设置改属性，取并集之后导致，禁止注册了</p>
<p>解决：</p>
<ol>
<li><p>修改<code>application-peer.yml</code>里的属性,并设置为<code>true</code>(未测试)</p>
</li>
<li><p>删除或重命名<code>application-peer.yml</code>(采用)</p>
</li>
<li><p>在<code>application-peer.yml</code>覆写配置，并设置为<code>true</code>（测试，能注册，但是还是<code>unavailable-replicas</code>）</p>
<p>解决：检查是否<code>application.name</code>是否设置了不一样的值，一定要设置一样的名字</p>
</li>
</ol>
</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://blog.csdn.net/zsl129/article/details/52906762">Springboot 之 静态资源路径配置</a></p>
<p><a href="https://blog.csdn.net/u012470019/article/details/77973156">spring cloud unavailable-replicas</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 动态添加监听 rabbitMQ 队列</title>
    <url>/2020/07/10/springboot-rabbitmq/</url>
    <content><![CDATA[<h2 id="动态监听队列"><a href="#动态监听队列" class="headerlink" title="动态监听队列"></a>动态监听队列</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>这里需要监听多个队列，而且运行途中可能会增加监听，或减少监听，因此实现需要采用<code>SimpleMessageListenerContainer</code>类</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li><p>添加gradle依赖</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-amqp&#x27;</span></span><br><span class="line">compile <span class="string">&#x27;cn.hutool:hutool-all:5.3.8&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加<code>application.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.rabbitmq.host</span>=<span class="string">10.10.10.11</span></span><br><span class="line"><span class="meta">spring.rabbitmq.port</span>=<span class="string">14012</span></span><br><span class="line"><span class="meta">spring.rabbitmq.username</span>=<span class="string">test</span></span><br><span class="line"><span class="meta">spring.rabbitmq.password</span>=<span class="string">test</span></span><br><span class="line"><span class="meta">spring.rabbitmq.virtual-host</span>=<span class="string">/</span></span><br><span class="line"><span class="meta">spring.rabbitmq.connection-timeout</span>=<span class="string">5000</span></span><br><span class="line"><span class="meta">spring.rabbitmq.countDownLatch</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">spring.rabbitmq.webport</span>=<span class="string">14013</span></span><br><span class="line"><span class="meta">spring.rabbitmq.websocket-port</span>=<span class="string">14014</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个监听类<code>RbMQReceiverHandler.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听接收消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RbMQReceiverHandler</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;====接收到&quot;</span> + message.getMessageProperties().getConsumerQueue() + <span class="string">&quot;队列的消息=====&quot;</span>);</span><br><span class="line">        log.info(message.getMessageProperties().toString());</span><br><span class="line">        log.info(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个<code>RabbitMQConfig.java</code>配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(cn.hutool.extra.spring.SpringUtil.class)</span>  <span class="comment">//huTool添加，才能用getBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RbMQReceiverHandler rbMQReceiverHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleMessageListenerContainer <span class="title">messageListenerContainer</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        SimpleMessageListenerContainer container = <span class="keyword">new</span> SimpleMessageListenerContainer();</span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line">        container.setQueueNames(<span class="string">&quot;test1_staff&quot;</span>);</span><br><span class="line">        container.setMessageListener(rbMQReceiverHandler);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加一个动态添加队列的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RbController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addQueue</span><span class="params">(<span class="meta">@RequestParam</span> String queueNmae)</span> </span>&#123;</span><br><span class="line">        SimpleMessageListenerContainer container = SpringUtil.getBean(SimpleMessageListenerContainer.class);<span class="comment">//获取实例</span></span><br><span class="line">        container.addQueueNames(queueNmae);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;add &quot;</span> + queueNmae + <span class="string">&quot; ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delQueue</span><span class="params">(<span class="meta">@RequestParam</span> String queueNmae)</span> </span>&#123;</span><br><span class="line">        SimpleMessageListenerContainer container = SpringUtil.getBean(SimpleMessageListenerContainer.class);</span><br><span class="line">        container.removeQueueNames(queueNmae);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;delete &quot;</span> + queueNmae + <span class="string">&quot; ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试调用post 127.0.0.1:8080/queue 接口就能添加队列了，发送mq的消息没写测试方法，但是可以直接到mq的管理页面push一条消息进行测试</p>
</li>
</ol>
<h2 id="多线程监听队列"><a href="#多线程监听队列" class="headerlink" title="多线程监听队列"></a>多线程监听队列</h2><p>监听队列时，单线程</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/qq_43585377/article/details/109204501">工作随笔——rabbitmq的多线程监听（Springboot）</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>rabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot前后端分离架构</title>
    <url>/2018/03/28/springboot-vue-springsecurity/</url>
    <content><![CDATA[<h3 id="架构模型（Spring-boot-vue-Spring-Security）"><a href="#架构模型（Spring-boot-vue-Spring-Security）" class="headerlink" title="架构模型（Spring boot+vue+Spring Security）"></a>架构模型（<strong>Spring boot+vue+Spring Security</strong>）</h3><h4 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a><a href="https://vincentmi.gitbooks.io/spring-security-reference-zh/content/1_introduction.html">SpringSecurity</a></h4><p>是一个安全认证权限控制等spring框架依赖注入原理(ioc)</p>
<h5 id="简单用于登陆校验"><a href="#简单用于登陆校验" class="headerlink" title="简单用于登陆校验"></a>简单用于登陆校验</h5><ol>
<li><p>添加maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="2">
<li><p>新建<code>User</code>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userid;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//get,set省略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//改为true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//改为true，不然账号是锁定的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//改为true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//改为true，不然账号是禁用的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建<code>UserMapper</code>接口连接数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where username=#&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">loadUserByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建<code>UserService</code>用户服务,注意实现<code>UserDetailsService</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user = userMapper.loadUserByUsername(s);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">&quot;用户名不对&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建<code>UserUtil</code>工具类用户获取登陆后的用户信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getCurrentHr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最重要的一步继承该类<code>WebSecurityConfigurerAdapter</code>，并配置,添加注解标明是配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解决静态资源被拦截的问题，下面的忽略拦截，下面的路径不会走安全验证</span></span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/index.html&quot;</span>, <span class="string">&quot;/static/**&quot;</span>, <span class="string">&quot;/login_p&quot;</span>,<span class="string">&quot;/user/register&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userService).passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder());<span class="comment">//配置用户登陆服务，并配置密码加密方式，这里可以自定义加密方式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/admin/**&quot;</span>)..hasRole(<span class="string">&quot;超级管理员&quot;</span>)<span class="comment">//改地址需要超管</span></span><br><span class="line">            .anyRequest().authenticated()<span class="comment">//其他地址的访问均需验证权限</span></span><br><span class="line">            .and().formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/login_p&quot;</span>)<span class="comment">//指定登录页是&quot;/login_p&quot;，输入其他地址会替跳转到该页面</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">            .usernameParameter(<span class="string">&quot;username&quot;</span>).passwordParameter(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">            .permitAll() <span class="comment">//指定登陆接口，只能用表单，如果要json请求要添加过滤器</span></span><br><span class="line">            .failureHandler(<span class="keyword">new</span> AuthenticationFailureHandler()) <span class="comment">//登陆失败回调</span></span><br><span class="line">            .successHandler(<span class="keyword">new</span> AuthenticationSuccessHandler()) <span class="comment">//登陆成功回调</span></span><br><span class="line">            .and().logout().permitAll()</span><br><span class="line">            .and().csrf().disable(); <span class="comment">//解决非thymeleaf的form表单提交被拦截问题</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>登陆成功会自动有cookie返回，清除cookie然后测试都成功了</p>
</li>
</ol>
<h5 id="角色权限控制"><a href="#角色权限控制" class="headerlink" title="角色权限控制"></a>角色权限控制</h5><p>这里简单实用，没有添加角色表，user表机构</p>
<table>
<thead>
<tr>
<th>username</th>
<th>password</th>
<th>role</th>
</tr>
</thead>
<tbody><tr>
<td>admin</td>
<td>***</td>
<td>admin</td>
</tr>
<tr>
<td>zhangsan</td>
<td>***</td>
<td>user</td>
</tr>
</tbody></table>
<ol start="8">
<li><p>在用户实体类重写<code>getAuthorities</code>该方法，该方法读取用户角色并存储返回到角色数组，如果是分表，role可以存储多个依次添加即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">    List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">     	<span class="comment">//“ROLE_”由于数据库未添加，所以这里手动添加</span></span><br><span class="line">        authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">&quot;ROLE_&quot;</span> + role));</span><br><span class="line">    <span class="keyword">return</span> authorities;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在配置里添加,意思是<code>antMatchers</code>里的地址只能是<code>admin</code>角色返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/flower/imgUpload&quot;</span>, <span class="string">&quot;/flower/ddClass&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>) <span class="comment">//这两个地址需要管理员角色</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>现在已经能控制角色权限了，但是权限不足返回不友好，这里设置权限不足，返回提示信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.exceptionHandling().accessDeniedHandler(<span class="keyword">new</span> AccessDeniedHandler() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;权限不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="菜单角色管理"><a href="#菜单角色管理" class="headerlink" title="菜单角色管理"></a>菜单角色管理</h5><p>主要方法是设置过滤器</p>
<ol start="11">
<li><p>在配置文件添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.withObjectPostProcessor(<span class="keyword">new</span> ObjectPostProcessor&lt;FilterSecurityInterceptor&gt;() &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;O extends FilterSecurityInterceptor&gt; <span class="function">O <span class="title">postProcess</span><span class="params">(O o)</span> </span>&#123;</span><br><span class="line">   	o.setSecurityMetadataSource(urlFilterInvocationSecurityMetadataSource);</span><br><span class="line">       o.setAccessDecisionManager(urlAccessDecisionManager);</span><br><span class="line">       <span class="keyword">return</span> o;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加<code>urlFilterInvocationSecurityMetadataSource</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlFilterInvocationSecurityMetadataSource</span> <span class="keyword">implements</span> <span class="title">FilterInvocationSecurityMetadataSource</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MenuService menuService;</span><br><span class="line">    AntPathMatcher antPathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAttributes</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="comment">//获取请求地址</span></span><br><span class="line">        String requestUrl = ((FilterInvocation) o).getRequestUrl();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;/login_p&quot;</span>.equals(requestUrl)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Menu&gt; allMenu = menuService.getAllMenu();</span><br><span class="line">        <span class="keyword">for</span> (Menu menu : allMenu) &#123;</span><br><span class="line">            <span class="keyword">if</span> (antPathMatcher.match(menu.getUrl(), requestUrl)&amp;&amp;menu.getRoles().size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                List&lt;Role&gt; roles = menu.getRoles();</span><br><span class="line">                <span class="keyword">int</span> size = roles.size();</span><br><span class="line">                String[] values = <span class="keyword">new</span> String[size];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                    values[i] = roles.get(i).getName();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> SecurityConfig.createList(values);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有匹配上的资源，都是登录访问</span></span><br><span class="line">        <span class="keyword">return</span> SecurityConfig.createList(<span class="string">&quot;ROLE_LOGIN&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAllConfigAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterInvocation.class.isAssignableFrom(aClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加<code>urlAccessDecisionManager</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlAccessDecisionManager</span> <span class="keyword">implements</span> <span class="title">AccessDecisionManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decide</span><span class="params">(Authentication authentication, Object o, Collection&lt;ConfigAttribute&gt; collection)</span> <span class="keyword">throws</span> AccessDeniedException, AuthenticationException </span>&#123;</span><br><span class="line">        Iterator&lt;ConfigAttribute&gt; iterator = collection.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            ConfigAttribute ca = iterator.next();</span><br><span class="line">            <span class="comment">//当前请求需要的权限</span></span><br><span class="line">            String needRole = ca.getAttribute();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;ROLE_LOGIN&quot;</span>.equals(needRole)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (authentication <span class="keyword">instanceof</span> AnonymousAuthenticationToken) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">&quot;未登录&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当前用户所具有的权限</span></span><br><span class="line">            Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();</span><br><span class="line">            <span class="keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">                <span class="keyword">if</span> (authority.getAuthority().equals(needRole)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(<span class="string">&quot;权限不足!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(ConfigAttribute configAttribute)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ol>
<h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ol>
<li><p>输出错误<code>User account is locked</code>。</p>
<p>解决：用户类设置返回true，原因自带安全机制，如果需要实现登陆错误次数，此处根据逻辑修改，并在user表添加该字段，通过数据库记录设置是否锁定。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line"> public boolean isAccountNonLocked() &#123;</span><br><span class="line">     return true;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>错误<code>No AuthenticationProvider found for org.springframework.security.authentication.UsernamePasswordAuthenticationToken</code></p>
<p>解决:<code>WebSecurityConfigurerAdapter</code>没有配置注册userService，而且必须对密码加密，这里必须设置加密方式，可以<code>new PasswordEncoder</code>实现自定加密</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">auth.userDetailsService(userService).passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>错误<code>Encoded password does not look like BCrypt</code>原因不识别数据库密码，有可能密码字段太短，或者被截断，另一种就是通过网页手动加密，复制进数据库也有可能不识别，解决通过代码加密插入解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BCryptPasswordEncoder encoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">String encode = encoder.encode(user.getPassword());</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ol>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://github.com/lenve/vhr">lenve/vhr</a></p>
<h6 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/flower/imgUpload&quot;</span>, <span class="string">&quot;/flower/ddClass&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>) <span class="comment">//这两个地址需要管理员角色</span></span><br><span class="line">                <span class="comment">//其他地址的访问均需验证权限</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().formLogin()</span><br><span class="line">                <span class="comment">//指定登录页是&quot;/login&quot;</span></span><br><span class="line">                .loginPage(<span class="string">&quot;/login_p&quot;</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>).usernameParameter(<span class="string">&quot;username&quot;</span>).passwordParameter(<span class="string">&quot;password&quot;</span>).permitAll()</span><br><span class="line">                .failureHandler(<span class="keyword">new</span> AuthenticationFailureHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                        log.info(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">                        httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                        PrintWriter out = httpServletResponse.getWriter();</span><br><span class="line">                        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                        String jsonResult;</span><br><span class="line">                        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> UsernameNotFoundException )&#123;</span><br><span class="line">                            jsonResult=e.getMessage();</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( e <span class="keyword">instanceof</span> BadCredentialsException) &#123;</span><br><span class="line">                            jsonResult=<span class="string">&quot;密码输入错误，登录失败!&quot;</span>;</span><br><span class="line">                        &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">                            jsonResult=<span class="string">&quot;登录失败!&quot;</span>;</span><br><span class="line">                            log.error(e.getMessage());</span><br><span class="line">                        &#125;</span><br><span class="line">                        jsonResult=mapper.writeValueAsString(ResultUtil.error(-<span class="number">201</span>,jsonResult));</span><br><span class="line">                        out.write(jsonResult);</span><br><span class="line">                        out.flush();</span><br><span class="line">                        out.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).successHandler(<span class="keyword">new</span> AuthenticationSuccessHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                        log.info(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">                        httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                        PrintWriter out = httpServletResponse.getWriter();</span><br><span class="line">                        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                        String jsonResult=mapper.writeValueAsString(ResultUtil.success(UserUtils.getCurrentHr()));</span><br><span class="line">                        out.write(jsonResult);</span><br><span class="line">                        out.flush();</span><br><span class="line">                        out.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .and().logout().permitAll()</span><br><span class="line">                .and().csrf().disable() <span class="comment">//解决非thymeleaf的form表单提交被拦截问题</span></span><br><span class="line">                .exceptionHandling().accessDeniedHandler(<span class="keyword">new</span> AccessDeniedHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                        log.info(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">                        httpServletResponse.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                        PrintWriter out = httpServletResponse.getWriter();</span><br><span class="line">                        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                        String jsonResult;</span><br><span class="line">                        jsonResult=<span class="string">&quot;权限不足&quot;</span>;</span><br><span class="line">                        jsonResult=mapper.writeValueAsString(ResultUtil.error(-<span class="number">201</span>,jsonResult));</span><br><span class="line">                        out.write(jsonResult);</span><br><span class="line">                        out.flush();</span><br><span class="line">                        out.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Java</tag>
        <tag>SpringSecurity</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCould-Bus</title>
    <url>/2018/04/22/springcould-bus/</url>
    <content><![CDATA[<p> SpringCould Bus是将分布式的节点用轻量的消息代理连接起来。用于服务间广播、通信、监控等。</p>
<p>该篇实现：通过bus实现配置修改后通知服务更改</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li><p>在configclient的基础上添加依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">compile(<span class="string">&#x27;org.springframework.cloud:spring-cloud-starter-bus-amqp&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>Hicontroller</code>类添加注解<code>@RefreshScope</code></p>
</li>
<li><p>在配置文件添加mq的服务器地址，和开启刷新</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">112.74</span><span class="number">.51</span><span class="number">.136</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">14002</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">adminroot</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> [<span class="string">&quot;health&quot;</span>,<span class="string">&quot;info&quot;</span>,<span class="string">&quot;bus-refresh&quot;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试，依次运行注册中心、配置中心、该服务，然后访问接口，然后修改git config下的配置信息，然后访问接口，还是没变，需要调用<code>127.0.0.1:8097/actuator/bus-refresh?destination=config-client:8097</code>其中的<code>config-client:8097</code>是指定更新那台服务，也可以不指定参数，默认就是更新所有，然后在访问测试接口，发现已经配置已经改变了。</p>
</li>
</ol>
<h3 id="架构优化"><a href="#架构优化" class="headerlink" title="架构优化"></a>架构优化</h3><p>可以在config-server添加config-client的配置，这样就可以调配置刷新<code>127.0.0.1:8096/actuator/bus-refresh/</code>接口，刷新所有配置客户端的配置了，注意依赖要加上 <code>compile(&#39;org.springframework.cloud:spring-cloud-starter-config&#39;)</code>config-client的配置依赖，因为config-client的依赖和<code>config-server</code>的<code>bus-refresh</code>接口不一样</p>
<p><img src="https://s3.ax1x.com/2021/03/18/625oh4.png" alt="image-20200811155609870"></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SpringCould</tag>
        <tag>Bus</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCould-config</title>
    <url>/2018/04/18/springcould-config/</url>
    <content><![CDATA[<h3 id="配置-config-中心"><a href="#配置-config-中心" class="headerlink" title="配置(config)中心"></a>配置(config)中心</h3><p>作用多服务统一配置管理，主要分配置中心服务端，和配置中心客户端（主要存储配置）</p>
<p><img src="https://s3.ax1x.com/2021/03/18/627ZE6.png" alt="image-20200811155609870"></p>
<h4 id="Config-Server"><a href="#Config-Server" class="headerlink" title="Config Server"></a>Config Server</h4><ol>
<li><p>新建一个springboot项目，取名<code>configserver</code>，勾选</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Could discovery-&gt; eureka server   注释掉了，引用了不注册报错，如果要用，就注册就行，这里是测试config所以先不注册</li>
<li><input checked="" disabled="" type="checkbox"> Could config-&gt;config server</li>
</ul>
</li>
<li><p>在<code>application</code>启动类添加<code>@EnableConfigServer</code></p>
</li>
<li><p>新建一个git配置文件仓库，这里就在当前工程创建，因为这个反正都要上传git，在项目目录新建一个<code>config</code>目录,然后在目录里新建一个配置仓库<code>testrepo</code>,再在仓库添加配置文件<code>config-client-dev.properties</code>内容如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">config-client.testsmsg</span> = <span class="string">hello config me</span></span><br><span class="line"><span class="attr">test</span> = <span class="string">haa</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后git commit  push推送到远程分支</p>
</li>
<li><p>在配置文件<code>application.yml</code>添加如下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8096</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span>  <span class="comment">#配置仓库分支</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/xuanfong1/SpringCould/</span>   <span class="comment">#配置仓库git地址</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">config/testrepo</span>   <span class="comment">#配置仓库路径</span></span><br><span class="line">          <span class="attr">username:</span>   <span class="comment">#访问git仓库的用户名，这里因为是开放项目所以不需要设置</span></span><br><span class="line">          <span class="attr">password:</span>   <span class="comment">#访问git仓库的密码</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问<a href="http://127.0.0.1:8096/config-client/dev/master%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">http://127.0.0.1:8096/config-client/dev/master这个地址读取配置文件</a></p>
<p>下面介绍http请求地址与资源文件映射问题</p>
<p>Url :  /{application}/{profile}[/{label}]</p>
<p>资源文件格式可以为</p>
<ul>
<li><p>/{application}-{profile}.yml</p>
</li>
<li><p>/{label}/{application}-{profile}.yml</p>
</li>
<li><p>/{application}-{profile}.properties</p>
</li>
<li><p>/{label}/{application}-{profile}.properties</p>
<p>举例：master分支有配置文件<code>config-client-dev.properties</code>访问的url为<code>ip:port/config-client/dev/master</code></p>
</li>
</ul>
</li>
</ol>
<h4 id="config-client"><a href="#config-client" class="headerlink" title="config client"></a>config client</h4><ol>
<li><p>新建一个springboot项目，取名<code>configserver</code>，勾选</p>
<ul>
<li><input disabled="" type="checkbox"> web-&gt;web</li>
<li><input disabled="" type="checkbox"> Could config-&gt;config client</li>
</ul>
</li>
<li><p>修改配置文件<code>application.properties</code>一定要修改为**<code>bootstrap.yml</code>**并添加如下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8097</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#指明远程仓库的分支</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#dev(开放)、test(测试)、pro(正式)</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://127.0.0.1:8096/</span>  <span class="comment">#配置中心地址</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加一个api接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HiController &#123;</span><br><span class="line">    @Value(&quot;$&#123;test&#125;&quot;)  &#x2F;&#x2F;调用配置中心的配置</span><br><span class="line">    String test;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;hi&quot;)</span><br><span class="line">    public String hi()&#123;</span><br><span class="line">        return test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问<a href="http://127.0.0.1:8097/hi%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95">http://127.0.0.1:8097/hi进行测试</a></p>
</li>
</ol>
<h4 id="配置中心高可用"><a href="#配置中心高可用" class="headerlink" title="配置中心高可用"></a>配置中心高可用</h4><h5 id="config-server"><a href="#config-server" class="headerlink" title="config server"></a>config server</h5><ol>
<li><p>添加依赖<code>compile(&#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-server&#39;)</code></p>
</li>
<li><p>在<code>Application</code>启动类添加注解<code>@EnableEurekaClient</code></p>
</li>
<li><p>在<code>Application.yml</code>配置文件增加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8091/eureka/</span> <span class="comment">#注意要加eureka，不然找不到</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="config-client-1"><a href="#config-client-1" class="headerlink" title="config client"></a>config client</h5><ol>
<li><p>添加依赖<code>compile(&#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-server&#39;)</code></p>
</li>
<li><p>在<code>Application</code>启动类添加注解<code>@EnableEurekaClient</code></p>
</li>
<li><p>在<code>bootstrap.yml</code>配置文件修改如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8097</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#指明远程仓库的分支</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#dev(开放)、test(测试)、pro(正式)</span></span><br><span class="line"><span class="comment">#      uri: http://127.0.0.1:8096/  #配置中心地址  ,用eureka就不是ip地址了</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">config-server</span>  <span class="comment">#这里用服务名</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8091/eureka/</span> <span class="comment">#注意要加eureka，不然找不到</span></span><br></pre></td></tr></table></figure>

<p>所以多个config-server运行，通过负载均衡就可以达到高可用</p>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>依次运行服务注册中心、配置中心服务、读配置中心的客户端服务</p>
<p>访问<a href="http://127.0.0.1:8097/hi%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95">http://127.0.0.1:8097/hi进行测试</a></p>
<h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[git仓库] --&gt;B(config server)</span><br><span class="line">A[git仓库] --&gt;B1(config server)</span><br><span class="line">A[git仓库] --&gt;B2(config server)</span><br><span class="line">B --&gt; C&#123;负载均衡&#125;</span><br><span class="line">B1 --&gt; C&#123;负载均衡&#125;</span><br><span class="line">B2 --&gt; C&#123;负载均衡&#125;</span><br><span class="line">C --&gt; D[service A]</span><br><span class="line">C --&gt; E[service B]</span><br><span class="line">F[eureka service]</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="使用本地文件作为配置中心"><a href="#使用本地文件作为配置中心" class="headerlink" title="使用本地文件作为配置中心"></a>使用本地文件作为配置中心</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8096</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">native</span>  <span class="comment">#这里进行仓库预选，可设置native和git，分别对应spring.cloud.config.server下面的值</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span>  <span class="comment">#配置仓库分支</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/xuanfong1/SpringCould/</span>   <span class="comment">#配置仓库git地址</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">config/testrepo</span>   <span class="comment">#配置仓库路径</span></span><br><span class="line"><span class="comment">#          username:   #访问git仓库的用户名，这里因为是开放项目所以不需要设置</span></span><br><span class="line"><span class="comment">#          password:   #访问git仓库的密码</span></span><br><span class="line">        <span class="attr">native:</span> <span class="comment">#本地配置文件仓库的绝对路径</span></span><br><span class="line">          <span class="attr">search-locations:</span> <span class="string">/Users/xuanleung/workspace/SpringCould/config/testrepo</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8091/eureka/</span> <span class="comment">#注意要加eureka，不然找不到</span></span><br></pre></td></tr></table></figure>

<h3 id="公共配置文件"><a href="#公共配置文件" class="headerlink" title="公共配置文件"></a>公共配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">application.properties <span class="comment">#公共配置文件，所有服务都会加载这个默认配置文件，适合放公共的数据库配置等</span></span><br><span class="line">application-dev.properties <span class="comment">#公共带环境的配置文件，dev环境会默认加载这个公共配置文件</span></span><br><span class="line">config-client-dev.properties <span class="comment">#config-client服务的私有配置</span></span><br><span class="line">test-dev.properties <span class="comment">#部分项目的公共配置，如一些项目引用mysql,一些不引用</span></span><br><span class="line"><span class="comment">#使用指定配置，需要在项目中设置下面这个选项</span></span><br><span class="line">spring.cloud.config.name = config-client,<span class="built_in">test</span>  <span class="comment">#指定配置文件，如果不需要指定，注释该行</span></span><br></pre></td></tr></table></figure>



<h3 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h3><p>如果要使用vm启动参数，需要在config client设置如下三个参数</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用vm启动参数，去掉下面的注释</span></span><br><span class="line"><span class="meta">spring.cloud.config.allowOverride</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.cloud.config.overrideNone</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.cloud.config.overrideSystemProperties</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>

<p>疑问：vm设置-Dserver.port等参数时，又不需要上面的设置<br>解释：vm参数如果不设置上面的会被配置文件里面的覆盖，如果配置文件里面没有设置，那就是用的vm的了</p>
<h4 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h4><p>举例<code>server.port</code></p>
<ol>
<li><p>client 里面的<code>resources/bootstrap.yml</code></p>
</li>
<li><p>vm里面<code>-Dserver.port</code></p>
</li>
<li><p>config里面<code>config-client-dev.properties</code></p>
</li>
</ol>
<p>三个都设置，使用3，只设置1，2使用2，只设置1，使用1</p>
<p>可推测优先级3&gt;2&gt;1</p>
<h3 id="开发加载自己配置优化"><a href="#开发加载自己配置优化" class="headerlink" title="开发加载自己配置优化"></a>开发加载自己配置优化</h3><p>利用默认分支功能，全局修改所有微服务为自己的配置</p>
<ol>
<li>新建个自己的配置分支</li>
<li>复写spring config server启动参数<code>spring.cloud.config.server.git.default-label=my-baranch</code>为自己的分支号</li>
<li>注意不要在spring config client指定分支<code>spring.cloud.config.label=master</code></li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SpringCould</tag>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCould-eureka</title>
    <url>/2018/04/11/springcould-eureka/</url>
    <content><![CDATA[<h3 id="eureka"><a href="#eureka" class="headerlink" title="eureka"></a>eureka</h3><p><a href="https://spring.io/guides/gs/service-registration-and-discovery/">eureka</a>是一个服务注册和发现模块</p>
<ol>
<li><p>新建springboot工程，作为eureka服务注册中心，勾选如下选项</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Cloud Discovery-&gt;Eureka Server</li>
</ul>
</li>
<li><p>在<code>Application</code>类上添加注解<code>@EnableEurekaServer</code>声明注册中心</p>
</li>
<li><p>在<code>Application.yml</code>配置文件添加内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8091</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment">#指定该Eureka实例的主机名，本地默认127.0.0.1，部署docker时再试验</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#Eureka默认也会作为客户端尝试注册，因此需禁用注册行为</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问<a href="http://127.0.0.1:8091/">http://127.0.0.1:8091</a>可以进入管理页面查看注册了那些服务</p>
</li>
<li><p>重复第一步，作为eureka客户端</p>
</li>
<li><p>在<code>Application</code>类上添加注解<code>@EnableEurekaClient</code>声明客户端</p>
</li>
<li><p>在<code>Application.yml</code>配置文件添加内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8092</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-client</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8091/eureka/</span> <span class="comment">#注意要加eureka，不然找不到</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>再进入eureka服务注册中心就可以看到Application名为<code>eureka-client</code>的客户端</p>
</li>
</ol>
<h5 id="eureka高可用-未实践"><a href="#eureka高可用-未实践" class="headerlink" title="eureka高可用(未实践)"></a>eureka高可用(未实践)</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多节点固定模式,文件名application-peer1.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;APPLICATION_NAME:eureka-center&#125;</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">$&#123;EUREKA_PORT:14031&#125;</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">$&#123;EUREKA_HOST:eureka-center-peer1&#125;</span>  <span class="comment">#指定该Eureka实例的主机名，需要host映射</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span>  <span class="comment">#高可用</span></span><br><span class="line">      <span class="attr">defaultZone:</span>  <span class="string">$&#123;EUREKA_CENTER_REG:http://eureka-center-peer2:14032/eureka/&#125;</span></span><br><span class="line"><span class="comment">###----------------第二个eureka注册中心互相注册即可-----------------------------------------  </span></span><br><span class="line"><span class="comment">#多节点固定模式,文件名application-peer2.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;APPLICATION_NAME:eureka-center&#125;</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">$&#123;EUREKA_PORT:14032&#125;</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">$&#123;EUREKA_HOST:eureka-center-peer2&#125;</span>  <span class="comment">#指定该Eureka实例的主机名，需要host映射</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span>  <span class="comment">#高可用</span></span><br><span class="line">      <span class="attr">defaultZone:</span>  <span class="string">$&#123;EUREKA_CENTER_REG:http://eureka-center-peer1:14031/eureka/&#125;</span></span><br></pre></td></tr></table></figure>

<p>启动:</p>
<p><code>java -jar app.jar --spring.profiles.active=peer1</code></p>
<p><code>java -jar app.jar --spring.profiles.active=peer2</code></p>
<p>注意：</p>
<ol>
<li>高可用启动，application.name一定要一致</li>
<li>一定要指定端口号</li>
<li>不能禁用自我注册，注意配置文件加载顺序及覆盖顺序</li>
</ol>
<h3 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a><a href="https://spring.io/guides/gs/actuator-service/">健康检查</a></h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">  compile(<span class="string">&#x27;org.springframework.cloud:spring-cloud-starter-netflix-eureka-server&#x27;</span>)</span><br><span class="line"> <span class="comment">//上面的包包含下面的依赖,因此springcould不需要添加该依赖</span></span><br><span class="line">compile(<span class="string">&quot;org.springframework.boot:spring-boot-starter-actuator&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>常用链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl localhost:8080&#x2F;actuator&#x2F;health</span><br><span class="line">&#123;&quot;status&quot;:&quot;UP&quot;&#125;</span><br><span class="line">$ curl localhost:8080&#x2F;actuator</span><br><span class="line">&#123;&quot;_links&quot;:&#123;&quot;self&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;127.0.0.1:14031&#x2F;actuator&quot;,&quot;templated&quot;:false&#125;,&quot;health&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;127.0.0.1:14031&#x2F;actuator&#x2F;health&quot;,&quot;templated&quot;:false&#125;,&quot;info&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;127.0.0.1:14031&#x2F;actuator&#x2F;info&quot;,&quot;templated&quot;:false&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>dockerfile</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HEALTHCHECK  --interval&#x3D;5m --timeout&#x3D;3s \</span><br><span class="line">  CMD wget --quiet --tries&#x3D;1 --spider http:&#x2F;&#x2F;127.0.0.1:14031&#x2F;actuator&#x2F;health || exit 1</span><br><span class="line"> # --quiet  安静模式</span><br><span class="line"> # --tries&#x3D;1  重试次数</span><br><span class="line"> # --spider  不下载任何资料</span><br><span class="line"> </span><br><span class="line"> wget --quiet --tries&#x3D;1 --spider http:&#x2F;&#x2F;127.0.0.1:14031&#x2F;actuator&#x2F;health</span><br><span class="line">  </span><br></pre></td></tr></table></figure>



<p><a href="http://blog.51cto.com/snaile/1600281">Wget命令参数及使用</a></p>
<p>问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&#39;RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</span><br></pre></td></tr></table></figure>

<p>原因据说是</p>
<p>注册中心不是高可用的原因</p>
<p>出处：<a href="https://www.cnblogs.com/xiaojf/p/7919088.html">https://www.cnblogs.com/xiaojf/p/7919088.html</a></p>
<h2 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h2><h3 id="1-修改eureka-client的注册ip，在本地有多个网卡时，默认注册的那个ip可能无法访问，解决指定本地服务ip"><a href="#1-修改eureka-client的注册ip，在本地有多个网卡时，默认注册的那个ip可能无法访问，解决指定本地服务ip" class="headerlink" title="1. 修改eureka client的注册ip，在本地有多个网卡时，默认注册的那个ip可能无法访问，解决指定本地服务ip"></a>1. 修改eureka client的注册ip，在本地有多个网卡时，默认注册的那个ip可能无法访问，解决指定本地服务ip</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">10.88</span><span class="number">.123</span><span class="number">.151</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="number">10.88</span><span class="number">.123</span><span class="number">.151</span><span class="string">:9301</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>SpringCould</tag>
        <tag>eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCould-feign服务消费</title>
    <url>/2018/04/12/springcould-feign/</url>
    <content><![CDATA[<h3 id="服务调用方式"><a href="#服务调用方式" class="headerlink" title="服务调用方式"></a>服务调用方式</h3><ul>
<li><input disabled="" type="checkbox"> 第一种方式：ribbon+restTemplate</li>
<li><input checked="" disabled="" type="checkbox"> 第二种方式：feign(默认集成ribbon)</li>
</ul>
<p>Feign 采用的是基于接口的注解，默认整合了ribbon(负载均衡)。</p>
<h3 id="建立服务提供者"><a href="#建立服务提供者" class="headerlink" title="建立服务提供者"></a><a href="http://bolg.iexxk.com/2018/04/11/SpringCould-ribbon-rest/">建立服务提供者</a></h3><h3 id="建立服务消费者"><a href="#建立服务消费者" class="headerlink" title="建立服务消费者"></a>建立服务消费者</h3><ol>
<li><p>新建springboot项目勾选如下</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> web-&gt;web</li>
<li><input checked="" disabled="" type="checkbox"> Could discovery-&gt; eureka server</li>
<li><input checked="" disabled="" type="checkbox"> Could routing-&gt;feign</li>
</ul>
</li>
<li><p>在<code>application.yml</code>添加如下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8094</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">feign-client</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8091/eureka/</span> <span class="comment">#注意要加eureka，不然找不到</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>EurekafeignApplication.java</code>类添加注解<code>@EnableFeignClients</code>标记为Feign服务</p>
</li>
<li><p>新建一个服务调用接口类<code>FeignSchedualService.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;eureka-client&quot;)</span> <span class="comment">//指定调用那个服务（服务名spring.application.name）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignSchedualService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hi&quot;,method = RequestMethod.GET)</span>  <span class="comment">//指定调用eureka-client服务的那个接口</span></span><br><span class="line">    <span class="function">String <span class="title">sayHiFromEurekaClient</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一个对外访问<code>HiController.java</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    FeignSchedualService feignSchedualService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/sayhi&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(<span class="meta">@RequestParam</span> String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> feignSchedualService.sayHiFromEurekaClient(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>依次启动eureka注册中心、eureka服务提供者(2个以上)、feign服务消费者</p>
</li>
<li><p>访问<a href="http://127.0.0.1:8094/sayhi?name=32">http://127.0.0.1:8094/sayhi?name=32</a>就可以看到返回不同的端口了</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
        <tag>SpringCould</tag>
        <tag>feign</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCould-hystrix</title>
    <url>/2018/04/13/springcould-hystrix/</url>
    <content><![CDATA[<h3 id="在ribbon-restTemplate方式使用熔断器hystrix"><a href="#在ribbon-restTemplate方式使用熔断器hystrix" class="headerlink" title="在ribbon+restTemplate方式使用熔断器hystrix"></a>在ribbon+restTemplate方式使用熔断器hystrix</h3><p>阻止服务故障的“雪崩”效应(我简称保险)</p>
<ol>
<li><p>在<code>ribbonrest</code>项目上添加<code>compile(&#39;org.springframework.cloud:spring-cloud-starter-netflix-hystrix&#39;)</code>该依赖(这里用的gradle,maven做相应格式修改)，或者直接新建一个项目勾选如下</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> web-&gt;web</li>
<li><input checked="" disabled="" type="checkbox"> Could discovery-&gt; eureka server</li>
<li><input checked="" disabled="" type="checkbox"> Could routing-&gt;ribbon</li>
<li><input checked="" disabled="" type="checkbox"> Could Circuit Breaker-&gt;Hystrix</li>
</ul>
</li>
<li><p>在<code>application</code>启动类添加一个注解<code>@EnableHystrix</code>拉上保险开关</p>
</li>
<li><p>修改服务调用类<code>HelloService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;hiError&quot;)</span> <span class="comment">//调用发生错误就调用hiError方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hiService</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//eureka-client为服务提供者的spring.application.name=eureka-client</span></span><br><span class="line">       <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://eureka-client/hi?name=&quot;</span>+name,String.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//发生错误调用的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hiError</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hi,&quot;</span>+name+<span class="string">&quot;,sorry,error!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动该服务(8093),然后访问<a href="http://127.0.0.1:8093/resthi?name=32%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%8D%E5%81%9C%E6%AD%A2%E4%B8%A4%E5%8F%B0%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E7%9A%84%E5%85%B6%E4%B8%AD%E4%B8%80%E5%8F%B0%EF%BC%8C%E7%84%B6%E5%90%8E%E5%88%B7%E6%96%B0%E4%B8%80%E5%8F%B0%E6%8F%90%E7%A4%BA%E9%94%99%E8%AF%AF%EF%BC%8C%E4%B8%80%E5%8F%B0%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE">http://127.0.0.1:8093/resthi?name=32，然后再停止两台服务提供者的其中一台，然后刷新一台提示错误，一台正常访问</a></p>
<table>
<thead>
<tr>
<th>启动顺序</th>
<th>访问结果</th>
<th>再启动</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>注册中心-服务提供者(1和2)-服务消费者</td>
<td>2台交替访问</td>
<td></td>
<td></td>
</tr>
<tr>
<td>注册中心-服务提供者(1)-服务消费者-服务提供者(2)</td>
<td>1能访问</td>
<td></td>
<td></td>
</tr>
<tr>
<td>注册中心-服务提供者(1和2)-服务消费者-停止1</td>
<td>1抛异常,2正常访问</td>
<td>再启动1</td>
<td>恢复时间慢</td>
</tr>
<tr>
<td>注册中心-服务提供者(1和2)-服务消费者(开启了熔断器)-停止1</td>
<td>1返回熔断器自定义的错误信息，2正常访问</td>
<td>再启动1</td>
<td>马上可以交替访问</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="在feign模式使用熔断器"><a href="#在feign模式使用熔断器" class="headerlink" title="在feign模式使用熔断器"></a>在feign模式使用熔断器</h3><p>Feign是自带断路器的</p>
<ol>
<li><p>新建<code>SchedualServiceHiHystric</code>实现服务调用的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedualServiceHiHystric</span> <span class="keyword">implements</span> <span class="title">FeignSchedualService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHiFromEurekaClient</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;sorry &quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在服务调用接口的<code>@FeignClient</code>添加<code>fallback</code>指向刚刚实现这个接口的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;eureka-client&quot;,fallback = SchedualServiceHiHystric.class)</span> <span class="comment">//指定调用那个服务（服务名spring.application.name）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignSchedualService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hi&quot;,method = RequestMethod.GET)</span>  <span class="comment">//指定调用eureka-client服务的那个接口</span></span><br><span class="line">    <span class="function">String <span class="title">sayHiFromEurekaClient</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>application</code>配置文件添加该配置启用熔断器</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>依次启动注册中心，该服务(8094),然后访问<a href="http://127.0.0.1:8094/sayhi?name=32%EF%BC%8C%E5%90%AF%E5%8A%A8%E6%B5%8B%E8%AF%95%E8%A7%81%E4%B8%8A%E9%9D%A2%E7%9A%84%E7%AC%AC%E5%9B%9B%E6%AD%A5%E9%AA%A4">http://127.0.0.1:8094/sayhi?name=32，启动测试见上面的第四步骤</a></p>
<p>区别：服务提供者挂了一个不会交替返回正确错误信息，只要还有一个服务正常就返回正确信息，直到所有服务提供者挂了才返回错误信息。</p>
</li>
</ol>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><blockquote>
<p><a href="https://aisensiy.github.io/2017/10/16/feign-hystrix/">用 Feign Hystrix 进行服务集成</a></p>
<p><a href="https://github.com/forezp/SpringCloudLearning">forezp/SpringCloudLearning</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SpringCould</tag>
        <tag>hystrix</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCould 服务提供者与消费者</title>
    <url>/2018/04/11/springcould-ribbon-rest/</url>
    <content><![CDATA[<h3 id="服务调用方式"><a href="#服务调用方式" class="headerlink" title="服务调用方式"></a>服务调用方式</h3><ul>
<li><input checked="" disabled="" type="checkbox"> 第一种方式：ribbon+restTemplate</li>
<li><input disabled="" type="checkbox"> 第二种方式：feign(默认集成ribbon)</li>
</ul>
<p>ribbon是一个负载均衡客户端，可以很好的控制htt和tcp的一些行为。</p>
<h3 id="建立服务提供者"><a href="#建立服务提供者" class="headerlink" title="建立服务提供者"></a>建立服务提供者</h3><ol>
<li><p>在<code>eurekaclient</code>添加一个<code>HelloControl</code>接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloControl</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    String port;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hi&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">(<span class="meta">@RequestParam</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hi &quot;</span>+name+<span class="string">&quot;,i am from port:&quot;</span> +port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动两个<code>eurekaclient</code>配置vm启动参数<code>-Dserver.port=8098</code>端口分布为8099和8098。</p>
</li>
</ol>
<h3 id="建立服务消费者"><a href="#建立服务消费者" class="headerlink" title="建立服务消费者"></a>建立服务消费者</h3><ol>
<li><p>新建springboot项目勾选如下</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> web-&gt;web</li>
<li><input checked="" disabled="" type="checkbox"> Could discovery-&gt; eureka server</li>
<li><input checked="" disabled="" type="checkbox"> Could routing-&gt;ribbon</li>
</ul>
</li>
<li><p>在<code>RibbonrestApplication</code>启动类添加注解<code>@EnableEurekaClient</code></p>
</li>
<li><p>在<code>Application.yml</code>配置文件添加内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8093</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ribbon-client</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8091/eureka/</span> <span class="comment">#注意要加eureka，不然找不到</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>RibbonrestApplication</code>启动类添加负载均衡</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  <span class="comment">//spring ioc bean 依赖注入知识点(待补充)</span></span><br><span class="line"><span class="meta">@LoadBalanced</span> <span class="comment">//负载均衡</span></span><br><span class="line"><span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建<code>HelloService</code>类消费服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hiService</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"> <span class="comment">//eureka-client为服务提供者的spring.application.name=eureka-client</span></span><br><span class="line">       <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://eureka-client/hi?name=&quot;</span>+name,String.class); <span class="comment">//该url为服务提供者提供的接口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用<code>HelloService</code>的服务，新建一个<code>HelloControler</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloControler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/resthi&quot;)</span> <span class="comment">//访问入口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hi</span><span class="params">(<span class="meta">@RequestParam</span> String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.hiService(name); <span class="comment">//调用消费服务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问<a href="http://127.0.0.1:8093/resthi?name=32">http://127.0.0.1:8093/resthi?name=32</a>这个服务消费者提供的接口，不停刷新可以看到端口的变化，就说明了负载均衡起作用了。</p>
</li>
</ol>
<h3 id="总结图示"><a href="#总结图示" class="headerlink" title="总结图示"></a>总结图示</h3><div id="sequence-0"></div>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><blockquote>
<p> <a href="https://blog.csdn.net/forezp/article/details/69788938">史上最简单的SpringCloud教程 | 第二篇: 服务消费者（rest+ribbon）</a></p>
<p><a href="http://book.itmuch.com/2%20Spring%20Cloud/2.3.1%20Ribbon.html">使用Spring Cloud与Docker实战微服务</a></p>
</blockquote>
<script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">Note left of eurekaClient8099/8098: 服务提供者(n个)
Note left of eurekaService8091: 服务注册中心
Note left of ribbonClient8093: 服务消费者
eurekaClient8099/8098-->eurekaService8091: 注册
ribbonClient8093-->eurekaService8091: 注册
ribbonClient8093-->eurekaClient8099/8098: 通过ribbon负载均衡调用服务8099/8098</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
        <tag>SpringCould</tag>
        <tag>ribbon</tag>
        <tag>rest</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCould-summary</title>
    <url>/2018/06/05/springcould-summary/</url>
    <content><![CDATA[<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><h5 id="springboot与springcould版本兼容问题"><a href="#springboot与springcould版本兼容问题" class="headerlink" title="springboot与springcould版本兼容问题"></a>springboot与springcould版本兼容问题</h5><p>访问<a href="https://start.spring.io/actuator/info">spring info</a>进行查询版本对应关系</p>
<p><a href="https://www.jianshu.com/p/3899d7f47303">微服务架构集大成者—Spring Cloud</a></p>
<p><a href="https://spring.io/projects/spring-cloud">官方文档</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SpringCould</tag>
        <tag>summary</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCould-Tracing</title>
    <url>/2018/04/22/springcould-tracing/</url>
    <content><![CDATA[<h2 id="方式一docker-zipkin-zipkin-sleuth"><a href="#方式一docker-zipkin-zipkin-sleuth" class="headerlink" title="方式一docker-zipkin+zipkin+sleuth"></a>方式一docker-zipkin+zipkin+sleuth</h2><p>请求原理图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">请求--&gt;微服务客户端--&gt;sleuth采集请求--&gt;zipkin发送请求的信息--&gt;docker-zipkin接受并展示</span><br></pre></td></tr></table></figure>

<h5 id="sleuth-采样-zipkin-发送分析展示采样数据"><a href="#sleuth-采样-zipkin-发送分析展示采样数据" class="headerlink" title="sleuth 采样+++zipkin 发送分析展示采样数据"></a>sleuth 采样+++zipkin 发送分析展示采样数据</h5><ol>
<li><p>安装<a href="https://github.com/openzipkin/docker-zipkin">penzipkin/docker-zipkin</a> 服务端，听说官方不建议编译，直接提供jar包了，因此采用docker方式进行部署</p>
</li>
<li><p>添加依赖在需要监控的服务</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile(<span class="string">&#x27;org.springframework.cloud:spring-cloud-starter-sleuth&#x27;</span>)</span><br><span class="line">compile(<span class="string">&#x27;org.springframework.cloud:spring-cloud-starter-zipkin&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加配置，在<code>application.yml</code>添加zipkin服务端地址，和采样比例</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://10.14.0.7:14009/</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span> <span class="comment">#采样比例0～1之间，1全部采样</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问<a href="http://10.14.0.7:14009/%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95">http://10.14.0.7:14009/进行测试</a></p>
</li>
</ol>
<h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><ol>
<li>在eureka服务注册端添加没监控到请求</li>
<li>启动两个一样的服务提供者，端口不一致，以一个服务展示，但是能看到两个客户端</li>
<li>请求之后才能监控到</li>
</ol>
<h2 id="方式二docker-zipkin-rabbitMQ-sleuth-暂时未成功"><a href="#方式二docker-zipkin-rabbitMQ-sleuth-暂时未成功" class="headerlink" title="方式二docker-zipkin+rabbitMQ+sleuth(暂时未成功)"></a>方式二docker-zipkin+rabbitMQ+sleuth(暂时未成功)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">请求--&gt;微服务客户端--&gt;sleuth采集请求--&gt;mq发送请求的信息--&gt;docker-zipkin接受并展示</span><br></pre></td></tr></table></figure>

<ol>
<li><p>修改docker-compose部署添加环境变量(目测该镜像还不支持改环境变量)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">openzipkin/zipkin</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">RABBIT_ADDRESSES:</span> <span class="string">mq的地址</span></span><br><span class="line">      <span class="attr">RABBIT_PASSWORD:</span> <span class="string">mq的密码</span></span><br><span class="line">      <span class="attr">RABBIT_USER:</span> <span class="string">mq的用户名</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;14009:9411&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">worker</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改客户端依赖</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile(<span class="string">&#x27;org.springframework.cloud:spring-cloud-starter-sleuth&#x27;</span>)</span><br><span class="line"><span class="comment">//compile(&#x27;org.springframework.cloud:spring-cloud-starter-zipkin&#x27;)  //注释这句</span></span><br><span class="line">compile(<span class="string">&#x27;org.springframework.boot:spring-boot-starter-amqp&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  zipkin:</span></span><br><span class="line"><span class="comment">#    base-url: http://10.14.0.7:14009/</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span> <span class="comment">#采样比例0～1之间，1全部采样</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">14002</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">10.14</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">adminroot</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试失败，读不到服务，通过看docker-zipkin似乎是这里的mq没启动起</p>
</li>
</ol>
<h3 id="数据持久化zipkin-mysql"><a href="#数据持久化zipkin-mysql" class="headerlink" title="数据持久化zipkin+mysql"></a>数据持久化zipkin+mysql</h3><p>待更新。。。</p>
<p>参考:<a href="http://www.baeldung.com/spring-cloud-sleuth-single-application">Baeldung-SpingCould-Sleuth</a></p>
<p><a href="https://blog.csdn.net/forezp/article/details/70148833">史上最简单的 SpringCloud 教程 | 终章</a></p>
<p><a href="https://windmt.com/2018/04/24/spring-cloud-12-sleuth-zipkin/">Spring Cloud（十二）：分布式链路跟踪 Sleuth 与 Zipkin【Finchley 版】</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SpringCould</tag>
        <tag>Tracing</tag>
        <tag>Sleuth</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCould-Zuul</title>
    <url>/2018/04/17/springcould-zuul/</url>
    <content><![CDATA[<h2 id="SpringCould-路由网关-Zuul"><a href="#SpringCould-路由网关-Zuul" class="headerlink" title="SpringCould 路由网关(Zuul)"></a>SpringCould 路由网关(Zuul)</h2><p>Zuul的主要功能是路由转发和过滤器。例如／api/user转发到到user服务，/api/shop转发到到shop服务。zuul默认和Ribbon结合实现了负载均衡的功能。</p>
<h5 id="zuul功能点-下面只简单介绍勾选的"><a href="#zuul功能点-下面只简单介绍勾选的" class="headerlink" title="zuul功能点(下面只简单介绍勾选的)"></a>zuul功能点(下面只简单介绍勾选的)</h5><ul>
<li><input disabled="" type="checkbox"> Authentication 认证</li>
<li><input disabled="" type="checkbox"> Insights 洞察？</li>
<li><input disabled="" type="checkbox"> Stress Testing 压力测试</li>
<li><input disabled="" type="checkbox"> Canary Testing 金丝雀测试</li>
<li><input disabled="" type="checkbox"> Dynamic Routing 动态路由</li>
<li><input disabled="" type="checkbox"> Service Migration 服务迁移</li>
<li><input disabled="" type="checkbox"> Load Shedding 加载脱落</li>
<li><input disabled="" type="checkbox"> Security 安全</li>
<li><input disabled="" type="checkbox"> Static Response handling 静态响应处理</li>
<li><input disabled="" type="checkbox"> Active/Active traffic management 活动/活动流量管理</li>
</ul>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li><p>新建springboot项目勾选如下</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> web-&gt;web</li>
<li><input checked="" disabled="" type="checkbox"> Could discovery-&gt; eureka server</li>
<li><input checked="" disabled="" type="checkbox"> Could routing-&gt;zuul</li>
</ul>
</li>
<li><p>在<code>EurekazuulApplication</code>启动类添加注解<code>@EnableZuulProxy</code>开启zuul功能<code>@EnableEurekaClient</code>也需要注册到服务中心</p>
</li>
<li><p>在<code>application.yml</code>添加如下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8095</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zuul-client</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8091/eureka/</span>   <span class="comment">#注意要加eureka，不然找不到</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">api-a:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-a/**</span>  <span class="comment">#以/api-a/ 开头的请求都转发给ribbon-client服务</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">ribbon-client</span></span><br><span class="line">    <span class="attr">api-b:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-b/**</span> <span class="comment">#以/api-b/ 开头的请求都转发给feign-client服务</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">feign-client</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>依次启动注册中心、ribbon服务端、feign服务端、zuul服务端</p>
<p><a href="http://127.0.0.1:8095/api-b/sayhi?name=32%E8%AE%BF%E9%97%AE%E7%9A%84%E5%B0%B1%E6%98%AFfeign%E6%9C%8D%E5%8A%A1%E7%AB%AF">http://127.0.0.1:8095/api-b/sayhi?name=32访问的就是feign服务端</a></p>
<p>注意：api-b不需要在control里面添加路径，只需要添加sayhi就行</p>
<p><a href="http://127.0.0.1:8095/api-a/resthi?name=32%E8%AE%BF%E9%97%AE%E7%9A%84%E5%B0%B1%E6%98%AFribbon%E6%9C%8D%E5%8A%A1%E7%AB%AF">http://127.0.0.1:8095/api-a/resthi?name=32访问的就是ribbon服务端</a></p>
</li>
<li><p>到此就实现了<strong>路由功能</strong></p>
</li>
</ol>
<h5 id="服务过滤"><a href="#服务过滤" class="headerlink" title="服务过滤"></a>服务过滤</h5><p>服务过滤安全校验功能等,新建一个<code>MyFilter</code>类注意加注解<code>@Component</code>,然后继承<code>ZuulFilter</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pre&quot;</span>;  <span class="comment">//pre:路由之前,routing:路由之时,post:路由之后,error:发送错误调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//filterOrder:过滤的顺序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  <span class="comment">//shouldFilter:这里可以写逻辑判断，是否要过滤，本文true,永远过滤。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">//run：过滤器的具体逻辑。可用很复杂，包括查sql，nosql去判断该请求到底有没有权限访问。</span></span><br><span class="line">        RequestContext ctx=RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request=ctx.getRequest();</span><br><span class="line">        System.out.print(<span class="string">&quot;method:&quot;</span>+request.getMethod()+<span class="string">&quot;,url:&quot;</span>+request.getRequestURL().toString());</span><br><span class="line">        Object token=request.getParameter(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (token==<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;token is null&quot;</span>);</span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            ctx.setResponseStatusCode(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ctx.getResponse().getWriter().write(<span class="string">&quot;token is null&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SpringCould</tag>
        <tag>Zuul</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32-Dev-Mac</title>
    <url>/2018/06/18/stm32-dev-mac/</url>
    <content><![CDATA[<h1 id="stm32开发环境搭建-mac"><a href="#stm32开发环境搭建-mac" class="headerlink" title="stm32开发环境搭建(mac)"></a>stm32开发环境搭建(mac)</h1><p>环境工具</p>
<ul>
<li>CLion</li>
<li><a href="http://www.st.com/zh/development-tools/stm32cubemx.html">STM32CubeMX</a> 记录见：<a href="https://jingyan.baidu.com/article/6c67b1d64cd97e2787bb1eb1.html">mac系统安装STM32CubeMX</a></li>
<li><a href="https://www.segger.com/downloads/jlink/#Ozone">Segger</a> 下载 Ozone - The J-Link Debugger</li>
<li>安装编译器：arm-gcc-none-eabi-gcc <code>brew cask install gcc-arm-embedded</code></li>
<li>安装stlink<code>brew install stlink</code></li>
<li>安装openocd 执行<code>brew install openocd</code></li>
</ul>
<h2 id="运行测试第一个跑马灯"><a href="#运行测试第一个跑马灯" class="headerlink" title="运行测试第一个跑马灯"></a>运行测试第一个跑马灯</h2><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ul>
<li><p>mac os系统</p>
</li>
<li><p>开发板<code>NUCLEO-F401RE</code> 其中mcu型号<code>stm32f401RETx</code></p>
</li>
<li><p>安装项目初始化软件<a href="http://www.st.com/zh/development-tools/stm32cubemx.html">STM32CubeMX</a> 步骤见<a href="https://jingyan.baidu.com/article/6c67b1d64cd97e2787bb1eb1.html">mac系统安装STM32CubeMX</a></p>
</li>
<li><p>安装编译器<code>arm-gcc-none-eabi-gcc</code> 执行<code>brew cask install gcc-arm-embedded</code></p>
</li>
<li><p>安装stlink下载器<code>brew install stlink</code></p>
</li>
<li><p>开发板<code>NUCLEO-F401RE</code>跳线如图</p>
<p><a href="https://imgtu.com/i/62fMm8"><img src="https://s3.ax1x.com/2021/03/18/62fMm8.png" alt="62fMm8.png"></a></p>
</li>
</ul>
<h4 id="项目搭建步骤："><a href="#项目搭建步骤：" class="headerlink" title="项目搭建步骤："></a>项目搭建步骤：</h4><ol>
<li><p>初始化项目工程见<a href="https://jingyan.baidu.com/article/f0e83a2571981922e59101cb.html">STM32CubeMX使用之初始化项目</a></p>
</li>
<li><p>进入生成的工作目录执行<code>make</code></p>
</li>
<li><p>提示错误<code>/bin/sh: /arm-none-eabi-gcc: No such file or directory</code>解决，修改<code>Makefile</code></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BINPATH是指arm-none-eabi-gcc的路径，可以通过执行which arm-none-eabi-gcc得到路径</span></span><br><span class="line">BINPATH = /usr/local/bin/</span><br></pre></td></tr></table></figure>
</li>
<li><p>提示错误</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">build/main<span class="variable">.o</span>: In <span class="keyword">function</span> <span class="meta">`main&#x27;:</span></span><br><span class="line">/Users/xuanleung/IdeaProjects/f401demo/Src/main<span class="variable">.c</span>:<span class="number">75</span>: multiple definition of <span class="meta">`main&#x27;</span></span><br></pre></td></tr></table></figure>

<p>解决修改<code>Makefile</code>,删除里面重复的，#标注为有重复，删除即可</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">C_SOURCES =  \</span><br><span class="line">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c \</span><br><span class="line">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c \</span><br><span class="line">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c \</span><br><span class="line">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c \</span><br><span class="line">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ramfunc.c \</span><br><span class="line"><span class="comment">#Src/stm32f4xx_it.c \</span></span><br><span class="line">Src/stm32f4xx_it.c \</span><br><span class="line">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c \</span><br><span class="line">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c \</span><br><span class="line">/Src/system_stm32f4xx.c \</span><br><span class="line"><span class="comment">#Src/stm32f4xx_hal_msp.c \</span></span><br><span class="line">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c \</span><br><span class="line">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c \</span><br><span class="line">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c \</span><br><span class="line">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c \</span><br><span class="line">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c \</span><br><span class="line">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c \</span><br><span class="line"><span class="comment">#Src/main.c \</span></span><br><span class="line">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c \</span><br><span class="line">Src/stm32f4xx_hal_msp.c \</span><br><span class="line">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c \</span><br><span class="line">Src/main.c </span><br></pre></td></tr></table></figure>
</li>
<li><p>再重新执行<code>make</code>，得到编译成功的文件了</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">/usr/<span class="keyword">local</span>/bin<span class="comment">//arm-none-eabi-size build/f401demo.elf</span></span><br><span class="line">   text	   data	    bss	    dec	    hex	filename</span><br><span class="line">   <span class="number">5460</span>	     <span class="number">20</span>	   <span class="number">1636</span>	   <span class="number">7116</span>	   <span class="number">1</span>bcc	build/f401demo<span class="variable">.elf</span></span><br><span class="line">/usr/<span class="keyword">local</span>/bin<span class="comment">//arm-none-eabi-objcopy -O ihex build/f401demo.elf build/f401demo.hex</span></span><br><span class="line">/usr/<span class="keyword">local</span>/bin<span class="comment">//arm-none-eabi-objcopy -O binary -S build/f401demo.elf build/f401demo.bin</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>下载bin文件到开发板<code>NUCLEO-F401RE</code> ,执行<code>st-flash write ./build/xxxxx.bin 0x8000000</code>,如果下载失败重启单片机和检查跳线帽</p>
</li>
<li><p>修改src下面的<code>main.c</code>添加跑马灯代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);</span><br><span class="line">    HAL_Delay(<span class="number">500</span>);</span><br><span class="line">    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);</span><br><span class="line">    HAL_Delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新编译<code>make</code>和下载<code>st-flash write ./build/f401demo.bin 0x8000000</code> </p>
</li>
<li><p>下载完成后ld2就会闪烁</p>
</li>
</ol>
<h2 id="使用CLion进行项目编译运行"><a href="#使用CLion进行项目编译运行" class="headerlink" title="使用CLion进行项目编译运行"></a>使用CLion进行项目编译运行</h2><p>操作记录：<a href="https://jingyan.baidu.com/article/c910274ba01ca5cd361d2d07.html">mac下stm32CubeMX+CLion+openocd开发环境</a></p>
<ol>
<li>使用STM32CubeMX重新初始化项目，选择<code>SW4STM32</code></li>
<li></li>
</ol>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>debug提示如下错误：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">Cannot load symbol file: <span class="string">&quot;/Users/xuanleung/IdeaProjects/f401re_demo/cmake-build-debug/f401re_demo.elf&quot;</span>: <span class="keyword">not</span> in executable format: File format <span class="keyword">not</span> recognized</span><br></pre></td></tr></table></figure>

<p>解决：取消勾选</p>
<p><a href="https://imgtu.com/i/62fsh9"><img src="https://s3.ax1x.com/2021/03/18/62fsh9.png" alt="62fsh9.png"></a></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.jianshu.com/p/ed7203324ac6">macOS 下用 Clion和OpenOCD开发 STM32(st-link和STM32CubeMX)</a></p>
<p><a href="https://blog.jetbrains.com/clion/2016/06/clion-for-embedded-development/">CLion for embedded development</a></p>
<p><a href="https://blog.jetbrains.com/clion/2017/12/clion-for-embedded-development-part-ii/">CLion for Embedded Development Part II</a></p>
<p><a href="http://blog.meekdai.com/MacOS-Eclipse-ARM-GCC-STM32.html">http://blog.meekdai.com/MacOS-Eclipse-ARM-GCC-STM32.html</a></p>
<p><a href="https://www.st.com/content/ccc/resource/technical/document/user_manual/98/2e/fa/4b/e0/82/43/b7/DM00105823.pdf/files/DM00105823.pdf/jcr:content/translations/en.DM00105823.pdf">STM32 Nucle o-64 boards文档</a></p>
<p><a href="http://www.stmcu.org/module/forum/thread-609184-1-1.html">Nucleo-64板载ST-LINK/ V2-1调试器 之对外界编程</a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>Mac</tag>
        <tag>CLion</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32-NUCLEO-external-program</title>
    <url>/2018/07/22/stm32-nucleo-external-program/</url>
    <content><![CDATA[<h2 id="NUCLEO板子对外部stm32进行编程下载"><a href="#NUCLEO板子对外部stm32进行编程下载" class="headerlink" title="NUCLEO板子对外部stm32进行编程下载"></a>NUCLEO板子对外部stm32进行编程下载</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ol>
<li>NUCLEO-F401RE板子</li>
<li>stm32f103rb核心板（源地）</li>
<li>软件环境见<a href="https://blog.iexxk.com/2018/06/18/STM32-Dev-Mac/">STM32-Dev-Mac</a></li>
</ol>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a><a href="https://jingyan.baidu.com/article/9989c746e54ee7f648ecfe9c.html">步骤</a></h3><ol>
<li><p>硬件连线,<a href="https://www.st.com/content/ccc/resource/technical/document/user_manual/98/2e/fa/4b/e0/82/43/b7/DM00105823.pdf/files/DM00105823.pdf/jcr:content/translations/en.DM00105823.pdf">拔掉NUCLEO板子上的CN2两个跳线帽</a>，然后连接CN4到编程的目标板(stm32f103rb核心板)，电源不连单独供电，连接图如下</p>
<table>
<thead>
<tr>
<th>NUCLEO</th>
<th>从上(SWD)到下(CN4)</th>
<th>目标板</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>VDD_TARGET</td>
<td>1</td>
<td></td>
<td>vdd电源</td>
</tr>
<tr>
<td>SWCLK</td>
<td>2</td>
<td>SWDCLK</td>
<td>时钟</td>
</tr>
<tr>
<td>GND</td>
<td>3</td>
<td>GND</td>
<td>地</td>
</tr>
<tr>
<td>SWDIO</td>
<td>4</td>
<td>SWDIO</td>
<td>数据输入/输出</td>
</tr>
<tr>
<td>NRST</td>
<td>5</td>
<td></td>
<td>目标MCU的RESET</td>
</tr>
<tr>
<td>SWO</td>
<td>6</td>
<td></td>
<td>保留</td>
</tr>
</tbody></table>
<p><img src="https://s3.ax1x.com/2021/03/18/62T5Af.jpg" alt="stm32"></p>
</li>
<li><p>打开STM32CubeMX软件，新建个工程，这里直接选STM32F103RBTx的NUCLEO套版，这里直接在这个套版上基础修改</p>
</li>
<li><p>设置led输出引脚：在pinout引脚设置界面去掉PA5，修改PC13为<code>GPIO_Output</code>输出，并打上<code>LED</code>用户标签</p>
<p><img src="https://s3.ax1x.com/2021/03/18/62T79g.png" alt="QQ20180722-105903"></p>
</li>
<li><p>修改时钟引脚设置，由于自己的板子用的高速时钟(HSE)和低速时钟(LSE)都用的外部时钟，所以这里切换时钟模式都为外部(Crystal)</p>
<p><img src="https://s3.ax1x.com/2021/03/18/62To4S.png" alt="QQ20180722-105957"></p>
</li>
<li><p>修改时钟配置，修改晶振频率和自己板子一致，并且换成外部，然后设置倍数，如果倍数设置高于频率，会提示红报错，选择可用最高倍数即可，该板子只能选<code>X9</code></p>
<p><img src="https://s3.ax1x.com/2021/03/18/62TIN8.png" alt="QQ20180722-110120"></p>
</li>
<li><p>最后生成makerfile类型工程</p>
</li>
<li><p>修改<code>Makefile</code>文件，<code>C_SOURCES</code>去重,<code>BINPATH</code>设置路径<code>/usr/local/bin/</code></p>
</li>
<li><p>在<code>main.c</code>添加led流水灯代码,引脚的名称注意用刚刚设置的标签名字</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);</span><br><span class="line">  HAL_Delay(<span class="number">500</span>);</span><br><span class="line">  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);</span><br><span class="line">  HAL_Delay(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译<code>make</code>下载<code>st-flash write ./build/&lt;项目名&gt;.bin 0x8000000</code></p>
</li>
</ol>
<h3 id="使用CLion进行项目编译运行"><a href="#使用CLion进行项目编译运行" class="headerlink" title="使用CLion进行项目编译运行"></a>使用CLion进行项目编译运行</h3><ol>
<li><code>build-&gt;OpenOCD Support-&gt;board config file</code>:<code>st_nucleo_f103rb.cfg</code></li>
<li>编译运行手动按reset</li>
</ol>
<p>注意：使用openocd时，NRST一定要连！</p>
<p>但是：没有线引出来无法连接，所以运行时立马手动按reset键也可以成功。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/JiaLiang_825/article/details/78875328"> STM32Cube工具学习笔记（一）Cube配置</a></p>
<p><a href="http://www.stmcu.org/module/forum/thread-609184-1-1.html">Nucleo-64板载ST-LINK/ V2-1调试器 之对外界编程</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/35758891">在Windows上配置Eclipse中配置STM32的开发调试环境</a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>NUCLEO</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32-Serial-debug</title>
    <url>/2018/07/29/stm32-serial-debug/</url>
    <content><![CDATA[<h2 id="mac-stm32串口调试"><a href="#mac-stm32串口调试" class="headerlink" title="mac stm32串口调试"></a>mac stm32串口调试</h2><h3 id="方式一（使用mbed-os但是不是集成板子，需要更改很多配置）"><a href="#方式一（使用mbed-os但是不是集成板子，需要更改很多配置）" class="headerlink" title="方式一（使用mbed os但是不是集成板子，需要更改很多配置）"></a>方式一（使用mbed os但是不是集成板子，需要更改很多配置）</h3><ol>
<li><a href="https://os.mbed.com/compiler/#nav:/Nucleo_printf/main.cpp;">mbed</a>是一个在线编辑编译代码的工具,上面有很多源码下载里面项目<a href="https://os.mbed.com/teams/ST/code/Nucleo_printf/">ST/Nucleo_printf</a>,点击编译，下载bin文件</li>
<li>将下载的bin文件写入开发板，执行<code>st-flash write Nucleo_printf_NUCLEO_F401RE.bin 0x8000000</code></li>
<li>打开<strong>CLion</strong>软件在插件管理界面添加<a href="https://bitbucket.org/dmitry_cherkas/intellij-serial-monitor">Serial Port Monitor</a></li>
<li>然后在左下角<strong>Serial Monitor</strong>点击设置，选择<strong>usbmodem</strong>，设置波特率<strong>9600</strong>，就可以看到打印的hello world</li>
</ol>
<h3 id="方式二（Cubemx）：使用hal库函数进行串口输出"><a href="#方式二（Cubemx）：使用hal库函数进行串口输出" class="headerlink" title="方式二（Cubemx）：使用hal库函数进行串口输出"></a>方式二（Cubemx）：使用hal库函数进行串口输出</h3><p>串口发送(在main函数添加)：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把&quot;hello world&quot;的内容通过uart2发送出去，长度是11，timeout的时间是最大值0xffff</span></span><br><span class="line">HAL_UART_Transmit(&amp;huart2, <span class="string">&quot;hello world&quot;</span>, <span class="number">11</span>,<span class="number">0xFFFF</span>);</span><br></pre></td></tr></table></figure>







<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/Mysterious/p/4804188.html">STM32L0 HAL库 UART 串口读写功能</a></p>
<p><a href="https://blog.csdn.net/cayloon/article/details/79196942">【STM32CubeMX】HAL库中断方式UART串口通信</a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>NUCLEO</tag>
        <tag>mbed</tag>
      </tags>
  </entry>
  <entry>
    <title>android stuido 常用插件</title>
    <url>/2016/09/22/tools-as-common-plug/</url>
    <content><![CDATA[<h3 id="快速初始画布局id"><a href="#快速初始画布局id" class="headerlink" title="快速初始画布局id"></a>快速初始画布局id</h3><blockquote>
<ul>
<li><a href="https://github.com/avast/android-butterknife-zelezny">butterknife zelezny</a> 自动生成布局注解配合下面得jar包使用</li>
<li><a href="https://github.com/JakeWharton/butterknife">butterknife</a> 注解jar包</li>
</ul>
</blockquote>
<h3 id="导入不同分辨率得图片"><a href="#导入不同分辨率得图片" class="headerlink" title="导入不同分辨率得图片"></a>导入不同分辨率得图片</h3><blockquote>
<ul>
<li><a href="https://github.com/winterDroid/android-drawable-importer-intellij-plugin">android drawable importer</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>android studio</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>android Stduio配置</title>
    <url>/2017/03/02/tools-as-theme/</url>
    <content><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h5 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h5><ol>
<li>安装插件Material Theme UI</li>
<li><a href="http://color-themes.com/?view=index">下载主题</a></li>
<li>导入主题File-&gt;Import Setting…</li>
</ol>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>环境</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>tools-autosub</title>
    <url>/2020/09/19/tools-autosub/</url>
    <content><![CDATA[<h2 id="AI字幕"><a href="#AI字幕" class="headerlink" title="AI字幕"></a>AI字幕</h2><p>参考<a href="https://github.com/BingLingGroup">BingLingGroup</a>/<strong><a href="https://github.com/BingLingGroup/autosub">autosub</a></strong></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一定要使用http代理，不能用socke5代理，错误详细信息见常见错误1</span></span><br><span class="line"><span class="built_in">export</span> all_proxy=http://127.0.0.1:58591</span><br><span class="line"><span class="comment">#一定要用pip3</span></span><br><span class="line"><span class="comment">#(废除有bug见错误2)pip3 install git+https://github.com/BingLingGroup/autosub.git@alpha ffmpeg-normalize langcodes</span></span><br><span class="line">pip3 install git+https://github.com/BingLingGroup/autosub.git@dev ffmpeg-normalize langcodes</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dcy1.wmv视频日语(ja-jp)生成中文(zh-cn)字幕</span></span><br><span class="line">autosub -i dcy1.wmv  -S ja-jp -D zh-cn</span><br><span class="line"><span class="comment">#-o指定输出路径，不指定要卡住</span></span><br><span class="line">autosub -i dcy1.wmv  -S ja-jp -D zh-cn -o /Users/xuanleung/Downloads/worldvideo/dcy1.zh-cn.srt</span><br></pre></td></tr></table></figure>



<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h3 id="错误1："><a href="#错误1：" class="headerlink" title="错误1："></a>错误1：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR: Could not install packages due to an EnvironmentError: Missing dependencies <span class="keyword">for</span> SOCKS support.</span><br></pre></td></tr></table></figure>

<p>解决：原因是安装包不支持socks代理，两种解决方法，一是让它支持，二是采用http代理，这里用第二种方法解决，执行<code>export all_proxy=http://127.0.0.1:58591</code></p>
<h3 id="错误2："><a href="#错误2：" class="headerlink" title="错误2："></a>错误2：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    <span class="built_in">return</span> value.encode(encoding or <span class="string">&quot;ascii&quot;</span>)</span><br><span class="line">AttributeError: <span class="string">&#x27;NoneType&#x27;</span> object has no attribute <span class="string">&#x27;encode&#x27;</span></span><br></pre></td></tr></table></figure>

<p>解决：原因环境变量编码的问题，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LANG&#x3D;en_US.UTF-8</span><br><span class="line">export LC_ALL&#x3D;en_US.UTF-8</span><br></pre></td></tr></table></figure>

<p>上述还无法解决见<a href="https://github.com/BingLingGroup/autosub/issues/127">https://github.com/BingLingGroup/autosub/issues/127</a>上面解决是在dev分支<a href="https://github.com/BingLingGroup/autosub/commit/d1133b37fcfc3ea03458063f73841dcbe732b483">2020.07.02</a>提交的当时还没修复到alpha分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#升级dev分支</span></span><br><span class="line">pip3 install --upgrade git+https://github.com/BingLingGroup/autosub.git@dev</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>autosub</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下安装与使用DropBox</title>
    <url>/2017/12/07/tools-dropbox-install-and-use/</url>
    <content><![CDATA[<h3 id="DropBox介绍"><a href="#DropBox介绍" class="headerlink" title="DropBox介绍"></a>DropBox介绍</h3><p><a href="https://www.dropbox.com/">DropBox</a>是一款同步软件，中文名多宝盒，类似网盘，由于平台兼容性比较好，这里用来做ubuntu和windos笔记存储等，还用到了docker数据卷同步（性能待测试）</p>
<h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a><a href="https://www.dropbox.com/install-linux">Linux安装</a></h3><h5 id="对应的图文百度经验教程"><a href="#对应的图文百度经验教程" class="headerlink" title="对应的图文百度经验教程"></a>对应的图文百度经验教程</h5><p><a href="https://jingyan.baidu.com/article/154b4631044be528ca8f410a.html">centos7多宝盒切换账号和安装管理脚本</a></p>
<p><a href="https://jingyan.baidu.com/article/90895e0f27e12b64ec6b0b09.html">centos7命令行安装多宝箱</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~ #下载安装目录</span><br><span class="line">wget https://clientupdates.dropboxstatic.com/dbx-releng/client/dropbox-lnx.x86_64-39.4.49.tar.gz #下载</span><br><span class="line">tar xzf dropbox-lnx.x86_64-39.4.49.tar.gz #解压</span><br><span class="line">ls #解压后用ls，查看不到改文件，因为是.开头的</span><br><span class="line">cd ~/. &lt;按TAB键&gt; #可以看到</span><br><span class="line">proxychains4 ~/.dropbox-dist/dropboxd #安装,需要使用代理，proxychains4安装见前面的文章</span><br></pre></td></tr></table></figure>

<h5 id="授权："><a href="#授权：" class="headerlink" title="授权："></a>授权：</h5><p>启动后有很多日志，然后复制输出的网址去浏览器访问，不需要本机，任何电脑浏览器都可以</p>
<h5 id="注销："><a href="#注销：" class="headerlink" title="注销："></a>注销：</h5><p>如果注销账号可以去网页版，取消授权，然后再次执行安装命令可以重新授权</p>
<h4 id="管理工具下载安装与使用"><a href="#管理工具下载安装与使用" class="headerlink" title="管理工具下载安装与使用"></a>管理工具下载安装与使用</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载dropbox.py</span></span><br><span class="line">proxychains4 wget -O dropbox.py https://www.dropbox.com/download?dl=packages/dropbox.py</span><br><span class="line">chmod +x dropbox.py</span><br><span class="line"><span class="meta">#</span><span class="bash">停止dropbox</span></span><br><span class="line">./dropbox.py stop</span><br><span class="line">killall dropbox</span><br><span class="line"><span class="meta">#</span><span class="bash">安装demon(可忽略这一步，这一步是设置系统服务失败遗留)</span></span><br><span class="line">proxychains4 ./dropbox.py start -i</span><br><span class="line"><span class="meta">#</span><span class="bash">安装完成后会自动启动，如果ctrl+c停止不了可以在开一个终端执行./dropbox.py stop</span></span><br><span class="line"><span class="meta">#</span><span class="bash">移动管理工具到安装目录</span></span><br><span class="line">mv dropbox.py /root/.dropbox/dropbox.py</span><br><span class="line"><span class="meta">#</span><span class="bash">添加全局命令，使用链接模式</span></span><br><span class="line">ln -sf /root/.dropbox/dropbox.py /usr/bin/dropbox</span><br><span class="line"><span class="meta">#</span><span class="bash">设置代理</span></span><br><span class="line">dropbox proxy manual socks5 127.0.0.1 1080</span><br><span class="line">dropbox start #启动</span><br><span class="line">dropbox status #查看状态</span><br><span class="line">dropbox stop #停止</span><br></pre></td></tr></table></figure>

<h4 id="额外，这里把dropbox设置成systemctl并未成功，所以未添加开机启动，开机需要手动执行dropbox-start"><a href="#额外，这里把dropbox设置成systemctl并未成功，所以未添加开机启动，开机需要手动执行dropbox-start" class="headerlink" title="额外，这里把dropbox设置成systemctl并未成功，所以未添加开机启动，开机需要手动执行dropbox start"></a>额外，这里把dropbox设置成systemctl并未成功，所以未添加开机启动，开机需要手动执行<code>dropbox start</code></h4>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>Dropbox</tag>
      </tags>
  </entry>
  <entry>
    <title>tools-ffmpeg</title>
    <url>/2020/09/09/tools-ffmpeg/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>视频转换</p>
<p><a href="https://www.ffmpeg.org/">官方文档</a></p>
<p><a href="https://www.ruanyifeng.com/blog/2020/01/ffmpeg.html">FFmpeg 视频处理入门教程</a></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看视频信息</span></span><br><span class="line">ffprobe 1.mkv</span><br><span class="line"><span class="comment">#播放视频</span></span><br><span class="line">ffplay 1.mkv</span><br><span class="line"><span class="comment">#将字幕封装到mkv视频容器中</span></span><br><span class="line">ffmpeg -i 1.mkv -i 1.ass -c copy 11.mkv</span><br><span class="line"><span class="comment">#设置视频源数据里面的标题</span></span><br><span class="line">ffmpeg -i 1.mkv -metadata title=<span class="string">&#x27;标题&#x27;</span> -c copy 11.mkv</span><br><span class="line"><span class="comment">#复制所有的0开头的流（各种音频字幕流）</span></span><br><span class="line">ffmpeg -i 1.mkv -c copy -map 0 11.mkv</span><br><span class="line"><span class="comment">#复制metadata里面的数据</span></span><br><span class="line">ffmpeg -i 1.mkv -c copy -map_metadata 0 11.mkv</span><br><span class="line"><span class="comment">#整合</span></span><br><span class="line">ffmpeg -i 1.mkv -i 1.ass -metadata title=<span class="string">&#x27;标题&#x27;</span> -c copy -map 0 -map_metadata 0 11.mkv</span><br><span class="line">ffmpeg -i 1.mkv -i 1.ass -metadata title=<span class="string">&#x27;小公女セーラ 第01話「ミンチン女子学院」&#x27;</span> -c copy -map 0 -map_metadata 0 111.mkv</span><br></pre></td></tr></table></figure>

<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础格式</span></span><br><span class="line">ffmpeg &#123;全局参数&#125; &#123;输入文件参数&#125; -i &#123;输入文件&#125; &#123;输出文件参数&#125; &#123;输出文件&#125;</span><br><span class="line"><span class="comment"># eg:</span></span><br><span class="line">ffmpeg \</span><br><span class="line">-y \ <span class="comment"># 全局参数</span></span><br><span class="line">-c:a libfdk_aac -c:v libx264 \ <span class="comment"># 输入文件参数</span></span><br><span class="line">-i input.mp4 \ <span class="comment"># 输入文件</span></span><br><span class="line">-c:v libvpx-vp9 -c:a libvorbis \ <span class="comment"># 输出文件参数</span></span><br><span class="line">output.webm <span class="comment"># 输出文件</span></span><br><span class="line">ffmpeg -i input.avi output.mp4  <span class="comment">#简写</span></span><br><span class="line"><span class="comment">#常用命令行参数</span></span><br><span class="line">-c：指定编码器</span><br><span class="line">-c copy：直接复制，不经过重新编码（这样比较快）</span><br><span class="line">-c:v：指定视频编码器</span><br><span class="line">-c:a：指定音频编码器</span><br><span class="line">-i：指定输入文件</span><br><span class="line">-an：去除音频流</span><br><span class="line">-vn： 去除视频流</span><br><span class="line">-preset：指定输出的视频质量，会影响文件的生成速度，有以下几个可用的值 ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow。</span><br><span class="line">-y：不经过确认，输出时直接覆盖同名文件。</span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mac</span></span><br><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Tools-geoserver-base</title>
    <url>/2018/08/17/tools-geoserver-base/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>镜像地址：<a href="https://github.com/kartoza/docker-geoserver">kartoza/geoserver:latest</a></p>
<p>环境要求：最小内存4g</p>
<p><code>docker-compose.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">geoserver:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> 	<span class="string">kartoza/geoserver:latest</span>	</span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;14018:8080&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/dockerdata/v-geoserver/data:/opt/geoserver/data_dir&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPTS=</span> <span class="string">&#x27;-Xmx3072m&#x27;</span> </span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">worker</span>]</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol>
<li><p>登陆</p>
<p>访问<a href="http://192.168.204.182:14018/geoserver/web/%E4%BD%BF%E7%94%A8[admin](geoserver)%E7%99%BB%E9%99%86">http://192.168.204.182:14018/geoserver/web/使用[admin](geoserver)登陆</a></p>
</li>
<li><p>创建工作区</p>
<p>命名：xuan(自定义)</p>
<p>命名空间URI：<a href="http://geoserver.org/xuan">http://geoserver.org/xuan</a></p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 默认工作区</li>
</ul>
</li>
<li><p>新建数据存储</p>
<p>选<code>栅格数据源-&gt;ImagePyramid</code> </p>
<p>复制图层数据（该数据可以用Fwtools切图）到挂载目录<code>/dockerdata/v-geoserver/data</code></p>
<p>点击浏览找到数据目录，然后保存</p>
</li>
<li><p>发布图层</p>
<p>保存成功后，点击发布按钮</p>
<p>默认设置，保存</p>
</li>
<li><p>测试预览图层</p>
<p>点击<code>Layer Preview</code> 选择图层进行预览</p>
</li>
</ol>
<h3 id="字体安装"><a href="#字体安装" class="headerlink" title="字体安装"></a>字体安装</h3><ol>
<li>查看支持的中文字体命令<code>fc-list :lang=zh</code></li>
<li>命令没有找到需要安装字体管理器<code>yum -y install fontconfig</code></li>
<li>字体目录<code>/usr/share/fontconfig</code>和<code>/usr/share/fonts</code></li>
<li>将window下或者下载字体文件ttc、ttf文件复制到fonts目录</li>
</ol>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li><p>geoserver添加图层预览时提示<code>java.lang.OutOfMemoryError: GC overhead limit exceeded</code>该错误</p>
<p>解决把<code>-Xmx</code>设置更大，如果是虚拟机最小内存必须设置4g</p>
</li>
<li><p>跨域问题和添加插件</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> kartoza/geoserver:latest</span><br><span class="line"><span class="comment">#安装mysql插件</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> gt-jdbc-mysql-19.2.jar <span class="variable">$CATALINA_HOME</span>/webapps/geoserver/WEB-INF/lib/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> mysql-connector-java-5.1.46.jar <span class="variable">$CATALINA_HOME</span>/webapps/geoserver/WEB-INF/lib/</span></span><br><span class="line"><span class="comment">#解决跨域问题</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> web.xml <span class="variable">$CATALINA_HOME</span>/webapps/geoserver/WEB-INF/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> java-property-utils-1.9.jar <span class="variable">$CATALINA_HOME</span>/webapps/geoserver/WEB-INF/lib/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> cors-filter-1.7.jar <span class="variable">$CATALINA_HOME</span>/webapps/geoserver/WEB-INF/lib/</span></span><br><span class="line"><span class="comment">#添加中文字体</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> chinese /usr/share/fonts/chinese/</span></span><br></pre></td></tr></table></figure>

<p><code>web.xml</code>添加如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;filter&gt;  </span><br><span class="line">    &lt;filter-name&gt;CORS&lt;&#x2F;filter-name&gt;  </span><br><span class="line">    &lt;filter-class&gt;com.thetransactioncompany.cors.CORSFilter&lt;&#x2F;filter-class&gt;  </span><br><span class="line">    &lt;init-param&gt;  </span><br><span class="line">     &lt;param-name&gt;cors.allowOrigin&lt;&#x2F;param-name&gt;  </span><br><span class="line">        &lt;param-value&gt;*&lt;&#x2F;param-value&gt;  </span><br><span class="line">    &lt;&#x2F;init-param&gt;  </span><br><span class="line">    &lt;init-param&gt;  </span><br><span class="line">     &lt;param-name&gt;cors.supportedMethods&lt;&#x2F;param-name&gt;  </span><br><span class="line">        &lt;param-value&gt;GET, POST, HEAD, PUT, DELETE&lt;&#x2F;param-value&gt;  </span><br><span class="line">    &lt;&#x2F;init-param&gt;  </span><br><span class="line">    &lt;init-param&gt;  </span><br><span class="line">     &lt;param-name&gt;cors.supportedHeaders&lt;&#x2F;param-name&gt;  </span><br><span class="line">        &lt;param-value&gt;Accept, Origin, X-Requested-With, Content-Type, Last-Modified&lt;&#x2F;param-value&gt;  </span><br><span class="line">    &lt;&#x2F;init-param&gt;  </span><br><span class="line">    &lt;init-param&gt;  </span><br><span class="line">        &lt;param-name&gt;cors.exposedHeaders&lt;&#x2F;param-name&gt;  </span><br><span class="line">        &lt;param-value&gt;Set-Cookie&lt;&#x2F;param-value&gt;  </span><br><span class="line">    &lt;&#x2F;init-param&gt;  </span><br><span class="line">    &lt;init-param&gt;  </span><br><span class="line">        &lt;param-name&gt;cors.supportsCredentials&lt;&#x2F;param-name&gt;  </span><br><span class="line">        &lt;param-value&gt;true&lt;&#x2F;param-value&gt;  </span><br><span class="line">    &lt;&#x2F;init-param&gt;  </span><br><span class="line">&lt;&#x2F;filter&gt;  </span><br><span class="line">&lt;filter-mapping&gt;  </span><br><span class="line">    &lt;filter-name&gt;CORS&lt;&#x2F;filter-name&gt;  </span><br><span class="line">    &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;  </span><br><span class="line">&lt;&#x2F;filter-mapping&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="FWTools-切图"><a href="#FWTools-切图" class="headerlink" title="FWTools 切图"></a>FWTools 切图</h1><h3 id="tif切图"><a href="#tif切图" class="headerlink" title="tif切图"></a>tif切图</h3><ol>
<li>下载<a href="http://fwtools.loskot.net/FWTools-linux-2.0.6.tar.gz">FWTools-linux-2.0.6.tar.gz</a>,复制文件到<code>cp FWTools-linux-2.0.6.tar.gz ~/</code>,然后解压文件<code>tar -zxvf FWTools-linux-2.0.6.tar.gz</code></li>
<li>使用wsl沙河系统安装，执行<code>sudo apt update</code>然后安装<code>sudo apt install python</code>安装默认的2.x版本</li>
<li>修改安装脚本<code>vim install.sh</code>修改最后一行<code>/bin/python</code>为<code>/usr/bin/python</code></li>
<li>安装<code>sudo apt install python-gdal</code>插件</li>
<li>测试，执行<code>gdal_retile.py -v -r bilinear -levels 10 -ps 256 256 -co &quot;TILED=YES&quot; -co COMPRESS=LZW -targetDir /mnt/c/Users/xuan/Desktop/tse/ /mnt/c/Users/xuan/Desktop/kongjiang.tif</code></li>
</ol>
<h3 id="shp转mysql"><a href="#shp转mysql" class="headerlink" title="shp转mysql"></a>shp转mysql</h3><ol>
<li>安装<code>sudo apt install gdal-bin</code></li>
<li>执行<code>ogr2ogr -f &quot;GeoJSON&quot; china.json 保护动物.shp</code>先把shp文件转为json，检查json文件编码是否为utf-8</li>
<li>再把json导入数据库<code>ogr2ogr -f &quot;MySQL&quot; MySQL:&quot;yglgeoserver,user=root,host=192.168.1.230,password=lfadmin&quot; -lco engine=INNODB china.json</code>，不直接将shp导入数据库是因为编码问题，导致导入报错</li>
</ol>
<h3 id="编写批量导入数据shell脚本"><a href="#编写批量导入数据shell脚本" class="headerlink" title="编写批量导入数据shell脚本"></a>编写批量导入数据shell脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="keyword">for</span> FILE <span class="keyword">in</span> *.shp</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;printf file: <span class="variable">$FILE</span>...&quot;</span></span><br><span class="line">        <span class="comment">#$&#123;FILE%.*&#125;.json为新的名字，例如文件名（$FILE）为 ss.shp 那么新的名字（$&#123;FILE%.*&#125;.json）为ss.json</span></span><br><span class="line">        ogr2ogr -f <span class="string">&quot;GeoJSON&quot;</span> <span class="string">&quot;<span class="variable">$&#123;FILE%.*&#125;</span>.json&quot;</span> <span class="string">&quot;<span class="variable">$FILE</span>&quot;</span></span><br><span class="line">        <span class="comment">#批量替换id为shpId字段，i为忽略大小写，见问题1</span></span><br><span class="line">        sed -i <span class="string">&#x27;s/&quot;Id&quot;/&quot;shpId&quot;/i&#x27;</span> <span class="string">&quot;<span class="variable">$&#123;FILE%.*&#125;</span>.json&quot;</span></span><br><span class="line">        ogr2ogr -f <span class="string">&quot;MySQL&quot;</span> MySQL:<span class="string">&quot;wzsgeoserver,user=root,host=192.168.1.230,password=lfadmin&quot;</span> -lco engine=INNODB <span class="string">&quot;<span class="variable">$&#123;FILE%.*&#125;</span>.json&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><ol>
<li><p>批量转换时提示<code>Warning 1: Feature id not preserved</code></p>
<p><strong>原因</strong>:是因为json数据中含有id，且id字段的值重复，导致识别为相同数据例如</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;FeatureCollection&quot;</span>,</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;橡胶天然林样地&quot;</span>,</span><br><span class="line"><span class="attr">&quot;crs&quot;</span>: &#123; <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;name&quot;</span>, <span class="attr">&quot;properties&quot;</span>: &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;urn:ogc:def:crs:OGC:1.3:CRS84&quot;</span> &#125; &#125;,</span><br><span class="line"><span class="attr">&quot;features&quot;</span>: [</span><br><span class="line">&#123; <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Feature&quot;</span>, <span class="attr">&quot;properties&quot;</span>: &#123; <span class="attr">&quot;Id&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;坐标点&quot;</span>: <span class="string">&quot;aa&quot;</span>, <span class="attr">&quot;编号&quot;</span>: <span class="literal">null</span>, <span class="attr">&quot;树种&quot;</span>: <span class="literal">null</span>, <span class="attr">&quot;胸径&quot;</span>: <span class="literal">null</span>, <span class="attr">&quot;树高&quot;</span>: <span class="literal">null</span>, <span class="attr">&quot;东西&quot;</span>: <span class="literal">null</span>, <span class="attr">&quot;南北&quot;</span>: <span class="literal">null</span>, <span class="attr">&quot;序号&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;X坐标&quot;</span>: <span class="number">109.33121961000001</span>, <span class="attr">&quot;Y坐标&quot;</span>: <span class="number">18.9831775639</span> &#125;, <span class="attr">&quot;geometry&quot;</span>: &#123; <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;</span>: [ <span class="number">107.331219609524425</span>, <span class="number">18.973177563938192</span> ] &#125; &#125;,</span><br><span class="line">&#123; <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Feature&quot;</span>, <span class="attr">&quot;properties&quot;</span>: &#123; <span class="attr">&quot;Id&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;坐标点&quot;</span>: <span class="string">&quot;ab&quot;</span>, <span class="attr">&quot;编号&quot;</span>: <span class="literal">null</span>, <span class="attr">&quot;树种&quot;</span>: <span class="literal">null</span>, <span class="attr">&quot;胸径&quot;</span>: <span class="literal">null</span>, <span class="attr">&quot;树高&quot;</span>: <span class="literal">null</span>, <span class="attr">&quot;东西&quot;</span>: <span class="literal">null</span>, <span class="attr">&quot;南北&quot;</span>: <span class="literal">null</span>, <span class="attr">&quot;序号&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;X坐标&quot;</span>: <span class="number">109.331143725</span>, <span class="attr">&quot;Y坐标&quot;</span>: <span class="number">18.983130045799999</span> &#125;, <span class="attr">&quot;geometry&quot;</span>: &#123; <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Point&quot;</span>, <span class="attr">&quot;coordinates&quot;</span>: [ <span class="number">109.331143724995911</span>, <span class="number">18.973130045772864</span> ] &#125; &#125;</span><br><span class="line">]&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解决</strong>:用文本工具批量删除或替换掉id字段，会自动生产id，如果有这字段就不会自动生成</p>
</li>
</ol>
<h3 id="she-转-kml"><a href="#she-转-kml" class="headerlink" title="she 转 kml"></a>she 转 kml</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ogr2ogr -f KML output.kml input.shp </span><br></pre></td></tr></table></figure>



<h3 id="geoserver"><a href="#geoserver" class="headerlink" title="geoserver"></a>geoserver</h3><p><a href="https://build.geoserver.org/geoserver/">所有版本</a></p>
<p><a href="https://docs.geoserver.org/latest/en/developer/quickstart/intellij.html">idea运行</a> 从<a href="https://github.com/geoserver/geoserver">github</a>的src目录</p>
<p><a href="https://github.com/NASAWorldWind/WorldWindJava">https://github.com/NASAWorldWind/WorldWindJava</a></p>
<p>geoserver 安装<a href="https://docs.geoserver.org/stable/en/user/community/dds/index.html">dds/bls</a>扩展</p>
<p>高层数据<a href="https://www.jianshu.com/p/d68fffeb8e33%E6%9C%AA%E5%AE%9E%E9%AA%8C">https://www.jianshu.com/p/d68fffeb8e33未实验</a></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>geoserver</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用操作</title>
    <url>/2018/08/07/tools-git-common/</url>
    <content><![CDATA[<h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><h4 id="回退-reset-未push"><a href="#回退-reset-未push" class="headerlink" title="回退 reset (未push)"></a>回退<code> reset</code> (未push)</h4><ul>
<li>–soft  保留源码,只回退到commit 信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.</li>
<li>–hard 源码也会回退到某个版本,commit和index 都回回退到某个版本.(注意,这种方式是改变本地代码仓库源码) </li>
<li>–mixed 会保留源码,只是将git commit和index 信息回退到了某个版本.</li>
</ul>
<p><a href="https://imgtu.com/i/62oLTK"><img src="https://s3.ax1x.com/2021/03/18/62oLTK.png" alt="62oLTK.png"></a></p>
<h4 id="回退revert-已push"><a href="#回退revert-已push" class="headerlink" title="回退revert(已push)"></a>回退<code>revert</code>(已push)</h4><p>git revert用于反转提交,执行evert命令时要求工作树必须是干净的. </p>
<p>git revert用一个新提交来消除一个历史提交所做的任何修改.</p>
<p>revert 之后你的本地代码会回滚到指定的历史版本,这时你再 git push 既可以把线上的代码更新.(这里不会像reset造成冲突的问题)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git revert c011eb3c20ba6fb38cc94fe5a8dda366a3990c61</span><br></pre></td></tr></table></figure>

<h2 id="清除已提交内容，解决-gitignore无效"><a href="#清除已提交内容，解决-gitignore无效" class="headerlink" title="清除已提交内容，解决.gitignore无效"></a>清除已提交内容，解决.gitignore无效</h2><p>添加.gitignore执行如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;clear track&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="初始化工程"><a href="#初始化工程" class="headerlink" title="初始化工程"></a>初始化工程</h2><h5 id="Git-global-setup"><a href="#Git-global-setup" class="headerlink" title="Git global setup"></a>Git global setup</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;liangxuan&quot;</span><br><span class="line">git config --global user.email &quot;liangx@3sreform.com&quot;</span><br></pre></td></tr></table></figure>

<h5 id="Create-a-new-repository"><a href="#Create-a-new-repository" class="headerlink" title="Create a new repository"></a>Create a new repository</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone ssh:&#x2F;&#x2F;git@192.168.1.230:14020&#x2F;xuan&#x2F;test.git</span><br><span class="line">cd test</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;add README&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h5 id="Existing-folder"><a href="#Existing-folder" class="headerlink" title="Existing folder"></a>Existing folder</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd existing_folder</span><br><span class="line">git init</span><br><span class="line">git remote add origin ssh:&#x2F;&#x2F;git@192.168.1.230:14020&#x2F;xuan&#x2F;test.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial commit&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h5 id="Existing-Git-repository"><a href="#Existing-Git-repository" class="headerlink" title="Existing Git repository"></a>Existing Git repository</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd existing_repo</span><br><span class="line">git remote rename origin old-origin</span><br><span class="line">git remote add origin ssh:&#x2F;&#x2F;git@192.168.1.230:14020&#x2F;xuan&#x2F;test.git</span><br><span class="line">git push -u origin --all</span><br><span class="line">git push -u origin --tags</span><br></pre></td></tr></table></figure>

<h2 id="分支覆盖"><a href="#分支覆盖" class="headerlink" title="分支覆盖"></a>分支覆盖</h2><p>属于分支回滚的一部分</p>
<h4 id="idea操作"><a href="#idea操作" class="headerlink" title="idea操作"></a>idea操作</h4><p>idea操作，切换到被覆盖的分支，然后在git-&gt;log里面找到需要覆盖到本分支的提交，然后右键点击Reset Current Branch to Here,在弹出的选项里面选择hard</p>
<h4 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切换到被覆盖的分支(master),然后执行</span></span><br><span class="line">git reset --hard origin/<span class="built_in">test</span></span><br><span class="line"><span class="comment">#然后推送就行了，到此test分支内容就完全替换了master分支了</span></span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure>

<h2 id="分支归档"><a href="#分支归档" class="headerlink" title="分支归档"></a><a href="https://stackoverflow.com/questions/1307114/how-can-i-archive-git-branches">分支归档</a></h2><p>分支归档主要用于，分支太多，想删除，但是又怕以后会用到，因此就可以使用归档</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#deploy150换成你要归档的分支名</span></span><br><span class="line"><span class="comment">#----------------------------------归档--------------------------------------</span></span><br><span class="line"><span class="comment">#切换到要归档的分支</span></span><br><span class="line">git checkout deploy150 </span><br><span class="line"><span class="comment">#给当前分支打标签，标签规范archive/&gt;分支名&gt;,archive归档的意思，也就是创建一个归档标签，-m注释参数可选</span></span><br><span class="line">git tag archive/deploy150 deploy150 -m <span class="string">&quot;deploy150分支备份归档&quot;</span></span><br><span class="line"><span class="comment">#切出要归档的分支，这里随便切换一个分支出去</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment">#删除要归档的分支，之所以要切换出去，因为不能在要删除的分支上删除自己</span></span><br><span class="line">git branch -D deploy150</span><br><span class="line"><span class="comment">#删除要归档的远程分支</span></span><br><span class="line">git branch -d -r origin/deploy150 </span><br><span class="line"><span class="comment">#推送归档的标签</span></span><br><span class="line">git push --tags </span><br><span class="line"><span class="comment">#推送删除的分支记录，用于删除服务端的分支</span></span><br><span class="line">git push origin :deploy150 </span><br><span class="line"><span class="comment">#---------------------------------恢复---------------------------------------</span></span><br><span class="line"><span class="comment">#从备份标签恢复到分支，并切换到该分支上，这里恢复只是恢复本地，要恢复服务器push就可以了</span></span><br><span class="line">git checkout -b deploy150 archive/deploy150</span><br></pre></td></tr></table></figure>

<h2 id="标签删除"><a href="#标签删除" class="headerlink" title="标签删除"></a>标签删除</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除本地，本地没有也可以执行删除，test1是tag名字，要删除指定tag，替换成自己的就行</span></span><br><span class="line">git tag -d test1</span><br><span class="line"><span class="comment">#推送删除服务器上面的</span></span><br><span class="line">git push origin :refs/tags/test1</span><br></pre></td></tr></table></figure>

<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol>
<li><p>idea使用git导入项目时提示<code>ssh variant &#39;simple&#39; does not support setting port</code></p>
<p>解决：执行<code>git config --global ssh.variant ssh</code>，详细见<a href="https://stackoverflow.com/questions/48417505/fatal-ssh-variant-simple-does-not-support-setting-port">fatal: ssh variant ‘simple’ does not support setting port</a></p>
</li>
</ol>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="http://yijiebuyi.com/blog/8f985d539566d0bf3b804df6be4e0c90.html">git reset revert 回退回滚取消提交返回上一版本</a></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git创建空白分支</title>
    <url>/2017/12/07/tools-git-creates-blank-branch/</url>
    <content><![CDATA[<h3 id="场景需求"><a href="#场景需求" class="headerlink" title="场景需求"></a>场景需求</h3><p>有时需要新建一个完全独立的空白分支，作为资源存储等，例如hexo博客源码</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@xxxxxxxxx.git #克隆项目到本地，需要提前配置号ssh key等权限</span><br><span class="line">git checkout --orphan &lt;新的分支名&gt; #创建新的空白分支</span><br><span class="line"><span class="meta">#</span><span class="bash">如果提示error: The following untracked working tree files would be overwritten by checkout:</span></span><br><span class="line">git clean -d -fx #会清除所有git clone下的所有文件，只剩.git</span><br><span class="line"><span class="meta">#</span><span class="bash">然后重新执行</span></span><br><span class="line">git checkout --orphan &lt;新的分支名&gt; #会提示一下unable to create,无视，只要分支名改变就算成功</span><br><span class="line">git rm -rf . #清除所有git文件历史，为了空白分支</span><br><span class="line">git commit -m &quot;提交信息&quot;</span><br><span class="line">git push origin &lt;新的分支名&gt; #推送远程分支</span><br><span class="line"><span class="meta">#</span><span class="bash">提示该错误error: src refspec hexo does not match any.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">解决因为不能提交空分支，重新添加文件，提交分支</span></span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;提交信息&quot;</span><br><span class="line">git push origin &lt;新的分支名&gt; #推送远程分支</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>分支</tag>
      </tags>
  </entry>
  <entry>
    <title>Tools-Gradle-Base</title>
    <url>/2018/05/10/tools-gradle-base/</url>
    <content><![CDATA[<h2 id="安装Gradle"><a href="#安装Gradle" class="headerlink" title="安装Gradle"></a><a href="https://gradle.org/install/">安装Gradle</a></h2><ol>
<li>java环境必须</li>
<li>下载<a href="https://gradle.org/releases/">Gradle</a>,其中binary-only为单独的安装包，complete为文档加安装包，然后解压</li>
<li>在path中添加系统环境变量<code>F:\xuan\gradle-4.7\bin</code></li>
<li>执行<code>gradle -v</code>检查是否安装成功</li>
</ol>
<h2 id="使用Gradle"><a href="#使用Gradle" class="headerlink" title="使用Gradle"></a>使用Gradle</h2><ol>
<li>进入一个Gradle项目,或者拉取一个<code> git clone git@github.com:gradle/gradle-build-scan-quickstart.git</code></li>
</ol>
<h3 id="Gradle-build-scans使用"><a href="#Gradle-build-scans使用" class="headerlink" title="Gradle build scans使用"></a>Gradle build scans使用</h3><blockquote>
<p>Build Scans是用于开发和维护Gradle构建的重要工具。它为你提供了构建的详细信息，并为你识别构建环境、依赖或性能上存在的问题，同时可以帮你更全面地理解并提升构建过程，也便于与他人的合作。</p>
</blockquote>
<p>大概理解就是该插件能把构建过程的数据分享出去，方便让别人查看分析构建信息。</p>
<ol>
<li><p>进入项目跟目录执行构建扫描命令<code>./gradlew build --scan</code>，有可能会提示<code>Do you accept these terms?</code>是否接受许可协议，输入yes即可，成功后日志会输出一个链接类似<a href="https://scans.gradle.com/s/z5i6rmnpd4sbu%EF%BC%8C%E8%AE%BF%E9%97%AE%E8%AF%A5%E9%93%BE%E6%8E%A5%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E6%9E%84%E5%BB%BA%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF%E4%BA%86%EF%BC%88%E6%9C%89%E7%9A%84%E6%89%93%E5%BC%80%E4%B9%9F%E8%AE%B8%E9%9C%80%E8%A6%81%E9%82%AE%E7%AE%B1%EF%BC%89%E3%80%82">https://scans.gradle.com/s/z5i6rmnpd4sbu，访问该链接就可以查看构建日志信息了（有的打开也许需要邮箱）。</a></p>
</li>
<li><p>上面虽然得到了链接，但是可以直接在<code>build.gradle</code>添加相关配置信息，构建扫描插件<a href="https://plugins.gradle.org/plugin/com.gradle.build-scan">build-scan</a>,为了将构建扫码发布到<a href="https://gradle.com/terms-of-service%E9%9C%80%E8%A6%81%E6%8E%A5%E5%8F%97%E5%8D%8F%E8%AE%AE">https://gradle.com/terms-of-service需要接受协议</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#39;com.gradle.build-scan&#39; version &#39;1.13.2&#39; &#x2F;&#x2F;如果是低版本一定要放到其他插件前面</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;配置扫描发送地址，以及同意协议</span><br><span class="line">buildScan &#123;</span><br><span class="line">    termsOfServiceUrl &#x3D; &#39;https:&#x2F;&#x2F;gradle.com&#x2F;terms-of-service&#39;</span><br><span class="line">    termsOfServiceAgree &#x3D; &#39;yes&#39;  &#x2F;&#x2F;同意协议</span><br><span class="line">	tag &#39;xuan test&#39;  &#x2F;&#x2F;打标签</span><br><span class="line">	&#x2F;&#x2F;项目的地址，这里需要是http地址，用git开头的地址编译报错</span><br><span class="line">	link &#39;GitHub&#39;,&#39;https:&#x2F;&#x2F;github.com&#x2F;gradle&#x2F;gradle-build-scan-quickstart&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行<code>gradle build -Dscan</code>运行得到链接，然后访问即可</p>
</li>
</ol>
<h3 id="Creating-New-Gradle-Builds"><a href="#Creating-New-Gradle-Builds" class="headerlink" title="Creating New Gradle Builds"></a>Creating New Gradle Builds</h3><h5 id="初始化gradle-项目"><a href="#初始化gradle-项目" class="headerlink" title="初始化gradle 项目"></a>初始化gradle 项目</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir gradle<span class="literal">-demo</span> <span class="comment">#创建项目目录</span></span><br><span class="line"><span class="built_in">cd</span> gradle<span class="literal">-demo</span> <span class="comment">#进入项目目录</span></span><br><span class="line">gradle init <span class="comment">#初始化为gradle项目</span></span><br><span class="line"><span class="comment">#生成如下目录文件</span></span><br><span class="line">.</span><br><span class="line">├── build.gradle   <span class="comment">#项目配置脚本</span></span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── gradle<span class="literal">-wrapper</span>.jar  <span class="comment">#wrapper可执行jar</span></span><br><span class="line">│       └── gradle<span class="literal">-wrapper</span>.properties  <span class="comment">#wrapper 配置文件</span></span><br><span class="line">├── gradlew  <span class="comment"># unix systems（linux）系统下的脚本</span></span><br><span class="line">├── gradlew.bat  <span class="comment"># window 下的脚本</span></span><br><span class="line">└── settings.gradle  <span class="comment">#配置那些项目参与构建脚本</span></span><br></pre></td></tr></table></figure>

<h5 id="创建task任务名叫copy"><a href="#创建task任务名叫copy" class="headerlink" title="创建task任务名叫copy"></a>创建task任务名叫<code>copy</code></h5><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task copy(<span class="attr">type:</span> Copy, <span class="attr">group:</span> <span class="string">&quot;Custom&quot;</span>, <span class="attr">description:</span> <span class="string">&quot;复制src目录到dest目录&quot;</span>) &#123;</span><br><span class="line">    from <span class="string">&quot;src&quot;</span>   <span class="comment">//前提需要有src目录</span></span><br><span class="line">    into <span class="string">&quot;dest&quot;</span>  <span class="comment">//不需要创建，会自动创建</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>命令行执行<code>./gradlew copy</code>代表执行task里的copy任务</p>
<h5 id="Gradle-应用插件"><a href="#Gradle-应用插件" class="headerlink" title="Gradle 应用插件"></a>Gradle 应用插件</h5><p><a href="https://plugins.gradle.org/">插件仓库</a></p>
<p>这里以base插件，base插件功能主要是打包为zip文件</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;   <span class="comment">//这个代码快必须放顶部</span></span><br><span class="line">	id <span class="string">&quot;base&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">task copy(<span class="attr">type:</span> Copy, <span class="attr">group:</span> <span class="string">&quot;Custom&quot;</span>, <span class="attr">description:</span> <span class="string">&quot;复制src目录到dest目录&quot;</span>) &#123;</span><br><span class="line">    from <span class="string">&quot;src&quot;</span></span><br><span class="line">    into <span class="string">&quot;dest&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">task zip(<span class="attr">type:</span> Zip, <span class="attr">group:</span> <span class="string">&quot;Util&quot;</span>, <span class="attr">description:</span> <span class="string">&quot;压缩src目录文件&quot;</span>) &#123;</span><br><span class="line">	from <span class="string">&quot;src&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行<code>./gradlew zip</code>,然后在目录  <code>.\build\distributions</code>下就可以看到<code>gradle-demo.zip</code>文件了</p>
<h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">./gradlew tasks <span class="comment">#查看可用的task任务</span></span><br><span class="line">./gradlew zip -<span class="literal">-scan</span>  <span class="comment">#结合scan执行zip，分析执行信息</span></span><br><span class="line">./gradlew properties <span class="comment">#查看可用的配置属性，类似环境变量(配置属性)的</span></span><br></pre></td></tr></table></figure>

<p>在<code>build.gradle</code>可以更改<code>properties</code>变量的值，但是不能新增，例如修改项目描述和版本号</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//放在build.gradle文件中，但是不能放在plugins前面，因为plugins这个必须在顶部</span></span><br><span class="line">description = <span class="string">&quot;该项目为测试学习用&quot;</span></span><br><span class="line">version = <span class="string">&quot;1.0&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="手册"><a href="#手册" class="headerlink" title="手册"></a>手册</h2><p><a href="https://docs.gradle.org/4.7/userguide/command_line_interface.html">Gradle 命令手册</a></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>不能在gradle项目的子目录执行<code>gradle init</code></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle构建java库</title>
    <url>/2018/05/13/tools-gradle-build-java-libraries/</url>
    <content><![CDATA[<p><code>gradle init --type &lt;name&gt;</code>其中name可选</p>
<ul>
<li>java-application</li>
<li>java-library</li>
<li>scala-library</li>
<li>groovy-library</li>
<li>basic</li>
</ul>
<h2 id="build-java-library"><a href="#build-java-library" class="headerlink" title="build java-library"></a>build java-library</h2><blockquote>
<p>This guide walks you through the process of using Gradle’s Build Init plugin to produce a JVM library which is suitable for consumption by other JVM libraries and applications.</p>
</blockquote>
<p>本指南引导您完成使用Gradle的Build Init插件生成适合其他JVM库和应用程序使用的JVM库的过程。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir demo-java-lib <span class="comment">#创建项目目录</span></span><br><span class="line"><span class="built_in">cd</span> demo-java-lib</span><br><span class="line">gradle init --<span class="built_in">type</span> java-library  <span class="comment">#初始化构建为java-library</span></span><br><span class="line">tree <span class="comment">#查看生成的目录树</span></span><br><span class="line">├── build.gradle</span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── gradle-wrapper.jar</span><br><span class="line">│       └── gradle-wrapper.properties</span><br><span class="line">├── gradlew</span><br><span class="line">├── gradlew.bat</span><br><span class="line">├── settings.gradle</span><br><span class="line">└── src</span><br><span class="line">    ├── main  <span class="comment">#java资源为件</span></span><br><span class="line">    │   └── java  </span><br><span class="line">    │       └── Library.java</span><br><span class="line">    └── <span class="built_in">test</span>  <span class="comment">#java测试文件</span></span><br><span class="line">        └── java</span><br><span class="line">            └── LibraryTest.java</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>build.gradle</code>解读</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    <span class="comment">// Java Library依赖插件</span></span><br><span class="line">    id <span class="string">&#x27;java-library&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// 依赖该api</span></span><br><span class="line">    api <span class="string">&#x27;org.apache.commons:commons-math3:3.6.1&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.google.guava:guava:23.0&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;junit:junit:4.12&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">repositories &#123;</span><br><span class="line">    <span class="comment">// 仓库</span></span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行<code>./gradew build</code>第一次构建会下载依赖jar包比较慢,下载到目录<code>~/.gradle/wrapper/dists</code>，编译完成后生成</p>
<ul>
<li>build/reports/tests/test/index.html 测试报告</li>
<li>build/libs/building-java-libraries.jar 编译生成的jar</li>
</ul>
<p><code>jar tf build/libs/building-java-libraries.jar</code>命令查看jar包内容，其中<code>-f</code>指定jar文件名，<code>-t</code>列出包的内容</p>
<p>修改<code>build.gradle</code>文件在文件里添加版本好<code>version = &#39;0.1.0&#39;</code>，结果会修改打包的名称为<code>build/libs/demo-java-lib-0.1.0.jar</code></p>
<p>修改<code>build.gradle</code>文件在文件里添加<code>jar</code> task任务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jar &#123;</span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes(&#39;Implementation-Title&#39;: project.name,</span><br><span class="line">                   &#39;Implementation-Version&#39;: project.version)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会修改<code>build/libs/building-java-libraries-0.1.0.jar/META-INF/MANIFEST.MF</code>jar包文件的内容为</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">Manifest-Version</span>: <span class="string">1.0</span></span><br><span class="line"><span class="meta">Implementation-Title</span>: <span class="string">demo-java-lib</span></span><br><span class="line"><span class="meta">Implementation-Version</span>: <span class="string">0.1.0</span></span><br></pre></td></tr></table></figure>

<p>java-library内置支持javadoc，执行<code>./gradlew javadoc</code>会生成<code>/build/docs/javadoc/index.html</code>文档</p>
<h2 id="build-java-application"><a href="#build-java-application" class="headerlink" title="build java-application"></a>build java-application</h2><p>java项目和library项目一样，只是多了tasks任务 run</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Tools-Gradle-muilt-project-Builds</title>
    <url>/2018/05/11/tools-gradle-muilt-project-builds/</url>
    <content><![CDATA[<h3 id="多项目构建"><a href="#多项目构建" class="headerlink" title="多项目构建"></a>多项目构建</h3><h5 id="初始化顶级项目"><a href="#初始化顶级项目" class="headerlink" title="初始化顶级项目"></a>初始化顶级项目</h5><ol>
<li><p>项目初始化</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mkdir multi<span class="literal">-project</span></span><br><span class="line"><span class="built_in">cd</span> multi<span class="literal">-project</span></span><br><span class="line">gradle init</span><br></pre></td></tr></table></figure>
</li>
<li><p>顶级构建，也就是采用跟项目的配置，从而减少子项目的重复配置，可以把子项目的公共配置抽离到跟项目配置里。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跟项目build.gradle添加</span></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter() <span class="comment">//将jcenter仓库配置到所有项目</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">subprojects &#123;</span><br><span class="line">    version = <span class="string">&#x27;1.0&#x27;</span> <span class="comment">//设置版本号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="添加Groovy-library子项目"><a href="#添加Groovy-library子项目" class="headerlink" title="添加Groovy library子项目"></a>添加Groovy library子项目</h5><ol>
<li><p>执行<code>mkdir multi-library</code>创建一个子项目名为<code>multi-library</code></p>
</li>
<li><p>进入<code>multi-library</code>子项目根目录，新建一个<code>build.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//multi-library/build.gradle</span></span><br><span class="line">apply <span class="attr">plugin :</span> <span class="string">&#x27;groovy&#x27;</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">&#x27;org.codehaus.groovy:groovy:2.4.10&#x27;</span></span><br><span class="line">    testCompile <span class="string">&#x27;org.spockframework:spock-core:1.0-groovy-2.4&#x27;</span>, &#123;</span><br><span class="line">        exclude <span class="attr">module :</span> <span class="string">&#x27;groovy-all&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改顶级项目根项目的<code>settings.gradle</code>,添加<code>include &#39;multi-library&#39;</code></p>
</li>
<li><p>完善子项目，创建两个目录<code>mkdir -p multi-library/src/main/groovy/greeter</code>和<code>mkdir -p multi-library/src/test/groovy/greeter</code></p>
</li>
<li><p>在目录<code>src/main/groovy/greeter</code>新建<code>GreetingFormatter.groovy</code>文件</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//multi-library/src/main/groovy/greeter/GreetingFormatter.groovy</span></span><br><span class="line"><span class="keyword">package</span> greeter</span><br><span class="line"><span class="keyword">import</span> groovy.transform.CompileStatic</span><br><span class="line"><span class="meta">@CompileStatic</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreetingFormatter</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> String greeting(<span class="keyword">final</span> String name) &#123;</span><br><span class="line">        <span class="string">&quot;Hello, $&#123;name.capitalize()&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在目录<code>src/test/groovy/greeter</code>新建<code>GreetingFormatterSpec.groovy</code>文件</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//multi-library/src/test/groovy/greeter/GreetingFormatterSpec.groovy</span></span><br><span class="line"><span class="keyword">package</span> greeter</span><br><span class="line"><span class="keyword">import</span> spock.lang.Specification</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreetingFormatterSpec</span> <span class="keyword">extends</span> <span class="title">Specification</span> &#123;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="string">&#x27;Creating a greeting&#x27;</span>() &#123;</span><br><span class="line">        <span class="symbol">expect:</span> <span class="string">&#x27;The greeting to be correctly capitalized&#x27;</span></span><br><span class="line">        GreetingFormatter.greeting(<span class="string">&#x27;gradlephant&#x27;</span>) == <span class="string">&#x27;Hello, Gradlephant&#x27;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后在顶级项目的根目录运行<code>./gradlew build</code>，到此一个项目依赖一个子项目就完成了</p>
</li>
</ol>
<h5 id="添加一个java-子项目"><a href="#添加一个java-子项目" class="headerlink" title="添加一个java 子项目"></a>添加一个java 子项目</h5><ol>
<li><p>执行<code>mkdir java-demo</code>创建一个子项目名为<code>java-demo</code></p>
</li>
<li><p>进入<code>java-demo</code>子项目根目录，新建一个<code>build.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin :</span> <span class="string">&#x27;java&#x27;</span> </span><br><span class="line">apply <span class="attr">plugin :</span> <span class="string">&#x27;application&#x27;</span> </span><br></pre></td></tr></table></figure>
</li>
<li><p>完善子项目，创建目录<code>mkdir -p  java-demo/src/main/java/greeter</code></p>
</li>
<li><p>修改顶级项目根项目的<code>settings.gradle</code>,添加<code>include &#39;java-demo&#39;</code></p>
</li>
<li><p>在目录<code>java-demo/src/main/java/greeter</code>新建<code>Greeter.java</code>文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> greeter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String output = GreetingFormatter.greeting(args[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入<code>java-demo</code>子项目根目录，修改<code>build.gradle</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apply plugin : &#39;java&#39; </span><br><span class="line">apply plugin : &#39;application&#39; </span><br><span class="line">mainClassName &#x3D; &#39;greeter.Greeter&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后在顶级项目的根目录运行<code>./gradlew build</code>,会出现依赖错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* What went wrong:</span><br><span class="line">Execution failed for task &#39;:java-demo:compileJava&#39;.</span><br><span class="line">&gt; Compilation failed; see the compiler error output for details.</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决，进入<code>java-demo</code>子项目根目录，修改<code>build.gradle</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apply plugin : &#39;java&#39; </span><br><span class="line">apply plugin : &#39;application&#39; </span><br><span class="line">mainClassName &#x3D; &#39;greeter.Greeter&#39;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile project(&#39;:multi-library&#39;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新执行<code>./gradlew build</code>，编译成功</p>
</li>
<li><p>添加test测试编译，进入<code>java-demo</code>子项目根目录，修改<code>build.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin :</span> <span class="string">&#x27;java&#x27;</span> </span><br><span class="line">apply <span class="attr">plugin :</span> <span class="string">&#x27;application&#x27;</span> </span><br><span class="line">apply <span class="attr">plugin :</span> <span class="string">&#x27;groovy&#x27;</span></span><br><span class="line">mainClassName = <span class="string">&#x27;greeter.Greeter&#x27;</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile project(<span class="string">&#x27;:multi-library&#x27;</span>) </span><br><span class="line">    testCompile <span class="string">&#x27;org.spockframework:spock-core:1.0-groovy-2.4&#x27;</span>, &#123;</span><br><span class="line">    	exclude <span class="attr">module :</span> <span class="string">&#x27;groovy-all&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建测试目录<code>mkdir -p  java-demo/src/test/groovy/greeter</code>，添加<code>GreeterSpec.groovy</code>文件</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java-demo/src/test/groovy/greeter/GreeterSpec.groovy</span></span><br><span class="line"><span class="keyword">package</span> greeter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> spock.lang.Specification</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreeterSpec</span> <span class="keyword">extends</span> <span class="title">Specification</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="string">&#x27;Calling the entry point&#x27;</span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="symbol">setup:</span> <span class="string">&#x27;Re-route standard out&#x27;</span></span><br><span class="line">        <span class="keyword">def</span> buf = <span class="keyword">new</span> ByteArrayOutputStream(<span class="number">1024</span>)</span><br><span class="line">        System.out = <span class="keyword">new</span> PrintStream(buf)</span><br><span class="line"></span><br><span class="line">        <span class="symbol">when:</span> <span class="string">&#x27;The entrypoint is executed&#x27;</span></span><br><span class="line">        Greeter.main(<span class="string">&#x27;gradlephant&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="symbol">then:</span> <span class="string">&#x27;The correct greeting is output&#x27;</span></span><br><span class="line">        buf.toString() == <span class="string">&quot;Hello, Gradlephant\n&quot;</span>.denormalize()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>单项目编译，执行<code>./gradlew :java-demo:test</code> 其中java-demo为项目名，test为那种编译类型，也可以执行去子项目跟目录执行<code>../gradlew test</code>进行单模块编译</p>
</li>
</ol>
<h5 id="添加文档子项目"><a href="#添加文档子项目" class="headerlink" title="添加文档子项目"></a>添加文档子项目</h5><ol>
<li><p>在顶级项目的<code>build.gradle</code>添加插件<code>asciidoctor</code>该插件的作用主要是将文档生成网页文件</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">  <span class="comment">//apply false将插件添加到整个项目中，但不会将其添加到根项目中。</span></span><br><span class="line">  id <span class="string">&#x27;org.asciidoctor.convert&#x27;</span> version <span class="string">&#x27;1.5.6&#x27;</span> apply <span class="literal">false</span>  <span class="comment">//文档插件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建文档项目目录，在顶级项目跟目录，执行<code>mkdir docs</code></p>
</li>
<li><p>然后在docs目录新建个<code>build.gradle</code>，在里头添加如下内容</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin :</span> <span class="string">&#x27;org.asciidoctor.convert&#x27;</span>  <span class="comment">//将插件用于该子项目</span></span><br><span class="line"><span class="comment">//asciidoctor任务</span></span><br><span class="line">asciidoctor &#123;</span><br><span class="line">    sources &#123;</span><br><span class="line">        include <span class="string">&#x27;greeter.adoc&#x27;</span>  <span class="comment">//文档资源文件，需要自己新建</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将asciidoctor任务添加到构建生命周期中，以便如果为顶级项目执行构建，则也将构建文档。</span></span><br><span class="line">build.dependsOn <span class="string">&#x27;asciidoctor&#x27;</span> </span><br></pre></td></tr></table></figure>
</li>
<li><p>修改顶级项目根项目的<code>settings.gradle</code>,添加<code>include &#39;docs&#39;</code></p>
</li>
<li><p>然后新建个文档<code>docs/src/docs/asciidoc/greeter.adoc</code>,没有该目录创建就行,内容随便，后面会把此文件文档转为网页文件</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">&#x3D; Greeter Command-line Application</span><br><span class="line"></span><br><span class="line">A simple application demonstrating the flexibility of a Gradle multi-project.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D; Installation</span><br><span class="line"></span><br><span class="line">Unpack the ZIP or TAR file in a suitable location</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D; Usage</span><br><span class="line"></span><br><span class="line">[listing]</span><br><span class="line">----</span><br><span class="line">$ cd greeter-1.0</span><br><span class="line">$ .&#x2F;bin&#x2F;greeter gradlephant</span><br><span class="line"></span><br><span class="line">Hello, Gradlephant</span><br><span class="line">----</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在顶级项目跟目录，运行task任务<code>asciidoctor</code>,执行<code>./gradlew asciidoctor</code></p>
</li>
<li><p>会在目录<code>docs/build/asciidoc/html5</code>目录生成网页文件<code>greeter.html</code></p>
</li>
</ol>
<h5 id="将文档包含到发布的项目"><a href="#将文档包含到发布的项目" class="headerlink" title="将文档包含到发布的项目"></a>将文档包含到发布的项目</h5><ol>
<li><p>要将文档包含到发布的项目的目录可以新建task任务即可，修改<code>java-demo</code>项目的配置文件<code>build.gradle</code>增加如下内容</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">distZip &#123;</span><br><span class="line">    from project(<span class="string">&#x27;:docs&#x27;</span>).asciidoctor, &#123; </span><br><span class="line">        into <span class="string">&quot;$&#123;project.name&#125;-$&#123;version&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">distTar &#123;</span><br><span class="line">    from project(<span class="string">&#x27;:docs&#x27;</span>).asciidoctor, &#123;</span><br><span class="line">        into <span class="string">&quot;$&#123;project.name&#125;-$&#123;version&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后重新编译文件即可，在顶级项目跟目录执行<code>./gradlew build</code></p>
</li>
<li><p>最后会在<code>java-demo//build/distributions</code>目录生成两个<code>greeter-1.0.zip</code> 和 <code>greeter-1.0.tar</code>，里面包含了编译好了的网页文件</p>
</li>
</ol>
<h5 id="整理顶级构建脚本"><a href="#整理顶级构建脚本" class="headerlink" title="整理顶级构建脚本"></a>整理顶级构建脚本</h5><p>在java-demo和muilt-library项目中有相同的配置，这里把他们抽到顶级项目里配置</p>
<ol>
<li><p>在顶级项目的<code>build.gradle</code>里添加公共配置</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">configure(subprojects.findAll &#123;it.name == <span class="string">&#x27;java-demo&#x27;</span> || it.name == <span class="string">&#x27;multi-library&#x27;</span>&#125; ) &#123; <span class="comment">//指定配置那些项目</span></span><br><span class="line"></span><br><span class="line">    apply <span class="attr">plugin :</span> <span class="string">&#x27;groovy&#x27;</span></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        testCompile <span class="string">&#x27;org.spockframework:spock-core:1.0-groovy-2.4&#x27;</span>, &#123;</span><br><span class="line">            exclude <span class="attr">module :</span> <span class="string">&#x27;groovy-all&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除子项目公有的配置，最终所有<code>build.gradle</code>配置如下</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顶级项目build.gradle</span></span><br><span class="line">plugins &#123;</span><br><span class="line">  <span class="comment">//apply false将插件添加到整个项目中，但不会将其添加到根项目中。</span></span><br><span class="line">  id <span class="string">&#x27;org.asciidoctor.convert&#x27;</span> version <span class="string">&#x27;1.5.6&#x27;</span> apply <span class="literal">false</span>  <span class="comment">//文档插件</span></span><br><span class="line">&#125;</span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter() <span class="comment">//将jcenter仓库配置到所有项目</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">subprojects &#123;</span><br><span class="line">    version = <span class="string">&#x27;1.0&#x27;</span> <span class="comment">//设置版本号</span></span><br><span class="line">&#125;</span><br><span class="line">configure(subprojects.findAll &#123;it.name == <span class="string">&#x27;java-demo&#x27;</span> || it.name == <span class="string">&#x27;multi-library&#x27;</span>&#125; ) &#123; </span><br><span class="line"></span><br><span class="line">    apply <span class="attr">plugin :</span> <span class="string">&#x27;groovy&#x27;</span></span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        testCompile <span class="string">&#x27;org.spockframework:spock-core:1.0-groovy-2.4&#x27;</span>, &#123;</span><br><span class="line">            exclude <span class="attr">module :</span> <span class="string">&#x27;groovy-all&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------------------------------------------</span></span><br><span class="line"><span class="comment">//multi-library项目build.gradle</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">&#x27;org.codehaus.groovy:groovy:2.4.10&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-----------------------------------------------------------</span></span><br><span class="line"><span class="comment">//java-demo项目build.gradle</span></span><br><span class="line">apply <span class="attr">plugin :</span> <span class="string">&#x27;java&#x27;</span> </span><br><span class="line">apply <span class="attr">plugin :</span> <span class="string">&#x27;application&#x27;</span> </span><br><span class="line">mainClassName = <span class="string">&#x27;greeter.Greeter&#x27;</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile project(<span class="string">&#x27;:multi-library&#x27;</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">distZip &#123;</span><br><span class="line">    from project(<span class="string">&#x27;:docs&#x27;</span>).asciidoctor, &#123; </span><br><span class="line">        into <span class="string">&quot;$&#123;project.name&#125;-$&#123;version&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">distTar &#123;</span><br><span class="line">    from project(<span class="string">&#x27;:docs&#x27;</span>).asciidoctor, &#123;</span><br><span class="line">        into <span class="string">&quot;$&#123;project.name&#125;-$&#123;version&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后执行<code>./gradlew clean build</code>重新构建</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>子项目只需<code>build.gradle</code>配置即可，且子项目不能gradle init</p>
</li>
<li><p>要父项目包含子项目，需要在<code>setting.gradle</code>设置<code>include &#39;项目名&#39;</code></p>
</li>
<li><p>子项目依赖其他子项目只需要设置<code>compile project(&#39;:子项目名&#39;) </code></p>
</li>
<li><p>插件需要在最顶部定义</p>
</li>
<li><p>运行单模块执行<code>./gradlew :子项目名:构建命令</code>构建命令目前包括test、build、clean</p>
</li>
<li><p>抽离子项目共有配置到父项目用<code>configure</code></p>
</li>
<li><p>常用命令</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">gradle :</span><span class="attr">eurekaserver:</span>build <span class="comment">//执行子项目eurekaserver构建build命令</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>idea常用插件管理</title>
    <url>/2018/01/03/tools-idea-plugins-manager/</url>
    <content><![CDATA[<h4 id="JRebel"><a href="#JRebel" class="headerlink" title="JRebel"></a>JRebel</h4><p>热部署插件</p>
<p><a href="https://my.jrebel.com/account/how-to-activate">激活</a>：Help-&gt;JRebel-&gt;Activate 废弃</p>
<p><a href="https://github.com/ilanyu/ReverseProxy/releases">激活2</a>  废弃</p>
<p><a href="https://zeroturnaround.com/software/jrebel/trial/">激活三</a></p>
<p>选择Connect to License Server 输入：</p>
<p>服务器ip<a href="http://127.0.0.1:8888/zsc">http://127.0.0.1:8888/zsc</a></p>
<p>随便写<a href="mailto:&#122;&#115;&#99;&#64;&#49;&#50;&#x33;&#x2e;&#99;&#x6f;&#x6d;">&#122;&#115;&#99;&#64;&#49;&#50;&#x33;&#x2e;&#99;&#x6f;&#x6d;</a></p>
<p><a href="https://jingyan.baidu.com/article/14bd256e9152a5bb6d2612ee.html">https://jingyan.baidu.com/article/14bd256e9152a5bb6d2612ee.html</a></p>
<p><a href="https://gitee.com/gsls200808/JrebelLicenseServerforJava">https://gitee.com/gsls200808/JrebelLicenseServerforJava</a></p>
<h4 id="MyBatis-plugin"><a href="#MyBatis-plugin" class="headerlink" title="MyBatis plugin"></a>MyBatis plugin</h4><p>sql语句跳转生成</p>
<h4 id="Alibaba-java-Coding-Guidelines"><a href="#Alibaba-java-Coding-Guidelines" class="headerlink" title="Alibaba java Coding Guidelines"></a>Alibaba java Coding Guidelines</h4><p>代码格式优化检查</p>
<h4 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h4><p>日志插件</p>
<h4 id="checkstyle"><a href="#checkstyle" class="headerlink" title="checkstyle"></a>checkstyle</h4><p>代码样式</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.dxscx.com/2017/01/05/idea-plugins/">JAVA后端工作流推荐三–IDEA安装Checkstyle、FindBugs、Markdown等插件及其使用</a></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>Plugins</tag>
      </tags>
  </entry>
  <entry>
    <title>idea之mybatis插件安装注册</title>
    <url>/2017/09/08/tools-idea-reg-mybatis/</url>
    <content><![CDATA[<h4 id="MyBatis-plugin插件安装步骤（弃用，重新打开失效）"><a href="#MyBatis-plugin插件安装步骤（弃用，重新打开失效）" class="headerlink" title="MyBatis plugin插件安装步骤（弃用，重新打开失效）"></a>MyBatis plugin插件安装步骤（弃用，重新打开失效）</h4><ol>
<li><p>安装setting-&gt;Plugins-&gt;Browse Respositories…-&gt;MyBatis plugin</p>
</li>
<li><p>重启</p>
</li>
<li><p>执行下面代码生成KEY和RESULT</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPublicKey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException </span>&#123;</span><br><span class="line">        KeyPairGenerator keygen = KeyPairGenerator.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">        keygen.initialize(<span class="number">512</span>);</span><br><span class="line">        KeyPair kp = keygen.generateKeyPair();</span><br><span class="line">        RSAPrivateKey privateKey = (RSAPrivateKey)kp.getPrivate();</span><br><span class="line">        RSAPublicKey publicKey = (RSAPublicKey)kp.getPublic();</span><br><span class="line">        System.out.println(<span class="string">&quot;KEY:\n&quot;</span> + bytesToHexString(publicKey.getEncoded()) + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE,privateKey);</span><br><span class="line">        System.out.println(<span class="string">&quot;RESULT:\n&quot;</span> + bytesToHexString(cipher.doFinal(<span class="string">&quot;ilanyu&quot;</span>.getBytes())) + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">bytesToHexString</span><span class="params">(<span class="keyword">byte</span>[] src)</span></span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (src == <span class="keyword">null</span> || src.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> aSrc : src) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = aSrc &amp; <span class="number">0xFF</span>;</span><br><span class="line">            String hv = Integer.toHexString(v);</span><br><span class="line">            <span class="keyword">if</span> (hv.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                stringBuilder.append(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.append(hv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>把key和result填到<code>C:\Users\&#123;用户&#125;\.IntelliJIdea2017.2\config\options\mybatis.xml</code>中对应的字段</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>JavaEE</tag>
        <tag>idea</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu14.04 使用 idea</title>
    <url>/2017/02/28/tools-idea-use-on-ubuntu/</url>
    <content><![CDATA[<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h5 id="idea配置"><a href="#idea配置" class="headerlink" title="idea配置"></a>idea配置</h5><p>idea添加tomcat出现<code>application server libraries not found</code></p>
<p><em>原因：</em> 权限不足</p>
<p><em>解决:</em> sudo chown -R 【用户名】 【tomcat目录】</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>tomcat</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Tools-Jenkins-pipeline</title>
    <url>/2018/06/04/tools-jenkins-pipline/</url>
    <content><![CDATA[<h2 id="jenkins使用pipeline"><a href="#jenkins使用pipeline" class="headerlink" title="jenkins使用pipeline"></a>jenkins使用pipeline</h2><p>脚本名词解释</p>
<h5 id="pipeline-lt-必须-gt-Pipeline是CD管道的用户定义模型。Pipeline的代码定义了您的整个构建过程，通常包括构建应用程序，测试和交付应用程序的阶段。"><a href="#pipeline-lt-必须-gt-Pipeline是CD管道的用户定义模型。Pipeline的代码定义了您的整个构建过程，通常包括构建应用程序，测试和交付应用程序的阶段。" class="headerlink" title="pipeline &lt;必须&gt; Pipeline是CD管道的用户定义模型。Pipeline的代码定义了您的整个构建过程，通常包括构建应用程序，测试和交付应用程序的阶段。"></a><code>pipeline</code> <strong>&lt;必须&gt;</strong> Pipeline是CD管道的用户定义模型。Pipeline的代码定义了您的整个构建过程，通常包括构建应用程序，测试和交付应用程序的阶段。</h5><h5 id="agent-lt-必须-gt-定义pipeline的执行环境，必须存在"><a href="#agent-lt-必须-gt-定义pipeline的执行环境，必须存在" class="headerlink" title="agent &lt;必须&gt; 定义pipeline的执行环境，必须存在"></a><code>agent</code> <strong>&lt;必须&gt;</strong> 定义pipeline的执行环境，必须存在</h5><h5 id="stages-lt-阶段-gt-包含多个子阶段stage-‘子阶段名’"><a href="#stages-lt-阶段-gt-包含多个子阶段stage-‘子阶段名’" class="headerlink" title="stages&lt;阶段&gt; 包含多个子阶段stage(‘子阶段名’)"></a><code>stages</code>&lt;阶段&gt; 包含多个子阶段stage(‘子阶段名’)</h5><p> jenkins 的工作空间目录 <code>/var/jenkins_home/workspace/</code></p>
<h3 id="node-vs-agent-区别"><a href="#node-vs-agent-区别" class="headerlink" title="node vs agent 区别"></a>node vs agent 区别</h3><p>agent是声明性的pipelines，node是脚本性的pipelines</p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h4 id="pipeline使用gradle"><a href="#pipeline使用gradle" class="headerlink" title="pipeline使用gradle"></a>pipeline使用gradle</h4><p>学习到如何使用工具，和配置工具全局变量</p>
<ol>
<li><p>配置工具<code>系统管理-&gt;全局工具配置-&gt;Gradle-&gt;Gradle 安装</code></p>
<p>name：gradle4.8</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 自动安装</li>
</ul>
<p>版本 Gradle 4.8</p>
<p><code>Apply-&gt;Save</code>即可</p>
<p>注释：如果没有Gradle设置，先去安装Gradle插件，默认推荐设置是安装了的</p>
</li>
<li><p>编写Jenkinsfile进行测试</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env groovy Jenkinsfile</span></span><br><span class="line">node &#123;</span><br><span class="line">	<span class="keyword">def</span> gradleHome = tool <span class="string">&#x27;gradle4.8&#x27;</span>   <span class="comment">//这里的gradle4.8要和gradle工具的配置里的name要一致</span></span><br><span class="line">	env.PATH = <span class="string">&quot;$&#123;gradleHome&#125;/bin:$&#123;env.PATH&#125;&quot;</span></span><br><span class="line">	stage(<span class="string">&#x27;build&#x27;</span>) &#123;</span><br><span class="line">		sh <span class="string">&#x27;gradle -v&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="pipeline使用gradle打包java-spring-boot"><a href="#pipeline使用gradle打包java-spring-boot" class="headerlink" title="pipeline使用gradle打包java spring boot"></a>pipeline使用gradle打包java spring boot</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env groovy Jenkinsfile</span></span><br><span class="line">node &#123;</span><br><span class="line">    <span class="keyword">def</span> gradleHome = tool <span class="string">&#x27;gradle4.8&#x27;</span>  <span class="comment">//这里的gradle4.8要和gradle工具的配置里的name要一致</span></span><br><span class="line">    env.PATH = <span class="string">&quot;$&#123;gradleHome&#125;/bin:$&#123;env.PATH&#125;&quot;</span></span><br><span class="line">    stage(<span class="string">&#x27;gradle build&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isUnix()) &#123;</span><br><span class="line">            <span class="comment">//sh &#x27;./gradlew clean :eurekaserver:build&#x27;  //这里会自动下载项目里的gradle版本(4.7)</span></span><br><span class="line">            sh <span class="string">&#x27;gradle clean :eurekaserver:build&#x27;</span> <span class="comment">//使用jenkns安装的gradle工具(4.8)</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// bat &#x27;gradlew.bat clean :eurekaserver:build&#x27;</span></span><br><span class="line">            bat <span class="string">&#x27;gradle clean :eurekaserver:build&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="打包jar为镜像"><a href="#打包jar为镜像" class="headerlink" title="打包jar为镜像"></a>打包jar为镜像</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env groovy Jenkinsfile</span></span><br><span class="line">node &#123;</span><br><span class="line">    <span class="keyword">def</span> gradleHome = tool <span class="string">&#x27;gradle4.8&#x27;</span>  <span class="comment">//这里的gradle4.8要和gradle工具的配置里的name要一致</span></span><br><span class="line">    env.PATH = <span class="string">&quot;$&#123;gradleHome&#125;/bin:$&#123;env.PATH&#125;&quot;</span></span><br><span class="line">    stage(<span class="string">&#x27;gradle build&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isUnix()) &#123;</span><br><span class="line">            <span class="comment">//sh &#x27;./gradlew clean :eurekaserver:build&#x27;  //这里会自动下载项目里的gradle版本(4.7)</span></span><br><span class="line">            sh <span class="string">&#x27;gradle clean :eurekaserver:build&#x27;</span> <span class="comment">//使用jenkns安装的gradle工具(4.8)</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// bat &#x27;gradlew.bat clean :eurekaserver:build&#x27;</span></span><br><span class="line">            bat <span class="string">&#x27;gradle clean :eurekaserver:build&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;docker build image&#x27;</span>)&#123;</span><br><span class="line">        dir(<span class="string">&#x27;eurekaserver&#x27;</span>)&#123;  <span class="comment">//dockerfile的跟目录</span></span><br><span class="line">            docker.build(<span class="string">&quot;springcould/eurekaserver:$&#123;env.BUILD_NUMBER&#125;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env groovy Jenkinsfile</span></span><br><span class="line">node &#123;</span><br><span class="line">    <span class="keyword">def</span> gradleHome = tool <span class="string">&#x27;gradle4.8&#x27;</span>  <span class="comment">//这里的gradle4.8要和gradle工具的配置里的name要一致</span></span><br><span class="line">    env.PATH = <span class="string">&quot;$&#123;gradleHome&#125;/bin:$&#123;env.PATH&#125;&quot;</span></span><br><span class="line">    stage(<span class="string">&#x27;gradle build&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isUnix()) &#123;</span><br><span class="line">            sh <span class="string">&#x27;gradle clean :eurekaserver:build&#x27;</span> <span class="comment">//使用jenkns安装的gradle工具(4.8)</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bat <span class="string">&#x27;gradle clean :eurekaserver:build&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;docker build image&#x27;</span>)&#123;</span><br><span class="line">        dir(<span class="string">&#x27;eurekaserver&#x27;</span>)&#123;  <span class="comment">//dockerfile的跟目录</span></span><br><span class="line">            docker.build(<span class="string">&quot;springcould/eurekaserver:$&#123;env.BUILD_NUMBER&#125;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;docker run Application&#x27;</span>)&#123;</span><br><span class="line">        sh <span class="string">&quot;docker run -p 8091:8091 springcould/eurekaserver:$&#123;env.BUILD_NUMBER&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="pipeline-环境变量选择设置"><a href="#pipeline-环境变量选择设置" class="headerlink" title="pipeline 环境变量选择设置"></a>pipeline 环境变量选择设置</h4><h6 id="严重注意-这个需要第二次运行才会生效，第一次设置之后运行，不会出来，第二次拉去运行才会出来"><a href="#严重注意-这个需要第二次运行才会生效，第一次设置之后运行，不会出来，第二次拉去运行才会出来" class="headerlink" title="**严重注意**这个需要第二次运行才会生效，第一次设置之后运行，不会出来，第二次拉去运行才会出来"></a><code>**严重注意**</code>这个需要第二次运行才会生效，第一次设置之后运行，不会出来，第二次拉去运行才会出来</h6><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env groovy Jenkinsfile</span></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    parameters &#123;</span><br><span class="line">        choice(<span class="attr">name:</span> <span class="string">&#x27;door_choice&#x27;</span>,</span><br><span class="line">                <span class="symbol">choices:</span> <span class="string">&#x27;one\ntwo\nthree\nfour&#x27;</span>,</span><br><span class="line">                <span class="symbol">description:</span> <span class="string">&#x27;What door do you choose?&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;build&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&quot;$&#123;params.door_choice&#125;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="pipeline-agent版gradle脚本"><a href="#pipeline-agent版gradle脚本" class="headerlink" title="pipeline agent版gradle脚本"></a>pipeline agent版gradle脚本</h4><p>not support <code>tool &quot;gradle4.8&quot;</code>单个设置</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env groovy Jenkinsfile</span></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    parameters &#123;</span><br><span class="line">        choice(<span class="attr">name:</span> <span class="string">&#x27;door_choice&#x27;</span>,</span><br><span class="line">                <span class="symbol">choices:</span> <span class="string">&#x27;one\ntwo\nthree\nfour&#x27;</span>,</span><br><span class="line">                <span class="symbol">description:</span> <span class="string">&#x27;What door do you choose?&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;build&#x27;</span>) &#123;</span><br><span class="line">            tools&#123;</span><br><span class="line">                gradle <span class="string">&quot;gradle4.8&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&quot;$&#123;params.door_choice&#125;&quot;</span></span><br><span class="line">                sh <span class="string">&#x27;gradle -v&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="申明式使用脚本式语言script"><a href="#申明式使用脚本式语言script" class="headerlink" title="申明式使用脚本式语言script"></a>申明式使用脚本式语言<code>script</code></h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env groovy Jenkinsfile</span></span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    parameters &#123;</span><br><span class="line">        choice(<span class="attr">name:</span> <span class="string">&#x27;project_choice&#x27;</span>,</span><br><span class="line">                <span class="symbol">choices:</span> <span class="string">&#x27;eurekaserver\neurekaclient\neurekafeign\neurekazuul&#x27;</span>,</span><br><span class="line">                <span class="symbol">description:</span> <span class="string">&#x27;你要编译构建那个项目?&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;docker build&#x27;</span>)&#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">               dir(<span class="string">&quot;$&#123;params.project_choice&#125;&quot;</span>)&#123;</span><br><span class="line">                   sh <span class="string">&quot;pwd&quot;</span></span><br><span class="line">                   script &#123;  <span class="comment">//需要用script包裹，就能使用脚本式语言</span></span><br><span class="line">                       docker.build(<span class="string">&quot;my-image:$&#123;env.BUILD_ID&#125;&quot;</span>)</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>env.BUILD_ID 当前的编译id，和Jenkins versions 1.597+ 的env.BUILD_NUMBER一样</p>
<p>env.JOB_NAME 当前项目名</p>
<p>env.JENKINS_URL only available if Jenkins URL set in “System Configuration”</p>
<p><code> git diff HEAD^ eurekaserver/</code> 和上个版本比较eurekaserver目录，可以不要</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/arun-gupta/docker-jenkins-pipeline">https://github.com/arun-gupta/docker-jenkins-pipeline</a></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>Tools-k2-breed</title>
    <url>/2018/03/22/tools-k2-breed/</url>
    <content><![CDATA[<h4 id="斐讯K2-22-4-6-3-非telnet-页面直刷-Breed-详细方法（图文）"><a href="#斐讯K2-22-4-6-3-非telnet-页面直刷-Breed-详细方法（图文）" class="headerlink" title="斐讯K2 22.4.6.3 非telnet 页面直刷 Breed 详细方法（图文）"></a><a href="http://www.right.com.cn/forum/forum.php?mod=viewthread&tid=204435&highlight=k2%252B22.4.6.3">斐讯K2 22.4.6.3 非telnet 页面直刷 Breed 详细方法（图文）</a></h4><ol>
<li><p>用网线连接电脑和路由器的lan口</p>
</li>
<li><p>保持路由器与internet的连通(桥接，有线都可以)</p>
</li>
<li><p>进入k2管理页面（p.to）</p>
</li>
<li><p>进入网页调试模式(chrome按F12)，找到定时重启下拉05分的标签</p>
</li>
<li><p>在05的标签右键编辑</p>
</li>
<li><p>将“05”修改成为“05 | wget <a href="http://breed.hackpascal.net/breed-mt7620-phicomm-psg1208.bin%E2%80%9D%E4%B9%8B%E5%90%8E%EF%BC%8C%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%8A%A8%E5%88%B0%E9%BB%91%E6%A1%86%E5%A4%96%E7%9A%84%E7%A9%BA%E7%99%BD%E5%A4%84%E7%82%B9%E5%87%BB%E9%BC%A0%E6%A0%87%E5%B7%A6%E9%94%AE%EF%BC%8C%E7%BB%93%E6%9D%9F%E7%BC%96%E8%BE%91%E3%80%82">http://breed.hackpascal.net/breed-mt7620-phicomm-psg1208.bin”之后，鼠标移动到黑框外的空白处点击鼠标左键，结束编辑。</a></p>
</li>
<li><p>回到页面重新选择05，05后面多了刚刚加的，然后保存。</p>
</li>
<li><p>继续将“05”修改成“05 | mtd unlock Bootloader”，然后回到页面选择05保存。</p>
</li>
<li><p>继续将“05”修改成“05 | mtd -r write breed-mt7620-phicomm-psg1208.bin Bootloader”，然后回到页面选择05保存，等待重启，如果未重启代表失败。</p>
</li>
<li><p>拔除K2上Wan口的网线，路由器断电，持续按住路由器上的reset按钮，接通路由器电源，3秒后松开reset按钮。</p>
</li>
<li><p>在浏览器地址栏输入“<a href="http://192.168.1.1”访问breed/">http://192.168.1.1”访问Breed</a> Web。</p>
<h4 id="注意：下次刷机只需进入brend-，步骤为"><a href="#注意：下次刷机只需进入brend-，步骤为" class="headerlink" title="注意：下次刷机只需进入brend ，步骤为"></a>注意：下次刷机只需进入brend ，步骤为</h4><ol>
<li>路由器断电，持续按住路由器上的reset按钮，接通路由器电源，3秒后松开reset按钮。</li>
<li>在浏览器地址栏输入“<a href="http://192.168.1.1”访问breed/">http://192.168.1.1”访问Breed</a> Web。</li>
</ol>
<p>[RT-AC54U-GPIO-1-PSG1218-64M_3.4.3.9-099.trx](F:\xuan install.Back\K2.Back)  访问ip:<a href="http://192.168.123.1/">http://192.168.123.1/</a> 管理账号：admin/admin wifi密码:1234567890</p>
<p>高级设置-外部网络-外网连接类型pppoe拨号，用户名密码输入宽带账号密码，闪讯拨号插件选择重庆，其他默认，然后应用本页设置<br>高级设置-系统管理-ntp服务器 分别填入红岩网校的ntp服务器202.202.43.120 202.202.43.131 手动设置时间 应用本页设置<br>网络地图-点击地球的图标-重新连接 应该可以上网了</p>
<p>参考<a href="http://www.tieba.com/p/5015549863">http://www.tieba.com/p/5015549863</a></p>
</li>
</ol>
<h6 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h6><p><a href="http://www.right.com.cn/forum/thread-208753-1-1.html">斐讯K2 V22.5.9.163官方固件定制版,集成breed,支持官版直刷【V1.4】</a></p>
<p>直接手动升级<code>k2_163_v14_breed.bin</code>然后进入breed</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>k2路有器</tag>
      </tags>
  </entry>
  <entry>
    <title>Tools-Maven-Base</title>
    <url>/2018/06/25/tools-maven-base/</url>
    <content><![CDATA[<h3 id="maven基础"><a href="#maven基础" class="headerlink" title="maven基础"></a>maven基础</h3><p>``clean install -DskipTests=true` 清理打包</p>
<p><code>clean install -DskipTests=true -pl app -am</code> 清理 打包安装 跳过测试 单模块（app）</p>
<p><code>tomcat7:run</code> 用内置tomcat运行jar</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解决maven仓库明明有包，但是idea下载不下来，可以手动执行命令进行下载，执行前先清理本地仓库目录</span></span><br><span class="line">mvn dependency:get -DremoteRepositories=https://repo1.maven.org/maven2 -DgroupId=org.java-websocket -DartifactId=Java-WebSocket -Dversion=1.3.8</span><br></pre></td></tr></table></figure>



<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p><code>clean</code>再运行时清理会报错，所以需要先当掉</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Tools-nexus-maven</title>
    <url>/2018/09/06/tools-nexus-maven/</url>
    <content><![CDATA[<h1 id="maven私库nexus3搭建使用"><a href="#maven私库nexus3搭建使用" class="headerlink" title="maven私库nexus3搭建使用"></a>maven私库nexus3搭建使用</h1><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Maven 测试仓库命令，下载jar包,测试一般会报错，说没有权限</span></span><br><span class="line">mvn dependency:get -DremoteRepositories=http://47.98.114.63:14006/repository/maven-third/ -DgroupId=com.taobao -DartifactId=taobao-sdk-java-auto -Dversion=20190804</span><br></pre></td></tr></table></figure>

<h3 id="sonatype-nexus3安装"><a href="#sonatype-nexus3安装" class="headerlink" title="sonatype/nexus3安装"></a><a href="https://github.com/sonatype/docker-nexus3">sonatype/nexus3</a>安装</h3><ol>
<li><p>创建挂载目录<code>mkdir -p v-nexus/data</code>并修改目录权限<code>chown -R 200 v-nexus/data</code></p>
</li>
<li><p>创建部署脚本</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认用户名admin/admin123</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nexus:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonatype/nexus3</span></span><br><span class="line">    <span class="attr">ports:</span>  <span class="comment">#自定义端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">8081</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">18081</span>   <span class="comment">#只有worker能访问该端口</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span>  <span class="comment">#版本要求3.2</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/dockerdata/v-nexus/data:/nexus-data&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.hostname</span> <span class="string">==</span> <span class="string">lfadmin</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试访问<code>http://192.168.1.213:18081/</code>然后输入admin和admin123进行登陆即可</p>
</li>
</ol>
<h3 id="配置yum代理"><a href="#配置yum代理" class="headerlink" title="配置yum代理"></a>配置yum代理</h3><p>远程原remote url: <a href="http://maven.aliyun.com/nexus/content/groups/public">http://maven.aliyun.com/nexus/content/groups/public</a></p>
<p>新建一个<strong>type:yum(proxy)</strong></p>
<p>在新建一个组<strong>yum(group)</strong>,添加刚刚的代理地址,同理，可以添加elpe,docker等其他仓库代理</p>
<p>复制生成的地址<a href="http://192.168.1.230:18081/repository/yum-public/%E9%85%8D%E7%BD%AE%E5%9C%A8%60nexus.repo%60">http://192.168.1.230:18081/repository/yum-public/配置在`nexus.repo`</a></p>
<p>执行<code>vim /etc/yum.repos.d/nexus.repo</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[nexusrepo]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">Nexus Repository</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">http://192.168.1.230:18081/repository/yum-public/$releasever/os/$basearch/</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">priority</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure>

<p><code>yum clean all</code></p>
<p><code>rm -rf  /etc/yum.repos.d/C*</code></p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>epel源需要单独配置，直接用public不识别</p>
<p>执行<code>vim /etc/yum.repos.d/nexus-epel.repo</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[nexus-epel-debuginfo]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">Extra Packages for Enterprise Linux 7 - $basearch - Debug</span></span><br><span class="line"><span class="attr">baseurl</span> = <span class="string">http://192.168.1.230:18081/repository/yum-epel/7/$basearch/debug</span></span><br><span class="line"><span class="attr">failovermethod</span> = <span class="string">priority</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="string">0</span></span><br><span class="line"><span class="attr">gpgkey</span> = <span class="string">file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span></span><br><span class="line"><span class="attr">gpgcheck</span> = <span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[nexus-epel-source]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">Extra Packages for Enterprise Linux 7 - $basearch - Source</span></span><br><span class="line"><span class="attr">baseurl</span> = <span class="string">http://192.168.1.230:18081/repository/yum-epel/7/SRPMS</span></span><br><span class="line"><span class="attr">failovermethod</span> = <span class="string">priority</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="string">0</span></span><br><span class="line"><span class="attr">gpgkey</span> = <span class="string">file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span></span><br><span class="line"><span class="attr">gpgcheck</span> = <span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[nexus-epel]</span></span><br><span class="line"><span class="attr">baseurl</span> = <span class="string">http://192.168.1.230:18081/repository/yum-epel/7/$basearch</span></span><br><span class="line"><span class="attr">failovermethod</span> = <span class="string">priority</span></span><br><span class="line"><span class="attr">gpgcheck</span> = <span class="string">0</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">EPEL YUM repo</span></span><br></pre></td></tr></table></figure>



<h3 id="win10下maven安装"><a href="#win10下maven安装" class="headerlink" title="win10下maven安装"></a>win10下<a href="https://maven.apache.org/download.cgi">maven安装</a></h3><ol>
<li><p>下载<a href="http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.zip">apache-maven-3.5.4-bin.zip</a>然后解压</p>
</li>
<li><p>添加环境变量,新建系统环境变量<code>Maven_HOME</code>值为解压路径，编辑<code>path</code>环境变量添加<code>%Maven_HOME%\bin</code></p>
</li>
<li><p>命令窗口测试<code>mvn -v</code>，只支持cmd</p>
</li>
<li><p>修改<code>apache-maven-3.5.4\conf\settings.xml</code>文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--jar本地缓存地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\MavenRepository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>完整的<code>setting.xml</code>设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--  jar本地缓存地址 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\MavenRepository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!--配置权限,使用默认用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">	  <span class="comment">&lt;!--这里的id要和项目里的pom.xml的id一致--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>MyNexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!-- 私有库地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>&gt;Nexus3 Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		   <span class="comment">&lt;!-- 注意修改成对应的IP,在nexus里面复制public里面的地址 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.213:18081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">		  <span class="tag">&lt;<span class="name">releases</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line">          <span class="comment">&lt;!-- snapshots默认是关闭的，需要手动开启 --&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">        <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">	          <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--插件库地址--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.213:18081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--激活profile--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>MyNexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目的pom.xml修改或添加如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="comment">&lt;!-- 配置maven地址 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--这里的id要和maven里的的settings.xml的id一致--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.213:18081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.213:18081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编译在cmd执行<code>mvn install</code>发布上传jar执行<code>mvn deploy</code>，可以到nexus地址进行检查</p>
</li>
<li><p>使用私库下载和上传是一样的</p>
</li>
</ol>
<h3 id="nexus3-配置阿里云代理仓库"><a href="#nexus3-配置阿里云代理仓库" class="headerlink" title="nexus3 配置阿里云代理仓库"></a>nexus3 配置阿里云代理仓库</h3><ol>
<li>点击<code>Create Repository-&gt;maven2(proxy)</code></li>
<li>添加名字<code>aliyun-proxy</code>设置阿里云url地址<code>http://maven.aliyun.com/nexus/content/groups/public</code></li>
<li>设置阿里云优先级，在<code>maven-public</code>里面的group把刚刚创建的添加过去并移到maven-central上面</li>
<li>设置允许发布release,在<code>maven-release</code>的hosted里面选择<code>allow redeploy</code></li>
</ol>
<h3 id="创建第三方仓库"><a href="#创建第三方仓库" class="headerlink" title="创建第三方仓库"></a>创建第三方仓库</h3><ol>
<li><p><code>create repository-&gt;maven2(hosted)</code></p>
<p><code>name:3rd_part</code></p>
<p><code>hosted:Allow redeploy</code></p>
</li>
<li><p>添加<code>srd_part</code>到<code>maven_public</code></p>
</li>
<li><p>如果没有<code>groupId</code>最好统一为<code>com.3rdPart</code>标注为第三方包</p>
</li>
</ol>
<h3 id="发布上传jar包到nexus"><a href="#发布上传jar包到nexus" class="headerlink" title="发布上传jar包到nexus"></a>发布上传jar包到nexus</h3><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn deploy:deploy-file \ </span><br><span class="line">  -DgroupId=&lt;group-id&gt; \</span><br><span class="line">  -DartifactId=&lt;artifact-id&gt; \</span><br><span class="line">  -Dversion=&lt;version&gt; \</span><br><span class="line">  -Dpackaging=&lt;type-of-packaging&gt; \</span><br><span class="line">  -Dfile=&lt;path-to-file&gt; \</span><br><span class="line">  -DrepositoryId=&lt;这里的id要和maven里的的settings.xml的id一致&gt; \</span><br><span class="line">  -Durl=&lt;url-of-the-repository-to-deploy&gt;</span><br></pre></td></tr></table></figure>

<p>实战</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn deploy:deploy-file \</span><br><span class="line">-Dfile&#x3D;spring-boot-starter-druid-0.0.1-SNAPSHOT.jar \</span><br><span class="line">-DgroupId&#x3D;cn.binux \</span><br><span class="line">-DartifactId&#x3D;spring-boot-starter-druid \ </span><br><span class="line">-Dversion&#x3D;0.0.1-SNAPSHOT \ </span><br><span class="line">-Dpackaging&#x3D;jar \ </span><br><span class="line">-DpomFile&#x3D;spring-boot-starter-druid-0.0.1-SNAPSHOT.pom \</span><br><span class="line">-DrepositoryId&#x3D;nexus-snapshots \</span><br><span class="line">-Durl&#x3D;http:&#x2F;&#x2F;192.168.1.213:18081&#x2F;repository&#x2F;maven-snapshots&#x2F;</span><br></pre></td></tr></table></figure>

<p>上传jar包到私有maven仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn deploy:deploy-file -Dfile=spring-boot-starter-druid-0.0.1-SNAPSHOT.jar -DgroupId=cn.binux -DartifactId=spring-boot-starter-druid -Dversion=0.0.1-SNAPSHOT -Dpackaging=jar -DpomFile=spring-boot-starter-druid-0.0.1-SNAPSHOT.pom -DrepositoryId=nexus-snapshots -Durl=http://192.168.1.213:18081/repository/maven-snapshots/</span><br><span class="line"></span><br><span class="line">mvn deploy:deploy-file -Dfile=spring-boot-starter-dubbox-0.0.1-SNAPSHOT.jar -DgroupId=cn.binux -DartifactId=spring-boot-starter-dubbox -Dversion=0.0.1-SNAPSHOT -Dpackaging=jar -DpomFile=spring-boot-starter-dubbox-0.0.1-SNAPSHOT.pom -DrepositoryId=nexus-snapshots -Durl=http://192.168.1.213:18081/repository/maven-snapshots/</span><br><span class="line"></span><br><span class="line">mvn deploy:deploy-file -Dfile=spring-boot-starter-redis-0.0.1-SNAPSHOT.jar -DgroupId=cn.binux -DartifactId=spring-boot-starter-redis -Dversion=0.0.1-SNAPSHOT -Dpackaging=jar -DpomFile=spring-boot-starter-redis-0.0.1-SNAPSHOT.pom -DrepositoryId=nexus-snapshots -Durl=http://192.168.1.213:18081/repository/maven-snapshots/</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个不是snapshots要发布到releases，注意设置nexus为允许发布，看jar报后缀，没有`SNAPSHOT`就是release</span></span><br><span class="line">mvn deploy:deploy-file -Dfile=dubbo-2.8.4.jar -DgroupId=com.alibaba -DartifactId=dubbo -Dversion=2.8.4 -Dpackaging=jar -DrepositoryId=nexus-releases -Durl=http://192.168.1.213:18081/repository/maven-releases/</span><br><span class="line"></span><br><span class="line">mvn deploy:deploy-file -Dfile=fastdfs-1.24.jar -DgroupId=org.csource -DartifactId=fastdfs -Dversion=1.24 -Dpackaging=jar -DrepositoryId=nexus-releases -Durl=http://192.168.1.213:18081/repository/maven-releases/</span><br><span class="line"></span><br><span class="line">mvn deploy:deploy-file -Dfile=examples-1.0.jar -DgroupId=com.haikang -DartifactId=examples -Dversion=1.0 -Dpackaging=jar -DrepositoryId=nexus-releases -Durl=http://192.168.1.230:18081/repository/maven-releases/</span><br></pre></td></tr></table></figure>

<p>本地安装jar包到本地maven仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=spring-boot-starter-druid-0.0.1-SNAPSHOT.jar -DgroupId=cn.binux -DartifactId=spring-boot-starter-druid -Dversion=0.0.1-SNAPSHOT -Dpackaging=jar</span><br><span class="line">mvn install:install-file -Dfile=spring-boot-starter-dubbox-0.0.1-SNAPSHOT.jar -DgroupId=cn.binux -DartifactId=spring-boot-starter-dubbox -Dversion=0.0.1-SNAPSHOT -Dpackaging=jar</span><br><span class="line">mvn install:install-file -Dfile=spring-boot-starter-redis-0.0.1-SNAPSHOT.jar -DgroupId=cn.binux -DartifactId=spring-boot-starter-redis -Dversion=0.0.1-SNAPSHOT -Dpackaging=jar</span><br><span class="line">mvn install:install-file -Dfile=dubbo-2.8.4.jar -DgroupId=com.alibaba -DartifactId=dubbo -Dversion=2.8.4 -Dpackaging=jar</span><br><span class="line">mvn install:install-file -Dfile=fastdfs-1.24.jar -DgroupId=org.csource -DartifactId=fastdfs -Dversion=1.24 -Dpackaging=jar</span><br></pre></td></tr></table></figure>

<h3 id="配置用户和角色"><a href="#配置用户和角色" class="headerlink" title="配置用户和角色"></a>配置用户和角色</h3><ol>
<li><p>创建roles:</p>
<p>id: <code>nx-deploy</code></p>
<p>prlvlleges: <code>nx-repository-view-*-*-*</code></p>
</li>
<li><p>创建用户：</p>
<p>ID: <a href="develop163">develop</a></p>
<p>roles: <code>nx-deploy</code></p>
</li>
</ol>
<h3 id="maven-项目内局部配置私库地址"><a href="#maven-项目内局部配置私库地址" class="headerlink" title="maven 项目内局部配置私库地址"></a>maven 项目内局部配置私库地址</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">## pom.xml里面设置    </span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-third<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-third<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://47.98.114.63:14006/repository/maven-third/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li>下载了找不到包，解决，删除项目重新导入，重新maven依赖</li>
<li>刚上传或添加了新的jar到私库，无法下载，解决，删除本地仓库的该包目录</li>
<li>注意powershell执行命令时需要在等号后面加双引号，不然改用cmd</li>
</ol>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>nexus3</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx常用配置总结</title>
    <url>/2019/01/29/tools-nginx-summary/</url>
    <content><![CDATA[<h2 id="多二级-三级域名多服务nginx配置"><a href="#多二级-三级域名多服务nginx配置" class="headerlink" title="多二级/三级域名多服务nginx配置"></a>多二级/三级域名多服务nginx配置</h2><p>常用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s stop</span><br><span class="line"><span class="comment">#检查脚本</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -t</span><br><span class="line"><span class="comment">#重新加载配置</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>

<p><code>nginx.conf</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定nginx 用户 组</span></span><br><span class="line"><span class="comment">#user sure sure;</span></span><br><span class="line"><span class="comment">#内容存进程的id，作用防止多个进程启动</span></span><br><span class="line"><span class="attribute">pid</span>    /usr/local/nginx/conf/nginx.pid;</span><br><span class="line"><span class="comment">#错误日志（从左到右：debug最详细 crit最少）</span></span><br><span class="line"><span class="comment">#[ debug | info | notice | warn | error | crit ] </span></span><br><span class="line"><span class="attribute">error_log</span>  /usr/local/nginx/logs/error.log <span class="literal">crit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动进程,通常设置成和cpu的数量相等，或者设置auto</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">24</span>;</span><br><span class="line"><span class="comment">#在linux 2.6内核下开启文件打开数为65535</span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="comment">#Epoll: 使用于Linux内核2.6版本及以后的系统</span></span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">    <span class="comment">#所以nginx支持的总连接数就等于worker_processes * worker_connections</span></span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">65535</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment">#文件扩展名与类型对应关系</span></span><br><span class="line">    <span class="attribute">include</span> mime.types;</span><br><span class="line">    <span class="comment">#没有找到对应类型使用application/octet-stream</span></span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#访问日志关</span></span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="comment"># 隐藏nginx版本，防止通过版本漏洞攻击</span></span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">server_names_hash_bucket_size</span> <span class="number">128</span>;</span><br><span class="line">    <span class="attribute">client_header_buffer_size</span> <span class="number">32k</span>;</span><br><span class="line">    <span class="attribute">large_client_header_buffers</span> <span class="number">4</span> <span class="number">32k</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#连接超时时间</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">120</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line">    <span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16k</span>;</span><br><span class="line">    <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain application/x-javascript text/css application/xml;</span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#解决iframe跨域问题</span></span><br><span class="line">    <span class="attribute">add_header</span> P3P <span class="string">&quot;CP=CAO PSA OUR&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#解决页面部分缓存问题</span></span><br><span class="line">    <span class="attribute">ssi</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssi_silent_errors</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssi_types</span> text/shtml;</span><br><span class="line">    <span class="attribute">ssi_types</span> text/action;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span> main <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;</span>;</span><br><span class="line">    <span class="attribute">log_format</span> mlnormal <span class="string">&#x27;$remote_addr|$remote_user|[$time_local]|$host|&quot;$request&quot;|&#x27;</span></span><br><span class="line">                        <span class="string">&#x27;$status|$body_bytes_sent|&quot;$http_referer&quot;|&#x27;</span></span><br><span class="line">                        <span class="string">&#x27;&quot;$http_user_agent&quot;|$http_x_forwarded_for|&#x27;</span></span><br><span class="line">                        <span class="string">&#x27;$upstream_addr|$upstream_status|$upstream_response_time|&#x27;</span></span><br><span class="line">                        <span class="string">&#x27;$server_addr&#x27;</span>;</span><br><span class="line">    <span class="attribute">include</span> vhost/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>子配置目录<code>vhost/*.conf</code>,支持多个域名对应服务的配置文件，一个服务对应一个二级域名文件</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#均衡代理，以及模式设置</span></span><br><span class="line"><span class="attribute">upstream</span> webcs &#123;</span><br><span class="line">    <span class="comment"># 过源IP进行HASH的机制。可以解决session问题</span></span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="comment">#tomcat服务的访问地址</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">134.175.14.8:8042</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">134.175.151.120:8043</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="comment">#listen 443 ssl;</span></span><br><span class="line">    <span class="comment">#域名访问地址</span></span><br><span class="line">    <span class="comment"># 多个域名 server_name ... iexxk.com www.iexxk.com;</span></span><br><span class="line">    <span class="attribute">server_name</span>    outtest.iexxk.com;</span><br><span class="line">    <span class="attribute">index</span>  index.htm index.html index.jsp;</span><br><span class="line">    <span class="comment">#tomcat webapp目录，或这dobase目录</span></span><br><span class="line">    <span class="attribute">root</span>   /data/web/webcs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#ssl_certificate /data/ssl/shenqi.cer;</span></span><br><span class="line">    <span class="comment">#ssl_certificate_key /data/ssl/shenqi.key;</span></span><br><span class="line">    <span class="comment">#ssl_session_timeout 5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /usr/local/nginx_logs/login.access.log mlnormal;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ ^/WEB-INF/*</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ .(svn|git|cvs)</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> ~.*\.(jsp|do|shtml)?$ &#123;</span><br><span class="line">        <span class="comment">#proxy_pass配置为：http:// + upstream策略名称</span></span><br><span class="line">        <span class="attribute">proxy_pass</span>        http://webcs;</span><br><span class="line">        <span class="attribute">proxy_next_upstream</span> http_500 http_502 http_503 http_504 <span class="literal">error</span> timeout invalid_header;</span><br><span class="line">        <span class="attribute">proxy_redirect</span>    <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>  Host $host;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>  X-Real-IP  $remote_addr;</span><br><span class="line">        <span class="comment">#include /usr/local/nginx/conf/proxy.conf;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|jpeg|png|bmp|swf|js|css)$</span> &#123;</span><br><span class="line">        <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置ssl-https"><a href="#配置ssl-https" class="headerlink" title="配置ssl/https"></a>配置ssl/https</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> res &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.16.8:14081</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.16.8:14081</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>    outtest.res.suresvip.com;</span><br><span class="line"></span><br><span class="line"><span class="comment">#证书相关配置</span></span><br><span class="line">    <span class="attribute">ssl</span>  <span class="literal">on</span>;  <span class="comment">#注意这个用on其他所有改nginx配置的网站都会重定向到https,所以改用off不会影响其他的，但是不会自动重定向</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /usr/local/nginx/ssl/1_outtest.res.suresvip.com_bundle.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /usr/local/nginx/ssl/2_outtest.res.suresvip.com.key;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; <span class="comment">#按照这个协议配置</span></span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#注释下面的不然使用https访问会下载文件</span></span><br><span class="line"><span class="comment">#    index  index.htm index.html index.jsp;</span></span><br><span class="line"><span class="comment">#    root   /data/web/res1;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /usr/local/nginx_logs/login.access.log mlnormal;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ ^/WEB-INF/*</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ .(svn|git|cvs)</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> ~.* &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>        http://res;</span><br><span class="line">        <span class="attribute">proxy_next_upstream</span> http_500 http_502 http_503 http_504 <span class="literal">error</span> timeout invalid_header;</span><br><span class="line">        <span class="attribute">proxy_redirect</span>    <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>  Host $host;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>  X-Real-IP  $remote_addr;</span><br><span class="line">        <span class="comment">#include /usr/local/nginx/conf/proxy.conf;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|jpeg|png|bmp|swf|js|css)$</span> &#123;</span><br><span class="line">        <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="本地https配置"><a href="#本地https配置" class="headerlink" title="本地https配置"></a>本地https配置</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"> <span class="section">server</span> &#123;</span><br><span class="line"> <span class="attribute">listen</span>       <span class="number">9600</span> ssl;</span><br><span class="line"> <span class="attribute">server_name</span>  localhost;</span><br><span class="line">  <span class="attribute">ssl_certificate</span>  server.crt;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span> server.key;</span><br><span class="line">  <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">   <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>   http://bpf_pf_access;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="tomcat测试https"><a href="#tomcat测试https" class="headerlink" title="tomcat测试https"></a>tomcat测试https</h3><p>settings-&gt;Automatically follow redirects-&gt;Default: Settings-&gt;general-&gt;ssl certificate verification(off)-&gt;certificates-&gt;client certificates(添加证书文件即可)</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEE之Oracle搭建</title>
    <url>/2017/07/17/tools-oracle-install-and-user/</url>
    <content><![CDATA[<h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><ol>
<li>下载<a href="http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html">Oracle</a> 12c(Enterprise),总共两个文件（File1，File2），可右键复制链接迅雷下载</li>
</ol>
<ol start="2">
<li><p>两个文件都解压</p>
</li>
<li><p>双击<code>setup.exe</code>运行</p>
<p>注：解决<code>[INS-30131]</code>错误：计算机管理添加C盘共享，权限设置为管理员完全权限，其他用户可读。</p>
</li>
<li><p>安装选项</p>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  创建配置数据库</p>
</li>
<li><p><input checked="" disabled="" type="checkbox">  桌面类</p>
</li>
<li><p><input checked="" disabled="" type="checkbox">  创建新windos用户(root,xuanxuan)</p>
</li>
<li><p><input checked="" disabled="" type="checkbox">  输入口令(数据库名orcl.lan;口令Mimais163)</p>
</li>
<li><p><input checked="" disabled="" type="checkbox">  弹窗口令管理修改 sys(mimais163R)system(mimais163A)</p>
</li>
</ul>
</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h4><p><a href="http://www.jianshu.com/p/9d9f978630be">Oracle Database 12c安装教程(Windows版)</a></p>
<p><a href="http://blog.csdn.net/anxpp/article/details/51345074">Oracle 12c Windows安装、介绍及简单使用(图文)</a></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下安装与使用proxychains4</title>
    <url>/2017/12/06/tools-proxychains4-install-and-use%20/</url>
    <content><![CDATA[<h3 id="proxychains4介绍"><a href="#proxychains4介绍" class="headerlink" title="proxychains4介绍"></a>proxychains4介绍</h3><p><a href="https://github.com/rofl0r/proxychains-ng/releases">proxychains4</a>是一款linux代理设置软件，在需要代理的命令前加proxychains4就可了。</p>
<h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a><a href="https://www.dropbox.com/install-linux">Linux安装</a></h3><h5 id="对应的图文百度经验教程"><a href="#对应的图文百度经验教程" class="headerlink" title="对应的图文百度经验教程"></a>对应的图文百度经验教程</h5><p><a href="https://jingyan.baidu.com/article/148a1921f5c5fe4d71c3b105.html">centos7 安装使用proxychains4</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc automake autoconf libtool make #安装make编译工具</span><br><span class="line">git clone https://github.com/rofl0r/proxychains-ng.git #下载，需要先安装git</span><br><span class="line">cd proxychains-ng </span><br><span class="line">./configure #配置</span><br><span class="line">sudo make &amp;&amp; sudo make install #编译安装</span><br><span class="line">sudo cp ./src/proxychains.conf /etc/proxychains.conf #提取配置文件</span><br><span class="line">cd .. &amp;&amp; rm -rf proxychains-ng #删除安装文件</span><br><span class="line">sudo vim /etc/proxychains.conf #编辑配置文件（修改最后一行为 socks5 127.0.0.1 1080）这个对应你的代理地址</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">proxychains4 wget www.google.com <span class="comment">#如果没提示错误，然后当前目录会多一个index.html</span></span><br><span class="line">rm index.html <span class="comment">#清除测试垃圾</span></span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains4 &lt;命令&gt;</span><br><span class="line">#eg</span><br><span class="line">proxychains4 bash #该终端的命令自动代理 ，退出exit</span><br><span class="line">proxychains4 firefox #火狐浏览器代理模式</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>proxychains4</tag>
      </tags>
  </entry>
  <entry>
    <title>Tools-Python3</title>
    <url>/2018/07/14/tools-python3/</url>
    <content><![CDATA[<h3 id="安装环境准备"><a href="#安装环境准备" class="headerlink" title="安装环境准备"></a>安装环境准备</h3><p>直接使用win10的wsl沙盒Ubuntu系统，自带python3.5</p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install python3-pip</span><br><span class="line">pip3 install rsa</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><code>IndentationError: unexpected indent</code> 检查缩进是否一致，空格和Tab符号注意区分</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="通过cookie爬百度数据"><a href="#通过cookie爬百度数据" class="headerlink" title="通过cookie爬百度数据"></a>通过cookie爬百度数据</h3><ol>
<li><p>登陆百度，通过浏览器设置-内容管理-cookie，找到百度的BDUSS的内容复制</p>
<p><a href="https://imgtu.com/i/62oGQA"><img src="https://s3.ax1x.com/2021/03/18/62oGQA.gif" alt="62oGQA.gif"></a></p>
</li>
<li><p>编写脚本<code>login.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#需要爬数据的url</span></span><br><span class="line">url = <span class="string">&#x27;http://i.baidu.com/&#x27;</span></span><br><span class="line"><span class="comment">#浏览器访问网站的cookie信息</span></span><br><span class="line">cookie = &#123;<span class="string">&quot;BDUSS&quot;</span>:<span class="string">&quot;----------------------------------------------------AAAAAAAAAAA----------------AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA--&quot;</span>&#125;</span><br><span class="line"><span class="comment">#requests请求，获取登录网站页面的内容</span></span><br><span class="line">html = requests.get(url,cookies=cookie).content</span><br><span class="line"><span class="comment">#print(html)</span></span><br><span class="line"><span class="comment">#把内容保存为文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;baidu.html&quot;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	f.write(html)</span><br><span class="line">	f.close()</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Ubuntu bash执行<code>python3 login.py</code>，会生成一个文件<code>baidu.html</code>在当前目录,打开如果能看到个人信息就证明获取成功</p>
</li>
</ol>
<h3 id="爬百度翻页数据"><a href="#爬百度翻页数据" class="headerlink" title="爬百度翻页数据"></a>爬百度翻页数据</h3><p>上面已经登陆成功了，下面直接用cookie进行爬数据会被重定向，还需要添加请求头，以及翻页参数</p>
<p><a href="https://imgtu.com/i/62o9aT"><img src="https://s3.ax1x.com/2021/03/18/62o9aT.gif" alt="62o9aT.gif"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#需要爬数据的url</span></span><br><span class="line">url = <span class="string">&#x27;https://jingyan.baidu.com/user/nucpage/content&#x27;</span></span><br><span class="line"><span class="comment">#浏览器访问网站的cookie信息</span></span><br><span class="line">cookie = &#123;<span class="string">&quot;BDUSS&quot;</span>:<span class="string">&quot;-----QAAAAAAAAAAAEAAA--1QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA---&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#提供你所使用的浏览器类型、操作系统及版本、CPU 类型、浏览器渲染引擎、浏览器语言、浏览器插件等信息的标识</span></span><br><span class="line">user_agent=<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&quot;</span></span><br><span class="line"><span class="comment"># 从那个连接来的</span></span><br><span class="line">referer=<span class="string">&quot;https://jingyan.baidu.com/user/nucpage/content&quot;</span></span><br><span class="line"><span class="comment"># 设置请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: user_agent,</span><br><span class="line"><span class="string">&quot;Referer&quot;</span>: referer</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># url参数</span></span><br><span class="line"><span class="comment"># https://jingyan.baidu.com/user/nucpage/content?tab=exp&amp;expType=published&amp;pn=20</span></span><br><span class="line">params = &#123;</span><br><span class="line"><span class="string">&#x27;tab&#x27;</span>: <span class="string">&#x27;exp&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;expType&#x27;</span>: <span class="string">&#x27;published&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pn&#x27;</span>: <span class="string">&#x27;30&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#requests请求，获取登录网站页面的内容</span></span><br><span class="line">html = requests.get(url,cookies=cookie,headers=headers).content</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(html)</span></span><br><span class="line"><span class="comment">#把内容保存为文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;baidu.html&quot;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	f.write(html)</span><br><span class="line">	f.close()</span><br></pre></td></tr></table></figure>



<h3 id="最终版爬百度经验的个人经验数据"><a href="#最终版爬百度经验的个人经验数据" class="headerlink" title="最终版爬百度经验的个人经验数据"></a>最终版爬百度经验的个人经验数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#正则</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#需要爬数据的url</span></span><br><span class="line">url = <span class="string">&#x27;https://jingyan.baidu.com/user/nucpage/content&#x27;</span></span><br><span class="line"><span class="comment">#浏览器访问网站的cookie信息</span></span><br><span class="line">cookie = &#123;<span class="string">&quot;BDUSS&quot;</span>:<span class="string">&quot;--AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#提供你所使用的浏览器类型、操作系统及版本、CPU 类型、浏览器渲染引擎、浏览器语言、浏览器插件等信息的标识</span></span><br><span class="line">user_agent=<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&quot;</span></span><br><span class="line"><span class="comment"># 从那个连接来的</span></span><br><span class="line">referer=<span class="string">&quot;https://jingyan.baidu.com/user/nucpage/content&quot;</span></span><br><span class="line"><span class="comment"># 设置请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>: user_agent,</span><br><span class="line"><span class="string">&quot;Referer&quot;</span>: referer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#requests请求,获取发布数量</span></span><br><span class="line">published = requests.get(url,cookies=cookie,headers=headers).content</span><br><span class="line"><span class="comment">#&lt;li&gt;&lt;a class=&quot;on&quot; href=&quot;/user/nucpage/content&quot;&gt;已发布 (505)&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line">reg=<span class="string">r&#x27;&lt;li&gt;&lt;a class=&quot;on&quot; href=&quot;/user/nucpage/content&quot;&gt;已发布 \((.*?)\)&lt;/a&gt;&lt;/li&gt;&#x27;</span></span><br><span class="line">publishedNum=re.search(reg,published.decode(),re.I|re.M|re.S).group(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#group(0) 匹配的串，group(1) 匹配的串中第一个括号</span></span><br><span class="line">print(publishedNum)</span><br><span class="line"><span class="comment">#算页数,实际篇数-1</span></span><br><span class="line">pages=<span class="built_in">int</span>((<span class="built_in">int</span>(publishedNum)-<span class="number">1</span>)/<span class="number">20</span>)+<span class="number">1</span></span><br><span class="line">print(pages)</span><br><span class="line"><span class="comment">#把内容保存为文件,&#x27;w&#x27;是写，&#x27;wb&#x27;是写入byte</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;jingyan.md&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	<span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,pages):</span><br><span class="line">		pn=page*<span class="number">20</span></span><br><span class="line">		print(pn)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># url参数</span></span><br><span class="line">		<span class="comment"># https://jingyan.baidu.com/user/nucpage/content?tab=exp&amp;expType=published&amp;pn=20</span></span><br><span class="line">		params = &#123;</span><br><span class="line">		<span class="string">&#x27;tab&#x27;</span>: <span class="string">&#x27;exp&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;expType&#x27;</span>: <span class="string">&#x27;published&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;pn&#x27;</span>: pn</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">#requests请求，获取登录网站页面的内容</span></span><br><span class="line">		html = requests.get(url,cookies=cookie,headers=headers,params=params).content</span><br><span class="line"></span><br><span class="line">		<span class="comment">#过滤</span></span><br><span class="line">		reg=<span class="string">r&#x27;&lt;a class=&quot;f14&quot; target=&quot;_blank&quot; title=(.*?)&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">#re.I 使匹配对大小写不敏感 </span></span><br><span class="line">		<span class="comment">#re.M 多行匹配，影响 ^ 和 $ </span></span><br><span class="line">		<span class="comment">#re.S 使 . 匹配包括换行在内的所有字符 </span></span><br><span class="line">		<span class="comment">#这个是查找此字符串中所有符合条件的内容并返回一个列表</span></span><br><span class="line">		<span class="built_in">list</span>=re.findall(reg,html.decode(),re.I|re.M|re.S)</span><br><span class="line">		<span class="comment">#写入文件并替换为markdown格式</span></span><br><span class="line">		<span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">			item=item.replace(<span class="string">&#x27;&quot; href=&quot;&#x27;</span>,<span class="string">&#x27;](https://jingyan.baidu.com&#x27;</span>)</span><br><span class="line">			item=item.replace(<span class="string">&#x27;.html&quot;&#x27;</span>,<span class="string">&#x27;.html)&#x27;</span>)</span><br><span class="line">			item=item.replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">			f.write(<span class="string">&quot;%s\n&quot;</span> % item)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>







<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://blog.csdn.net/u013632854/article/details/69662308">Python：网页的抓取、过滤和保存</a></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL安装gcc</title>
    <url>/2017/07/18/wsl-install-gcc/</url>
    <content><![CDATA[<ul>
<li>ubuntu16.04(bash on window)</li>
<li>gcc</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; \</span><br><span class="line">sudo apt-get install build-essential software-properties-common -y &amp;&amp; \</span><br><span class="line">sudo add-apt-repository ppa:ubuntu-toolchain-r&#x2F;test -y &amp;&amp; \</span><br><span class="line">sudo apt-get update &amp;&amp; \</span><br><span class="line">sudo apt-get install gcc-snapshot -y &amp;&amp; \</span><br><span class="line">sudo apt-get update &amp;&amp; \</span><br><span class="line">sudo apt-get install gcc-6 g++-6 -y &amp;&amp; \</span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;gcc gcc &#x2F;usr&#x2F;bin&#x2F;gcc-6 60 --slave &#x2F;usr&#x2F;bin&#x2F;g++ g++ &#x2F;usr&#x2F;bin&#x2F;g++-6 &amp;&amp; \</span><br><span class="line">sudo apt-get install gcc-4.8 g++-4.8 -y &amp;&amp; \</span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;gcc gcc &#x2F;usr&#x2F;bin&#x2F;gcc-4.8 60 --slave &#x2F;usr&#x2F;bin&#x2F;g++ g++ &#x2F;usr&#x2F;bin&#x2F;g++-4.8;</span><br></pre></td></tr></table></figure>

<p>选择默认gcc版本</p>
<p><code>sudo update-alternatives --config gcc</code></p>
<h4 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h4><p>安装好了要清理下redis的目录</p>
<p><code>make distclean</code>在<code>make</code></p>
<p>在redis目录下</p>
<p>运行服务端</p>
<p><code>src/redis-server</code></p>
<p>运行客户端</p>
<p><code>src/redis-cli</code></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://gist.github.com/application2000/73fd6f4bf1be6600a2cf9f56315a2d91"><a href="https://gist.github.com/application2000">application2000</a>/<strong>how-to-install-latest-gcc-on-ubuntu-lts.txt</strong></a></p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p><code>sudo apt-get install build-essential</code>安装编译环境（包括gcc）</p>
]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>WSL</tag>
        <tag>gcc</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL-install-java</title>
    <url>/2019/02/14/wsl-install-java/</url>
    <content><![CDATA[<h4 id="win10子系统Ubuntu安装java"><a href="#win10子系统Ubuntu安装java" class="headerlink" title="win10子系统Ubuntu安装java"></a>win10子系统Ubuntu安装java</h4><h5 id="安装java环境"><a href="#安装java环境" class="headerlink" title="安装java环境"></a>安装java环境</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/</span><br><span class="line">sudo mkdir jvm</span><br><span class="line"><span class="comment">#在windos下载的该文件路径</span></span><br><span class="line">sudo mv jdk-8u201-linux-x64.tar.gz /usr/lib/jvm/</span><br><span class="line"><span class="comment">#在/usr/lib/jvm路面</span></span><br><span class="line">sudo tar -zxvf jdk-8u201-linux-x64.tar.gz</span><br><span class="line">sudo rm jdk-8u201-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<h5 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h5><p><code>sudo vim ~/.bashrc</code>在文件末尾添加</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">export</span> <span class="string">JAVA_HOME=/usr/lib/jvm/jdk1.8.0_201</span></span><br><span class="line"><span class="attr">export</span> <span class="string">JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span></span><br><span class="line"><span class="attr">export</span> <span class="string">CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span></span><br><span class="line"><span class="attr">export</span> <span class="string">PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span></span><br></pre></td></tr></table></figure>

<p>执行<code>source ~/.bashrc</code>生效配置</p>
<p>测试<code>java -version</code></p>
<h4 id="运行tomcat"><a href="#运行tomcat" class="headerlink" title="运行tomcat"></a>运行tomcat</h4><p>进入tomcat安装目录，windos和linux通用，然后右键打开ubunt，执行<code>./catalina.sh run</code></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>tomcat不要放<code>Program Files</code>带空格或特殊字符的路径，在linux下识别不了</p>
]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL安装redis</title>
    <url>/2017/07/18/wsl-install-redis/</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>ubuntu16.04(bash on window)</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol>
<li><code>sudo apt-get update</code>更新源</li>
<li><code>sudo apt-get upgrade</code>更新软件</li>
<li><code>sudo apt-get install build-essential</code>安装编译环境（包括gcc）</li>
<li><code>sudo apt-get install tcl8.5</code>安装tcl8.5</li>
<li><code>wget http://download.redis.io/releases/redis-stable.tar.gz</code></li>
<li><code>tar xzf redis-stable.tar.gz</code></li>
<li><code>cd redis-stable</code></li>
<li><code>make</code></li>
<li><code>sudo make install</code></li>
<li><code>cd utils/</code></li>
<li><code>sudo ./install_server.sh</code></li>
<li><code>sudo service redis_6379 start</code></li>
<li><code>sudo service redis_6379 stop</code></li>
</ol>
<p>安装结果：</p>
<p>Port           : 6379<br>Config file    : /etc/redis/6379.conf<br>Log file       : /var/log/redis_6379.log<br>Data dir       : /var/lib/redis/6379<br>Executable     : /usr/local/bin/redis-server<br>Cli Executable : /usr/local/bin/redis-cli</p>
<p>参考：</p>
<p>Windows 10 Linux子系统 （wsl）学习手记</p>
]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>WSL</tag>
        <tag>gcc</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL重装win10的Ubuntu子系统</title>
    <url>/2017/07/18/wsl-reinstall/</url>
    <content><![CDATA[<p>命令行</p>
<p><code>lxrun</code>查看对LX子系统执行管理操作的帮助</p>
<p><code>lxrun /install</code> 安装子系统</p>
<p><code>lxrun /uninstall</code> 卸载子系统</p>
<p><code>lxrun /setdefaultuser</code>配置子系统用户</p>
<p><code>lxrun /update</code> 更新子系统的包索引</p>
<h3 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a><a href="http://linuxbrew.sh/">安装brew</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)</span>&quot;</span></span><br><span class="line"><span class="built_in">test</span> -d ~/.linuxbrew &amp;&amp; <span class="built_in">eval</span> $(~/.linuxbrew/bin/brew shellenv)</span><br><span class="line"><span class="built_in">test</span> -d /home/linuxbrew/.linuxbrew &amp;&amp; <span class="built_in">eval</span> $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)</span><br><span class="line"><span class="built_in">test</span> -r ~/.bash_profile &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;eval \$(<span class="subst">$(brew --prefix)</span>/bin/brew shellenv)&quot;</span> &gt;&gt;~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;eval \$(<span class="subst">$(brew --prefix)</span>/bin/brew shellenv)&quot;</span> &gt;&gt;~/.profile</span><br></pre></td></tr></table></figure>



<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.linuxdiyf.com/linux/24338.html">Windows10 Ubuntu子系统的删除和重装</a></p>
]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>WSL</tag>
        <tag>ubuntu</tag>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL使用ssh</title>
    <url>/2017/11/22/wsl-use-ssh/</url>
    <content><![CDATA[<ul>
<li>ubuntu16.04(bash on window)</li>
</ul>
<p>如果没有安装wsl(bash on ubuntu)参考<a href="https://jingyan.baidu.com/article/9faa7231e8fa80473d28cb7b.html">win10 安装ubuntu子系统bash on ubuntu</a></p>
<p>Ubuntu最新子系统已集成ssh客户端和服务端，只需要简单配置</p>
<p>如果没有安装参考<a href="https://jingyan.baidu.com/article/359911f5a5b74857fe0306c4.html">Ubuntu17.04 开启远程连接ssh服务端</a></p>
<ol>
<li>备份<code>sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak</code></li>
<li>修改配置文件<code>sudo vim /etc/ssh/sshd_config</code></li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Port</span> <span class="string">2200 # 端口改为2200，22端口已被占用</span></span><br><span class="line"><span class="attr">ListenAddress</span> <span class="string">0.0.0.0 # 取消注释</span></span><br><span class="line"><span class="comment">#StrictModes yes # 注释</span></span><br><span class="line"><span class="attr">PasswordAuthentication</span> <span class="string">yes # 允许密码登录</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>启动ssh服务<code>sudo service ssh start</code></p>
</li>
<li><p>检查服务<code>ps -e |grep ssh</code> 如果有sshd代表启动成功</p>
</li>
<li><p>测试是否可以连接<code>ssh -p 2200 xuan@127.0.0.1</code>用户名一般为wsl子系统@服务前面的名字,密码为系统登陆密码</p>
</li>
<li><p>如果需要远程连接需要开放防火墙端口2200</p>
<p>参考：<a href="https://jingyan.baidu.com/article/eae07827456a821fed54856f.html">win10 远程访问tomcat，开放8080端口</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>ssh</tag>
        <tag>sshd</tag>
      </tags>
  </entry>
</search>
